// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2023.1 (win64) Build 3865809 Sun May  7 15:05:29 MDT 2023
// Date        : Tue Sep 17 15:31:37 2024
// Host        : DESKTOP-76F846E running 64-bit major release  (build 9200)
// Command     : write_verilog -force ./output/cpu_impl_netlist.v -mode timesim -sdf_anno true
// Design      : top
// Purpose     : This verilog netlist is a timing simulation representation of the design and should not be modified or
//               synthesized. Please ensure that this netlist is used with the corresponding SDF file.
// Device      : xc7z020clg484-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps
`define XIL_TIMING

module IBUFDS_DIFF_OUT_UNIQ_BASE_
   (O,
    OB,
    I,
    IB);
  output O;
  output OB;
  input I;
  input IB;

  wire i;
  wire ib;
  wire o;
  wire ob;

  assign O = o;
  assign OB = ob;
  assign i = I;
  assign ib = IB;
  IBUFDS IBUFDS
       (.I(i),
        .IB(ib),
        .O(o));
  IBUFDS IBUFDS_0
       (.I(ib),
        .IB(i),
        .O(ob));
endmodule

module IBUFDS_DIFF_OUT_HD274
   (O,
    OB,
    I,
    IB);
  output O;
  output OB;
  input I;
  input IB;

  wire i;
  wire ib;
  wire o;
  wire ob;

  assign O = o;
  assign OB = ob;
  assign i = I;
  assign ib = IB;
  IBUFDS IBUFDS
       (.I(i),
        .IB(ib),
        .O(o));
  IBUFDS IBUFDS_0
       (.I(ib),
        .IB(i),
        .O(ob));
endmodule

module RAM32M_UNIQ_BASE_
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD122
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD123
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD124
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD125
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD126
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD127
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD128
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD129
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD130
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD131
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD132
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD133
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD135
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD136
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD159
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD160
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD161
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD162
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD163
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD164
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD165
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD166
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD169
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD170
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD171
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD172
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD173
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD174
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD175
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD176
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD177
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD180
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD192
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD193
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD194
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD195
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD196
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD197
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD198
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD199
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD202
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD208
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD209
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  (* \PinAttr:WADR2:HOLD_DETOUR  = "322" *) 
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "322" *) 
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "322" *) 
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "322" *) 
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "322" *) 
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "322" *) 
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  (* \PinAttr:ADR2:HOLD_DETOUR  = "322" *) 
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  (* \PinAttr:ADR2:HOLD_DETOUR  = "322" *) 
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD210
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD211
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD212
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD213
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD214
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD215
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD217
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD219
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD220
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD221
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD222
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD223
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD224
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD225
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD226
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD227
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD228
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD231
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD232
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD233
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD234
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD235
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD236
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD237
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD244
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD245
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD246
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD247
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD248
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD249
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD250
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD251
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD254
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD255
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD256
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD258
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD260
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD261
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD262
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD263
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD264
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD265
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD266
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD267
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD268
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD269
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD270
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD271
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD272
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32M_HD273
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output [1:0]DOA;
  output [1:0]DOB;
  output [1:0]DOC;
  output [1:0]DOD;
  input [4:0]ADDRA;
  input [4:0]ADDRB;
  input [4:0]ADDRC;
  input [4:0]ADDRD;
  input [1:0]DIA;
  input [1:0]DIB;
  input [1:0]DIC;
  input [1:0]DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire DIA0;
  wire DIA1;
  wire DIB0;
  wire DIB1;
  wire DIC0;
  wire DIC1;
  wire DID0;
  wire DID1;
  wire DOA0;
  wire DOA1;
  wire DOB0;
  wire DOB1;
  wire DOC0;
  wire DOC1;
  wire DOD0;
  wire DOD1;
  wire WCLK;
  wire WE;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign DIA0 = DIA[0];
  assign DIA1 = DIA[1];
  assign DIB0 = DIB[0];
  assign DIB1 = DIB[1];
  assign DIC0 = DIC[0];
  assign DIC1 = DIC[1];
  assign DID0 = DID[0];
  assign DID1 = DID[1];
  assign DOA[1] = DOA1;
  assign DOA[0] = DOA0;
  assign DOB[1] = DOB1;
  assign DOB[0] = DOB0;
  assign DOC[1] = DOC1;
  assign DOC[0] = DOC0;
  assign DOD[1] = DOD1;
  assign DOD[0] = DOD0;
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA0),
        .O(DOA0),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMA_D1
       (.CLK(WCLK),
        .I(DIA1),
        .O(DOA1),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB0),
        .O(DOB0),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMB_D1
       (.CLK(WCLK),
        .I(DIB1),
        .O(DOB1),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC0),
        .O(DOC0),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMC_D1
       (.CLK(WCLK),
        .I(DIC1),
        .O(DOC1),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID0),
        .O(DOD0),
        .WE(WE));
  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    RAMD_D1
       (.ADR0(ADDRD0),
        .ADR1(ADDRD1),
        .ADR2(ADDRD2),
        .ADR3(ADDRD3),
        .ADR4(ADDRD4),
        .CLK(WCLK),
        .I(DID1),
        .O(DOD1),
        .WE(WE));
endmodule

module RAM32X1D_UNIQ_BASE_
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD134
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD167
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD168
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD178
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD179
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD200
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD201
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD216
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD229
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD230
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD252
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD253
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1D_HD257
   (DPO,
    SPO,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    DPRA0,
    DPRA1,
    DPRA2,
    DPRA3,
    DPRA4,
    WCLK,
    WE);
  output DPO;
  output SPO;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input DPRA0;
  input DPRA1;
  input DPRA2;
  input DPRA3;
  input DPRA4;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire DPO;
  wire DPRA0;
  wire DPRA1;
  wire DPRA2;
  wire DPRA3;
  wire DPRA4;
  wire SPO;
  wire WCLK;
  wire WE;

  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    DP
       (.CLK(WCLK),
        .I(D),
        .O(DPO),
        .RADR0(DPRA0),
        .RADR1(DPRA1),
        .RADR2(DPRA2),
        .RADR3(DPRA3),
        .RADR4(DPRA4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
  RAMD32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.CLK(WCLK),
        .I(D),
        .O(SPO),
        .RADR0(A0),
        .RADR1(A1),
        .RADR2(A2),
        .RADR3(A3),
        .RADR4(A4),
        .WADR0(A0),
        .WADR1(A1),
        .WADR2(A2),
        .WADR3(A3),
        .WADR4(A4),
        .WE(WE));
endmodule

module RAM32X1S_UNIQ_BASE_
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD137
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD138
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD139
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD140
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD141
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD142
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD143
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD281
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD282
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD283
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD284
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD285
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD286
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD287
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD288
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD289
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD290
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD291
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD292
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD293
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD294
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD295
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM32X1S_HD296
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire D;
  wire O;
  wire WCLK;
  wire WE;

  RAMS32 #(
    .INIT(32'h00000000),
    .IS_CLK_INVERTED(1'b0)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WE(WE));
endmodule

module RAM64M_UNIQ_BASE_
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  (* \PinAttr:WADR2:HOLD_DETOUR  = "328" *) 
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "328" *) 
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  (* \PinAttr:WADR2:HOLD_DETOUR  = "328" *) 
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  (* \PinAttr:RADR2:HOLD_DETOUR  = "328" *) 
  (* \PinAttr:WADR2:HOLD_DETOUR  = "328" *) 
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD203
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD204
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD205
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD206
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD207
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD238
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD239
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD240
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD241
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD242
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD243
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD275
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD276
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD277
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD278
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD279
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64M_HD280
   (DOA,
    DOB,
    DOC,
    DOD,
    ADDRA,
    ADDRB,
    ADDRC,
    ADDRD,
    DIA,
    DIB,
    DIC,
    DID,
    WCLK,
    WE);
  output DOA;
  output DOB;
  output DOC;
  output DOD;
  input [5:0]ADDRA;
  input [5:0]ADDRB;
  input [5:0]ADDRC;
  input [5:0]ADDRD;
  input DIA;
  input DIB;
  input DIC;
  input DID;
  input WCLK;
  input WE;

  wire ADDRA0;
  wire ADDRA1;
  wire ADDRA2;
  wire ADDRA3;
  wire ADDRA4;
  wire ADDRA5;
  wire ADDRB0;
  wire ADDRB1;
  wire ADDRB2;
  wire ADDRB3;
  wire ADDRB4;
  wire ADDRB5;
  wire ADDRC0;
  wire ADDRC1;
  wire ADDRC2;
  wire ADDRC3;
  wire ADDRC4;
  wire ADDRC5;
  wire ADDRD0;
  wire ADDRD1;
  wire ADDRD2;
  wire ADDRD3;
  wire ADDRD4;
  wire ADDRD5;
  wire DIA;
  wire DIB;
  wire DIC;
  wire DID;
  wire DOA;
  wire DOB;
  wire DOC;
  wire DOD;
  wire WCLK;
  wire WE;
  wire NLW_RAMA_WADR6_UNCONNECTED;
  wire NLW_RAMA_WADR7_UNCONNECTED;
  wire NLW_RAMB_WADR6_UNCONNECTED;
  wire NLW_RAMB_WADR7_UNCONNECTED;
  wire NLW_RAMC_WADR6_UNCONNECTED;
  wire NLW_RAMC_WADR7_UNCONNECTED;
  wire NLW_RAMD_WADR6_UNCONNECTED;
  wire NLW_RAMD_WADR7_UNCONNECTED;

  assign ADDRA0 = ADDRA[0];
  assign ADDRA1 = ADDRA[1];
  assign ADDRA2 = ADDRA[2];
  assign ADDRA3 = ADDRA[3];
  assign ADDRA4 = ADDRA[4];
  assign ADDRA5 = ADDRA[5];
  assign ADDRB0 = ADDRB[0];
  assign ADDRB1 = ADDRB[1];
  assign ADDRB2 = ADDRB[2];
  assign ADDRB3 = ADDRB[3];
  assign ADDRB4 = ADDRB[4];
  assign ADDRB5 = ADDRB[5];
  assign ADDRC0 = ADDRC[0];
  assign ADDRC1 = ADDRC[1];
  assign ADDRC2 = ADDRC[2];
  assign ADDRC3 = ADDRC[3];
  assign ADDRC4 = ADDRC[4];
  assign ADDRC5 = ADDRC[5];
  assign ADDRD0 = ADDRD[0];
  assign ADDRD1 = ADDRD[1];
  assign ADDRD2 = ADDRD[2];
  assign ADDRD3 = ADDRD[3];
  assign ADDRD4 = ADDRD[4];
  assign ADDRD5 = ADDRD[5];
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMA
       (.CLK(WCLK),
        .I(DIA),
        .O(DOA),
        .RADR0(ADDRA0),
        .RADR1(ADDRA1),
        .RADR2(ADDRA2),
        .RADR3(ADDRA3),
        .RADR4(ADDRA4),
        .RADR5(ADDRA5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMA_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMA_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMB
       (.CLK(WCLK),
        .I(DIB),
        .O(DOB),
        .RADR0(ADDRB0),
        .RADR1(ADDRB1),
        .RADR2(ADDRB2),
        .RADR3(ADDRB3),
        .RADR4(ADDRB4),
        .RADR5(ADDRB5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMB_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMB_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMC
       (.CLK(WCLK),
        .I(DIC),
        .O(DOC),
        .RADR0(ADDRC0),
        .RADR1(ADDRC1),
        .RADR2(ADDRC2),
        .RADR3(ADDRC3),
        .RADR4(ADDRC4),
        .RADR5(ADDRC5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMC_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMC_WADR7_UNCONNECTED),
        .WE(WE));
  RAMD64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    RAMD
       (.CLK(WCLK),
        .I(DID),
        .O(DOD),
        .RADR0(ADDRD0),
        .RADR1(ADDRD1),
        .RADR2(ADDRD2),
        .RADR3(ADDRD3),
        .RADR4(ADDRD4),
        .RADR5(ADDRD5),
        .WADR0(ADDRD0),
        .WADR1(ADDRD1),
        .WADR2(ADDRD2),
        .WADR3(ADDRD3),
        .WADR4(ADDRD4),
        .WADR5(ADDRD5),
        .WADR6(NLW_RAMD_WADR6_UNCONNECTED),
        .WADR7(NLW_RAMD_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_UNIQ_BASE_
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD144
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD145
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD146
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD147
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD148
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD149
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD150
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD151
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD152
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD153
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD154
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD155
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD156
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD157
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module RAM64X1S_HD158
   (O,
    A0,
    A1,
    A2,
    A3,
    A4,
    A5,
    D,
    WCLK,
    WE);
  output O;
  input A0;
  input A1;
  input A2;
  input A3;
  input A4;
  input A5;
  input D;
  input WCLK;
  input WE;

  wire A0;
  wire A1;
  wire A2;
  wire A3;
  wire A4;
  wire A5;
  wire D;
  wire O;
  wire WCLK;
  wire WE;
  wire NLW_SP_WADR6_UNCONNECTED;
  wire NLW_SP_WADR7_UNCONNECTED;

  RAMS64E #(
    .INIT(64'h0000000000000000),
    .IS_CLK_INVERTED(1'b0),
    .RAM_ADDRESS_MASK(2'b11),
    .RAM_ADDRESS_SPACE(2'b11)) 
    SP
       (.ADR0(A0),
        .ADR1(A1),
        .ADR2(A2),
        .ADR3(A3),
        .ADR4(A4),
        .ADR5(A5),
        .CLK(WCLK),
        .I(D),
        .O(O),
        .WADR6(NLW_SP_WADR6_UNCONNECTED),
        .WADR7(NLW_SP_WADR7_UNCONNECTED),
        .WE(WE));
endmodule

module async_fifo
   (inst_bufg_clk_120,
    out,
    o_empty,
    \r_rst_reg[1] ,
    r_almost_empty_reg_0,
    \r_wr_ptr_diff_reg[4]_0 ,
    \r_temp_reg[33] ,
    r_almost_full_reg_0,
    \r_rd_ptr_bin_reg[0]_0 ,
    \r_rd_ptr_bin_reg[3]_0 ,
    \r_wr_ptr_gray_reg[2]_0 );
  output [55:0]inst_bufg_clk_120;
  output out;
  output o_empty;
  output \r_rst_reg[1] ;
  input r_almost_empty_reg_0;
  input \r_wr_ptr_diff_reg[4]_0 ;
  input [55:0]\r_temp_reg[33] ;
  input r_almost_full_reg_0;
  input \r_rd_ptr_bin_reg[0]_0 ;
  input \r_rd_ptr_bin_reg[3]_0 ;
  input \r_wr_ptr_gray_reg[2]_0 ;

  (* RTL_KEEP = "true" *) wire [55:0]inst_bufg_clk_120;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire out;
  wire r_almost_empty_reg_0;
  wire r_almost_full_reg_0;
  wire r_empty_i_1__15_n_0;
  wire r_empty_i_2__14_n_0;
  wire r_empty_i_3__14_n_0;
  wire r_empty_i_4__11_n_0;
  wire r_full_i_1__13_n_0;
  wire r_full_i_2__3_n_0;
  wire r_full_i_3__5_n_0;
  wire r_full_i_4__0_n_0;
  wire r_ram_reg_0_15_0_5_i_1__7_n_0;
  wire [4:0]r_rd_ptr_bin_reg;
  wire \r_rd_ptr_bin_reg[0]_0 ;
  wire \r_rd_ptr_bin_reg[3]_0 ;
  wire [3:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_bin_rep[3]_i_2__2_n_0 ;
  wire \r_rd_ptr_gray[1]_i_1__6_n_0 ;
  wire \r_rd_ptr_gray[4]_i_2__1_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_meta;
  wire \r_rd_ptr_gray_reg_n_0_[0] ;
  wire \r_rd_ptr_gray_reg_n_0_[1] ;
  wire \r_rd_ptr_gray_reg_n_0_[2] ;
  wire \r_rd_ptr_gray_reg_n_0_[3] ;
  wire \r_rd_ptr_gray_reg_n_0_[4] ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_sync;
  wire \r_rst_reg[1] ;
  wire [55:0]\r_temp_reg[33] ;
  wire \r_wr_ptr_bin_reg_n_0_[0] ;
  wire \r_wr_ptr_bin_reg_n_0_[1] ;
  wire \r_wr_ptr_bin_reg_n_0_[2] ;
  wire \r_wr_ptr_bin_reg_n_0_[3] ;
  wire \r_wr_ptr_bin_reg_n_0_[4] ;
  wire \r_wr_ptr_diff_reg[4]_0 ;
  wire \r_wr_ptr_gray[0]_i_1__6_n_0 ;
  wire \r_wr_ptr_gray[3]_i_1__5_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_meta;
  wire \r_wr_ptr_gray_reg[2]_0 ;
  wire \r_wr_ptr_gray_reg_n_0_[0] ;
  wire \r_wr_ptr_gray_reg_n_0_[1] ;
  wire \r_wr_ptr_gray_reg_n_0_[2] ;
  wire \r_wr_ptr_gray_reg_n_0_[3] ;
  wire \r_wr_ptr_gray_reg_n_0_[4] ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_sync;
  wire [4:0]ri_rd_ptr_bin;
  wire [3:0]ri_rd_ptr_gray;
  wire [4:4]ri_wr_ptr_bin;
  wire [3:0]ri_wr_ptr_bin__0;
  wire [2:1]ri_wr_ptr_gray;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_30_35_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_36_41_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_42_47_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_48_53_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_15_54_55_SPO_UNCONNECTED;
  wire NLW_r_ram_reg_0_15_54_55__0_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT5 #(
    .INIT(32'h00000069)) 
    r_empty_i_1__15
       (.I0(ri_rd_ptr_bin[3]),
        .I1(ri_rd_ptr_bin[2]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_empty_i_2__14_n_0),
        .I4(r_empty_i_3__14_n_0),
        .O(r_empty_i_1__15_n_0));
  LUT5 #(
    .INIT(32'hDBB7BDDE)) 
    r_empty_i_2__14
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(\r_rd_ptr_gray[4]_i_2__1_n_0 ),
        .I3(r_rd_ptr_bin_reg[3]),
        .I4(r_wr_ptr_gray_sync[4]),
        .O(r_empty_i_2__14_n_0));
  LUT6 #(
    .INIT(64'hEEEDD77BBBB77DDE)) 
    r_empty_i_3__14
       (.I0(r_wr_ptr_gray_sync[0]),
        .I1(r_rd_ptr_bin_reg[2]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_empty_i_4__11_n_0),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_wr_ptr_gray_sync[1]),
        .O(r_empty_i_3__14_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_4__11
       (.I0(\r_rd_ptr_bin_reg[3]_0 ),
        .I1(o_empty),
        .O(r_empty_i_4__11_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .D(r_empty_i_1__15_n_0),
        .PRE(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .Q(o_empty));
  LUT6 #(
    .INIT(64'h0000000060090000)) 
    r_full_i_1__13
       (.I0(ri_wr_ptr_bin__0[3]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_full_i_2__3_n_0),
        .I4(r_full_i_3__5_n_0),
        .I5(r_full_i_4__0_n_0),
        .O(r_full_i_1__13_n_0));
  LUT6 #(
    .INIT(64'h9555555555555555)) 
    r_full_i_2__3
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(r_ram_reg_0_15_0_5_i_1__7_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_full_i_2__3_n_0));
  LUT6 #(
    .INIT(64'h56666666A9999999)) 
    r_full_i_3__5
       (.I0(r_rd_ptr_gray_sync[2]),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I3(r_ram_reg_0_15_0_5_i_1__7_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_full_i_3__5_n_0));
  LUT6 #(
    .INIT(64'hEEEDD77BBBB77DDE)) 
    r_full_i_4__0
       (.I0(r_rd_ptr_gray_sync[0]),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(r_ram_reg_0_15_0_5_i_1__7_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(r_rd_ptr_gray_sync[1]),
        .O(r_full_i_4__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_full_i_1__13_n_0),
        .Q(out));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD244 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [1:0]),
        .DIB(\r_temp_reg[33] [3:2]),
        .DIC(\r_temp_reg[33] [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[1:0]),
        .DOB(inst_bufg_clk_120[3:2]),
        .DOC(inst_bufg_clk_120[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__7
       (.I0(\r_wr_ptr_gray_reg[2]_0 ),
        .I1(out),
        .O(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD245 r_ram_reg_0_15_12_17
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [13:12]),
        .DIB(\r_temp_reg[33] [15:14]),
        .DIC(\r_temp_reg[33] [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[13:12]),
        .DOB(inst_bufg_clk_120[15:14]),
        .DOC(inst_bufg_clk_120[17:16]),
        .DOD(NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD246 r_ram_reg_0_15_18_23
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [19:18]),
        .DIB(\r_temp_reg[33] [21:20]),
        .DIC(\r_temp_reg[33] [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[19:18]),
        .DOB(inst_bufg_clk_120[21:20]),
        .DOC(inst_bufg_clk_120[23:22]),
        .DOD(NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD247 r_ram_reg_0_15_24_29
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [25:24]),
        .DIB(\r_temp_reg[33] [27:26]),
        .DIC(\r_temp_reg[33] [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[25:24]),
        .DOB(inst_bufg_clk_120[27:26]),
        .DOC(inst_bufg_clk_120[29:28]),
        .DOD(NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_30_35" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "35" *) 
  RAM32M_HD248 r_ram_reg_0_15_30_35
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [31:30]),
        .DIB(\r_temp_reg[33] [33:32]),
        .DIC(\r_temp_reg[33] [35:34]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[31:30]),
        .DOB(inst_bufg_clk_120[33:32]),
        .DOC(inst_bufg_clk_120[35:34]),
        .DOD(NLW_r_ram_reg_0_15_30_35_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_36_41" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "36" *) 
  (* ram_slice_end = "41" *) 
  RAM32M_HD249 r_ram_reg_0_15_36_41
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [37:36]),
        .DIB(\r_temp_reg[33] [39:38]),
        .DIC(\r_temp_reg[33] [41:40]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[37:36]),
        .DOB(inst_bufg_clk_120[39:38]),
        .DOC(inst_bufg_clk_120[41:40]),
        .DOD(NLW_r_ram_reg_0_15_36_41_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_42_47" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "47" *) 
  RAM32M_HD250 r_ram_reg_0_15_42_47
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [43:42]),
        .DIB(\r_temp_reg[33] [45:44]),
        .DIC(\r_temp_reg[33] [47:46]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[43:42]),
        .DOB(inst_bufg_clk_120[45:44]),
        .DOC(inst_bufg_clk_120[47:46]),
        .DOD(NLW_r_ram_reg_0_15_42_47_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_48_53" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "48" *) 
  (* ram_slice_end = "53" *) 
  RAM32M_HD251 r_ram_reg_0_15_48_53
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [49:48]),
        .DIB(\r_temp_reg[33] [51:50]),
        .DIC(\r_temp_reg[33] [53:52]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[49:48]),
        .DOB(inst_bufg_clk_120[51:50]),
        .DOC(inst_bufg_clk_120[53:52]),
        .DOD(NLW_r_ram_reg_0_15_48_53_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_transceiver_b/inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD252 r_ram_reg_0_15_54_55
       (.A0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .A1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .A2(\r_wr_ptr_bin_reg_n_0_[2] ),
        .A3(\r_wr_ptr_bin_reg_n_0_[3] ),
        .A4(1'b0),
        .D(\r_temp_reg[33] [54]),
        .DPO(inst_bufg_clk_120[54]),
        .DPRA0(r_rd_ptr_bin_reg_rep[0]),
        .DPRA1(r_rd_ptr_bin_reg_rep[1]),
        .DPRA2(r_rd_ptr_bin_reg_rep[2]),
        .DPRA3(r_rd_ptr_bin_reg_rep[3]),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_0_15_54_55_SPO_UNCONNECTED),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_transceiver_b/inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD253 r_ram_reg_0_15_54_55__0
       (.A0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .A1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .A2(\r_wr_ptr_bin_reg_n_0_[2] ),
        .A3(\r_wr_ptr_bin_reg_n_0_[3] ),
        .A4(1'b0),
        .D(\r_temp_reg[33] [55]),
        .DPO(inst_bufg_clk_120[55]),
        .DPRA0(r_rd_ptr_bin_reg_rep[0]),
        .DPRA1(r_rd_ptr_bin_reg_rep[1]),
        .DPRA2(r_rd_ptr_bin_reg_rep[2]),
        .DPRA3(r_rd_ptr_bin_reg_rep[3]),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_0_15_54_55__0_SPO_UNCONNECTED),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD254 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_temp_reg[33] [7:6]),
        .DIB(\r_temp_reg[33] [9:8]),
        .DIC(\r_temp_reg[33] [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[7:6]),
        .DOB(inst_bufg_clk_120[9:8]),
        .DOC(inst_bufg_clk_120[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__7_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_bin_rep[0]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .O(ri_rd_ptr_bin[0]));
  LUT4 #(
    .INIT(16'hDF20)) 
    \r_rd_ptr_bin_rep[1]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_bin_rep[2]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_bin_reg[3]_0 ),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_bin_rep[3]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[0]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_bin_rep[3]_i_2__2 
       (.I0(\r_rd_ptr_bin_reg[0]_0 ),
        .O(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h45BA)) 
    \r_rd_ptr_gray[0]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_rd_ptr_gray[1]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_bin_reg[3]_0 ),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(\r_rd_ptr_gray[1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_rd_ptr_gray[2]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[0]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_gray[2]));
  (* \PinAttr:I2:HOLD_DETOUR  = "186" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    \r_rd_ptr_gray[3]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(\r_rd_ptr_gray[4]_i_2__1_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[3]));
  (* \PinAttr:I2:HOLD_DETOUR  = "186" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_gray[4]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(\r_rd_ptr_gray[4]_i_2__1_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[4]));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr_gray[4]_i_2__1 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_bin_reg[3]_0 ),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(\r_rd_ptr_gray[4]_i_2__1_n_0 ));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[0] ),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[1] ),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[2] ),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[3] ),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[4] ),
        .Q(r_rd_ptr_gray_meta[4]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_gray[0]),
        .Q(\r_rd_ptr_gray_reg_n_0_[0] ));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(\r_rd_ptr_gray[1]_i_1__6_n_0 ),
        .Q(\r_rd_ptr_gray_reg_n_0_[1] ));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_gray[2]),
        .Q(\r_rd_ptr_gray_reg_n_0_[2] ));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_gray[3]),
        .Q(\r_rd_ptr_gray_reg_n_0_[3] ));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(\r_rd_ptr_gray_reg_n_0_[4] ));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_rep[3]_i_2__1 
       (.I0(r_almost_full_reg_0),
        .O(\r_rst_reg[1] ));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr_bin[0]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I1(out),
        .I2(\r_wr_ptr_gray_reg[2]_0 ),
        .O(ri_wr_ptr_bin__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT4 #(
    .INIT(16'hAA6A)) 
    \r_wr_ptr_bin[1]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(\r_wr_ptr_gray_reg[2]_0 ),
        .I3(out),
        .O(ri_wr_ptr_bin__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr_bin[2]_i_1__1 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(out),
        .I3(\r_wr_ptr_gray_reg[2]_0 ),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(ri_wr_ptr_bin__0[2]));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAAAAAAA)) 
    \r_wr_ptr_bin[3]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(\r_wr_ptr_gray_reg[2]_0 ),
        .I4(out),
        .I5(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_bin__0[3]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin__0[0]),
        .Q(\r_wr_ptr_bin_reg_n_0_[0] ));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(\r_wr_ptr_bin_reg_n_0_[1] ));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin__0[2]),
        .Q(\r_wr_ptr_bin_reg_n_0_[2] ));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin__0[3]),
        .Q(\r_wr_ptr_bin_reg_n_0_[3] ));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_bin_reg_n_0_[4] ));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT4 #(
    .INIT(16'h55A6)) 
    \r_wr_ptr_gray[0]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(\r_wr_ptr_gray_reg[2]_0 ),
        .I2(out),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(\r_wr_ptr_gray[0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT5 #(
    .INIT(32'h55559AAA)) 
    \r_wr_ptr_gray[1]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(out),
        .I2(\r_wr_ptr_gray_reg[2]_0 ),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_wr_ptr_gray[2]_i_1__4 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(\r_wr_ptr_gray_reg[2]_0 ),
        .I3(out),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h555555556AAAAAAA)) 
    \r_wr_ptr_gray[3]_i_1__5 
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(r_ram_reg_0_15_0_5_i_1__7_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(\r_wr_ptr_gray[3]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr_gray[4]_i_1__4 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__7_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(ri_wr_ptr_bin));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[0] ),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[1] ),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[2] ),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[3] ),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[4] ),
        .Q(r_wr_ptr_gray_meta[4]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_gray[0]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_gray_reg_n_0_[0] ));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_gray[1]),
        .Q(\r_wr_ptr_gray_reg_n_0_[1] ));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_gray[2]),
        .Q(\r_wr_ptr_gray_reg_n_0_[2] ));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_gray[3]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_gray_reg_n_0_[3] ));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_gray_reg_n_0_[4] ));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__2_n_0 ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__hierPathDup__1
   (out,
    o_full,
    o_empty,
    \r_rst_reg[1] ,
    \r_rd_ptr_bin_reg[4]_0 ,
    \r_wr_ptr_diff_reg[4]_0 ,
    \r_mux_stage_reg[7][7] ,
    \r_wr_ptr_bin_reg[0]_0 ,
    \r_rd_ptr_diff_reg[1]_0 ,
    \r_rd_ptr_gray_reg[0]_0 ,
    \r_wr_ptr_bin_reg[0]_1 );
  output [55:0]out;
  output o_full;
  output o_empty;
  output \r_rst_reg[1] ;
  input \r_rd_ptr_bin_reg[4]_0 ;
  input \r_wr_ptr_diff_reg[4]_0 ;
  input [55:0]\r_mux_stage_reg[7][7] ;
  input \r_wr_ptr_bin_reg[0]_0 ;
  input \r_rd_ptr_diff_reg[1]_0 ;
  input \r_rd_ptr_gray_reg[0]_0 ;
  input \r_wr_ptr_bin_reg[0]_1 ;

  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire o_full;
  (* RTL_KEEP = "true" *) wire [55:0]out;
  wire r_empty_i_2__2_n_0;
  wire r_empty_i_3__16_n_0;
  wire r_empty_i_4__12_n_0;
  wire r_full_i_2__1_n_0;
  wire r_full_i_3__1_n_0;
  wire [55:0]\r_mux_stage_reg[7][7] ;
  wire [4:0]r_rd_ptr_bin_reg;
  wire \r_rd_ptr_bin_reg[4]_0 ;
  wire [3:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_diff_reg[1]_0 ;
  wire [4:0]r_rd_ptr_gray;
  wire \r_rd_ptr_gray[1]_i_1__4_n_0 ;
  wire \r_rd_ptr_gray[4]_i_2_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_meta;
  wire \r_rd_ptr_gray_reg[0]_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_sync;
  wire \r_rst_reg[1] ;
  wire \r_wr_ptr_bin_reg[0]_0 ;
  wire \r_wr_ptr_bin_reg[0]_1 ;
  wire \r_wr_ptr_bin_reg_n_0_[0] ;
  wire \r_wr_ptr_bin_reg_n_0_[1] ;
  wire \r_wr_ptr_bin_reg_n_0_[2] ;
  wire \r_wr_ptr_bin_reg_n_0_[3] ;
  wire \r_wr_ptr_bin_reg_n_0_[4] ;
  wire \r_wr_ptr_diff_reg[4]_0 ;
  wire [4:0]r_wr_ptr_gray;
  wire \r_wr_ptr_gray[4]_i_2__0_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_sync;
  wire ri_empty;
  wire ri_full;
  wire [4:0]ri_rd_ptr_bin;
  wire [3:0]ri_rd_ptr_gray;
  wire [4:4]ri_wr_ptr_bin;
  wire ri_wr_ptr_bin0__0;
  wire [3:0]ri_wr_ptr_bin__0;
  wire [3:0]ri_wr_ptr_gray;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_30_35_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_36_41_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_42_47_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_48_53_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_15_54_55_SPO_UNCONNECTED;
  wire NLW_r_ram_reg_0_15_54_55__0_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT6 #(
    .INIT(64'h0000000900090000)) 
    r_empty_i_1__2
       (.I0(ri_rd_ptr_gray[2]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_empty_i_2__2_n_0),
        .I3(r_empty_i_3__16_n_0),
        .I4(r_empty_i_4__12_n_0),
        .I5(r_wr_ptr_gray_sync[0]),
        .O(ri_empty));
  LUT6 #(
    .INIT(64'hF6F6F66F6F6F6FF6)) 
    r_empty_i_2__2
       (.I0(\r_rd_ptr_gray[1]_i_1__4_n_0 ),
        .I1(r_wr_ptr_gray_sync[1]),
        .I2(r_rd_ptr_bin_reg[4]),
        .I3(\r_rd_ptr_gray[4]_i_2_n_0 ),
        .I4(r_rd_ptr_bin_reg[3]),
        .I5(r_wr_ptr_gray_sync[3]),
        .O(r_empty_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h956A)) 
    r_empty_i_3__16
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_rd_ptr_bin_reg[3]),
        .I2(\r_rd_ptr_gray[4]_i_2_n_0 ),
        .I3(r_rd_ptr_bin_reg[4]),
        .O(r_empty_i_3__16_n_0));
  LUT4 #(
    .INIT(16'hAA59)) 
    r_empty_i_4__12
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(\r_rd_ptr_gray_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_bin_reg[0]),
        .O(r_empty_i_4__12_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(\r_rst_reg[1] ),
        .Q(o_empty));
  LUT6 #(
    .INIT(64'h0800008000088000)) 
    r_full_i_1__7
       (.I0(r_full_i_2__1_n_0),
        .I1(r_full_i_3__1_n_0),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(ri_wr_ptr_bin),
        .I5(ri_wr_ptr_bin__0[3]),
        .O(ri_full));
  LUT6 #(
    .INIT(64'h55556AAAAAAA9555)) 
    r_full_i_2__1
       (.I0(r_rd_ptr_gray_sync[2]),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(ri_wr_ptr_bin0__0),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_full_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0609096060606009)) 
    r_full_i_3__1
       (.I0(r_rd_ptr_gray_sync[1]),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I3(ri_wr_ptr_bin0__0),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(r_rd_ptr_gray_sync[0]),
        .O(r_full_i_3__1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_full),
        .Q(o_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD221 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [1:0]),
        .DIB(\r_mux_stage_reg[7][7] [3:2]),
        .DIC(\r_mux_stage_reg[7][7] [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC(out[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__4
       (.I0(\r_wr_ptr_bin_reg[0]_1 ),
        .I1(o_full),
        .O(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD222 r_ram_reg_0_15_12_17
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [13:12]),
        .DIB(\r_mux_stage_reg[7][7] [15:14]),
        .DIC(\r_mux_stage_reg[7][7] [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(out[13:12]),
        .DOB(out[15:14]),
        .DOC(out[17:16]),
        .DOD(NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD223 r_ram_reg_0_15_18_23
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [19:18]),
        .DIB(\r_mux_stage_reg[7][7] [21:20]),
        .DIC(\r_mux_stage_reg[7][7] [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(out[19:18]),
        .DOB(out[21:20]),
        .DOC(out[23:22]),
        .DOD(NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD224 r_ram_reg_0_15_24_29
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [25:24]),
        .DIB(\r_mux_stage_reg[7][7] [27:26]),
        .DIC(\r_mux_stage_reg[7][7] [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(out[25:24]),
        .DOB(out[27:26]),
        .DOC(out[29:28]),
        .DOD(NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_30_35" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "35" *) 
  RAM32M_HD225 r_ram_reg_0_15_30_35
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [31:30]),
        .DIB(\r_mux_stage_reg[7][7] [33:32]),
        .DIC(\r_mux_stage_reg[7][7] [35:34]),
        .DID({1'b0,1'b0}),
        .DOA(out[31:30]),
        .DOB(out[33:32]),
        .DOC(out[35:34]),
        .DOD(NLW_r_ram_reg_0_15_30_35_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_36_41" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "36" *) 
  (* ram_slice_end = "41" *) 
  RAM32M_HD226 r_ram_reg_0_15_36_41
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [37:36]),
        .DIB(\r_mux_stage_reg[7][7] [39:38]),
        .DIC(\r_mux_stage_reg[7][7] [41:40]),
        .DID({1'b0,1'b0}),
        .DOA(out[37:36]),
        .DOB(out[39:38]),
        .DOC(out[41:40]),
        .DOD(NLW_r_ram_reg_0_15_36_41_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_42_47" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "47" *) 
  RAM32M_HD227 r_ram_reg_0_15_42_47
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [43:42]),
        .DIB(\r_mux_stage_reg[7][7] [45:44]),
        .DIC(\r_mux_stage_reg[7][7] [47:46]),
        .DID({1'b0,1'b0}),
        .DOA(out[43:42]),
        .DOB(out[45:44]),
        .DOC(out[47:46]),
        .DOD(NLW_r_ram_reg_0_15_42_47_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_48_53" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "48" *) 
  (* ram_slice_end = "53" *) 
  RAM32M_HD228 r_ram_reg_0_15_48_53
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [49:48]),
        .DIB(\r_mux_stage_reg[7][7] [51:50]),
        .DIC(\r_mux_stage_reg[7][7] [53:52]),
        .DID({1'b0,1'b0}),
        .DOA(out[49:48]),
        .DOB(out[51:50]),
        .DOC(out[53:52]),
        .DOD(NLW_r_ram_reg_0_15_48_53_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_transceiver_a/inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD229 r_ram_reg_0_15_54_55
       (.A0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .A1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .A2(\r_wr_ptr_bin_reg_n_0_[2] ),
        .A3(\r_wr_ptr_bin_reg_n_0_[3] ),
        .A4(1'b0),
        .D(\r_mux_stage_reg[7][7] [54]),
        .DPO(out[54]),
        .DPRA0(r_rd_ptr_bin_reg_rep[0]),
        .DPRA1(r_rd_ptr_bin_reg_rep[1]),
        .DPRA2(r_rd_ptr_bin_reg_rep[2]),
        .DPRA3(r_rd_ptr_bin_reg_rep[3]),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_0_15_54_55_SPO_UNCONNECTED),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_transceiver_a/inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD230 r_ram_reg_0_15_54_55__0
       (.A0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .A1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .A2(\r_wr_ptr_bin_reg_n_0_[2] ),
        .A3(\r_wr_ptr_bin_reg_n_0_[3] ),
        .A4(1'b0),
        .D(\r_mux_stage_reg[7][7] [55]),
        .DPO(out[55]),
        .DPRA0(r_rd_ptr_bin_reg_rep[0]),
        .DPRA1(r_rd_ptr_bin_reg_rep[1]),
        .DPRA2(r_rd_ptr_bin_reg_rep[2]),
        .DPRA3(r_rd_ptr_bin_reg_rep[3]),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_0_15_54_55__0_SPO_UNCONNECTED),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD231 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(\r_mux_stage_reg[7][7] [7:6]),
        .DIB(\r_mux_stage_reg[7][7] [9:8]),
        .DIC(\r_mux_stage_reg[7][7] [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(out[7:6]),
        .DOB(out[9:8]),
        .DOC(out[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_diff_reg[4]_0 ),
        .WE(ri_wr_ptr_bin0__0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  LUT3 #(
    .INIT(8'hD2)) 
    \r_rd_ptr_bin_rep[0]_i_1 
       (.I0(\r_rd_ptr_gray_reg[0]_0 ),
        .I1(o_empty),
        .I2(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_bin[0]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'hBF40)) 
    \r_rd_ptr_bin_rep[1]_i_1__0 
       (.I0(o_empty),
        .I1(\r_rd_ptr_gray_reg[0]_0 ),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_bin_rep[2]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(o_empty),
        .I3(\r_rd_ptr_gray_reg[0]_0 ),
        .I4(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_bin_rep[3]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_bin_rep[3]_i_2 
       (.I0(\r_rd_ptr_diff_reg[1]_0 ),
        .O(\r_rst_reg[1] ));
  LUT4 #(
    .INIT(16'h45BA)) 
    \r_rd_ptr_gray[0]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h55559AAA)) 
    \r_rd_ptr_gray[1]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(o_empty),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(\r_rd_ptr_gray[1]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_rd_ptr_gray[2]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h1E)) 
    \r_rd_ptr_gray[3]_i_1 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(\r_rd_ptr_gray[4]_i_2_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_gray[4]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(\r_rd_ptr_gray[4]_i_2_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[4]));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr_gray[4]_i_2 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(o_empty),
        .I3(\r_rd_ptr_gray_reg[0]_0 ),
        .I4(r_rd_ptr_bin_reg[0]),
        .O(\r_rd_ptr_gray[4]_i_2_n_0 ));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray_meta[4]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray[0]));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray[1]_i_1__4_n_0 ),
        .Q(r_rd_ptr_gray[1]));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray[2]));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray[3]));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_gray[4]));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  LUT3 #(
    .INIT(8'hB4)) 
    \r_wr_ptr_bin[0]_i_1__0 
       (.I0(o_full),
        .I1(\r_wr_ptr_bin_reg[0]_1 ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(ri_wr_ptr_bin__0[0]));
  (* \PinAttr:I3:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'hF708)) 
    \r_wr_ptr_bin[1]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I1(\r_wr_ptr_bin_reg[0]_1 ),
        .I2(o_full),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_bin__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'hBFFF4000)) 
    \r_wr_ptr_bin[2]_i_1 
       (.I0(o_full),
        .I1(\r_wr_ptr_bin_reg[0]_1 ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_bin__0[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_wr_ptr_bin[3]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(\r_wr_ptr_bin_reg[0]_1 ),
        .I3(o_full),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(ri_wr_ptr_bin__0[3]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_bin__0[0]),
        .Q(\r_wr_ptr_bin_reg_n_0_[0] ));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(\r_wr_ptr_bin_reg_n_0_[1] ));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_bin__0[2]),
        .Q(\r_wr_ptr_bin_reg_n_0_[2] ));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_bin__0[3]),
        .Q(\r_wr_ptr_bin_reg_n_0_[3] ));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_bin_reg_n_0_[4] ));
  (* \PinAttr:I0:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'h559A)) 
    \r_wr_ptr_gray[0]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(o_full),
        .I2(\r_wr_ptr_bin_reg[0]_1 ),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(ri_wr_ptr_gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'h66665666)) 
    \r_wr_ptr_gray[1]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(\r_wr_ptr_bin_reg[0]_1 ),
        .I4(o_full),
        .O(ri_wr_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h6566666666666666)) 
    \r_wr_ptr_gray[2]_i_1__1 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(o_full),
        .I3(\r_wr_ptr_bin_reg[0]_1 ),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h5666666666666666)) 
    \r_wr_ptr_gray[3]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I3(ri_wr_ptr_bin0__0),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_gray[3]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr_gray[4]_i_1__1 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(ri_wr_ptr_bin0__0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(ri_wr_ptr_bin));
  LUT1 #(
    .INIT(2'h1)) 
    \r_wr_ptr_gray[4]_i_2__0 
       (.I0(\r_wr_ptr_bin_reg[0]_0 ),
        .O(\r_wr_ptr_gray[4]_i_2__0_n_0 ));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray_meta[4]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray[0]));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray[1]));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray[2]));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray[3]));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(\r_wr_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__0_n_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_gray[4]));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(\r_rd_ptr_bin_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__parameterized0
   (out,
    o_full,
    o_empty,
    \r_rst_reg[1] ,
    r_almost_empty_reg_0,
    r_almost_full_reg_0,
    \r_wr_ptr_bin_reg[0]_0 ,
    \r_rd_ptr_diff_reg[1]_0 ,
    \r_rd_ptr_gray_reg[0]_0 ,
    \r_wr_ptr_bin_reg[0]_1 ,
    i_tlp);
  output [33:0]out;
  output o_full;
  output o_empty;
  output \r_rst_reg[1] ;
  input r_almost_empty_reg_0;
  input r_almost_full_reg_0;
  input \r_wr_ptr_bin_reg[0]_0 ;
  input \r_rd_ptr_diff_reg[1]_0 ;
  input \r_rd_ptr_gray_reg[0]_0 ;
  input \r_wr_ptr_bin_reg[0]_1 ;
  input [33:0]i_tlp;

  wire [33:0]i_tlp;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire o_full;
  (* RTL_KEEP = "true" *) wire [33:0]out;
  wire r_almost_empty_reg_0;
  wire r_almost_full_reg_0;
  wire r_empty_i_2__16_n_0;
  wire r_empty_i_3__9_n_0;
  wire r_empty_i_4__14_n_0;
  wire r_full_i_2__4_n_0;
  wire r_full_i_3__6_n_0;
  wire r_full_i_4__1_n_0;
  wire r_ram_reg_0_15_0_5_i_1__2_n_0;
  wire [4:0]r_rd_ptr_bin_reg;
  wire [3:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_diff_reg[1]_0 ;
  wire [4:0]r_rd_ptr_gray;
  wire \r_rd_ptr_gray[1]_i_1__5_n_0 ;
  wire \r_rd_ptr_gray[4]_i_2__0_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_meta;
  wire \r_rd_ptr_gray_reg[0]_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_sync;
  wire \r_rst_reg[1] ;
  wire \r_wr_ptr_bin[0]_i_1__6_n_0 ;
  wire \r_wr_ptr_bin_reg[0]_0 ;
  wire \r_wr_ptr_bin_reg[0]_1 ;
  wire \r_wr_ptr_bin_reg_n_0_[0] ;
  wire \r_wr_ptr_bin_reg_n_0_[1] ;
  wire \r_wr_ptr_bin_reg_n_0_[2] ;
  wire \r_wr_ptr_bin_reg_n_0_[3] ;
  wire \r_wr_ptr_bin_reg_n_0_[4] ;
  wire [4:0]r_wr_ptr_gray;
  wire \r_wr_ptr_gray[3]_i_1__6_n_0 ;
  wire \r_wr_ptr_gray[4]_i_2__2_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_sync;
  wire ri_empty;
  wire ri_full;
  wire [4:0]ri_rd_ptr_bin;
  wire [3:0]ri_rd_ptr_gray;
  wire [4:4]ri_wr_ptr_bin;
  wire [3:1]ri_wr_ptr_bin__0;
  wire [2:0]ri_wr_ptr_gray;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_30_33_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_30_33_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT6 #(
    .INIT(64'h0000000009000009)) 
    r_empty_i_1__10
       (.I0(ri_rd_ptr_gray[2]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_empty_i_2__16_n_0),
        .I3(\r_rd_ptr_gray[1]_i_1__5_n_0 ),
        .I4(r_wr_ptr_gray_sync[1]),
        .I5(r_empty_i_3__9_n_0),
        .O(ri_empty));
  LUT4 #(
    .INIT(16'h956A)) 
    r_empty_i_2__16
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_rd_ptr_bin_reg[3]),
        .I2(\r_rd_ptr_gray[4]_i_2__0_n_0 ),
        .I3(r_rd_ptr_bin_reg[4]),
        .O(r_empty_i_2__16_n_0));
  LUT6 #(
    .INIT(64'hFFFFA956A956FFFF)) 
    r_empty_i_3__9
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_gray[4]_i_2__0_n_0 ),
        .I2(r_rd_ptr_bin_reg[3]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_empty_i_4__14_n_0),
        .I5(r_wr_ptr_gray_sync[0]),
        .O(r_empty_i_3__9_n_0));
  LUT4 #(
    .INIT(16'hAA59)) 
    r_empty_i_4__14
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(\r_rd_ptr_gray_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_bin_reg[0]),
        .O(r_empty_i_4__14_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(\r_rst_reg[1] ),
        .Q(o_empty));
  LUT6 #(
    .INIT(64'h0000000060090000)) 
    r_full_i_1__15
       (.I0(ri_wr_ptr_bin__0[3]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_full_i_2__4_n_0),
        .I4(r_full_i_3__6_n_0),
        .I5(r_full_i_4__1_n_0),
        .O(ri_full));
  LUT6 #(
    .INIT(64'h9555555555555555)) 
    r_full_i_2__4
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(r_ram_reg_0_15_0_5_i_1__2_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_full_i_2__4_n_0));
  LUT6 #(
    .INIT(64'h56666666A9999999)) 
    r_full_i_3__6
       (.I0(r_rd_ptr_gray_sync[2]),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(r_ram_reg_0_15_0_5_i_1__2_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_full_i_3__6_n_0));
  LUT6 #(
    .INIT(64'hEEEDD77BBBB77DDE)) 
    r_full_i_4__1
       (.I0(r_rd_ptr_gray_sync[0]),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__2_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(r_rd_ptr_gray_sync[1]),
        .O(r_full_i_4__1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_full),
        .Q(o_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD262 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(i_tlp[1:0]),
        .DIB(i_tlp[3:2]),
        .DIC(i_tlp[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC(out[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(r_almost_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__2
       (.I0(\r_wr_ptr_bin_reg[0]_1 ),
        .I1(o_full),
        .O(r_ram_reg_0_15_0_5_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD263 r_ram_reg_0_15_12_17
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(i_tlp[13:12]),
        .DIB(i_tlp[15:14]),
        .DIC(i_tlp[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(out[13:12]),
        .DOB(out[15:14]),
        .DOC(out[17:16]),
        .DOD(NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(r_almost_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD264 r_ram_reg_0_15_18_23
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(i_tlp[19:18]),
        .DIB(i_tlp[21:20]),
        .DIC(i_tlp[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(out[19:18]),
        .DOB(out[21:20]),
        .DOC(out[23:22]),
        .DOD(NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(r_almost_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD265 r_ram_reg_0_15_24_29
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(i_tlp[25:24]),
        .DIB(i_tlp[27:26]),
        .DIC(i_tlp[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(out[25:24]),
        .DOB(out[27:26]),
        .DOC(out[29:28]),
        .DOD(NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(r_almost_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_30_33" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "33" *) 
  RAM32M_HD266 r_ram_reg_0_15_30_33
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(i_tlp[31:30]),
        .DIB(i_tlp[33:32]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(out[31:30]),
        .DOB(out[33:32]),
        .DOC(NLW_r_ram_reg_0_15_30_33_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_30_33_DOD_UNCONNECTED[1:0]),
        .WCLK(r_almost_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD267 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(i_tlp[7:6]),
        .DIB(i_tlp[9:8]),
        .DIC(i_tlp[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(out[7:6]),
        .DOB(out[9:8]),
        .DOC(out[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(r_almost_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__2_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  LUT3 #(
    .INIT(8'hD2)) 
    \r_rd_ptr_bin_rep[0]_i_1__2 
       (.I0(\r_rd_ptr_gray_reg[0]_0 ),
        .I1(o_empty),
        .I2(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_bin[0]));
  LUT4 #(
    .INIT(16'hBF40)) 
    \r_rd_ptr_bin_rep[1]_i_1__3 
       (.I0(o_empty),
        .I1(\r_rd_ptr_gray_reg[0]_0 ),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_bin_rep[2]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(o_empty),
        .I3(\r_rd_ptr_gray_reg[0]_0 ),
        .I4(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_bin_rep[3]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_bin_rep[3]_i_2__1 
       (.I0(\r_rd_ptr_diff_reg[1]_0 ),
        .O(\r_rst_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT4 #(
    .INIT(16'h45BA)) 
    \r_rd_ptr_gray[0]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h55559AAA)) 
    \r_rd_ptr_gray[1]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(o_empty),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(\r_rd_ptr_gray[1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_rd_ptr_gray[2]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(\r_rd_ptr_gray_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h1E)) 
    \r_rd_ptr_gray[3]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(\r_rd_ptr_gray[4]_i_2__0_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_gray[4]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(\r_rd_ptr_gray[4]_i_2__0_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[4]));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr_gray[4]_i_2__0 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(o_empty),
        .I3(\r_rd_ptr_gray_reg[0]_0 ),
        .I4(r_rd_ptr_bin_reg[0]),
        .O(\r_rd_ptr_gray[4]_i_2__0_n_0 ));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray_meta[4]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray[0]));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray[1]_i_1__5_n_0 ),
        .Q(r_rd_ptr_gray[1]));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray[2]));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray[3]));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_gray[4]));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  LUT3 #(
    .INIT(8'hA6)) 
    \r_wr_ptr_bin[0]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I1(\r_wr_ptr_bin_reg[0]_1 ),
        .I2(o_full),
        .O(\r_wr_ptr_bin[0]_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr_bin[1]_i_1__4 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(\r_wr_ptr_bin_reg[0]_1 ),
        .I2(o_full),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(ri_wr_ptr_bin__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr_bin[2]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg[0]_1 ),
        .I2(o_full),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_bin__0[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[3]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(o_full),
        .I4(\r_wr_ptr_bin_reg[0]_1 ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_bin__0[3]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(\r_wr_ptr_bin[0]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[0] ));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(\r_wr_ptr_bin_reg_n_0_[1] ));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_bin__0[2]),
        .Q(\r_wr_ptr_bin_reg_n_0_[2] ));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_bin__0[3]),
        .Q(\r_wr_ptr_bin_reg_n_0_[3] ));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_bin_reg_n_0_[4] ));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT4 #(
    .INIT(16'h559A)) 
    \r_wr_ptr_gray[0]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(o_full),
        .I2(\r_wr_ptr_bin_reg[0]_1 ),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(ri_wr_ptr_gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_wr_ptr_gray[1]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(o_full),
        .I3(\r_wr_ptr_bin_reg[0]_1 ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_wr_ptr_gray[2]_i_1__5 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(o_full),
        .I4(\r_wr_ptr_bin_reg[0]_1 ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h15555555EAAAAAAA)) 
    \r_wr_ptr_gray[3]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__2_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(\r_wr_ptr_gray[3]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr_gray[4]_i_1__5 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__2_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(ri_wr_ptr_bin));
  LUT1 #(
    .INIT(2'h1)) 
    \r_wr_ptr_gray[4]_i_2__2 
       (.I0(\r_wr_ptr_bin_reg[0]_0 ),
        .O(\r_wr_ptr_gray[4]_i_2__2_n_0 ));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray_meta[4]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray[0]));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray[1]));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray[2]));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(\r_wr_ptr_gray[3]_i_1__6_n_0 ),
        .Q(r_wr_ptr_gray[3]));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(r_almost_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_gray[4]_i_2__2_n_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_gray[4]));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(r_almost_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__parameterized0__hierPathDup__1
   (inst_bufg_clk_120,
    out,
    o_empty,
    \r_rst_reg[1] ,
    \r_rd_ptr_diff_reg[4]_0 ,
    \r_wr_ptr_bin_reg[0]_0 ,
    r_full_reg_0,
    \r_rd_ptr_bin_reg[0]_0 ,
    \r_wr_ptr_gray_reg[2]_0 ,
    \r_rd_ptr_bin_reg[3]_0 ,
    I95);
  output [33:0]inst_bufg_clk_120;
  output out;
  output o_empty;
  output \r_rst_reg[1] ;
  input \r_rd_ptr_diff_reg[4]_0 ;
  input \r_wr_ptr_bin_reg[0]_0 ;
  input r_full_reg_0;
  input \r_rd_ptr_bin_reg[0]_0 ;
  input \r_wr_ptr_gray_reg[2]_0 ;
  input \r_rd_ptr_bin_reg[3]_0 ;
  input [33:0]I95;

  wire [33:0]I95;
  (* RTL_KEEP = "true" *) wire [33:0]inst_bufg_clk_120;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire out;
  wire r_empty_i_1__7_n_0;
  wire r_empty_i_2__7_n_0;
  wire r_empty_i_3__6_n_0;
  wire r_empty_i_4__6_n_0;
  wire r_full_i_1__2_n_0;
  wire r_full_i_2__0_n_0;
  wire r_full_i_3__0_n_0;
  wire r_full_i_4__3_n_0;
  wire r_full_i_5__0_n_0;
  wire r_full_reg_0;
  wire r_ram_reg_0_15_0_5_i_1_n_0;
  wire [4:0]r_rd_ptr_bin_reg;
  wire \r_rd_ptr_bin_reg[0]_0 ;
  wire \r_rd_ptr_bin_reg[3]_0 ;
  wire [3:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_bin_rep[3]_i_2__0_n_0 ;
  wire \r_rd_ptr_diff_reg[4]_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_meta;
  wire \r_rd_ptr_gray_reg_n_0_[0] ;
  wire \r_rd_ptr_gray_reg_n_0_[1] ;
  wire \r_rd_ptr_gray_reg_n_0_[2] ;
  wire \r_rd_ptr_gray_reg_n_0_[3] ;
  wire \r_rd_ptr_gray_reg_n_0_[4] ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_rd_ptr_gray_sync;
  wire \r_rst_reg[1] ;
  wire \r_wr_ptr_bin[0]_i_1__5_n_0 ;
  wire \r_wr_ptr_bin[1]_i_1__6_n_0 ;
  wire \r_wr_ptr_bin[2]_i_1__6_n_0 ;
  wire \r_wr_ptr_bin_reg[0]_0 ;
  wire \r_wr_ptr_bin_reg_n_0_[0] ;
  wire \r_wr_ptr_bin_reg_n_0_[1] ;
  wire \r_wr_ptr_bin_reg_n_0_[2] ;
  wire \r_wr_ptr_bin_reg_n_0_[3] ;
  wire \r_wr_ptr_bin_reg_n_0_[4] ;
  wire \r_wr_ptr_gray[0]_i_1__5_n_0 ;
  wire \r_wr_ptr_gray[3]_i_1__4_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_meta;
  wire \r_wr_ptr_gray_reg[2]_0 ;
  wire \r_wr_ptr_gray_reg_n_0_[0] ;
  wire \r_wr_ptr_gray_reg_n_0_[1] ;
  wire \r_wr_ptr_gray_reg_n_0_[2] ;
  wire \r_wr_ptr_gray_reg_n_0_[3] ;
  wire \r_wr_ptr_gray_reg_n_0_[4] ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [4:0]r_wr_ptr_gray_sync;
  wire [4:0]ri_rd_ptr_bin;
  wire [3:0]ri_rd_ptr_gray;
  wire [4:4]ri_wr_ptr_bin;
  wire [3:3]ri_wr_ptr_bin__0;
  wire [2:1]ri_wr_ptr_gray;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_30_33_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_30_33_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT6 #(
    .INIT(64'h0840800404800840)) 
    r_empty_i_1__7
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_empty_i_2__7_n_0),
        .I2(r_wr_ptr_gray_sync[3]),
        .I3(r_rd_ptr_bin_reg[4]),
        .I4(r_rd_ptr_bin_reg[3]),
        .I5(r_empty_i_3__6_n_0),
        .O(r_empty_i_1__7_n_0));
  LUT6 #(
    .INIT(64'h0082280028000082)) 
    r_empty_i_2__7
       (.I0(r_empty_i_4__6_n_0),
        .I1(ri_rd_ptr_bin[1]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(ri_rd_ptr_bin[2]),
        .I4(ri_rd_ptr_bin[3]),
        .I5(r_wr_ptr_gray_sync[2]),
        .O(r_empty_i_2__7_n_0));
  (* \PinAttr:I4:HOLD_DETOUR  = "188" *) 
  LUT5 #(
    .INIT(32'hF7FFFFFF)) 
    r_empty_i_3__6
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(\r_rd_ptr_bin_reg[3]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_bin_reg[1]),
        .I4(r_rd_ptr_bin_reg[2]),
        .O(r_empty_i_3__6_n_0));
  LUT5 #(
    .INIT(32'h0BF4F40B)) 
    r_empty_i_4__6
       (.I0(o_empty),
        .I1(\r_rd_ptr_bin_reg[3]_0 ),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .I4(r_wr_ptr_gray_sync[0]),
        .O(r_empty_i_4__6_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .D(r_empty_i_1__7_n_0),
        .PRE(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .Q(o_empty));
  LUT6 #(
    .INIT(64'h8221144800000000)) 
    r_full_i_1__2
       (.I0(r_rd_ptr_gray_sync[3]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I3(r_full_i_2__0_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I5(r_full_i_3__0_n_0),
        .O(r_full_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h00800000)) 
    r_full_i_2__0
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_gray_reg[2]_0 ),
        .I3(out),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(r_full_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h00000000559AAA65)) 
    r_full_i_3__0
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(r_full_i_4__3_n_0),
        .I2(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I3(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I4(r_rd_ptr_gray_sync[2]),
        .I5(r_full_i_5__0_n_0),
        .O(r_full_i_3__0_n_0));
  LUT3 #(
    .INIT(8'hDF)) 
    r_full_i_4__3
       (.I0(\r_wr_ptr_gray_reg[2]_0 ),
        .I1(out),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(r_full_i_4__3_n_0));
  LUT6 #(
    .INIT(64'hEEEDD77BBBB77DDE)) 
    r_full_i_5__0
       (.I0(r_rd_ptr_gray_sync[0]),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(r_ram_reg_0_15_0_5_i_1_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(r_rd_ptr_gray_sync[1]),
        .O(r_full_i_5__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_full_i_1__2_n_0),
        .Q(out));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD208 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(I95[1:0]),
        .DIB(I95[3:2]),
        .DIC(I95[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[1:0]),
        .DOB(inst_bufg_clk_120[3:2]),
        .DOC(inst_bufg_clk_120[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1
       (.I0(\r_wr_ptr_gray_reg[2]_0 ),
        .I1(out),
        .O(r_ram_reg_0_15_0_5_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD209 r_ram_reg_0_15_12_17
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(I95[13:12]),
        .DIB(I95[15:14]),
        .DIC(I95[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[13:12]),
        .DOB(inst_bufg_clk_120[15:14]),
        .DOC(inst_bufg_clk_120[17:16]),
        .DOD(NLW_r_ram_reg_0_15_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD210 r_ram_reg_0_15_18_23
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(I95[19:18]),
        .DIB(I95[21:20]),
        .DIC(I95[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[19:18]),
        .DOB(inst_bufg_clk_120[21:20]),
        .DOC(inst_bufg_clk_120[23:22]),
        .DOD(NLW_r_ram_reg_0_15_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD211 r_ram_reg_0_15_24_29
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(I95[25:24]),
        .DIB(I95[27:26]),
        .DIC(I95[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[25:24]),
        .DOB(inst_bufg_clk_120[27:26]),
        .DOC(inst_bufg_clk_120[29:28]),
        .DOD(NLW_r_ram_reg_0_15_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_30_33" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "33" *) 
  RAM32M_HD212 r_ram_reg_0_15_30_33
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(I95[31:30]),
        .DIB(I95[33:32]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[31:30]),
        .DOB(inst_bufg_clk_120[33:32]),
        .DOC(NLW_r_ram_reg_0_15_30_33_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_30_33_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_async_fifo_tlp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD213 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_bin_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(I95[7:6]),
        .DIB(I95[9:8]),
        .DIC(I95[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(inst_bufg_clk_120[7:6]),
        .DOB(inst_bufg_clk_120[9:8]),
        .DOC(inst_bufg_clk_120[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  LUT3 #(
    .INIT(8'hD2)) 
    \r_rd_ptr_bin_rep[0]_i_1__0 
       (.I0(\r_rd_ptr_bin_reg[3]_0 ),
        .I1(o_empty),
        .I2(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_bin[0]));
  LUT4 #(
    .INIT(16'hBF40)) 
    \r_rd_ptr_bin_rep[1]_i_1__1 
       (.I0(o_empty),
        .I1(\r_rd_ptr_bin_reg[3]_0 ),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  (* \PinAttr:I4:HOLD_DETOUR  = "188" *) 
  LUT5 #(
    .INIT(32'hF7FF0800)) 
    \r_rd_ptr_bin_rep[2]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(\r_rd_ptr_bin_reg[3]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_bin_reg[1]),
        .I4(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hF7FFFFFF08000000)) 
    \r_rd_ptr_bin_rep[3]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(o_empty),
        .I3(\r_rd_ptr_bin_reg[3]_0 ),
        .I4(r_rd_ptr_bin_reg[0]),
        .I5(r_rd_ptr_bin_reg[3]),
        .O(ri_rd_ptr_bin[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_bin_rep[3]_i_2__0 
       (.I0(\r_rd_ptr_bin_reg[0]_0 ),
        .O(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h6656)) 
    \r_rd_ptr_gray[0]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .I3(o_empty),
        .O(ri_rd_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h65666666)) 
    \r_rd_ptr_gray[1]_i_1 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(o_empty),
        .I3(\r_rd_ptr_bin_reg[3]_0 ),
        .I4(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_rd_ptr_gray[2]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(\r_rd_ptr_bin_reg[3]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h65)) 
    \r_rd_ptr_gray[3]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(r_rd_ptr_bin_reg[3]),
        .I2(r_empty_i_3__6_n_0),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'hD2)) 
    \r_rd_ptr_gray[4]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_empty_i_3__6_n_0),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[4]));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[0] ),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[1] ),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[2] ),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[3] ),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rd_ptr_gray_reg_n_0_[4] ),
        .Q(r_rd_ptr_gray_meta[4]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_gray[0]),
        .Q(\r_rd_ptr_gray_reg_n_0_[0] ));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_gray[1]),
        .Q(\r_rd_ptr_gray_reg_n_0_[1] ));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_gray[2]),
        .Q(\r_rd_ptr_gray_reg_n_0_[2] ));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_gray[3]),
        .Q(\r_rd_ptr_gray_reg_n_0_[3] ));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(\r_rd_ptr_gray_reg_n_0_[4] ));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_rep[3]_i_2 
       (.I0(r_full_reg_0),
        .O(\r_rst_reg[1] ));
  LUT3 #(
    .INIT(8'hA6)) 
    \r_wr_ptr_bin[0]_i_1__5 
       (.I0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I1(\r_wr_ptr_gray_reg[2]_0 ),
        .I2(out),
        .O(\r_wr_ptr_bin[0]_i_1__5_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr_bin[1]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(out),
        .I3(\r_wr_ptr_gray_reg[2]_0 ),
        .O(\r_wr_ptr_bin[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hAA6AAAAA)) 
    \r_wr_ptr_bin[2]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(\r_wr_ptr_gray_reg[2]_0 ),
        .I3(out),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(\r_wr_ptr_bin[2]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[3]_i_1 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(out),
        .I3(\r_wr_ptr_gray_reg[2]_0 ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_bin__0));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_bin[0]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[0] ));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_bin[1]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[1] ));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_bin[2]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[2] ));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin__0),
        .Q(\r_wr_ptr_bin_reg_n_0_[3] ));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_bin_reg_n_0_[4] ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'h6566)) 
    \r_wr_ptr_gray[0]_i_1__5 
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(out),
        .I3(\r_wr_ptr_gray_reg[2]_0 ),
        .O(\r_wr_ptr_gray[0]_i_1__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_wr_ptr_gray[1]_i_1 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_gray_reg[2]_0 ),
        .I2(out),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h55555555A6AAAAAA)) 
    \r_wr_ptr_gray[2]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(out),
        .I3(\r_wr_ptr_gray_reg[2]_0 ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h555555556AAAAAAA)) 
    \r_wr_ptr_gray[3]_i_1__4 
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I3(r_ram_reg_0_15_0_5_i_1_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(\r_wr_ptr_gray[3]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr_gray[4]_i_1__0 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(r_ram_reg_0_15_0_5_i_1_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(ri_wr_ptr_bin));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[0] ),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[1] ),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[2] ),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[3] ),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(\r_wr_ptr_gray_reg_n_0_[4] ),
        .Q(r_wr_ptr_gray_meta[4]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_gray[0]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_gray_reg_n_0_[0] ));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_gray[1]),
        .Q(\r_wr_ptr_gray_reg_n_0_[1] ));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_gray[2]),
        .Q(\r_wr_ptr_gray_reg_n_0_[2] ));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_wr_ptr_gray[3]_i_1__4_n_0 ),
        .Q(\r_wr_ptr_gray_reg_n_0_[3] ));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_gray_reg_n_0_[4] ));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(\r_rd_ptr_diff_reg[4]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_bin_rep[3]_i_2__0_n_0 ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__parameterized1
   (out,
    o_almost_full,
    o_almost_empty,
    CLK,
    r_almost_empty_reg_0,
    \r_wr_ptr_bin_reg[0]_0 ,
    r_almost_full_reg_0,
    r_wr_enable,
    r_rd_enable,
    Q);
  output [8:0]out;
  output o_almost_full;
  output o_almost_empty;
  input CLK;
  input r_almost_empty_reg_0;
  input \r_wr_ptr_bin_reg[0]_0 ;
  input r_almost_full_reg_0;
  input r_wr_enable;
  input r_rd_enable;
  input [8:0]Q;

  wire CLK;
  wire [8:0]Q;
  (* RTL_KEEP = "true" *) wire o_almost_empty;
  (* RTL_KEEP = "true" *) wire o_almost_full;
  (* RTL_KEEP = "true" *) wire [8:0]out;
  wire r_almost_empty_i_2_n_0;
  wire r_almost_empty_reg_0;
  wire r_almost_full_reg_0;
  (* RTL_KEEP = "true" *) wire r_empty;
  wire r_empty_i_2__15_n_0;
  wire r_empty_i_3__15_n_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_full_i_2__6_n_0;
  wire r_full_i_3__3_n_0;
  wire r_full_i_4_n_0;
  wire r_full_i_5__1_n_0;
  wire r_full_i_6__0_n_0;
  wire r_ram_reg_0_63_0_2_i_1__1_n_0;
  wire r_rd_enable;
  wire [6:0]r_rd_ptr_bin_reg;
  wire [5:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_bin_rep[5]_i_3_n_0 ;
  wire [6:0]r_rd_ptr_diff;
  wire [6:0]r_rd_ptr_diff0;
  wire r_rd_ptr_diff0_carry__0_i_1__2_n_0;
  wire r_rd_ptr_diff0_carry__0_i_2__2_n_0;
  wire r_rd_ptr_diff0_carry__0_i_3__2_n_0;
  wire r_rd_ptr_diff0_carry__0_i_4__2_n_0;
  wire r_rd_ptr_diff0_carry__0_i_5__1_n_0;
  wire r_rd_ptr_diff0_carry_i_1__2_n_0;
  wire r_rd_ptr_diff0_carry_i_2__2_n_0;
  wire r_rd_ptr_diff0_carry_i_3__2_n_0;
  wire r_rd_ptr_diff0_carry_i_4__2_n_0;
  wire r_rd_ptr_diff0_carry_i_5__2_n_0;
  wire r_rd_ptr_diff0_carry_i_6__2_n_0;
  wire r_rd_ptr_diff0_carry_i_7__2_n_0;
  wire r_rd_ptr_diff0_carry_i_8__2_n_0;
  wire r_rd_ptr_diff0_carry_i_9__2_n_0;
  wire r_rd_ptr_diff0_carry_n_0;
  wire [6:0]r_rd_ptr_gray;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_sync;
  wire r_wr_enable;
  wire \r_wr_ptr_bin[2]_i_1__5_n_0 ;
  wire \r_wr_ptr_bin[3]_i_1__6_n_0 ;
  wire \r_wr_ptr_bin[4]_i_1__2_n_0 ;
  wire \r_wr_ptr_bin_reg[0]_0 ;
  wire \r_wr_ptr_bin_reg_n_0_[0] ;
  wire \r_wr_ptr_bin_reg_n_0_[1] ;
  wire \r_wr_ptr_bin_reg_n_0_[2] ;
  wire \r_wr_ptr_bin_reg_n_0_[3] ;
  wire \r_wr_ptr_bin_reg_n_0_[4] ;
  wire \r_wr_ptr_bin_reg_n_0_[5] ;
  wire \r_wr_ptr_bin_reg_n_0_[6] ;
  wire [6:2]r_wr_ptr_diff;
  wire [6:2]r_wr_ptr_diff0;
  wire r_wr_ptr_diff0_carry__0_i_1__0_n_0;
  wire r_wr_ptr_diff0_carry__0_i_2__0_n_0;
  wire r_wr_ptr_diff0_carry__0_i_3__1_n_0;
  wire r_wr_ptr_diff0_carry__0_i_4__1_n_0;
  wire r_wr_ptr_diff0_carry__0_i_5__1_n_0;
  wire r_wr_ptr_diff0_carry_i_1__0_n_0;
  wire r_wr_ptr_diff0_carry_i_2__0_n_0;
  wire r_wr_ptr_diff0_carry_i_3__0_n_0;
  wire r_wr_ptr_diff0_carry_i_4__1_n_0;
  wire r_wr_ptr_diff0_carry_i_5__1_n_0;
  wire r_wr_ptr_diff0_carry_i_6__1_n_0;
  wire r_wr_ptr_diff0_carry_i_7__0_n_0;
  wire r_wr_ptr_diff0_carry_i_8__2_n_0;
  wire r_wr_ptr_diff0_carry_i_9__1_n_0;
  wire r_wr_ptr_diff0_carry_n_0;
  wire [6:0]r_wr_ptr_gray;
  wire \r_wr_ptr_gray[1]_i_1__6_n_0 ;
  wire \r_wr_ptr_gray[4]_i_2__1_n_0 ;
  wire \r_wr_ptr_gray[5]_i_1__2_n_0 ;
  wire \r_wr_ptr_gray[6]_i_3_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_sync;
  wire ri_almost_empty;
  wire ri_almost_full__0;
  wire ri_empty;
  wire ri_full;
  wire [6:0]ri_rd_ptr_bin;
  wire [5:0]ri_rd_ptr_gray;
  wire [6:6]ri_wr_ptr_bin;
  wire [5:0]ri_wr_ptr_bin__0;
  wire [4:0]ri_wr_ptr_gray;
  wire wr_ptr_bin_sync0;
  wire NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED;
  wire [2:0]NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED;
  wire [3:0]NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED;
  wire [1:0]NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED;
  wire [3:0]NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED;

  LUT3 #(
    .INIT(8'h02)) 
    r_almost_empty_i_1
       (.I0(r_almost_empty_i_2_n_0),
        .I1(r_rd_ptr_diff[6]),
        .I2(r_rd_ptr_diff[5]),
        .O(ri_almost_empty));
  LUT5 #(
    .INIT(32'h1FFFFFFF)) 
    r_almost_empty_i_2
       (.I0(r_rd_ptr_diff[0]),
        .I1(r_rd_ptr_diff[1]),
        .I2(r_rd_ptr_diff[3]),
        .I3(r_rd_ptr_diff[4]),
        .I4(r_rd_ptr_diff[2]),
        .O(r_almost_empty_i_2_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_almost_empty_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ri_almost_empty),
        .PRE(r_almost_empty_reg_0),
        .Q(o_almost_empty));
  FDCE r_almost_full_reg
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_almost_full__0),
        .Q(o_almost_full));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    r_empty_i_1__16
       (.I0(ri_rd_ptr_bin[6]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(ri_rd_ptr_gray[3]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_empty_i_2__15_n_0),
        .I5(r_empty_i_3__15_n_0),
        .O(ri_empty));
  LUT6 #(
    .INIT(64'h1218182448424281)) 
    r_empty_i_2__15
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_rd_ptr_bin_reg[6]),
        .I2(r_rd_ptr_bin_reg[5]),
        .I3(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I4(r_rd_ptr_bin_reg[4]),
        .I5(r_wr_ptr_gray_sync[5]),
        .O(r_empty_i_2__15_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_empty_i_3__15
       (.I0(ri_rd_ptr_gray[0]),
        .I1(r_wr_ptr_gray_sync[0]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(ri_rd_ptr_gray[2]),
        .I4(r_wr_ptr_gray_sync[1]),
        .I5(ri_rd_ptr_gray[1]),
        .O(r_empty_i_3__15_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(r_almost_empty_reg_0),
        .Q(r_empty));
  LUT6 #(
    .INIT(64'h0000000000009009)) 
    r_full_i_1__9
       (.I0(r_full_i_2__6_n_0),
        .I1(r_rd_ptr_gray_sync[6]),
        .I2(ri_wr_ptr_gray[3]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_full_i_3__3_n_0),
        .I5(r_full_i_4_n_0),
        .O(ri_full));
  LUT3 #(
    .INIT(8'h95)) 
    r_full_i_2__6
       (.I0(\r_wr_ptr_bin_reg_n_0_[6] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[5] ),
        .I2(\r_wr_ptr_gray[6]_i_3_n_0 ),
        .O(r_full_i_2__6_n_0));
  LUT6 #(
    .INIT(64'hB7BBDE7DEDEE7BD7)) 
    r_full_i_3__3
       (.I0(r_rd_ptr_gray_sync[4]),
        .I1(\r_wr_ptr_bin_reg_n_0_[6] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I3(r_full_i_5__1_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[5] ),
        .I5(r_rd_ptr_gray_sync[5]),
        .O(r_full_i_3__3_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFAA5955A6)) 
    r_full_i_4
       (.I0(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(r_rd_ptr_gray_sync[0]),
        .I5(r_full_i_6__0_n_0),
        .O(r_full_i_4_n_0));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    r_full_i_5__1
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(r_full),
        .I3(r_wr_enable),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_full_i_5__1_n_0));
  LUT6 #(
    .INIT(64'hEEDE7DB7BB7BD7ED)) 
    r_full_i_6__0
       (.I0(r_rd_ptr_gray_sync[1]),
        .I1(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I2(\r_wr_ptr_gray[4]_i_2__1_n_0 ),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(r_rd_ptr_gray_sync[2]),
        .O(r_full_i_6__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_tx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_0_2" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M_HD278 r_ram_reg_0_63_0_2
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD({\r_wr_ptr_bin_reg_n_0_[5] ,\r_wr_ptr_bin_reg_n_0_[4] ,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(Q[0]),
        .DIB(Q[1]),
        .DIC(Q[2]),
        .DID(1'b0),
        .DOA(out[0]),
        .DOB(out[1]),
        .DOC(out[2]),
        .DOD(NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_63_0_2_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_63_0_2_i_1__1
       (.I0(r_wr_enable),
        .I1(r_full),
        .O(r_ram_reg_0_63_0_2_i_1__1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_tx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_3_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M_HD279 r_ram_reg_0_63_3_5
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD({\r_wr_ptr_bin_reg_n_0_[5] ,\r_wr_ptr_bin_reg_n_0_[4] ,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(Q[3]),
        .DIB(Q[4]),
        .DIC(Q[5]),
        .DID(1'b0),
        .DOA(out[3]),
        .DOB(out[4]),
        .DOC(out[5]),
        .DOD(NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_63_0_2_i_1__1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_tx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_6_8" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "8" *) 
  RAM64M_HD280 r_ram_reg_0_63_6_8
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD({\r_wr_ptr_bin_reg_n_0_[5] ,\r_wr_ptr_bin_reg_n_0_[4] ,\r_wr_ptr_bin_reg_n_0_[3] ,\r_wr_ptr_bin_reg_n_0_[2] ,\r_wr_ptr_bin_reg_n_0_[1] ,\r_wr_ptr_bin_reg_n_0_[0] }),
        .DIA(Q[6]),
        .DIB(Q[7]),
        .DIC(Q[8]),
        .DID(1'b0),
        .DOA(out[6]),
        .DOB(out[7]),
        .DOC(out[8]),
        .DOD(NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED),
        .WCLK(\r_wr_ptr_bin_reg[0]_0 ),
        .WE(r_ram_reg_0_63_0_2_i_1__1_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg[5]));
  FDCE \r_rd_ptr_bin_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_bin_reg[6]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  FDCE \r_rd_ptr_bin_reg_rep[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg_rep[4]));
  FDCE \r_rd_ptr_bin_reg_rep[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg_rep[5]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_bin_rep[0]_i_1__4 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_empty),
        .I2(r_rd_enable),
        .O(ri_rd_ptr_bin[0]));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_rd_ptr_bin_rep[1]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  LUT5 #(
    .INIT(32'hBFFF4000)) 
    \r_rd_ptr_bin_rep[2]_i_1__5 
       (.I0(r_empty),
        .I1(r_rd_enable),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .I4(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_rd_ptr_bin_rep[3]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(r_rd_enable),
        .I3(r_empty),
        .I4(r_rd_ptr_bin_reg[2]),
        .I5(r_rd_ptr_bin_reg[3]),
        .O(ri_rd_ptr_bin[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_rd_ptr_bin_rep[4]_i_1__1 
       (.I0(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[4]));
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_bin_rep[5]_i_1__2 
       (.I0(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(r_rd_ptr_bin_reg[5]),
        .O(ri_rd_ptr_bin[5]));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    \r_rd_ptr_bin_rep[5]_i_3 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_enable),
        .I4(r_empty),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(\r_rd_ptr_bin_rep[5]_i_3_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_rd_ptr_diff0_carry_n_0,NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b1),
        .DI({r_rd_ptr_diff0_carry_i_1__2_n_0,r_rd_ptr_diff0_carry_i_2__2_n_0,r_rd_ptr_diff0_carry_i_3__2_n_0,r_rd_ptr_diff0_carry_i_4__2_n_0}),
        .O(r_rd_ptr_diff0[3:0]),
        .S({r_rd_ptr_diff0_carry_i_5__2_n_0,r_rd_ptr_diff0_carry_i_6__2_n_0,r_rd_ptr_diff0_carry_i_7__2_n_0,r_rd_ptr_diff0_carry_i_8__2_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry__0
       (.CI(r_rd_ptr_diff0_carry_n_0),
        .CO(NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_rd_ptr_diff0_carry__0_i_1__2_n_0,r_rd_ptr_diff0_carry__0_i_2__2_n_0}),
        .O({NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED[3],r_rd_ptr_diff0[6:4]}),
        .S({1'b0,r_rd_ptr_diff0_carry__0_i_3__2_n_0,r_rd_ptr_diff0_carry__0_i_4__2_n_0,r_rd_ptr_diff0_carry__0_i_5__1_n_0}));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry__0_i_1__2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry__0_i_1__2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry__0_i_2__2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry__0_i_2__2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    r_rd_ptr_diff0_carry__0_i_3__2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(ri_rd_ptr_bin[6]),
        .O(r_rd_ptr_diff0_carry__0_i_3__2_n_0));
  LUT5 #(
    .INIT(32'h87787887)) 
    r_rd_ptr_diff0_carry__0_i_4__2
       (.I0(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(r_rd_ptr_bin_reg[5]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_4__2_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry__0_i_5__1
       (.I0(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .I3(r_wr_ptr_gray_sync[4]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_5__1_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry_i_10__2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(wr_ptr_bin_sync0));
  LUT4 #(
    .INIT(16'h6996)) 
    r_rd_ptr_diff0_carry_i_1__2
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[3]),
        .I3(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_2__2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_rd_ptr_diff0_carry_i_3__2
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[1]),
        .I4(r_wr_ptr_gray_sync[4]),
        .I5(r_wr_ptr_gray_sync[3]),
        .O(r_rd_ptr_diff0_carry_i_3__2_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_4__2
       (.I0(r_rd_ptr_diff0_carry_i_9__2_n_0),
        .I1(r_wr_ptr_gray_sync[1]),
        .I2(r_wr_ptr_gray_sync[0]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_wr_ptr_gray_sync[2]),
        .O(r_rd_ptr_diff0_carry_i_4__2_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry_i_5__2
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[6]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(ri_rd_ptr_bin[3]),
        .O(r_rd_ptr_diff0_carry_i_5__2_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_6__2
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_wr_ptr_gray_sync[5]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_wr_ptr_gray_sync[6]),
        .I5(ri_rd_ptr_bin[2]),
        .O(r_rd_ptr_diff0_carry_i_6__2_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_7__2
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(wr_ptr_bin_sync0),
        .I5(ri_rd_ptr_bin[1]),
        .O(r_rd_ptr_diff0_carry_i_7__2_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_8__2
       (.I0(r_wr_ptr_gray_sync[2]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[0]),
        .I3(r_wr_ptr_gray_sync[1]),
        .I4(r_rd_ptr_diff0_carry_i_9__2_n_0),
        .I5(ri_rd_ptr_bin[0]),
        .O(r_rd_ptr_diff0_carry_i_8__2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry_i_9__2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry_i_9__2_n_0));
  FDCE \r_rd_ptr_diff_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[0]),
        .Q(r_rd_ptr_diff[0]));
  FDCE \r_rd_ptr_diff_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[1]),
        .Q(r_rd_ptr_diff[1]));
  FDCE \r_rd_ptr_diff_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[2]),
        .Q(r_rd_ptr_diff[2]));
  FDCE \r_rd_ptr_diff_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[3]),
        .Q(r_rd_ptr_diff[3]));
  FDCE \r_rd_ptr_diff_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[4]),
        .Q(r_rd_ptr_diff[4]));
  FDCE \r_rd_ptr_diff_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[5]),
        .Q(r_rd_ptr_diff[5]));
  FDCE \r_rd_ptr_diff_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_rd_ptr_diff0[6]),
        .Q(r_rd_ptr_diff[6]));
  LUT4 #(
    .INIT(16'h559A)) 
    \r_rd_ptr_gray[0]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_empty),
        .I2(r_rd_enable),
        .I3(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h66665666)) 
    \r_rd_ptr_gray[1]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_enable),
        .I4(r_empty),
        .O(ri_rd_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h6566666666666666)) 
    \r_rd_ptr_gray[2]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[2]),
        .I2(r_empty),
        .I3(r_rd_enable),
        .I4(r_rd_ptr_bin_reg[0]),
        .I5(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h96)) 
    \r_rd_ptr_gray[3]_i_1__5 
       (.I0(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(ri_rd_ptr_bin[3]),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'h56)) 
    \r_rd_ptr_gray[4]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .O(ri_rd_ptr_gray[4]));
  LUT4 #(
    .INIT(16'h5666)) 
    \r_rd_ptr_gray[5]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[6]),
        .I1(r_rd_ptr_bin_reg[5]),
        .I2(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I3(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[5]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_rd_ptr_gray[6]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_3_n_0 ),
        .I2(r_rd_ptr_bin_reg[5]),
        .I3(r_rd_ptr_bin_reg[6]),
        .O(ri_rd_ptr_bin[6]));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray_meta[4]));
  initial assign \r_rd_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[5] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray_meta[5]));
  initial assign \r_rd_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[6] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray[6]),
        .Q(r_rd_ptr_gray_meta[6]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray[0]));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray[1]));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray[2]));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray[3]));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray[4]));
  FDCE \r_rd_ptr_gray_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray[5]));
  FDCE \r_rd_ptr_gray_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_gray[6]));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  initial assign \r_rd_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[5] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[5]),
        .Q(r_rd_ptr_gray_sync[5]));
  initial assign \r_rd_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[6] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_rd_ptr_gray_meta[6]),
        .Q(r_rd_ptr_gray_sync[6]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr_bin[0]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I1(r_full),
        .I2(r_wr_enable),
        .O(ri_wr_ptr_bin__0[0]));
  (* \PinAttr:I3:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \r_wr_ptr_bin[1]_i_1__2 
       (.I0(r_wr_enable),
        .I1(r_full),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_bin__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT5 #(
    .INIT(32'hAA6AAAAA)) 
    \r_wr_ptr_bin[2]_i_1__5 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(r_wr_enable),
        .I3(r_full),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(\r_wr_ptr_bin[2]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[3]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I3(r_full),
        .I4(r_wr_enable),
        .I5(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(\r_wr_ptr_bin[3]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[4]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I3(r_ram_reg_0_63_0_2_i_1__1_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(\r_wr_ptr_bin[4]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hA6AAAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[5]_i_1__1 
       (.I0(\r_wr_ptr_bin_reg_n_0_[5] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_gray[4]_i_2__1_n_0 ),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(ri_wr_ptr_bin__0[5]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_bin__0[0]),
        .Q(\r_wr_ptr_bin_reg_n_0_[0] ));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(\r_wr_ptr_bin_reg_n_0_[1] ));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(\r_wr_ptr_bin[2]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[2] ));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(\r_wr_ptr_bin[3]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[3] ));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(\r_wr_ptr_bin[4]_i_1__2_n_0 ),
        .Q(\r_wr_ptr_bin_reg_n_0_[4] ));
  FDCE \r_wr_ptr_bin_reg[5] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_bin__0[5]),
        .Q(\r_wr_ptr_bin_reg_n_0_[5] ));
  FDCE \r_wr_ptr_bin_reg[6] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_bin),
        .Q(\r_wr_ptr_bin_reg_n_0_[6] ));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_wr_ptr_diff0_carry_n_0,NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({r_wr_ptr_diff0_carry_i_1__0_n_0,r_wr_ptr_diff0_carry_i_2__0_n_0,r_wr_ptr_diff0_carry_i_3__0_n_0,\r_wr_ptr_bin_reg_n_0_[0] }),
        .O({r_wr_ptr_diff0[3:2],NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED[1:0]}),
        .S({r_wr_ptr_diff0_carry_i_4__1_n_0,r_wr_ptr_diff0_carry_i_5__1_n_0,r_wr_ptr_diff0_carry_i_6__1_n_0,r_wr_ptr_diff0_carry_i_7__0_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry__0
       (.CI(r_wr_ptr_diff0_carry_n_0),
        .CO(NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_wr_ptr_diff0_carry__0_i_1__0_n_0,r_wr_ptr_diff0_carry__0_i_2__0_n_0}),
        .O({NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED[3],r_wr_ptr_diff0[6:4]}),
        .S({1'b0,r_wr_ptr_diff0_carry__0_i_3__1_n_0,r_wr_ptr_diff0_carry__0_i_4__1_n_0,r_wr_ptr_diff0_carry__0_i_5__1_n_0}));
  (* HLUTNM = "lutpair1" *) 
  LUT4 #(
    .INIT(16'h2882)) 
    r_wr_ptr_diff0_carry__0_i_1__0
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[4]),
        .O(r_wr_ptr_diff0_carry__0_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h82282882)) 
    r_wr_ptr_diff0_carry__0_i_2__0
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_rd_ptr_gray_sync[3]),
        .O(r_wr_ptr_diff0_carry__0_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h728D)) 
    r_wr_ptr_diff0_carry__0_i_3__1
       (.I0(\r_wr_ptr_bin_reg_n_0_[5] ),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(\r_wr_ptr_bin_reg_n_0_[6] ),
        .O(r_wr_ptr_diff0_carry__0_i_3__1_n_0));
  LUT4 #(
    .INIT(16'h9669)) 
    r_wr_ptr_diff0_carry__0_i_4__1
       (.I0(r_wr_ptr_diff0_carry__0_i_1__0_n_0),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(\r_wr_ptr_bin_reg_n_0_[5] ),
        .O(r_wr_ptr_diff0_carry__0_i_4__1_n_0));
  (* HLUTNM = "lutpair1" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    r_wr_ptr_diff0_carry__0_i_5__1
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[4]),
        .I4(r_wr_ptr_diff0_carry__0_i_2__0_n_0),
        .O(r_wr_ptr_diff0_carry__0_i_5__1_n_0));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    r_wr_ptr_diff0_carry_i_1__0
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_rd_ptr_gray_sync[2]),
        .O(r_wr_ptr_diff0_carry_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    r_wr_ptr_diff0_carry_i_2__0
       (.I0(r_wr_ptr_diff0_carry_i_8__2_n_0),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(r_wr_ptr_diff0_carry_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h66F6)) 
    r_wr_ptr_diff0_carry_i_3__0
       (.I0(r_wr_ptr_diff0_carry_i_8__2_n_0),
        .I1(r_rd_ptr_gray_sync[0]),
        .I2(r_wr_enable),
        .I3(r_full),
        .O(r_wr_ptr_diff0_carry_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_wr_ptr_diff0_carry_i_4__1
       (.I0(r_wr_ptr_diff0_carry_i_1__0_n_0),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(r_wr_ptr_diff0_carry_i_4__1_n_0));
  LUT3 #(
    .INIT(8'h69)) 
    r_wr_ptr_diff0_carry_i_5__1
       (.I0(r_wr_ptr_diff0_carry_i_2__0_n_0),
        .I1(r_wr_ptr_diff0_carry_i_9__1_n_0),
        .I2(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(r_wr_ptr_diff0_carry_i_5__1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_wr_ptr_diff0_carry_i_6__1
       (.I0(r_wr_ptr_diff0_carry_i_8__2_n_0),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(r_wr_ptr_diff0_carry_i_3__0_n_0),
        .O(r_wr_ptr_diff0_carry_i_6__1_n_0));
  LUT5 #(
    .INIT(32'h66969969)) 
    r_wr_ptr_diff0_carry_i_7__0
       (.I0(r_wr_ptr_diff0_carry_i_8__2_n_0),
        .I1(r_rd_ptr_gray_sync[0]),
        .I2(r_wr_enable),
        .I3(r_full),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(r_wr_ptr_diff0_carry_i_7__0_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_wr_ptr_diff0_carry_i_8__2
       (.I0(r_rd_ptr_gray_sync[1]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_rd_ptr_gray_sync[2]),
        .O(r_wr_ptr_diff0_carry_i_8__2_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_wr_ptr_diff0_carry_i_9__1
       (.I0(r_rd_ptr_gray_sync[2]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_rd_ptr_gray_sync[3]),
        .O(r_wr_ptr_diff0_carry_i_9__1_n_0));
  FDCE \r_wr_ptr_diff_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_wr_ptr_diff0[2]),
        .Q(r_wr_ptr_diff[2]));
  FDCE \r_wr_ptr_diff_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_wr_ptr_diff0[3]),
        .Q(r_wr_ptr_diff[3]));
  FDCE \r_wr_ptr_diff_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_wr_ptr_diff0[4]),
        .Q(r_wr_ptr_diff[4]));
  FDCE \r_wr_ptr_diff_reg[5] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_wr_ptr_diff0[5]),
        .Q(r_wr_ptr_diff[5]));
  FDCE \r_wr_ptr_diff_reg[6] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(r_wr_ptr_diff0[6]),
        .Q(r_wr_ptr_diff[6]));
  (* \PinAttr:I3:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair441" *) 
  LUT4 #(
    .INIT(16'h45BA)) 
    \r_wr_ptr_gray[0]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I1(r_full),
        .I2(r_wr_enable),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(ri_wr_ptr_gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair438" *) 
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_wr_ptr_gray[1]_i_1__6 
       (.I0(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .O(\r_wr_ptr_gray[1]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h55555555A6AAAAAA)) 
    \r_wr_ptr_gray[2]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I2(r_full),
        .I3(r_wr_enable),
        .I4(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h555555556AAAAAAA)) 
    \r_wr_ptr_gray[3]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I2(r_ram_reg_0_63_0_2_i_1__1_n_0),
        .I3(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[3] ),
        .O(ri_wr_ptr_gray[3]));
  LUT6 #(
    .INIT(64'h55555555A6AAAAAA)) 
    \r_wr_ptr_gray[4]_i_1__3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[5] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[2] ),
        .I2(\r_wr_ptr_gray[4]_i_2__1_n_0 ),
        .I3(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I4(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[4] ),
        .O(ri_wr_ptr_gray[4]));
  LUT3 #(
    .INIT(8'hDF)) 
    \r_wr_ptr_gray[4]_i_2__1 
       (.I0(r_wr_enable),
        .I1(r_full),
        .I2(\r_wr_ptr_bin_reg_n_0_[0] ),
        .O(\r_wr_ptr_gray[4]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'h56)) 
    \r_wr_ptr_gray[5]_i_1__2 
       (.I0(\r_wr_ptr_bin_reg_n_0_[6] ),
        .I1(\r_wr_ptr_gray[6]_i_3_n_0 ),
        .I2(\r_wr_ptr_bin_reg_n_0_[5] ),
        .O(\r_wr_ptr_gray[5]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \r_wr_ptr_gray[6]_i_1__1 
       (.I0(\r_wr_ptr_gray[6]_i_3_n_0 ),
        .I1(\r_wr_ptr_bin_reg_n_0_[5] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[6] ),
        .O(ri_wr_ptr_bin));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_wr_ptr_gray[6]_i_3 
       (.I0(\r_wr_ptr_bin_reg_n_0_[4] ),
        .I1(\r_wr_ptr_bin_reg_n_0_[3] ),
        .I2(\r_wr_ptr_bin_reg_n_0_[1] ),
        .I3(r_ram_reg_0_63_0_2_i_1__1_n_0),
        .I4(\r_wr_ptr_bin_reg_n_0_[0] ),
        .I5(\r_wr_ptr_bin_reg_n_0_[2] ),
        .O(\r_wr_ptr_gray[6]_i_3_n_0 ));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray_meta[4]));
  initial assign \r_wr_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[5]),
        .Q(r_wr_ptr_gray_meta[5]));
  initial assign \r_wr_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray[6]),
        .Q(r_wr_ptr_gray_meta[6]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray[0]));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(\r_wr_ptr_gray[1]_i_1__6_n_0 ),
        .Q(r_wr_ptr_gray[1]));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray[2]));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray[3]));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray[4]));
  FDCE \r_wr_ptr_gray_reg[5] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(\r_wr_ptr_gray[5]_i_1__2_n_0 ),
        .Q(r_wr_ptr_gray[5]));
  FDCE \r_wr_ptr_gray_reg[6] 
       (.C(\r_wr_ptr_bin_reg[0]_0 ),
        .CE(1'b1),
        .CLR(r_almost_full_reg_0),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_gray[6]));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
  initial assign \r_wr_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[5]),
        .Q(r_wr_ptr_gray_sync[5]));
  initial assign \r_wr_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(r_almost_empty_reg_0),
        .D(r_wr_ptr_gray_meta[6]),
        .Q(r_wr_ptr_gray_sync[6]));
  LUT5 #(
    .INIT(32'hFFFEAAAA)) 
    ri_almost_full
       (.I0(r_wr_ptr_diff[6]),
        .I1(r_wr_ptr_diff[3]),
        .I2(r_wr_ptr_diff[2]),
        .I3(r_wr_ptr_diff[4]),
        .I4(r_wr_ptr_diff[5]),
        .O(ri_almost_full__0));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__parameterized1__hierPathDup__1
   (in00,
    out,
    o_almost_empty,
    i_wr_clk,
    \r_wr_ptr_diff_reg[2]_0 ,
    \r_rd_ptr_diff_reg[6]_0 ,
    \r_rd_ptr_diff_reg[0]_0 ,
    r_rd_enable,
    r_wr_enable,
    Q);
  output [8:0]in00;
  output out;
  output o_almost_empty;
  input i_wr_clk;
  input \r_wr_ptr_diff_reg[2]_0 ;
  input \r_rd_ptr_diff_reg[6]_0 ;
  input \r_rd_ptr_diff_reg[0]_0 ;
  input r_rd_enable;
  input r_wr_enable;
  input [8:0]Q;

  wire [8:0]Q;
  wire i_wr_clk;
  (* RTL_KEEP = "true" *) wire [8:0]in00;
  (* RTL_KEEP = "true" *) wire o_almost_empty;
  (* RTL_KEEP = "true" *) wire out;
  wire r_almost_empty_i_3_n_0;
  (* RTL_KEEP = "true" *) wire r_empty;
  wire r_empty_i_2__1_n_0;
  wire r_empty_i_3__1_n_0;
  wire r_empty_i_4__1_n_0;
  wire r_empty_i_5__1_n_0;
  wire r_empty_i_6__1_n_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_full_i_2__2_n_0;
  wire r_full_i_3__2_n_0;
  wire r_ram_reg_0_63_0_2_i_1__0_n_0;
  wire r_rd_enable;
  wire [6:0]r_rd_ptr_bin_reg;
  wire [5:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_bin_rep[0]_i_1__5_n_0 ;
  wire \r_rd_ptr_bin_rep[5]_i_2_n_0 ;
  wire [6:0]r_rd_ptr_diff;
  wire [6:0]r_rd_ptr_diff0;
  wire r_rd_ptr_diff0_carry__0_i_1_n_0;
  wire r_rd_ptr_diff0_carry__0_i_2_n_0;
  wire r_rd_ptr_diff0_carry__0_i_3_n_0;
  wire r_rd_ptr_diff0_carry__0_i_4_n_0;
  wire r_rd_ptr_diff0_carry__0_i_5_n_0;
  wire r_rd_ptr_diff0_carry_i_1_n_0;
  wire r_rd_ptr_diff0_carry_i_2_n_0;
  wire r_rd_ptr_diff0_carry_i_3_n_0;
  wire r_rd_ptr_diff0_carry_i_4_n_0;
  wire r_rd_ptr_diff0_carry_i_5_n_0;
  wire r_rd_ptr_diff0_carry_i_6_n_0;
  wire r_rd_ptr_diff0_carry_i_7_n_0;
  wire r_rd_ptr_diff0_carry_i_8__0_n_0;
  wire r_rd_ptr_diff0_carry_i_9_n_0;
  wire r_rd_ptr_diff0_carry_n_0;
  wire \r_rd_ptr_diff_reg[0]_0 ;
  wire \r_rd_ptr_diff_reg[6]_0 ;
  wire [6:0]r_rd_ptr_gray;
  wire \r_rd_ptr_gray[1]_i_1__3_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_sync;
  wire r_wr_enable;
  wire [5:0]r_wr_ptr_bin_reg;
  wire [6:6]r_wr_ptr_bin_reg__0;
  wire [6:2]r_wr_ptr_diff;
  wire [6:2]r_wr_ptr_diff0;
  wire r_wr_ptr_diff0_carry__0_i_1__1_n_0;
  wire r_wr_ptr_diff0_carry__0_i_2__1_n_0;
  wire r_wr_ptr_diff0_carry__0_i_3__0_n_0;
  wire r_wr_ptr_diff0_carry__0_i_4__0_n_0;
  wire r_wr_ptr_diff0_carry__0_i_5__0_n_0;
  wire r_wr_ptr_diff0_carry_i_10_n_0;
  wire r_wr_ptr_diff0_carry_i_11_n_0;
  wire r_wr_ptr_diff0_carry_i_12_n_0;
  wire r_wr_ptr_diff0_carry_i_1__1_n_0;
  wire r_wr_ptr_diff0_carry_i_2__1_n_0;
  wire r_wr_ptr_diff0_carry_i_3__1_n_0;
  wire r_wr_ptr_diff0_carry_i_4__0_n_0;
  wire r_wr_ptr_diff0_carry_i_5__0_n_0;
  wire r_wr_ptr_diff0_carry_i_6__0_n_0;
  wire r_wr_ptr_diff0_carry_i_7__1_n_0;
  wire r_wr_ptr_diff0_carry_i_8_n_0;
  wire r_wr_ptr_diff0_carry_i_9__0_n_0;
  wire r_wr_ptr_diff0_carry_n_0;
  wire \r_wr_ptr_diff_reg[2]_0 ;
  wire [6:0]r_wr_ptr_gray;
  wire \r_wr_ptr_gray[6]_i_2_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_sync;
  wire ri_almost_empty;
  wire ri_almost_full__0;
  wire ri_empty;
  wire ri_full;
  wire [6:1]ri_rd_ptr_bin;
  wire [5:0]ri_rd_ptr_gray;
  wire [6:6]ri_wr_ptr_bin;
  wire [5:0]ri_wr_ptr_bin__0;
  wire [5:0]ri_wr_ptr_gray;
  wire wr_ptr_bin_sync0;
  wire NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED;
  wire [2:0]NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED;
  wire [3:0]NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED;
  wire [1:0]NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED;
  wire [3:0]NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED;

  LUT3 #(
    .INIT(8'h02)) 
    r_almost_empty_i_1
       (.I0(r_almost_empty_i_3_n_0),
        .I1(r_rd_ptr_diff[6]),
        .I2(r_rd_ptr_diff[5]),
        .O(ri_almost_empty));
  LUT5 #(
    .INIT(32'h1FFFFFFF)) 
    r_almost_empty_i_3
       (.I0(r_rd_ptr_diff[0]),
        .I1(r_rd_ptr_diff[1]),
        .I2(r_rd_ptr_diff[3]),
        .I3(r_rd_ptr_diff[4]),
        .I4(r_rd_ptr_diff[2]),
        .O(r_almost_empty_i_3_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_almost_empty_reg
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .D(ri_almost_empty),
        .PRE(\r_rd_ptr_diff_reg[0]_0 ),
        .Q(o_almost_empty));
  FDCE r_almost_full_reg
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_almost_full__0),
        .Q(out));
  LUT6 #(
    .INIT(64'h0000000001404001)) 
    r_empty_i_1__1
       (.I0(r_empty_i_2__1_n_0),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(ri_rd_ptr_bin[6]),
        .I3(ri_rd_ptr_bin[5]),
        .I4(r_wr_ptr_gray_sync[5]),
        .I5(r_empty_i_3__1_n_0),
        .O(ri_empty));
  LUT6 #(
    .INIT(64'hEEEDD77BAAA5555A)) 
    r_empty_i_2__1
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_rd_ptr_bin_reg[5]),
        .I2(r_rd_ptr_bin_reg[3]),
        .I3(r_empty_i_4__1_n_0),
        .I4(r_rd_ptr_bin_reg[4]),
        .I5(r_wr_ptr_gray_sync[4]),
        .O(r_empty_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hFFF4F4FFF4FFFFF4)) 
    r_empty_i_3__1
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(ri_rd_ptr_gray[4]),
        .I2(r_empty_i_5__1_n_0),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(ri_rd_ptr_bin[2]),
        .I5(ri_rd_ptr_bin[3]),
        .O(r_empty_i_3__1_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_4__1
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(r_empty_i_4__1_n_0));
  LUT6 #(
    .INIT(64'hEEDE7DB7BB7BD7ED)) 
    r_empty_i_5__1
       (.I0(r_wr_ptr_gray_sync[0]),
        .I1(r_rd_ptr_bin_reg[2]),
        .I2(r_empty_i_6__1_n_0),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_wr_ptr_gray_sync[1]),
        .O(r_empty_i_5__1_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    r_empty_i_6__1
       (.I0(r_empty),
        .I1(r_rd_enable),
        .O(r_empty_i_6__1_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(\r_rd_ptr_diff_reg[0]_0 ),
        .Q(r_empty));
  LUT6 #(
    .INIT(64'h6006000000000000)) 
    r_full_i_1__8
       (.I0(ri_wr_ptr_bin),
        .I1(r_rd_ptr_gray_sync[6]),
        .I2(ri_wr_ptr_gray[3]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_full_i_2__2_n_0),
        .I5(r_full_i_3__2_n_0),
        .O(ri_full));
  LUT6 #(
    .INIT(64'h4842428112181824)) 
    r_full_i_2__2
       (.I0(r_rd_ptr_gray_sync[4]),
        .I1(r_wr_ptr_bin_reg__0),
        .I2(r_wr_ptr_bin_reg[5]),
        .I3(\r_wr_ptr_gray[6]_i_2_n_0 ),
        .I4(r_wr_ptr_bin_reg[4]),
        .I5(r_rd_ptr_gray_sync[5]),
        .O(r_full_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_full_i_3__2
       (.I0(ri_wr_ptr_gray[0]),
        .I1(r_rd_ptr_gray_sync[0]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(ri_wr_ptr_gray[2]),
        .I4(r_rd_ptr_gray_sync[1]),
        .I5(ri_wr_ptr_gray[1]),
        .O(r_full_i_3__2_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_rx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_0_2" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M_HD238 r_ram_reg_0_63_0_2
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[0]),
        .DIB(Q[1]),
        .DIC(Q[2]),
        .DID(1'b0),
        .DOA(in00[0]),
        .DOB(in00[1]),
        .DOC(in00[2]),
        .DOD(NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(i_wr_clk),
        .WE(r_ram_reg_0_63_0_2_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_63_0_2_i_1__0
       (.I0(r_wr_enable),
        .I1(r_full),
        .O(r_ram_reg_0_63_0_2_i_1__0_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_rx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_3_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M_HD239 r_ram_reg_0_63_3_5
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[3]),
        .DIB(Q[4]),
        .DIC(Q[5]),
        .DID(1'b0),
        .DOA(in00[3]),
        .DOB(in00[4]),
        .DOC(in00[5]),
        .DOD(NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(i_wr_clk),
        .WE(r_ram_reg_0_63_0_2_i_1__0_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_rx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_6_8" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "8" *) 
  RAM64M_HD240 r_ram_reg_0_63_6_8
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[6]),
        .DIB(Q[7]),
        .DIC(Q[8]),
        .DID(1'b0),
        .DOA(in00[6]),
        .DOB(in00[7]),
        .DOC(in00[8]),
        .DOD(NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED),
        .WCLK(i_wr_clk),
        .WE(r_ram_reg_0_63_0_2_i_1__0_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[0]_i_1__5_n_0 ),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg[5] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg[5]));
  FDCE \r_rd_ptr_bin_reg[6] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_bin_reg[6]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[0]_i_1__5_n_0 ),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  FDCE \r_rd_ptr_bin_reg_rep[4] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg_rep[4]));
  FDCE \r_rd_ptr_bin_reg_rep[5] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg_rep[5]));
  LUT3 #(
    .INIT(8'hA6)) 
    \r_rd_ptr_bin_rep[0]_i_1__5 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .O(\r_rd_ptr_bin_rep[0]_i_1__5_n_0 ));
  (* \PinAttr:I3:HOLD_DETOUR  = "193" *) 
  LUT4 #(
    .INIT(16'hDF20)) 
    \r_rd_ptr_bin_rep[1]_i_1 
       (.I0(r_rd_enable),
        .I1(r_empty),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_bin_rep[2]_i_1 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_bin_rep[3]_i_1 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_empty),
        .I4(r_rd_enable),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_rd_ptr_bin_rep[4]_i_1 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .O(ri_rd_ptr_bin[4]));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr_bin_rep[5]_i_1 
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[5]));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \r_rd_ptr_bin_rep[5]_i_2 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_empty),
        .I4(r_rd_enable),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(\r_rd_ptr_bin_rep[5]_i_2_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_rd_ptr_diff0_carry_n_0,NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b1),
        .DI({r_rd_ptr_diff0_carry_i_1_n_0,r_rd_ptr_diff0_carry_i_2_n_0,r_rd_ptr_diff0_carry_i_3_n_0,r_rd_ptr_diff0_carry_i_4_n_0}),
        .O(r_rd_ptr_diff0[3:0]),
        .S({r_rd_ptr_diff0_carry_i_5_n_0,r_rd_ptr_diff0_carry_i_6_n_0,r_rd_ptr_diff0_carry_i_7_n_0,r_rd_ptr_diff0_carry_i_8__0_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry__0
       (.CI(r_rd_ptr_diff0_carry_n_0),
        .CO(NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_rd_ptr_diff0_carry__0_i_1_n_0,r_rd_ptr_diff0_carry__0_i_2_n_0}),
        .O({NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED[3],r_rd_ptr_diff0[6:4]}),
        .S({1'b0,r_rd_ptr_diff0_carry__0_i_3_n_0,r_rd_ptr_diff0_carry__0_i_4_n_0,r_rd_ptr_diff0_carry__0_i_5_n_0}));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry__0_i_1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry__0_i_1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry__0_i_2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .I2(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry__0_i_2_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    r_rd_ptr_diff0_carry__0_i_3
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(ri_rd_ptr_bin[6]),
        .O(r_rd_ptr_diff0_carry__0_i_3_n_0));
  LUT3 #(
    .INIT(8'h69)) 
    r_rd_ptr_diff0_carry__0_i_4
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(ri_rd_ptr_bin[5]),
        .O(r_rd_ptr_diff0_carry__0_i_4_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry__0_i_5
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .I2(r_wr_ptr_gray_sync[4]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_5_n_0));
  LUT4 #(
    .INIT(16'h6996)) 
    r_rd_ptr_diff0_carry_i_1
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[3]),
        .I3(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_1_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry_i_10
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(wr_ptr_bin_sync0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_2
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(r_wr_ptr_gray_sync[3]),
        .O(r_rd_ptr_diff0_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h5955)) 
    r_rd_ptr_diff0_carry_i_3
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(r_empty),
        .I3(r_rd_enable),
        .O(r_rd_ptr_diff0_carry_i_3_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_4
       (.I0(r_rd_ptr_diff0_carry_i_9_n_0),
        .I1(r_wr_ptr_gray_sync[0]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(r_wr_ptr_gray_sync[3]),
        .O(r_rd_ptr_diff0_carry_i_4_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry_i_5
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[6]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(ri_rd_ptr_bin[3]),
        .O(r_rd_ptr_diff0_carry_i_5_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_6
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_wr_ptr_gray_sync[5]),
        .I3(r_wr_ptr_gray_sync[4]),
        .I4(r_wr_ptr_gray_sync[6]),
        .I5(ri_rd_ptr_bin[2]),
        .O(r_rd_ptr_diff0_carry_i_6_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_rd_ptr_diff0_carry_i_7
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[1]),
        .I4(wr_ptr_bin_sync0),
        .I5(r_rd_ptr_diff0_carry_i_3_n_0),
        .O(r_rd_ptr_diff0_carry_i_7_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_8__0
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(r_wr_ptr_gray_sync[0]),
        .I4(r_rd_ptr_diff0_carry_i_9_n_0),
        .I5(\r_rd_ptr_bin_rep[0]_i_1__5_n_0 ),
        .O(r_rd_ptr_diff0_carry_i_8__0_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry_i_9
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .I2(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_9_n_0));
  FDCE \r_rd_ptr_diff_reg[0] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[0]),
        .Q(r_rd_ptr_diff[0]));
  FDCE \r_rd_ptr_diff_reg[1] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[1]),
        .Q(r_rd_ptr_diff[1]));
  FDCE \r_rd_ptr_diff_reg[2] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[2]),
        .Q(r_rd_ptr_diff[2]));
  FDCE \r_rd_ptr_diff_reg[3] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[3]),
        .Q(r_rd_ptr_diff[3]));
  FDCE \r_rd_ptr_diff_reg[4] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[4]),
        .Q(r_rd_ptr_diff[4]));
  FDCE \r_rd_ptr_diff_reg[5] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[5]),
        .Q(r_rd_ptr_diff[5]));
  FDCE \r_rd_ptr_diff_reg[6] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[6]),
        .Q(r_rd_ptr_diff[6]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT4 #(
    .INIT(16'h51AE)) 
    \r_rd_ptr_gray[0]_i_1 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[0]));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_rd_ptr_gray[1]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(\r_rd_ptr_gray[1]_i_1__3_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "261" *) 
  (* \PinAttr:I2:HOLD_DETOUR  = "220" *) 
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_rd_ptr_gray[2]_i_1 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_empty),
        .I4(r_rd_enable),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h96)) 
    \r_rd_ptr_gray[3]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .I2(ri_rd_ptr_bin[3]),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'h56)) 
    \r_rd_ptr_gray[4]_i_1 
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[4]));
  LUT4 #(
    .INIT(16'h556A)) 
    \r_rd_ptr_gray[5]_i_1 
       (.I0(r_rd_ptr_bin_reg[6]),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .I3(r_rd_ptr_bin_reg[5]),
        .O(ri_rd_ptr_gray[5]));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_rd_ptr_gray[6]_i_1 
       (.I0(r_rd_ptr_bin_reg[6]),
        .I1(r_rd_ptr_bin_reg[5]),
        .I2(r_rd_ptr_bin_reg[4]),
        .I3(\r_rd_ptr_bin_rep[5]_i_2_n_0 ),
        .O(ri_rd_ptr_bin[6]));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray_meta[4]));
  initial assign \r_rd_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray_meta[5]));
  initial assign \r_rd_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[6]),
        .Q(r_rd_ptr_gray_meta[6]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray[0]));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_gray[1]_i_1__3_n_0 ),
        .Q(r_rd_ptr_gray[1]));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray[2]));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray[3]));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray[4]));
  FDCE \r_rd_ptr_gray_reg[5] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray[5]));
  FDCE \r_rd_ptr_gray_reg[6] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_gray[6]));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  initial assign \r_rd_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[5]),
        .Q(r_rd_ptr_gray_sync[5]));
  initial assign \r_rd_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[6]),
        .Q(r_rd_ptr_gray_sync[6]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr_bin[0]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[0]),
        .I1(r_full),
        .I2(r_wr_enable),
        .O(ri_wr_ptr_bin__0[0]));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_wr_ptr_bin[1]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[0]),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_bin__0[1]));
  LUT5 #(
    .INIT(32'hBFFF4000)) 
    \r_wr_ptr_bin[2]_i_1__0 
       (.I0(r_full),
        .I1(r_wr_enable),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_ptr_bin_reg[1]),
        .I4(r_wr_ptr_bin_reg[2]),
        .O(ri_wr_ptr_bin__0[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_wr_ptr_bin[3]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_wr_ptr_bin_reg[0]),
        .I2(r_wr_enable),
        .I3(r_full),
        .I4(r_wr_ptr_bin_reg[2]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(ri_wr_ptr_bin__0[3]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr_bin[4]_i_1__0 
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_ram_reg_0_63_0_2_i_1__0_n_0),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_ptr_bin_reg[1]),
        .I4(r_wr_ptr_bin_reg[3]),
        .I5(r_wr_ptr_bin_reg[4]),
        .O(ri_wr_ptr_bin__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_wr_ptr_bin[5]_i_1__0 
       (.I0(\r_wr_ptr_gray[6]_i_2_n_0 ),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(r_wr_ptr_bin_reg[5]),
        .O(ri_wr_ptr_bin__0[5]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[0]),
        .Q(r_wr_ptr_bin_reg[0]));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(r_wr_ptr_bin_reg[1]));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[2]),
        .Q(r_wr_ptr_bin_reg[2]));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[3]),
        .Q(r_wr_ptr_bin_reg[3]));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[4]),
        .Q(r_wr_ptr_bin_reg[4]));
  FDCE \r_wr_ptr_bin_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[5]),
        .Q(r_wr_ptr_bin_reg[5]));
  FDCE \r_wr_ptr_bin_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_bin_reg__0));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_wr_ptr_diff0_carry_n_0,NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({r_wr_ptr_diff0_carry_i_1__1_n_0,r_wr_ptr_diff0_carry_i_2__1_n_0,r_wr_ptr_diff0_carry_i_3__1_n_0,r_wr_ptr_bin_reg[0]}),
        .O({r_wr_ptr_diff0[3:2],NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED[1:0]}),
        .S({r_wr_ptr_diff0_carry_i_4__0_n_0,r_wr_ptr_diff0_carry_i_5__0_n_0,r_wr_ptr_diff0_carry_i_6__0_n_0,r_wr_ptr_diff0_carry_i_7__1_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry__0
       (.CI(r_wr_ptr_diff0_carry_n_0),
        .CO(NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_wr_ptr_diff0_carry__0_i_1__1_n_0,r_wr_ptr_diff0_carry__0_i_2__1_n_0}),
        .O({NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED[3],r_wr_ptr_diff0[6:4]}),
        .S({1'b0,r_wr_ptr_diff0_carry__0_i_3__0_n_0,r_wr_ptr_diff0_carry__0_i_4__0_n_0,r_wr_ptr_diff0_carry__0_i_5__0_n_0}));
  LUT4 #(
    .INIT(16'h2882)) 
    r_wr_ptr_diff0_carry__0_i_1__1
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_rd_ptr_gray_sync[6]),
        .O(r_wr_ptr_diff0_carry__0_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h82282882)) 
    r_wr_ptr_diff0_carry__0_i_2__1
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[3]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[5]),
        .O(r_wr_ptr_diff0_carry__0_i_2__1_n_0));
  LUT4 #(
    .INIT(16'h748B)) 
    r_wr_ptr_diff0_carry__0_i_3__0
       (.I0(r_rd_ptr_gray_sync[5]),
        .I1(r_wr_ptr_bin_reg[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_wr_ptr_bin_reg__0),
        .O(r_wr_ptr_diff0_carry__0_i_3__0_n_0));
  LUT5 #(
    .INIT(32'h4774B88B)) 
    r_wr_ptr_diff0_carry__0_i_4__0
       (.I0(r_rd_ptr_gray_sync[4]),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_wr_ptr_bin_reg[5]),
        .O(r_wr_ptr_diff0_carry__0_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h744747748BB8B88B)) 
    r_wr_ptr_diff0_carry__0_i_5__0
       (.I0(r_rd_ptr_gray_sync[3]),
        .I1(r_wr_ptr_bin_reg[3]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[4]),
        .I4(r_rd_ptr_gray_sync[5]),
        .I5(r_wr_ptr_bin_reg[4]),
        .O(r_wr_ptr_diff0_carry__0_i_5__0_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_wr_ptr_diff0_carry_i_10
       (.I0(r_rd_ptr_gray_sync[5]),
        .I1(r_rd_ptr_gray_sync[6]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(r_rd_ptr_gray_sync[1]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_rd_ptr_gray_sync[3]),
        .O(r_wr_ptr_diff0_carry_i_10_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_wr_ptr_diff0_carry_i_11
       (.I0(r_rd_ptr_gray_sync[6]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_rd_ptr_gray_sync[4]),
        .O(r_wr_ptr_diff0_carry_i_11_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_wr_ptr_diff0_carry_i_12
       (.I0(r_wr_ptr_diff0_carry_i_9__0_n_0),
        .I1(r_rd_ptr_gray_sync[1]),
        .I2(r_rd_ptr_gray_sync[0]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_rd_ptr_gray_sync[2]),
        .O(r_wr_ptr_diff0_carry_i_12_n_0));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    r_wr_ptr_diff0_carry_i_1__1
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[2]),
        .I4(r_rd_ptr_gray_sync[3]),
        .I5(r_rd_ptr_gray_sync[6]),
        .O(r_wr_ptr_diff0_carry_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    r_wr_ptr_diff0_carry_i_2__1
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_rd_ptr_gray_sync[1]),
        .I4(r_rd_ptr_gray_sync[2]),
        .I5(r_wr_ptr_diff0_carry_i_8_n_0),
        .O(r_wr_ptr_diff0_carry_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hBEEBEBBEEBBEBEEB)) 
    r_wr_ptr_diff0_carry_i_3__1
       (.I0(r_ram_reg_0_63_0_2_i_1__0_n_0),
        .I1(r_rd_ptr_gray_sync[2]),
        .I2(r_rd_ptr_gray_sync[3]),
        .I3(r_rd_ptr_gray_sync[0]),
        .I4(r_rd_ptr_gray_sync[1]),
        .I5(r_wr_ptr_diff0_carry_i_9__0_n_0),
        .O(r_wr_ptr_diff0_carry_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_wr_ptr_diff0_carry_i_4__0
       (.I0(r_wr_ptr_diff0_carry_i_1__1_n_0),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(r_wr_ptr_diff0_carry_i_4__0_n_0));
  LUT4 #(
    .INIT(16'hB44B)) 
    r_wr_ptr_diff0_carry_i_5__0
       (.I0(r_wr_ptr_diff0_carry_i_10_n_0),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_diff0_carry_i_11_n_0),
        .I3(r_wr_ptr_bin_reg[2]),
        .O(r_wr_ptr_diff0_carry_i_5__0_n_0));
  LUT5 #(
    .INIT(32'hA25D5DA2)) 
    r_wr_ptr_diff0_carry_i_6__0
       (.I0(r_wr_ptr_diff0_carry_i_12_n_0),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(r_wr_ptr_diff0_carry_i_10_n_0),
        .I4(r_wr_ptr_bin_reg[1]),
        .O(r_wr_ptr_diff0_carry_i_6__0_n_0));
  LUT4 #(
    .INIT(16'h2DD2)) 
    r_wr_ptr_diff0_carry_i_7__1
       (.I0(r_wr_enable),
        .I1(r_full),
        .I2(r_wr_ptr_diff0_carry_i_12_n_0),
        .I3(r_wr_ptr_bin_reg[0]),
        .O(r_wr_ptr_diff0_carry_i_7__1_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    r_wr_ptr_diff0_carry_i_8
       (.I0(r_rd_ptr_gray_sync[6]),
        .I1(r_rd_ptr_gray_sync[5]),
        .O(r_wr_ptr_diff0_carry_i_8_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_wr_ptr_diff0_carry_i_9__0
       (.I0(r_rd_ptr_gray_sync[6]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[5]),
        .O(r_wr_ptr_diff0_carry_i_9__0_n_0));
  FDCE \r_wr_ptr_diff_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[2]),
        .Q(r_wr_ptr_diff[2]));
  FDCE \r_wr_ptr_diff_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[3]),
        .Q(r_wr_ptr_diff[3]));
  FDCE \r_wr_ptr_diff_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[4]),
        .Q(r_wr_ptr_diff[4]));
  FDCE \r_wr_ptr_diff_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[5]),
        .Q(r_wr_ptr_diff[5]));
  FDCE \r_wr_ptr_diff_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[6]),
        .Q(r_wr_ptr_diff[6]));
  LUT4 #(
    .INIT(16'h559A)) 
    \r_wr_ptr_gray[0]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_full),
        .I2(r_wr_enable),
        .I3(r_wr_ptr_bin_reg[0]),
        .O(ri_wr_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h66665666)) 
    \r_wr_ptr_gray[1]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_enable),
        .I4(r_full),
        .O(ri_wr_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h6566666666666666)) 
    \r_wr_ptr_gray[2]_i_1__2 
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[2]),
        .I2(r_full),
        .I3(r_wr_enable),
        .I4(r_wr_ptr_bin_reg[0]),
        .I5(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h5666666666666666)) 
    \r_wr_ptr_gray[3]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_wr_ptr_bin_reg[3]),
        .I2(r_wr_ptr_bin_reg[1]),
        .I3(r_wr_ptr_bin_reg[0]),
        .I4(r_ram_reg_0_63_0_2_i_1__0_n_0),
        .I5(r_wr_ptr_bin_reg[2]),
        .O(ri_wr_ptr_gray[3]));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT3 #(
    .INIT(8'h56)) 
    \r_wr_ptr_gray[4]_i_1__2 
       (.I0(r_wr_ptr_bin_reg[5]),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(\r_wr_ptr_gray[6]_i_2_n_0 ),
        .O(ri_wr_ptr_gray[4]));
  LUT4 #(
    .INIT(16'h5666)) 
    \r_wr_ptr_gray[5]_i_1 
       (.I0(r_wr_ptr_bin_reg__0),
        .I1(r_wr_ptr_bin_reg[5]),
        .I2(\r_wr_ptr_gray[6]_i_2_n_0 ),
        .I3(r_wr_ptr_bin_reg[4]),
        .O(ri_wr_ptr_gray[5]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_wr_ptr_gray[6]_i_1__0 
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(\r_wr_ptr_gray[6]_i_2_n_0 ),
        .I2(r_wr_ptr_bin_reg[5]),
        .I3(r_wr_ptr_bin_reg__0),
        .O(ri_wr_ptr_bin));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    \r_wr_ptr_gray[6]_i_2 
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_enable),
        .I4(r_full),
        .I5(r_wr_ptr_bin_reg[2]),
        .O(\r_wr_ptr_gray[6]_i_2_n_0 ));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray_meta[4]));
  initial assign \r_wr_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[5] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[5]),
        .Q(r_wr_ptr_gray_meta[5]));
  initial assign \r_wr_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[6] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[6]),
        .Q(r_wr_ptr_gray_meta[6]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray[0]));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray[1]));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray[2]));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray[3]));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray[4]));
  FDCE \r_wr_ptr_gray_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[5]),
        .Q(r_wr_ptr_gray[5]));
  FDCE \r_wr_ptr_gray_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_gray[6]));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
  initial assign \r_wr_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[5] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[5]),
        .Q(r_wr_ptr_gray_sync[5]));
  initial assign \r_wr_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[6] 
       (.C(\r_rd_ptr_diff_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[6]),
        .Q(r_wr_ptr_gray_sync[6]));
  LUT5 #(
    .INIT(32'hFFFEAAAA)) 
    ri_almost_full
       (.I0(r_wr_ptr_diff[6]),
        .I1(r_wr_ptr_diff[3]),
        .I2(r_wr_ptr_diff[2]),
        .I3(r_wr_ptr_diff[4]),
        .I4(r_wr_ptr_diff[5]),
        .O(ri_almost_full__0));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__parameterized1__hierPathDup__2
   (in00,
    out,
    o_almost_empty,
    r_full_reg_0,
    \r_wr_ptr_diff_reg[2]_0 ,
    CLK,
    \r_rd_ptr_diff_reg[0]_0 ,
    r_wr_enable,
    r_rd_enable,
    Q);
  output [8:0]in00;
  output out;
  output o_almost_empty;
  input r_full_reg_0;
  input \r_wr_ptr_diff_reg[2]_0 ;
  input CLK;
  input \r_rd_ptr_diff_reg[0]_0 ;
  input r_wr_enable;
  input r_rd_enable;
  input [8:0]Q;

  wire CLK;
  wire [8:0]Q;
  (* RTL_KEEP = "true" *) wire [8:0]in00;
  (* RTL_KEEP = "true" *) wire o_almost_empty;
  (* RTL_KEEP = "true" *) wire out;
  wire r_almost_empty_i_3_n_0;
  (* RTL_KEEP = "true" *) wire r_empty;
  wire r_empty_i_2__8_n_0;
  wire r_empty_i_3__7_n_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_full_i_2_n_0;
  wire r_full_i_3_n_0;
  wire r_full_i_4__2_n_0;
  wire r_full_i_5_n_0;
  wire r_full_i_6_n_0;
  wire r_full_reg_0;
  wire r_ram_reg_0_63_0_2_i_1_n_0;
  wire r_rd_enable;
  wire [6:0]r_rd_ptr_bin_reg;
  wire [5:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_bin_rep[5]_i_2__0_n_0 ;
  wire [6:0]r_rd_ptr_diff;
  wire [6:0]r_rd_ptr_diff0;
  wire r_rd_ptr_diff0_carry__0_i_1__0_n_0;
  wire r_rd_ptr_diff0_carry__0_i_2__0_n_0;
  wire r_rd_ptr_diff0_carry__0_i_3__0_n_0;
  wire r_rd_ptr_diff0_carry__0_i_4__0_n_0;
  wire r_rd_ptr_diff0_carry__0_i_5__0_n_0;
  wire r_rd_ptr_diff0_carry_i_1__0_n_0;
  wire r_rd_ptr_diff0_carry_i_2__0_n_0;
  wire r_rd_ptr_diff0_carry_i_3__0_n_0;
  wire r_rd_ptr_diff0_carry_i_4__0_n_0;
  wire r_rd_ptr_diff0_carry_i_5__0_n_0;
  wire r_rd_ptr_diff0_carry_i_6__0_n_0;
  wire r_rd_ptr_diff0_carry_i_7__0_n_0;
  wire r_rd_ptr_diff0_carry_i_8__1_n_0;
  wire r_rd_ptr_diff0_carry_i_9__0_n_0;
  wire r_rd_ptr_diff0_carry_n_0;
  wire \r_rd_ptr_diff_reg[0]_0 ;
  wire [6:0]r_rd_ptr_gray;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_sync;
  wire r_wr_enable;
  wire \r_wr_ptr_bin[2]_i_1__4_n_0 ;
  wire \r_wr_ptr_bin[3]_i_1__5_n_0 ;
  wire [5:0]r_wr_ptr_bin_reg;
  wire [6:6]r_wr_ptr_bin_reg__0;
  wire [6:2]r_wr_ptr_diff;
  wire [6:2]r_wr_ptr_diff0;
  wire r_wr_ptr_diff0_carry__0_i_1_n_0;
  wire r_wr_ptr_diff0_carry__0_i_2_n_0;
  wire r_wr_ptr_diff0_carry__0_i_3_n_0;
  wire r_wr_ptr_diff0_carry__0_i_4_n_0;
  wire r_wr_ptr_diff0_carry__0_i_5_n_0;
  wire r_wr_ptr_diff0_carry_i_1_n_0;
  wire r_wr_ptr_diff0_carry_i_2_n_0;
  wire r_wr_ptr_diff0_carry_i_3_n_0;
  wire r_wr_ptr_diff0_carry_i_4_n_0;
  wire r_wr_ptr_diff0_carry_i_5_n_0;
  wire r_wr_ptr_diff0_carry_i_6_n_0;
  wire r_wr_ptr_diff0_carry_i_7_n_0;
  wire r_wr_ptr_diff0_carry_i_8__1_n_0;
  wire r_wr_ptr_diff0_carry_i_9_n_0;
  wire r_wr_ptr_diff0_carry_n_0;
  wire \r_wr_ptr_diff_reg[2]_0 ;
  wire [6:0]r_wr_ptr_gray;
  wire \r_wr_ptr_gray[1]_i_1__5_n_0 ;
  wire \r_wr_ptr_gray[4]_i_2_n_0 ;
  wire \r_wr_ptr_gray[5]_i_1__1_n_0 ;
  wire \r_wr_ptr_gray[6]_i_2__2_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_sync;
  wire ri_almost_empty;
  wire ri_almost_full__0;
  wire ri_empty;
  wire ri_full;
  wire [6:0]ri_rd_ptr_bin;
  wire [5:0]ri_rd_ptr_gray;
  wire [6:6]ri_wr_ptr_bin;
  wire [5:0]ri_wr_ptr_bin__0;
  wire [4:0]ri_wr_ptr_gray;
  wire wr_ptr_bin_sync0;
  wire NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED;
  wire [2:0]NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED;
  wire [3:0]NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED;
  wire [1:0]NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED;
  wire [3:0]NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED;

  LUT3 #(
    .INIT(8'h02)) 
    r_almost_empty_i_1
       (.I0(r_almost_empty_i_3_n_0),
        .I1(r_rd_ptr_diff[6]),
        .I2(r_rd_ptr_diff[5]),
        .O(ri_almost_empty));
  LUT5 #(
    .INIT(32'h1FFFFFFF)) 
    r_almost_empty_i_3
       (.I0(r_rd_ptr_diff[0]),
        .I1(r_rd_ptr_diff[1]),
        .I2(r_rd_ptr_diff[3]),
        .I3(r_rd_ptr_diff[4]),
        .I4(r_rd_ptr_diff[2]),
        .O(r_almost_empty_i_3_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_almost_empty_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ri_almost_empty),
        .PRE(\r_rd_ptr_diff_reg[0]_0 ),
        .Q(o_almost_empty));
  FDCE r_almost_full_reg
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_almost_full__0),
        .Q(out));
  LUT6 #(
    .INIT(64'h9009000000000000)) 
    r_empty_i_1__8
       (.I0(ri_rd_ptr_bin[6]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(ri_rd_ptr_gray[3]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_empty_i_2__8_n_0),
        .I5(r_empty_i_3__7_n_0),
        .O(ri_empty));
  LUT6 #(
    .INIT(64'h1218182448424281)) 
    r_empty_i_2__8
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_rd_ptr_bin_reg[6]),
        .I2(r_rd_ptr_bin_reg[5]),
        .I3(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I4(r_rd_ptr_bin_reg[4]),
        .I5(r_wr_ptr_gray_sync[5]),
        .O(r_empty_i_2__8_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_empty_i_3__7
       (.I0(ri_rd_ptr_gray[0]),
        .I1(r_wr_ptr_gray_sync[0]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(ri_rd_ptr_gray[2]),
        .I4(r_wr_ptr_gray_sync[1]),
        .I5(ri_rd_ptr_gray[1]),
        .O(r_empty_i_3__7_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(CLK),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(\r_rd_ptr_diff_reg[0]_0 ),
        .Q(r_empty));
  LUT6 #(
    .INIT(64'h0900000000000900)) 
    r_full_i_1__1
       (.I0(ri_wr_ptr_gray[3]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_full_i_2_n_0),
        .I3(r_full_i_3_n_0),
        .I4(r_full_i_4__2_n_0),
        .I5(r_rd_ptr_gray_sync[6]),
        .O(ri_full));
  LUT6 #(
    .INIT(64'hBBB77DDEEEEDD77B)) 
    r_full_i_2
       (.I0(r_rd_ptr_gray_sync[4]),
        .I1(r_wr_ptr_bin_reg__0),
        .I2(r_full_i_5_n_0),
        .I3(r_wr_ptr_bin_reg[4]),
        .I4(r_wr_ptr_bin_reg[5]),
        .I5(r_rd_ptr_gray_sync[5]),
        .O(r_full_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000900990090000)) 
    r_full_i_3
       (.I0(\r_wr_ptr_gray[1]_i_1__5_n_0 ),
        .I1(r_rd_ptr_gray_sync[1]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(ri_wr_ptr_gray[2]),
        .I4(r_rd_ptr_gray_sync[0]),
        .I5(r_full_i_6_n_0),
        .O(r_full_i_3_n_0));
  LUT3 #(
    .INIT(8'h95)) 
    r_full_i_4__2
       (.I0(r_wr_ptr_bin_reg__0),
        .I1(r_wr_ptr_bin_reg[5]),
        .I2(\r_wr_ptr_gray[6]_i_2__2_n_0 ),
        .O(r_full_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    r_full_i_5
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[2]),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_full),
        .I4(r_wr_enable),
        .I5(r_wr_ptr_bin_reg[1]),
        .O(r_full_i_5_n_0));
  LUT4 #(
    .INIT(16'hAA59)) 
    r_full_i_6
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(r_wr_ptr_bin_reg[0]),
        .O(r_full_i_6_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_tx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_0_2" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M_HD241 r_ram_reg_0_63_0_2
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[0]),
        .DIB(Q[1]),
        .DIC(Q[2]),
        .DID(1'b0),
        .DOA(in00[0]),
        .DOB(in00[1]),
        .DOC(in00[2]),
        .DOD(NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(r_full_reg_0),
        .WE(r_ram_reg_0_63_0_2_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_63_0_2_i_1
       (.I0(r_wr_enable),
        .I1(r_full),
        .O(r_ram_reg_0_63_0_2_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_tx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_3_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M_HD242 r_ram_reg_0_63_3_5
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[3]),
        .DIB(Q[4]),
        .DIC(Q[5]),
        .DID(1'b0),
        .DOA(in00[3]),
        .DOB(in00[4]),
        .DOC(in00[5]),
        .DOD(NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(r_full_reg_0),
        .WE(r_ram_reg_0_63_0_2_i_1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_tx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_6_8" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "8" *) 
  RAM64M_HD243 r_ram_reg_0_63_6_8
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[6]),
        .DIB(Q[7]),
        .DIC(Q[8]),
        .DID(1'b0),
        .DOA(in00[6]),
        .DOB(in00[7]),
        .DOC(in00[8]),
        .DOD(NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED),
        .WCLK(r_full_reg_0),
        .WE(r_ram_reg_0_63_0_2_i_1_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg[5]));
  FDCE \r_rd_ptr_bin_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_bin_reg[6]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[0]),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[1]),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[2]),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[3]),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  FDCE \r_rd_ptr_bin_reg_rep[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[4]),
        .Q(r_rd_ptr_bin_reg_rep[4]));
  FDCE \r_rd_ptr_bin_reg_rep[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg_rep[5]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_bin_rep[0]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_empty),
        .I2(r_rd_enable),
        .O(ri_rd_ptr_bin[0]));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_rd_ptr_bin_rep[1]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_bin[1]));
  LUT5 #(
    .INIT(32'hBFFF4000)) 
    \r_rd_ptr_bin_rep[2]_i_1__2 
       (.I0(r_empty),
        .I1(r_rd_enable),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_ptr_bin_reg[1]),
        .I4(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_bin[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_rd_ptr_bin_rep[3]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(r_rd_enable),
        .I3(r_empty),
        .I4(r_rd_ptr_bin_reg[2]),
        .I5(r_rd_ptr_bin_reg[3]),
        .O(ri_rd_ptr_bin[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_rd_ptr_bin_rep[4]_i_1__0 
       (.I0(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[4]));
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_bin_rep[5]_i_1__0 
       (.I0(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(r_rd_ptr_bin_reg[5]),
        .O(ri_rd_ptr_bin[5]));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    \r_rd_ptr_bin_rep[5]_i_2__0 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_enable),
        .I4(r_empty),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_rd_ptr_diff0_carry_n_0,NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b1),
        .DI({r_rd_ptr_diff0_carry_i_1__0_n_0,r_rd_ptr_diff0_carry_i_2__0_n_0,r_rd_ptr_diff0_carry_i_3__0_n_0,r_rd_ptr_diff0_carry_i_4__0_n_0}),
        .O(r_rd_ptr_diff0[3:0]),
        .S({r_rd_ptr_diff0_carry_i_5__0_n_0,r_rd_ptr_diff0_carry_i_6__0_n_0,r_rd_ptr_diff0_carry_i_7__0_n_0,r_rd_ptr_diff0_carry_i_8__1_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry__0
       (.CI(r_rd_ptr_diff0_carry_n_0),
        .CO(NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_rd_ptr_diff0_carry__0_i_1__0_n_0,r_rd_ptr_diff0_carry__0_i_2__0_n_0}),
        .O({NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED[3],r_rd_ptr_diff0[6:4]}),
        .S({1'b0,r_rd_ptr_diff0_carry__0_i_3__0_n_0,r_rd_ptr_diff0_carry__0_i_4__0_n_0,r_rd_ptr_diff0_carry__0_i_5__0_n_0}));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry__0_i_1__0
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry__0_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry__0_i_2__0
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry__0_i_2__0_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    r_rd_ptr_diff0_carry__0_i_3__0
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(ri_rd_ptr_bin[6]),
        .O(r_rd_ptr_diff0_carry__0_i_3__0_n_0));
  LUT5 #(
    .INIT(32'h87787887)) 
    r_rd_ptr_diff0_carry__0_i_4__0
       (.I0(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(r_rd_ptr_bin_reg[5]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_4__0_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry__0_i_5__0
       (.I0(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .I3(r_wr_ptr_gray_sync[4]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_5__0_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry_i_10__0
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(wr_ptr_bin_sync0));
  LUT4 #(
    .INIT(16'h6996)) 
    r_rd_ptr_diff0_carry_i_1__0
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[3]),
        .I3(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_2__0
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_rd_ptr_diff0_carry_i_3__0
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[1]),
        .I4(r_wr_ptr_gray_sync[4]),
        .I5(r_wr_ptr_gray_sync[3]),
        .O(r_rd_ptr_diff0_carry_i_3__0_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_4__0
       (.I0(r_rd_ptr_diff0_carry_i_9__0_n_0),
        .I1(r_wr_ptr_gray_sync[1]),
        .I2(r_wr_ptr_gray_sync[0]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_wr_ptr_gray_sync[2]),
        .O(r_rd_ptr_diff0_carry_i_4__0_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry_i_5__0
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[6]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(ri_rd_ptr_bin[3]),
        .O(r_rd_ptr_diff0_carry_i_5__0_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_6__0
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_wr_ptr_gray_sync[5]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_wr_ptr_gray_sync[6]),
        .I5(ri_rd_ptr_bin[2]),
        .O(r_rd_ptr_diff0_carry_i_6__0_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_7__0
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(wr_ptr_bin_sync0),
        .I5(ri_rd_ptr_bin[1]),
        .O(r_rd_ptr_diff0_carry_i_7__0_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_8__1
       (.I0(r_wr_ptr_gray_sync[2]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[0]),
        .I3(r_wr_ptr_gray_sync[1]),
        .I4(r_rd_ptr_diff0_carry_i_9__0_n_0),
        .I5(ri_rd_ptr_bin[0]),
        .O(r_rd_ptr_diff0_carry_i_8__1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry_i_9__0
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry_i_9__0_n_0));
  FDCE \r_rd_ptr_diff_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[0]),
        .Q(r_rd_ptr_diff[0]));
  FDCE \r_rd_ptr_diff_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[1]),
        .Q(r_rd_ptr_diff[1]));
  FDCE \r_rd_ptr_diff_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[2]),
        .Q(r_rd_ptr_diff[2]));
  FDCE \r_rd_ptr_diff_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[3]),
        .Q(r_rd_ptr_diff[3]));
  FDCE \r_rd_ptr_diff_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[4]),
        .Q(r_rd_ptr_diff[4]));
  FDCE \r_rd_ptr_diff_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[5]),
        .Q(r_rd_ptr_diff[5]));
  FDCE \r_rd_ptr_diff_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[6]),
        .Q(r_rd_ptr_diff[6]));
  LUT4 #(
    .INIT(16'h559A)) 
    \r_rd_ptr_gray[0]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_empty),
        .I2(r_rd_enable),
        .I3(r_rd_ptr_bin_reg[0]),
        .O(ri_rd_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h66665666)) 
    \r_rd_ptr_gray[1]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_rd_enable),
        .I4(r_empty),
        .O(ri_rd_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h6566666666666666)) 
    \r_rd_ptr_gray[2]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[2]),
        .I2(r_empty),
        .I3(r_rd_enable),
        .I4(r_rd_ptr_bin_reg[0]),
        .I5(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h96)) 
    \r_rd_ptr_gray[3]_i_1__4 
       (.I0(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(ri_rd_ptr_bin[3]),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'h56)) 
    \r_rd_ptr_gray[4]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .O(ri_rd_ptr_gray[4]));
  LUT4 #(
    .INIT(16'h5666)) 
    \r_rd_ptr_gray[5]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[6]),
        .I1(r_rd_ptr_bin_reg[5]),
        .I2(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I3(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[5]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_rd_ptr_gray[6]_i_1__0 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__0_n_0 ),
        .I2(r_rd_ptr_bin_reg[5]),
        .I3(r_rd_ptr_bin_reg[6]),
        .O(ri_rd_ptr_bin[6]));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray_meta[4]));
  initial assign \r_rd_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[5] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray_meta[5]));
  initial assign \r_rd_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[6] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[6]),
        .Q(r_rd_ptr_gray_meta[6]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray[0]));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray[1]));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray[2]));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray[3]));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray[4]));
  FDCE \r_rd_ptr_gray_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray[5]));
  FDCE \r_rd_ptr_gray_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_gray[6]));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  initial assign \r_rd_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[5] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[5]),
        .Q(r_rd_ptr_gray_sync[5]));
  initial assign \r_rd_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[6] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[6]),
        .Q(r_rd_ptr_gray_sync[6]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr_bin[0]_i_1 
       (.I0(r_wr_ptr_bin_reg[0]),
        .I1(r_full),
        .I2(r_wr_enable),
        .O(ri_wr_ptr_bin__0[0]));
  LUT4 #(
    .INIT(16'hDF20)) 
    \r_wr_ptr_bin[1]_i_1 
       (.I0(r_wr_enable),
        .I1(r_full),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_bin__0[1]));
  LUT5 #(
    .INIT(32'hAA6AAAAA)) 
    \r_wr_ptr_bin[2]_i_1__4 
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_enable),
        .I3(r_full),
        .I4(r_wr_ptr_bin_reg[0]),
        .O(\r_wr_ptr_bin[2]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[3]_i_1__5 
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[2]),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_full),
        .I4(r_wr_enable),
        .I5(r_wr_ptr_bin_reg[1]),
        .O(\r_wr_ptr_bin[3]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr_bin[4]_i_1 
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_ram_reg_0_63_0_2_i_1_n_0),
        .I3(r_wr_ptr_bin_reg[0]),
        .I4(r_wr_ptr_bin_reg[2]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(ri_wr_ptr_bin__0[4]));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAAAAAAA)) 
    \r_wr_ptr_bin[5]_i_1 
       (.I0(r_wr_ptr_bin_reg[5]),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(r_wr_ptr_bin_reg[3]),
        .I3(r_wr_ptr_bin_reg[2]),
        .I4(\r_wr_ptr_gray[4]_i_2_n_0 ),
        .I5(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_bin__0[5]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[0]),
        .Q(r_wr_ptr_bin_reg[0]));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(r_wr_ptr_bin_reg[1]));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(\r_wr_ptr_bin[2]_i_1__4_n_0 ),
        .Q(r_wr_ptr_bin_reg[2]));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(\r_wr_ptr_bin[3]_i_1__5_n_0 ),
        .Q(r_wr_ptr_bin_reg[3]));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[4]),
        .Q(r_wr_ptr_bin_reg[4]));
  FDCE \r_wr_ptr_bin_reg[5] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[5]),
        .Q(r_wr_ptr_bin_reg[5]));
  FDCE \r_wr_ptr_bin_reg[6] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_bin_reg__0));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_wr_ptr_diff0_carry_n_0,NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({r_wr_ptr_diff0_carry_i_1_n_0,r_wr_ptr_diff0_carry_i_2_n_0,r_wr_ptr_diff0_carry_i_3_n_0,r_wr_ptr_bin_reg[0]}),
        .O({r_wr_ptr_diff0[3:2],NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED[1:0]}),
        .S({r_wr_ptr_diff0_carry_i_4_n_0,r_wr_ptr_diff0_carry_i_5_n_0,r_wr_ptr_diff0_carry_i_6_n_0,r_wr_ptr_diff0_carry_i_7_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry__0
       (.CI(r_wr_ptr_diff0_carry_n_0),
        .CO(NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_wr_ptr_diff0_carry__0_i_1_n_0,r_wr_ptr_diff0_carry__0_i_2_n_0}),
        .O({NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED[3],r_wr_ptr_diff0[6:4]}),
        .S({1'b0,r_wr_ptr_diff0_carry__0_i_3_n_0,r_wr_ptr_diff0_carry__0_i_4_n_0,r_wr_ptr_diff0_carry__0_i_5_n_0}));
  (* HLUTNM = "lutpair0" *) 
  LUT4 #(
    .INIT(16'h2882)) 
    r_wr_ptr_diff0_carry__0_i_1
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[4]),
        .O(r_wr_ptr_diff0_carry__0_i_1_n_0));
  LUT5 #(
    .INIT(32'h82282882)) 
    r_wr_ptr_diff0_carry__0_i_2
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_rd_ptr_gray_sync[3]),
        .O(r_wr_ptr_diff0_carry__0_i_2_n_0));
  LUT4 #(
    .INIT(16'h728D)) 
    r_wr_ptr_diff0_carry__0_i_3
       (.I0(r_wr_ptr_bin_reg[5]),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_wr_ptr_bin_reg__0),
        .O(r_wr_ptr_diff0_carry__0_i_3_n_0));
  LUT4 #(
    .INIT(16'h9669)) 
    r_wr_ptr_diff0_carry__0_i_4
       (.I0(r_wr_ptr_diff0_carry__0_i_1_n_0),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_wr_ptr_bin_reg[5]),
        .O(r_wr_ptr_diff0_carry__0_i_4_n_0));
  (* HLUTNM = "lutpair0" *) 
  LUT5 #(
    .INIT(32'h69969669)) 
    r_wr_ptr_diff0_carry__0_i_5
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[4]),
        .I4(r_wr_ptr_diff0_carry__0_i_2_n_0),
        .O(r_wr_ptr_diff0_carry__0_i_5_n_0));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    r_wr_ptr_diff0_carry_i_1
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_rd_ptr_gray_sync[2]),
        .O(r_wr_ptr_diff0_carry_i_1_n_0));
  LUT2 #(
    .INIT(4'h8)) 
    r_wr_ptr_diff0_carry_i_2
       (.I0(r_wr_ptr_diff0_carry_i_8__1_n_0),
        .I1(r_wr_ptr_bin_reg[1]),
        .O(r_wr_ptr_diff0_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h66F6)) 
    r_wr_ptr_diff0_carry_i_3
       (.I0(r_wr_ptr_diff0_carry_i_8__1_n_0),
        .I1(r_rd_ptr_gray_sync[0]),
        .I2(r_wr_enable),
        .I3(r_full),
        .O(r_wr_ptr_diff0_carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_wr_ptr_diff0_carry_i_4
       (.I0(r_wr_ptr_diff0_carry_i_1_n_0),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(r_wr_ptr_diff0_carry_i_4_n_0));
  LUT3 #(
    .INIT(8'h69)) 
    r_wr_ptr_diff0_carry_i_5
       (.I0(r_wr_ptr_diff0_carry_i_2_n_0),
        .I1(r_wr_ptr_diff0_carry_i_9_n_0),
        .I2(r_wr_ptr_bin_reg[2]),
        .O(r_wr_ptr_diff0_carry_i_5_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_wr_ptr_diff0_carry_i_6
       (.I0(r_wr_ptr_diff0_carry_i_8__1_n_0),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_diff0_carry_i_3_n_0),
        .O(r_wr_ptr_diff0_carry_i_6_n_0));
  LUT5 #(
    .INIT(32'h66969969)) 
    r_wr_ptr_diff0_carry_i_7
       (.I0(r_wr_ptr_diff0_carry_i_8__1_n_0),
        .I1(r_rd_ptr_gray_sync[0]),
        .I2(r_wr_enable),
        .I3(r_full),
        .I4(r_wr_ptr_bin_reg[0]),
        .O(r_wr_ptr_diff0_carry_i_7_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_wr_ptr_diff0_carry_i_8__1
       (.I0(r_rd_ptr_gray_sync[1]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_rd_ptr_gray_sync[2]),
        .O(r_wr_ptr_diff0_carry_i_8__1_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_wr_ptr_diff0_carry_i_9
       (.I0(r_rd_ptr_gray_sync[2]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_rd_ptr_gray_sync[3]),
        .O(r_wr_ptr_diff0_carry_i_9_n_0));
  FDCE \r_wr_ptr_diff_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[2]),
        .Q(r_wr_ptr_diff[2]));
  FDCE \r_wr_ptr_diff_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[3]),
        .Q(r_wr_ptr_diff[3]));
  FDCE \r_wr_ptr_diff_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[4]),
        .Q(r_wr_ptr_diff[4]));
  FDCE \r_wr_ptr_diff_reg[5] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[5]),
        .Q(r_wr_ptr_diff[5]));
  FDCE \r_wr_ptr_diff_reg[6] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[6]),
        .Q(r_wr_ptr_diff[6]));
  LUT4 #(
    .INIT(16'h45BA)) 
    \r_wr_ptr_gray[0]_i_1 
       (.I0(r_wr_ptr_bin_reg[0]),
        .I1(r_full),
        .I2(r_wr_enable),
        .I3(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_wr_ptr_gray[1]_i_1__5 
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(r_wr_ptr_bin_reg[0]),
        .I4(r_wr_ptr_bin_reg[1]),
        .O(\r_wr_ptr_gray[1]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h55555555A6AAAAAA)) 
    \r_wr_ptr_gray[2]_i_1 
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[0]),
        .I2(r_full),
        .I3(r_wr_enable),
        .I4(r_wr_ptr_bin_reg[1]),
        .I5(r_wr_ptr_bin_reg[2]),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h555555556AAAAAAA)) 
    \r_wr_ptr_gray[3]_i_1 
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_ram_reg_0_63_0_2_i_1_n_0),
        .I3(r_wr_ptr_bin_reg[0]),
        .I4(r_wr_ptr_bin_reg[2]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(ri_wr_ptr_gray[3]));
  LUT6 #(
    .INIT(64'h55555555AA6AAAAA)) 
    \r_wr_ptr_gray[4]_i_1 
       (.I0(r_wr_ptr_bin_reg[5]),
        .I1(r_wr_ptr_bin_reg[3]),
        .I2(r_wr_ptr_bin_reg[2]),
        .I3(\r_wr_ptr_gray[4]_i_2_n_0 ),
        .I4(r_wr_ptr_bin_reg[1]),
        .I5(r_wr_ptr_bin_reg[4]),
        .O(ri_wr_ptr_gray[4]));
  LUT3 #(
    .INIT(8'hDF)) 
    \r_wr_ptr_gray[4]_i_2 
       (.I0(r_wr_enable),
        .I1(r_full),
        .I2(r_wr_ptr_bin_reg[0]),
        .O(\r_wr_ptr_gray[4]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h56)) 
    \r_wr_ptr_gray[5]_i_1__1 
       (.I0(r_wr_ptr_bin_reg__0),
        .I1(\r_wr_ptr_gray[6]_i_2__2_n_0 ),
        .I2(r_wr_ptr_bin_reg[5]),
        .O(\r_wr_ptr_gray[5]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \r_wr_ptr_gray[6]_i_1 
       (.I0(\r_wr_ptr_gray[6]_i_2__2_n_0 ),
        .I1(r_wr_ptr_bin_reg[5]),
        .I2(r_wr_ptr_bin_reg__0),
        .O(ri_wr_ptr_bin));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_wr_ptr_gray[6]_i_2__2 
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_ram_reg_0_63_0_2_i_1_n_0),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_ptr_bin_reg[2]),
        .I4(r_wr_ptr_bin_reg[3]),
        .I5(r_wr_ptr_bin_reg[4]),
        .O(\r_wr_ptr_gray[6]_i_2__2_n_0 ));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray_meta[4]));
  initial assign \r_wr_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[5]),
        .Q(r_wr_ptr_gray_meta[5]));
  initial assign \r_wr_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[6]),
        .Q(r_wr_ptr_gray_meta[6]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray[0]));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(\r_wr_ptr_gray[1]_i_1__5_n_0 ),
        .Q(r_wr_ptr_gray[1]));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray[2]));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray[3]));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray[4]));
  FDCE \r_wr_ptr_gray_reg[5] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(\r_wr_ptr_gray[5]_i_1__1_n_0 ),
        .Q(r_wr_ptr_gray[5]));
  FDCE \r_wr_ptr_gray_reg[6] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_gray[6]));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
  initial assign \r_wr_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[5]),
        .Q(r_wr_ptr_gray_sync[5]));
  initial assign \r_wr_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[6]),
        .Q(r_wr_ptr_gray_sync[6]));
  LUT5 #(
    .INIT(32'hFFFEAAAA)) 
    ri_almost_full
       (.I0(r_wr_ptr_diff[6]),
        .I1(r_wr_ptr_diff[3]),
        .I2(r_wr_ptr_diff[2]),
        .I3(r_wr_ptr_diff[4]),
        .I4(r_wr_ptr_diff[5]),
        .O(ri_almost_full__0));
endmodule

(* ORIG_REF_NAME = "async_fifo" *) 
module async_fifo__parameterized1__hierPathDup__3
   (in00,
    out,
    o_almost_empty,
    i_wr_clk,
    \r_wr_ptr_diff_reg[2]_0 ,
    \r_rd_ptr_bin_reg[6]_0 ,
    \r_rd_ptr_diff_reg[0]_0 ,
    r_rd_enable,
    r_wr_enable,
    Q);
  output [8:0]in00;
  output out;
  output o_almost_empty;
  input i_wr_clk;
  input \r_wr_ptr_diff_reg[2]_0 ;
  input \r_rd_ptr_bin_reg[6]_0 ;
  input \r_rd_ptr_diff_reg[0]_0 ;
  input r_rd_enable;
  input r_wr_enable;
  input [8:0]Q;

  wire [8:0]Q;
  wire i_wr_clk;
  (* RTL_KEEP = "true" *) wire [8:0]in00;
  (* RTL_KEEP = "true" *) wire o_almost_empty;
  (* RTL_KEEP = "true" *) wire out;
  wire r_almost_empty_i_3_n_0;
  (* RTL_KEEP = "true" *) wire r_empty;
  wire r_empty_i_2__9_n_0;
  wire r_empty_i_3__8_n_0;
  wire r_empty_i_4__13_n_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_full_i_2__5_n_0;
  wire r_full_i_3__4_n_0;
  wire r_ram_reg_0_63_0_2_i_1__2_n_0;
  wire r_rd_enable;
  wire [6:0]r_rd_ptr_bin_reg;
  wire \r_rd_ptr_bin_reg[6]_0 ;
  wire [5:0]r_rd_ptr_bin_reg_rep;
  wire \r_rd_ptr_bin_rep[0]_i_1__6_n_0 ;
  wire \r_rd_ptr_bin_rep[1]_i_1__6_n_0 ;
  wire \r_rd_ptr_bin_rep[2]_i_1__6_n_0 ;
  wire \r_rd_ptr_bin_rep[3]_i_1__6_n_0 ;
  wire \r_rd_ptr_bin_rep[4]_i_1__2_n_0 ;
  wire \r_rd_ptr_bin_rep[5]_i_2__1_n_0 ;
  wire [6:0]r_rd_ptr_diff;
  wire [6:0]r_rd_ptr_diff0;
  wire r_rd_ptr_diff0_carry__0_i_1__1_n_0;
  wire r_rd_ptr_diff0_carry__0_i_2__1_n_0;
  wire r_rd_ptr_diff0_carry__0_i_3__1_n_0;
  wire r_rd_ptr_diff0_carry__0_i_4__1_n_0;
  wire r_rd_ptr_diff0_carry__0_i_5__2_n_0;
  wire r_rd_ptr_diff0_carry_i_10__1_n_0;
  wire r_rd_ptr_diff0_carry_i_1__1_n_0;
  wire r_rd_ptr_diff0_carry_i_2__1_n_0;
  wire r_rd_ptr_diff0_carry_i_3__1_n_0;
  wire r_rd_ptr_diff0_carry_i_4__1_n_0;
  wire r_rd_ptr_diff0_carry_i_5__1_n_0;
  wire r_rd_ptr_diff0_carry_i_6__1_n_0;
  wire r_rd_ptr_diff0_carry_i_7__1_n_0;
  wire r_rd_ptr_diff0_carry_i_8_n_0;
  wire r_rd_ptr_diff0_carry_n_0;
  wire \r_rd_ptr_diff_reg[0]_0 ;
  wire [6:0]r_rd_ptr_gray;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_rd_ptr_gray_sync;
  wire r_wr_enable;
  wire [5:0]r_wr_ptr_bin_reg;
  wire [6:6]r_wr_ptr_bin_reg__0;
  wire [6:2]r_wr_ptr_diff;
  wire [6:2]r_wr_ptr_diff0;
  wire r_wr_ptr_diff0_carry__0_i_1__2_n_0;
  wire r_wr_ptr_diff0_carry__0_i_2__2_n_0;
  wire r_wr_ptr_diff0_carry__0_i_3__2_n_0;
  wire r_wr_ptr_diff0_carry__0_i_4__2_n_0;
  wire r_wr_ptr_diff0_carry__0_i_5__2_n_0;
  wire r_wr_ptr_diff0_carry_i_10__0_n_0;
  wire r_wr_ptr_diff0_carry_i_11__0_n_0;
  wire r_wr_ptr_diff0_carry_i_12__0_n_0;
  wire r_wr_ptr_diff0_carry_i_1__2_n_0;
  wire r_wr_ptr_diff0_carry_i_2__2_n_0;
  wire r_wr_ptr_diff0_carry_i_3__2_n_0;
  wire r_wr_ptr_diff0_carry_i_4__2_n_0;
  wire r_wr_ptr_diff0_carry_i_5__2_n_0;
  wire r_wr_ptr_diff0_carry_i_6__2_n_0;
  wire r_wr_ptr_diff0_carry_i_7__2_n_0;
  wire r_wr_ptr_diff0_carry_i_8__0_n_0;
  wire r_wr_ptr_diff0_carry_i_9__2_n_0;
  wire r_wr_ptr_diff0_carry_n_0;
  wire \r_wr_ptr_diff_reg[2]_0 ;
  wire [6:0]r_wr_ptr_gray;
  wire \r_wr_ptr_gray[6]_i_2__0_n_0 ;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_meta;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [6:0]r_wr_ptr_gray_sync;
  wire ri_almost_empty;
  wire ri_almost_full__0;
  wire ri_empty;
  wire ri_full;
  wire [6:5]ri_rd_ptr_bin;
  wire [5:0]ri_rd_ptr_gray;
  wire [6:6]ri_wr_ptr_bin;
  wire [5:0]ri_wr_ptr_bin__0;
  wire [5:0]ri_wr_ptr_gray;
  wire wr_ptr_bin_sync0;
  wire NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED;
  wire [2:0]NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED;
  wire [3:0]NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED;
  wire [2:0]NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED;
  wire [1:0]NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED;
  wire [3:0]NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED;
  wire [3:3]NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED;

  LUT3 #(
    .INIT(8'h02)) 
    r_almost_empty_i_1
       (.I0(r_almost_empty_i_3_n_0),
        .I1(r_rd_ptr_diff[6]),
        .I2(r_rd_ptr_diff[5]),
        .O(ri_almost_empty));
  LUT5 #(
    .INIT(32'h1FFFFFFF)) 
    r_almost_empty_i_3
       (.I0(r_rd_ptr_diff[0]),
        .I1(r_rd_ptr_diff[1]),
        .I2(r_rd_ptr_diff[3]),
        .I3(r_rd_ptr_diff[4]),
        .I4(r_rd_ptr_diff[2]),
        .O(r_almost_empty_i_3_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_almost_empty_reg
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .D(ri_almost_empty),
        .PRE(\r_rd_ptr_diff_reg[0]_0 ),
        .Q(o_almost_empty));
  FDCE r_almost_full_reg
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_almost_full__0),
        .Q(out));
  LUT6 #(
    .INIT(64'h0000000000009009)) 
    r_empty_i_1__9
       (.I0(ri_rd_ptr_bin[6]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(ri_rd_ptr_gray[3]),
        .I3(r_wr_ptr_gray_sync[3]),
        .I4(r_empty_i_2__9_n_0),
        .I5(r_empty_i_3__8_n_0),
        .O(ri_empty));
  LUT6 #(
    .INIT(64'hEDEE7BD7B7BBDE7D)) 
    r_empty_i_2__9
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_rd_ptr_bin_reg[6]),
        .I2(r_rd_ptr_bin_reg[4]),
        .I3(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I4(r_rd_ptr_bin_reg[5]),
        .I5(r_wr_ptr_gray_sync[5]),
        .O(r_empty_i_2__9_n_0));
  LUT6 #(
    .INIT(64'hFFFF6FF66FF6FFFF)) 
    r_empty_i_3__8
       (.I0(ri_rd_ptr_gray[2]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(ri_rd_ptr_gray[1]),
        .I4(r_wr_ptr_gray_sync[0]),
        .I5(r_empty_i_4__13_n_0),
        .O(r_empty_i_3__8_n_0));
  LUT4 #(
    .INIT(16'hAA65)) 
    r_empty_i_4__13
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_empty),
        .I2(r_rd_enable),
        .I3(r_rd_ptr_bin_reg[0]),
        .O(r_empty_i_4__13_n_0));
  FDPE #(
    .INIT(1'b1)) 
    r_empty_reg
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(\r_rd_ptr_diff_reg[0]_0 ),
        .Q(r_empty));
  LUT6 #(
    .INIT(64'h6006000000000000)) 
    r_full_i_1__16
       (.I0(ri_wr_ptr_bin),
        .I1(r_rd_ptr_gray_sync[6]),
        .I2(ri_wr_ptr_gray[3]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_full_i_2__5_n_0),
        .I5(r_full_i_3__4_n_0),
        .O(ri_full));
  LUT6 #(
    .INIT(64'h4842428112181824)) 
    r_full_i_2__5
       (.I0(r_rd_ptr_gray_sync[4]),
        .I1(r_wr_ptr_bin_reg__0),
        .I2(r_wr_ptr_bin_reg[5]),
        .I3(\r_wr_ptr_gray[6]_i_2__0_n_0 ),
        .I4(r_wr_ptr_bin_reg[4]),
        .I5(r_rd_ptr_gray_sync[5]),
        .O(r_full_i_2__5_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    r_full_i_3__4
       (.I0(ri_wr_ptr_gray[0]),
        .I1(r_rd_ptr_gray_sync[0]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(ri_wr_ptr_gray[2]),
        .I4(r_rd_ptr_gray_sync[1]),
        .I5(ri_wr_ptr_gray[1]),
        .O(r_full_i_3__4_n_0));
  FDCE #(
    .INIT(1'b0)) 
    r_full_reg
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_rx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_0_2" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M_HD275 r_ram_reg_0_63_0_2
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[0]),
        .DIB(Q[1]),
        .DIC(Q[2]),
        .DID(1'b0),
        .DOA(in00[0]),
        .DOB(in00[1]),
        .DOC(in00[2]),
        .DOD(NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(i_wr_clk),
        .WE(r_ram_reg_0_63_0_2_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_63_0_2_i_1__2
       (.I0(r_wr_enable),
        .I1(r_full),
        .O(r_ram_reg_0_63_0_2_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_rx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_3_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M_HD276 r_ram_reg_0_63_3_5
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[3]),
        .DIB(Q[4]),
        .DIC(Q[5]),
        .DID(1'b0),
        .DOA(in00[3]),
        .DOB(in00[4]),
        .DOC(in00[5]),
        .DOD(NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(i_wr_clk),
        .WE(r_ram_reg_0_63_0_2_i_1__2_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "576" *) 
  (* RTL_RAM_NAME = "inst_rx_packet_buffer/inst_async_fifo/r_ram_reg_0_63_6_8" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "8" *) 
  RAM64M_HD277 r_ram_reg_0_63_6_8
       (.ADDRA(r_rd_ptr_bin_reg_rep),
        .ADDRB(r_rd_ptr_bin_reg_rep),
        .ADDRC(r_rd_ptr_bin_reg_rep),
        .ADDRD(r_wr_ptr_bin_reg),
        .DIA(Q[6]),
        .DIB(Q[7]),
        .DIC(Q[8]),
        .DID(1'b0),
        .DOA(in00[6]),
        .DOB(in00[7]),
        .DOC(in00[8]),
        .DOD(NLW_r_ram_reg_0_63_6_8_DOD_UNCONNECTED),
        .WCLK(i_wr_clk),
        .WE(r_ram_reg_0_63_0_2_i_1__2_n_0));
  FDCE \r_rd_ptr_bin_reg[0] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[0]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg[0]));
  FDCE \r_rd_ptr_bin_reg[1] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[1]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg[1]));
  FDCE \r_rd_ptr_bin_reg[2] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[2]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg[2]));
  FDCE \r_rd_ptr_bin_reg[3] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[3]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg[3]));
  FDCE \r_rd_ptr_bin_reg[4] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[4]_i_1__2_n_0 ),
        .Q(r_rd_ptr_bin_reg[4]));
  FDCE \r_rd_ptr_bin_reg[5] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg[5]));
  FDCE \r_rd_ptr_bin_reg[6] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_bin_reg[6]));
  FDCE \r_rd_ptr_bin_reg_rep[0] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[0]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg_rep[0]));
  FDCE \r_rd_ptr_bin_reg_rep[1] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[1]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg_rep[1]));
  FDCE \r_rd_ptr_bin_reg_rep[2] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[2]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg_rep[2]));
  FDCE \r_rd_ptr_bin_reg_rep[3] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[3]_i_1__6_n_0 ),
        .Q(r_rd_ptr_bin_reg_rep[3]));
  FDCE \r_rd_ptr_bin_reg_rep[4] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(\r_rd_ptr_bin_rep[4]_i_1__2_n_0 ),
        .Q(r_rd_ptr_bin_reg_rep[4]));
  FDCE \r_rd_ptr_bin_reg_rep[5] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[5]),
        .Q(r_rd_ptr_bin_reg_rep[5]));
  LUT3 #(
    .INIT(8'hA6)) 
    \r_rd_ptr_bin_rep[0]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .O(\r_rd_ptr_bin_rep[0]_i_1__6_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_bin_rep[1]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[1]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(r_empty),
        .I3(r_rd_enable),
        .O(\r_rd_ptr_bin_rep[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hAA6AAAAA)) 
    \r_rd_ptr_bin_rep[2]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[1]),
        .I2(r_rd_enable),
        .I3(r_empty),
        .I4(r_rd_ptr_bin_reg[0]),
        .O(\r_rd_ptr_bin_rep[2]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_bin_rep[3]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[2]),
        .I2(r_rd_ptr_bin_reg[0]),
        .I3(r_empty),
        .I4(r_rd_enable),
        .I5(r_rd_ptr_bin_reg[1]),
        .O(\r_rd_ptr_bin_rep[3]_i_1__6_n_0 ));
  LUT2 #(
    .INIT(4'h9)) 
    \r_rd_ptr_bin_rep[4]_i_1__2 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .O(\r_rd_ptr_bin_rep[4]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_bin_rep[5]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_bin[5]));
  LUT6 #(
    .INIT(64'hF7FFFFFFFFFFFFFF)) 
    \r_rd_ptr_bin_rep[5]_i_2__1 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(r_empty),
        .I3(r_rd_enable),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[3]),
        .O(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_rd_ptr_diff0_carry_n_0,NLW_r_rd_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b1),
        .DI({r_rd_ptr_diff0_carry_i_1__1_n_0,r_rd_ptr_diff0_carry_i_2__1_n_0,r_rd_ptr_diff0_carry_i_3__1_n_0,r_rd_ptr_diff0_carry_i_4__1_n_0}),
        .O(r_rd_ptr_diff0[3:0]),
        .S({r_rd_ptr_diff0_carry_i_5__1_n_0,r_rd_ptr_diff0_carry_i_6__1_n_0,r_rd_ptr_diff0_carry_i_7__1_n_0,r_rd_ptr_diff0_carry_i_8_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_rd_ptr_diff0_carry__0
       (.CI(r_rd_ptr_diff0_carry_n_0),
        .CO(NLW_r_rd_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_rd_ptr_diff0_carry__0_i_1__1_n_0,r_rd_ptr_diff0_carry__0_i_2__1_n_0}),
        .O({NLW_r_rd_ptr_diff0_carry__0_O_UNCONNECTED[3],r_rd_ptr_diff0[6:4]}),
        .S({1'b0,r_rd_ptr_diff0_carry__0_i_3__1_n_0,r_rd_ptr_diff0_carry__0_i_4__1_n_0,r_rd_ptr_diff0_carry__0_i_5__2_n_0}));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry__0_i_1__1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(r_rd_ptr_diff0_carry__0_i_1__1_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry__0_i_2__1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .I2(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry__0_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h9)) 
    r_rd_ptr_diff0_carry__0_i_3__1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(ri_rd_ptr_bin[6]),
        .O(r_rd_ptr_diff0_carry__0_i_3__1_n_0));
  LUT5 #(
    .INIT(32'h659A9A65)) 
    r_rd_ptr_diff0_carry__0_i_4__1
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_4__1_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry__0_i_5__2
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I2(r_wr_ptr_gray_sync[4]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(r_wr_ptr_gray_sync[6]),
        .O(r_rd_ptr_diff0_carry__0_i_5__2_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_rd_ptr_diff0_carry_i_10__1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .I2(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_10__1_n_0));
  LUT4 #(
    .INIT(16'h6996)) 
    r_rd_ptr_diff0_carry_i_1__1
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[3]),
        .I3(r_wr_ptr_gray_sync[4]),
        .O(r_rd_ptr_diff0_carry_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_rd_ptr_diff0_carry_i_2__1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[5]),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(r_wr_ptr_gray_sync[3]),
        .O(r_rd_ptr_diff0_carry_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_rd_ptr_diff0_carry_i_3__1
       (.I0(r_wr_ptr_gray_sync[5]),
        .I1(r_wr_ptr_gray_sync[6]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(r_wr_ptr_gray_sync[2]),
        .I4(r_wr_ptr_gray_sync[4]),
        .I5(r_wr_ptr_gray_sync[3]),
        .O(r_rd_ptr_diff0_carry_i_3__1_n_0));
  LUT3 #(
    .INIT(8'h4B)) 
    r_rd_ptr_diff0_carry_i_4__1
       (.I0(r_empty),
        .I1(r_rd_enable),
        .I2(r_rd_ptr_bin_reg[0]),
        .O(r_rd_ptr_diff0_carry_i_4__1_n_0));
  LUT5 #(
    .INIT(32'h69969669)) 
    r_rd_ptr_diff0_carry_i_5__1
       (.I0(r_wr_ptr_gray_sync[4]),
        .I1(r_wr_ptr_gray_sync[3]),
        .I2(r_wr_ptr_gray_sync[6]),
        .I3(r_wr_ptr_gray_sync[5]),
        .I4(\r_rd_ptr_bin_rep[3]_i_1__6_n_0 ),
        .O(r_rd_ptr_diff0_carry_i_5__1_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_6__1
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_wr_ptr_gray_sync[5]),
        .I3(r_wr_ptr_gray_sync[4]),
        .I4(r_wr_ptr_gray_sync[6]),
        .I5(\r_rd_ptr_bin_rep[2]_i_1__6_n_0 ),
        .O(r_rd_ptr_diff0_carry_i_6__1_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_rd_ptr_diff0_carry_i_7__1
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[4]),
        .I2(r_wr_ptr_gray_sync[2]),
        .I3(r_wr_ptr_gray_sync[1]),
        .I4(wr_ptr_bin_sync0),
        .I5(\r_rd_ptr_bin_rep[1]_i_1__6_n_0 ),
        .O(r_rd_ptr_diff0_carry_i_7__1_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_rd_ptr_diff0_carry_i_8
       (.I0(r_wr_ptr_gray_sync[3]),
        .I1(r_wr_ptr_gray_sync[2]),
        .I2(r_wr_ptr_gray_sync[1]),
        .I3(r_wr_ptr_gray_sync[0]),
        .I4(r_rd_ptr_diff0_carry_i_10__1_n_0),
        .I5(r_rd_ptr_diff0_carry_i_4__1_n_0),
        .O(r_rd_ptr_diff0_carry_i_8_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    r_rd_ptr_diff0_carry_i_9__1
       (.I0(r_wr_ptr_gray_sync[6]),
        .I1(r_wr_ptr_gray_sync[5]),
        .O(wr_ptr_bin_sync0));
  FDCE \r_rd_ptr_diff_reg[0] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[0]),
        .Q(r_rd_ptr_diff[0]));
  FDCE \r_rd_ptr_diff_reg[1] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[1]),
        .Q(r_rd_ptr_diff[1]));
  FDCE \r_rd_ptr_diff_reg[2] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[2]),
        .Q(r_rd_ptr_diff[2]));
  FDCE \r_rd_ptr_diff_reg[3] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[3]),
        .Q(r_rd_ptr_diff[3]));
  FDCE \r_rd_ptr_diff_reg[4] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[4]),
        .Q(r_rd_ptr_diff[4]));
  FDCE \r_rd_ptr_diff_reg[5] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[5]),
        .Q(r_rd_ptr_diff[5]));
  FDCE \r_rd_ptr_diff_reg[6] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_rd_ptr_diff0[6]),
        .Q(r_rd_ptr_diff[6]));
  LUT4 #(
    .INIT(16'h51AE)) 
    \r_rd_ptr_gray[0]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[0]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h5555A6AA)) 
    \r_rd_ptr_gray[1]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[2]),
        .I1(r_rd_enable),
        .I2(r_empty),
        .I3(r_rd_ptr_bin_reg[0]),
        .I4(r_rd_ptr_bin_reg[1]),
        .O(ri_rd_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h55555555A6AAAAAA)) 
    \r_rd_ptr_gray[2]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[3]),
        .I1(r_rd_ptr_bin_reg[0]),
        .I2(r_empty),
        .I3(r_rd_enable),
        .I4(r_rd_ptr_bin_reg[1]),
        .I5(r_rd_ptr_bin_reg[2]),
        .O(ri_rd_ptr_gray[2]));
  LUT3 #(
    .INIT(8'h69)) 
    \r_rd_ptr_gray[3]_i_1__6 
       (.I0(r_rd_ptr_bin_reg[4]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I2(\r_rd_ptr_bin_rep[3]_i_1__6_n_0 ),
        .O(ri_rd_ptr_gray[3]));
  LUT3 #(
    .INIT(8'h59)) 
    \r_rd_ptr_gray[4]_i_1__3 
       (.I0(r_rd_ptr_bin_reg[5]),
        .I1(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I2(r_rd_ptr_bin_reg[4]),
        .O(ri_rd_ptr_gray[4]));
  LUT4 #(
    .INIT(16'h55A6)) 
    \r_rd_ptr_gray[5]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[6]),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I3(r_rd_ptr_bin_reg[5]),
        .O(ri_rd_ptr_gray[5]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_gray[6]_i_1__1 
       (.I0(r_rd_ptr_bin_reg[6]),
        .I1(r_rd_ptr_bin_reg[4]),
        .I2(\r_rd_ptr_bin_rep[5]_i_2__1_n_0 ),
        .I3(r_rd_ptr_bin_reg[5]),
        .O(ri_rd_ptr_bin[6]));
  initial assign \r_rd_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray_meta[0]));
  initial assign \r_rd_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray_meta[1]));
  initial assign \r_rd_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray_meta[2]));
  initial assign \r_rd_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray_meta[3]));
  initial assign \r_rd_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray_meta[4]));
  initial assign \r_rd_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray_meta[5]));
  initial assign \r_rd_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_meta_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray[6]),
        .Q(r_rd_ptr_gray_meta[6]));
  FDCE \r_rd_ptr_gray_reg[0] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[0]),
        .Q(r_rd_ptr_gray[0]));
  FDCE \r_rd_ptr_gray_reg[1] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[1]),
        .Q(r_rd_ptr_gray[1]));
  FDCE \r_rd_ptr_gray_reg[2] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[2]),
        .Q(r_rd_ptr_gray[2]));
  FDCE \r_rd_ptr_gray_reg[3] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[3]),
        .Q(r_rd_ptr_gray[3]));
  FDCE \r_rd_ptr_gray_reg[4] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[4]),
        .Q(r_rd_ptr_gray[4]));
  FDCE \r_rd_ptr_gray_reg[5] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_gray[5]),
        .Q(r_rd_ptr_gray[5]));
  FDCE \r_rd_ptr_gray_reg[6] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(ri_rd_ptr_bin[6]),
        .Q(r_rd_ptr_gray[6]));
  initial assign \r_rd_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[0]),
        .Q(r_rd_ptr_gray_sync[0]));
  initial assign \r_rd_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[1]),
        .Q(r_rd_ptr_gray_sync[1]));
  initial assign \r_rd_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[2]),
        .Q(r_rd_ptr_gray_sync[2]));
  initial assign \r_rd_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[3]),
        .Q(r_rd_ptr_gray_sync[3]));
  initial assign \r_rd_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[4]),
        .Q(r_rd_ptr_gray_sync[4]));
  initial assign \r_rd_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[5]),
        .Q(r_rd_ptr_gray_sync[5]));
  initial assign \r_rd_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_rd_ptr_gray_sync_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_rd_ptr_gray_meta[6]),
        .Q(r_rd_ptr_gray_sync[6]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr_bin[0]_i_1__4 
       (.I0(r_wr_ptr_bin_reg[0]),
        .I1(r_full),
        .I2(r_wr_enable),
        .O(ri_wr_ptr_bin__0[0]));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_wr_ptr_bin[1]_i_1__5 
       (.I0(r_wr_ptr_bin_reg[0]),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_bin__0[1]));
  LUT5 #(
    .INIT(32'hBFFF4000)) 
    \r_wr_ptr_bin[2]_i_1__3 
       (.I0(r_full),
        .I1(r_wr_enable),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_ptr_bin_reg[1]),
        .I4(r_wr_ptr_bin_reg[2]),
        .O(ri_wr_ptr_bin__0[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_wr_ptr_bin[3]_i_1__4 
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_wr_ptr_bin_reg[0]),
        .I2(r_wr_enable),
        .I3(r_full),
        .I4(r_wr_ptr_bin_reg[2]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(ri_wr_ptr_bin__0[3]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr_bin[4]_i_1__1 
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_ram_reg_0_63_0_2_i_1__2_n_0),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_ptr_bin_reg[1]),
        .I4(r_wr_ptr_bin_reg[3]),
        .I5(r_wr_ptr_bin_reg[4]),
        .O(ri_wr_ptr_bin__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_wr_ptr_bin[5]_i_1__2 
       (.I0(\r_wr_ptr_gray[6]_i_2__0_n_0 ),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(r_wr_ptr_bin_reg[5]),
        .O(ri_wr_ptr_bin__0[5]));
  FDCE \r_wr_ptr_bin_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[0]),
        .Q(r_wr_ptr_bin_reg[0]));
  FDCE \r_wr_ptr_bin_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[1]),
        .Q(r_wr_ptr_bin_reg[1]));
  FDCE \r_wr_ptr_bin_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[2]),
        .Q(r_wr_ptr_bin_reg[2]));
  FDCE \r_wr_ptr_bin_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[3]),
        .Q(r_wr_ptr_bin_reg[3]));
  FDCE \r_wr_ptr_bin_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[4]),
        .Q(r_wr_ptr_bin_reg[4]));
  FDCE \r_wr_ptr_bin_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin__0[5]),
        .Q(r_wr_ptr_bin_reg[5]));
  FDCE \r_wr_ptr_bin_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_bin_reg__0));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry
       (.CI(1'b0),
        .CO({r_wr_ptr_diff0_carry_n_0,NLW_r_wr_ptr_diff0_carry_CO_UNCONNECTED[2:0]}),
        .CYINIT(1'b0),
        .DI({r_wr_ptr_diff0_carry_i_1__2_n_0,r_wr_ptr_diff0_carry_i_2__2_n_0,r_wr_ptr_diff0_carry_i_3__2_n_0,r_wr_ptr_bin_reg[0]}),
        .O({r_wr_ptr_diff0[3:2],NLW_r_wr_ptr_diff0_carry_O_UNCONNECTED[1:0]}),
        .S({r_wr_ptr_diff0_carry_i_4__2_n_0,r_wr_ptr_diff0_carry_i_5__2_n_0,r_wr_ptr_diff0_carry_i_6__2_n_0,r_wr_ptr_diff0_carry_i_7__2_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 r_wr_ptr_diff0_carry__0
       (.CI(r_wr_ptr_diff0_carry_n_0),
        .CO(NLW_r_wr_ptr_diff0_carry__0_CO_UNCONNECTED[3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,r_wr_ptr_diff0_carry__0_i_1__2_n_0,r_wr_ptr_diff0_carry__0_i_2__2_n_0}),
        .O({NLW_r_wr_ptr_diff0_carry__0_O_UNCONNECTED[3],r_wr_ptr_diff0[6:4]}),
        .S({1'b0,r_wr_ptr_diff0_carry__0_i_3__2_n_0,r_wr_ptr_diff0_carry__0_i_4__2_n_0,r_wr_ptr_diff0_carry__0_i_5__2_n_0}));
  LUT4 #(
    .INIT(16'h2882)) 
    r_wr_ptr_diff0_carry__0_i_1__2
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_rd_ptr_gray_sync[6]),
        .O(r_wr_ptr_diff0_carry__0_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h82282882)) 
    r_wr_ptr_diff0_carry__0_i_2__2
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[3]),
        .I3(r_rd_ptr_gray_sync[6]),
        .I4(r_rd_ptr_gray_sync[5]),
        .O(r_wr_ptr_diff0_carry__0_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h748B)) 
    r_wr_ptr_diff0_carry__0_i_3__2
       (.I0(r_rd_ptr_gray_sync[5]),
        .I1(r_wr_ptr_bin_reg[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_wr_ptr_bin_reg__0),
        .O(r_wr_ptr_diff0_carry__0_i_3__2_n_0));
  LUT5 #(
    .INIT(32'h4774B88B)) 
    r_wr_ptr_diff0_carry__0_i_4__2
       (.I0(r_rd_ptr_gray_sync[4]),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_wr_ptr_bin_reg[5]),
        .O(r_wr_ptr_diff0_carry__0_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h744747748BB8B88B)) 
    r_wr_ptr_diff0_carry__0_i_5__2
       (.I0(r_rd_ptr_gray_sync[3]),
        .I1(r_wr_ptr_bin_reg[3]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[4]),
        .I4(r_rd_ptr_gray_sync[5]),
        .I5(r_wr_ptr_bin_reg[4]),
        .O(r_wr_ptr_diff0_carry__0_i_5__2_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    r_wr_ptr_diff0_carry_i_10__0
       (.I0(r_rd_ptr_gray_sync[5]),
        .I1(r_rd_ptr_gray_sync[6]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(r_rd_ptr_gray_sync[1]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_rd_ptr_gray_sync[3]),
        .O(r_wr_ptr_diff0_carry_i_10__0_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_wr_ptr_diff0_carry_i_11__0
       (.I0(r_rd_ptr_gray_sync[6]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[2]),
        .I3(r_rd_ptr_gray_sync[5]),
        .I4(r_rd_ptr_gray_sync[4]),
        .O(r_wr_ptr_diff0_carry_i_11__0_n_0));
  LUT5 #(
    .INIT(32'h96696996)) 
    r_wr_ptr_diff0_carry_i_12__0
       (.I0(r_wr_ptr_diff0_carry_i_9__2_n_0),
        .I1(r_rd_ptr_gray_sync[1]),
        .I2(r_rd_ptr_gray_sync[0]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_rd_ptr_gray_sync[2]),
        .O(r_wr_ptr_diff0_carry_i_12__0_n_0));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    r_wr_ptr_diff0_carry_i_1__2
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[5]),
        .I3(r_rd_ptr_gray_sync[2]),
        .I4(r_rd_ptr_gray_sync[3]),
        .I5(r_rd_ptr_gray_sync[6]),
        .O(r_wr_ptr_diff0_carry_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h2882822882282882)) 
    r_wr_ptr_diff0_carry_i_2__2
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_rd_ptr_gray_sync[3]),
        .I2(r_rd_ptr_gray_sync[4]),
        .I3(r_rd_ptr_gray_sync[1]),
        .I4(r_rd_ptr_gray_sync[2]),
        .I5(r_wr_ptr_diff0_carry_i_8__0_n_0),
        .O(r_wr_ptr_diff0_carry_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hBEEBEBBEEBBEBEEB)) 
    r_wr_ptr_diff0_carry_i_3__2
       (.I0(r_ram_reg_0_63_0_2_i_1__2_n_0),
        .I1(r_rd_ptr_gray_sync[2]),
        .I2(r_rd_ptr_gray_sync[3]),
        .I3(r_rd_ptr_gray_sync[0]),
        .I4(r_rd_ptr_gray_sync[1]),
        .I5(r_wr_ptr_diff0_carry_i_9__2_n_0),
        .O(r_wr_ptr_diff0_carry_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    r_wr_ptr_diff0_carry_i_4__2
       (.I0(r_wr_ptr_diff0_carry_i_1__2_n_0),
        .I1(r_rd_ptr_gray_sync[5]),
        .I2(r_rd_ptr_gray_sync[6]),
        .I3(r_rd_ptr_gray_sync[3]),
        .I4(r_rd_ptr_gray_sync[4]),
        .I5(r_wr_ptr_bin_reg[3]),
        .O(r_wr_ptr_diff0_carry_i_4__2_n_0));
  LUT4 #(
    .INIT(16'hB44B)) 
    r_wr_ptr_diff0_carry_i_5__2
       (.I0(r_wr_ptr_diff0_carry_i_10__0_n_0),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_diff0_carry_i_11__0_n_0),
        .I3(r_wr_ptr_bin_reg[2]),
        .O(r_wr_ptr_diff0_carry_i_5__2_n_0));
  LUT5 #(
    .INIT(32'hA25D5DA2)) 
    r_wr_ptr_diff0_carry_i_6__2
       (.I0(r_wr_ptr_diff0_carry_i_12__0_n_0),
        .I1(r_wr_enable),
        .I2(r_full),
        .I3(r_wr_ptr_diff0_carry_i_10__0_n_0),
        .I4(r_wr_ptr_bin_reg[1]),
        .O(r_wr_ptr_diff0_carry_i_6__2_n_0));
  LUT4 #(
    .INIT(16'h2DD2)) 
    r_wr_ptr_diff0_carry_i_7__2
       (.I0(r_wr_enable),
        .I1(r_full),
        .I2(r_wr_ptr_diff0_carry_i_12__0_n_0),
        .I3(r_wr_ptr_bin_reg[0]),
        .O(r_wr_ptr_diff0_carry_i_7__2_n_0));
  LUT2 #(
    .INIT(4'h6)) 
    r_wr_ptr_diff0_carry_i_8__0
       (.I0(r_rd_ptr_gray_sync[6]),
        .I1(r_rd_ptr_gray_sync[5]),
        .O(r_wr_ptr_diff0_carry_i_8__0_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    r_wr_ptr_diff0_carry_i_9__2
       (.I0(r_rd_ptr_gray_sync[6]),
        .I1(r_rd_ptr_gray_sync[4]),
        .I2(r_rd_ptr_gray_sync[5]),
        .O(r_wr_ptr_diff0_carry_i_9__2_n_0));
  FDCE \r_wr_ptr_diff_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[2]),
        .Q(r_wr_ptr_diff[2]));
  FDCE \r_wr_ptr_diff_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[3]),
        .Q(r_wr_ptr_diff[3]));
  FDCE \r_wr_ptr_diff_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[4]),
        .Q(r_wr_ptr_diff[4]));
  FDCE \r_wr_ptr_diff_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[5]),
        .Q(r_wr_ptr_diff[5]));
  FDCE \r_wr_ptr_diff_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(r_wr_ptr_diff0[6]),
        .Q(r_wr_ptr_diff[6]));
  LUT4 #(
    .INIT(16'h559A)) 
    \r_wr_ptr_gray[0]_i_1__4 
       (.I0(r_wr_ptr_bin_reg[1]),
        .I1(r_full),
        .I2(r_wr_enable),
        .I3(r_wr_ptr_bin_reg[0]),
        .O(ri_wr_ptr_gray[0]));
  LUT5 #(
    .INIT(32'h66665666)) 
    \r_wr_ptr_gray[1]_i_1__4 
       (.I0(r_wr_ptr_bin_reg[2]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_enable),
        .I4(r_full),
        .O(ri_wr_ptr_gray[1]));
  LUT6 #(
    .INIT(64'h6566666666666666)) 
    \r_wr_ptr_gray[2]_i_1__6 
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[2]),
        .I2(r_full),
        .I3(r_wr_enable),
        .I4(r_wr_ptr_bin_reg[0]),
        .I5(r_wr_ptr_bin_reg[1]),
        .O(ri_wr_ptr_gray[2]));
  LUT6 #(
    .INIT(64'h5666666666666666)) 
    \r_wr_ptr_gray[3]_i_1__3 
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(r_wr_ptr_bin_reg[3]),
        .I2(r_wr_ptr_bin_reg[1]),
        .I3(r_wr_ptr_bin_reg[0]),
        .I4(r_ram_reg_0_63_0_2_i_1__2_n_0),
        .I5(r_wr_ptr_bin_reg[2]),
        .O(ri_wr_ptr_gray[3]));
  (* SOFT_HLUTNM = "soft_lutpair436" *) 
  LUT3 #(
    .INIT(8'h56)) 
    \r_wr_ptr_gray[4]_i_1__6 
       (.I0(r_wr_ptr_bin_reg[5]),
        .I1(r_wr_ptr_bin_reg[4]),
        .I2(\r_wr_ptr_gray[6]_i_2__0_n_0 ),
        .O(ri_wr_ptr_gray[4]));
  LUT4 #(
    .INIT(16'h5666)) 
    \r_wr_ptr_gray[5]_i_1__0 
       (.I0(r_wr_ptr_bin_reg__0),
        .I1(r_wr_ptr_bin_reg[5]),
        .I2(\r_wr_ptr_gray[6]_i_2__0_n_0 ),
        .I3(r_wr_ptr_bin_reg[4]),
        .O(ri_wr_ptr_gray[5]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_wr_ptr_gray[6]_i_1__2 
       (.I0(r_wr_ptr_bin_reg[4]),
        .I1(\r_wr_ptr_gray[6]_i_2__0_n_0 ),
        .I2(r_wr_ptr_bin_reg[5]),
        .I3(r_wr_ptr_bin_reg__0),
        .O(ri_wr_ptr_bin));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    \r_wr_ptr_gray[6]_i_2__0 
       (.I0(r_wr_ptr_bin_reg[3]),
        .I1(r_wr_ptr_bin_reg[1]),
        .I2(r_wr_ptr_bin_reg[0]),
        .I3(r_wr_enable),
        .I4(r_full),
        .I5(r_wr_ptr_bin_reg[2]),
        .O(\r_wr_ptr_gray[6]_i_2__0_n_0 ));
  initial assign \r_wr_ptr_gray_meta_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[0] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray_meta[0]));
  initial assign \r_wr_ptr_gray_meta_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[1] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray_meta[1]));
  initial assign \r_wr_ptr_gray_meta_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[2] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray_meta[2]));
  initial assign \r_wr_ptr_gray_meta_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[3] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray_meta[3]));
  initial assign \r_wr_ptr_gray_meta_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[4] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray_meta[4]));
  initial assign \r_wr_ptr_gray_meta_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[5] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[5]),
        .Q(r_wr_ptr_gray_meta[5]));
  initial assign \r_wr_ptr_gray_meta_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_meta_reg[6] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray[6]),
        .Q(r_wr_ptr_gray_meta[6]));
  FDCE \r_wr_ptr_gray_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[0]),
        .Q(r_wr_ptr_gray[0]));
  FDCE \r_wr_ptr_gray_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[1]),
        .Q(r_wr_ptr_gray[1]));
  FDCE \r_wr_ptr_gray_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[2]),
        .Q(r_wr_ptr_gray[2]));
  FDCE \r_wr_ptr_gray_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[3]),
        .Q(r_wr_ptr_gray[3]));
  FDCE \r_wr_ptr_gray_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[4]),
        .Q(r_wr_ptr_gray[4]));
  FDCE \r_wr_ptr_gray_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_gray[5]),
        .Q(r_wr_ptr_gray[5]));
  FDCE \r_wr_ptr_gray_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_wr_ptr_diff_reg[2]_0 ),
        .D(ri_wr_ptr_bin),
        .Q(r_wr_ptr_gray[6]));
  initial assign \r_wr_ptr_gray_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[0] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[0]),
        .Q(r_wr_ptr_gray_sync[0]));
  initial assign \r_wr_ptr_gray_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[1] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[1]),
        .Q(r_wr_ptr_gray_sync[1]));
  initial assign \r_wr_ptr_gray_sync_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[2] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[2]),
        .Q(r_wr_ptr_gray_sync[2]));
  initial assign \r_wr_ptr_gray_sync_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[3] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[3]),
        .Q(r_wr_ptr_gray_sync[3]));
  initial assign \r_wr_ptr_gray_sync_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[4] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[4]),
        .Q(r_wr_ptr_gray_sync[4]));
  initial assign \r_wr_ptr_gray_sync_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[5] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[5]),
        .Q(r_wr_ptr_gray_sync[5]));
  initial assign \r_wr_ptr_gray_sync_reg[6] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .XON("FALSE")) 
    \r_wr_ptr_gray_sync_reg[6] 
       (.C(\r_rd_ptr_bin_reg[6]_0 ),
        .CE(1'b1),
        .CLR(\r_rd_ptr_diff_reg[0]_0 ),
        .D(r_wr_ptr_gray_meta[6]),
        .Q(r_wr_ptr_gray_sync[6]));
  LUT5 #(
    .INIT(32'hFFFEAAAA)) 
    ri_almost_full
       (.I0(r_wr_ptr_diff[6]),
        .I1(r_wr_ptr_diff[3]),
        .I2(r_wr_ptr_diff[2]),
        .I3(r_wr_ptr_diff[4]),
        .I4(r_wr_ptr_diff[5]),
        .O(ri_almost_full__0));
endmodule

module async_reset
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [5:0]r_rst;
  wire \r_rst[5]_i_1_n_0 ;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[5];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[5]_i_1 
       (.I0(\r_rst_reg[0]_1 ),
        .O(\r_rst[5]_i_1_n_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[5]_i_1_n_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[5]_i_1_n_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  initial assign \r_rst_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[2] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[5]_i_1_n_0 ),
        .D(r_rst[1]),
        .Q(r_rst[2]));
  initial assign \r_rst_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[3] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[5]_i_1_n_0 ),
        .D(r_rst[2]),
        .Q(r_rst[3]));
  initial assign \r_rst_reg[4] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[4] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[5]_i_1_n_0 ),
        .D(r_rst[3]),
        .Q(r_rst[4]));
  initial assign \r_rst_reg[5] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[5] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[5]_i_1_n_0 ),
        .D(r_rst[4]),
        .Q(r_rst[5]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized0
   (\r_rst_reg[3]_0 ,
    out);
  output \r_rst_reg[3]_0 ;
  input out;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [3:0]r_rst;
  wire \r_rst_reg[3]_0 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__9 
       (.I0(r_rst[3]),
        .O(\r_rst_reg[3]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(1'b1),
        .Q(r_rst[0]),
        .R(1'b0));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .D(r_rst[0]),
        .Q(r_rst[1]),
        .R(1'b0));
  initial assign \r_rst_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(r_rst[1]),
        .Q(r_rst[2]),
        .R(1'b0));
  initial assign \r_rst_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(r_rst[2]),
        .Q(r_rst[3]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized0_22
   (\r_rst_reg[3]_0 ,
    out,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[3]_0 ;
  input out;
  input \r_rst_reg[0]_0 ;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [3:0]r_rst;
  wire \r_rst[3]_i_1_n_0 ;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[3]_0 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__4 
       (.I0(r_rst[3]),
        .O(\r_rst_reg[3]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[3]_i_1 
       (.I0(\r_rst_reg[0]_0 ),
        .O(\r_rst[3]_i_1_n_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  initial assign \r_rst_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[2] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(r_rst[1]),
        .Q(r_rst[2]));
  initial assign \r_rst_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[3] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(r_rst[2]),
        .Q(r_rst[3]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized0__hierPathDup__1
   (out,
    CLK,
    \r_rst_reg[0]_0 );
  output out;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [3:0]r_rst;
  wire \r_rst[3]_i_1_n_0 ;
  wire \r_rst_reg[0]_0 ;

  assign out = r_rst[3];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[3]_i_1 
       (.I0(\r_rst_reg[0]_0 ),
        .O(\r_rst[3]_i_1_n_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  initial assign \r_rst_reg[2] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(r_rst[1]),
        .Q(r_rst[2]));
  initial assign \r_rst_reg[3] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst[3]_i_1_n_0 ),
        .D(r_rst[2]),
        .Q(r_rst[3]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1
   (\r_rst_reg[1]_0 ,
    CLK,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_bin_rep[5]_i_2__2 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_1
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[1]_2 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[1]_1 ;
  input \r_rst_reg[1]_2 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire \r_rst_reg[1]_2 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_wr_ptr_gray[6]_i_2__1 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_11
   (out,
    \r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 ,
    CLK);
  output out;
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;
  input CLK;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__5 
       (.I0(\r_rst_reg[0]_0 ),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_12
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[1]_2 ,
    o_clk_200);
  output \r_rst_reg[1]_0 ;
  output \r_rst_reg[1]_1 ;
  input \r_rst_reg[1]_2 ;
  input o_clk_200;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire \r_rst_reg[1]_2 ;

  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__7 
       (.I0(\r_rst_reg[1]_2 ),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_wr_addr[3]_i_2__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_13
   (\r_rst_reg[1]_0 ,
    out,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input out;
  input \r_rst_reg[0]_0 ;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__8 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_14
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[1]_2 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[1]_1 ;
  input \r_rst_reg[1]_2 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire \r_rst_reg[1]_2 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[13]_i_2__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_15
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[1]_1 ;
  input \r_rst_reg[0]_0 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[16]_i_3__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_16
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[1]_2 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[1]_1 ;
  input \r_rst_reg[1]_2 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire \r_rst_reg[1]_2 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_rep[3]_i_2__2 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_17
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[1]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_proc_state[6]_i_3__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_2
   (\r_rst_reg[1]_0 ,
    out,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input out;
  input \r_rst_reg[1]_1 ;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_almost_empty_i_2__1
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_23
   (\r_rst_reg[1]_0 ,
    CLK,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_almost_empty_i_2
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_24
   (\r_rst_reg[1]_0 ,
    out,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input out;
  input \r_rst_reg[1]_1 ;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_almost_full_i_1
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_25
   (\r_rst_reg[1]_0 ,
    out,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input out;
  input \r_rst_reg[1]_1 ;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_almost_empty_i_2__0
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_26
   (\r_rst_reg[1]_0 ,
    i_wr_clk,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input i_wr_clk;
  input \r_rst_reg[1]_1 ;

  wire i_wr_clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_almost_full_i_1__0
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_3
   (\r_rst_reg[1]_0 ,
    i_wr_clk,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input i_wr_clk;
  input \r_rst_reg[1]_1 ;

  wire i_wr_clk;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_almost_full_i_1__1
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_37
   (\r_rst_reg[1]_0 ,
    CLK,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input CLK;
  input \r_rst_reg[1]_1 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_sync[1]_i_1 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_38
   (\r_rst_reg[1]_0 ,
    i_clk_200,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input i_clk_200;
  input \r_rst_reg[1]_1 ;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__1 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_4
   (\r_rst_reg[1]_0 ,
    CLK,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input CLK;
  input \r_rst_reg[1]_1 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_sync[1]_i_1__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_44
   (\r_rst_reg[1]_0 ,
    CLK,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_start_i_1
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_45
   (\r_rst_reg[1]_0 ,
    i_clk_200,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input i_clk_200;
  input \r_rst_reg[1]_1 ;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[9]_i_3__1 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_46
   (\r_rst_reg[1]_0 ,
    i_clk_200,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input i_clk_200;
  input \r_rst_reg[0]_0 ;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[14]_i_3 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_49
   (out,
    \r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 ,
    CLK);
  output out;
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;
  input CLK;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__0 
       (.I0(\r_rst_reg[0]_0 ),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_5
   (\r_rst_reg[1]_0 ,
    o_clk_200,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input o_clk_200;
  input \r_rst_reg[1]_1 ;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__6 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_50
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[1]_2 ,
    i_clk_200);
  output \r_rst_reg[1]_0 ;
  output \r_rst_reg[1]_1 ;
  input \r_rst_reg[1]_2 ;
  input i_clk_200;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire \r_rst_reg[1]_2 ;

  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__2 
       (.I0(\r_rst_reg[1]_2 ),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_wr_addr[3]_i_2 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_1 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_52
   (\r_rst_reg[1]_0 ,
    out,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input out;
  input \r_rst_reg[0]_0 ;

  wire out;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__3 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_53
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[1]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[13]_i_2 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_54
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;
  wire \r_rst_reg[1]_0 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[16]_i_3 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_55
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[1]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_ptr_rep[3]_i_2__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_56
   (\r_rst_reg[1]_0 ,
    \r_rst_reg[1]_1 ,
    \r_rst_reg[1]_2 );
  output \r_rst_reg[1]_0 ;
  input \r_rst_reg[1]_1 ;
  input \r_rst_reg[1]_2 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire \r_rst_reg[1]_2 ;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_proc_state[6]_i_3 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_1 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_2 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_6
   (\r_rst_reg[1]_0 ,
    CLK,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_start_i_1__0
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_7
   (\r_rst_reg[1]_0 ,
    o_clk_200,
    \r_rst_reg[1]_1 );
  output \r_rst_reg[1]_0 ;
  input o_clk_200;
  input \r_rst_reg[1]_1 ;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[9]_i_3__3 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1_8
   (\r_rst_reg[1]_0 ,
    o_clk_200,
    \r_rst_reg[0]_0 );
  output \r_rst_reg[1]_0 ;
  input o_clk_200;
  input \r_rst_reg[0]_0 ;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[14]_i_3__0 
       (.I0(r_rst[1]),
        .O(\r_rst_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__1
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__10
   (out,
    i_clk_200,
    \r_rst_reg[1]_0 );
  output out;
  input i_clk_200;
  input \r_rst_reg[1]_0 ;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__11
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__12
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__13
   (out,
    \r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 );
  output out;
  input \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__14
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__15
   (out,
    o_clk_120,
    \r_rst_reg[1]_0 );
  output out;
  input o_clk_120;
  input \r_rst_reg[1]_0 ;

  wire o_clk_120;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_120),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_120),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__16
   (out,
    o_clk_200,
    \r_rst_reg[1]_0 );
  output out;
  input o_clk_200;
  input \r_rst_reg[1]_0 ;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__2
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[1]_0 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[1]_0 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__3
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst[1]_i_1_n_0 ;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[1];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1 
       (.I0(\r_rst_reg[0]_1 ),
        .O(\r_rst[1]_i_1_n_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[1]_i_1_n_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst[1]_i_1_n_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__4
   (out,
    \r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 );
  output out;
  input \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__5
   (out,
    \r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 );
  output out;
  input \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__6
   (out,
    \r_rst_reg[0]_0 ,
    \r_rst_reg[0]_1 );
  output out;
  input \r_rst_reg[0]_0 ;
  input \r_rst_reg[0]_1 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[0]_1 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_1 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__7
   (out,
    \r_rst_reg[1]_0 ,
    \r_rst_reg[0]_0 );
  output out;
  input \r_rst_reg[1]_0 ;
  input \r_rst_reg[0]_0 ;

  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(\r_rst_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__8
   (out,
    CLK,
    \r_rst_reg[0]_0 );
  output out;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__8_30
   (out,
    CLK,
    \r_rst_reg[0]_0 );
  output out;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[0]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[0]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized1__hierPathDup__9
   (out,
    CLK,
    \r_rst_reg[1]_0 );
  output out;
  input CLK;
  input \r_rst_reg[1]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(1'b1),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rst_reg[1]_0 ),
        .D(r_rst[0]),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized2
   (out,
    CLK,
    \r_rst_reg[0]_0 );
  output out;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst[1]_i_1__0_n_0 ;
  wire \r_rst_reg[0]_0 ;

  assign out = r_rst[1];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1__0 
       (.I0(\r_rst_reg[0]_0 ),
        .O(\r_rst[1]_i_1__0_n_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\r_rst[1]_i_1__0_n_0 ),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(r_rst[0]),
        .PRE(\r_rst[1]_i_1__0_n_0 ),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized2_10
   (out,
    o_clk_200,
    \r_rst_reg[1]_0 );
  output out;
  input o_clk_200;
  input \r_rst_reg[1]_0 ;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .D(r_rst[0]),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized2_32
   (out,
    CLK,
    \r_rst_reg[0]_0 );
  output out;
  input CLK;
  input \r_rst_reg[0]_0 ;

  wire CLK;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst[1]_i_1_n_0 ;
  wire \r_rst_reg[0]_0 ;

  assign out = r_rst[1];
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1 
       (.I0(\r_rst_reg[0]_0 ),
        .O(\r_rst[1]_i_1_n_0 ));
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\r_rst[1]_i_1_n_0 ),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(r_rst[0]),
        .PRE(\r_rst[1]_i_1_n_0 ),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized2_47
   (out,
    i_clk_200,
    \r_rst_reg[1]_0 );
  output out;
  input i_clk_200;
  input \r_rst_reg[1]_0 ;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .D(r_rst[0]),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized2_48
   (out,
    i_clk_200,
    \r_rst_reg[1]_0 );
  output out;
  input i_clk_200;
  input \r_rst_reg[1]_0 ;

  wire i_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .D(r_rst[0]),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[1]));
endmodule

(* ORIG_REF_NAME = "async_reset" *) 
module async_reset__parameterized2_9
   (out,
    o_clk_200,
    \r_rst_reg[1]_0 );
  output out;
  input o_clk_200;
  input \r_rst_reg[1]_0 ;

  wire o_clk_200;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_rst;
  wire \r_rst_reg[1]_0 ;

  assign out = r_rst[1];
  initial assign \r_rst_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[0]));
  initial assign \r_rst_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDPE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_rst_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .D(r_rst[0]),
        .PRE(\r_rst_reg[1]_0 ),
        .Q(r_rst[1]));
endmodule

module binary_counter
   (out,
    in0,
    \r_count_reg[0]_0 ,
    \r_count_reg[0]_1 ,
    \r_count_reg[0]_2 ,
    \r_count_reg[0]_3 );
  output out;
  output [15:0]in0;
  input \r_count_reg[0]_0 ;
  input \r_count_reg[0]_1 ;
  input \r_count_reg[0]_2 ;
  input \r_count_reg[0]_3 ;

  wire [15:0]in0;
  wire o_max_inferred_i_2_n_0;
  wire o_max_inferred_i_3_n_0;
  (* RTL_KEEP = "true" *) wire out;
  wire \r_count[0]_i_10_n_0 ;
  wire \r_count[0]_i_11_n_0 ;
  wire \r_count[0]_i_1_n_0 ;
  wire \r_count[0]_i_3_n_0 ;
  wire \r_count[0]_i_4_n_0 ;
  wire \r_count[0]_i_5_n_0 ;
  wire \r_count[0]_i_6_n_0 ;
  wire \r_count[0]_i_7_n_0 ;
  wire \r_count[0]_i_8_n_0 ;
  wire \r_count[0]_i_9_n_0 ;
  wire \r_count[12]_i_2_n_0 ;
  wire \r_count[12]_i_3_n_0 ;
  wire \r_count[12]_i_4_n_0 ;
  wire \r_count[12]_i_5_n_0 ;
  wire \r_count[12]_i_6_n_0 ;
  wire \r_count[12]_i_7_n_0 ;
  wire \r_count[12]_i_8_n_0 ;
  wire \r_count[4]_i_2_n_0 ;
  wire \r_count[4]_i_3_n_0 ;
  wire \r_count[4]_i_4_n_0 ;
  wire \r_count[4]_i_5_n_0 ;
  wire \r_count[4]_i_6_n_0 ;
  wire \r_count[4]_i_7_n_0 ;
  wire \r_count[4]_i_8_n_0 ;
  wire \r_count[4]_i_9_n_0 ;
  wire \r_count[8]_i_2_n_0 ;
  wire \r_count[8]_i_3_n_0 ;
  wire \r_count[8]_i_4_n_0 ;
  wire \r_count[8]_i_5_n_0 ;
  wire \r_count[8]_i_6_n_0 ;
  wire \r_count[8]_i_7_n_0 ;
  wire \r_count[8]_i_8_n_0 ;
  wire \r_count[8]_i_9_n_0 ;
  wire \r_count_reg[0]_0 ;
  wire \r_count_reg[0]_1 ;
  wire \r_count_reg[0]_2 ;
  wire \r_count_reg[0]_3 ;
  wire \r_count_reg[0]_i_2_n_0 ;
  wire \r_count_reg[0]_i_2_n_4 ;
  wire \r_count_reg[0]_i_2_n_5 ;
  wire \r_count_reg[0]_i_2_n_6 ;
  wire \r_count_reg[0]_i_2_n_7 ;
  wire \r_count_reg[12]_i_1_n_4 ;
  wire \r_count_reg[12]_i_1_n_5 ;
  wire \r_count_reg[12]_i_1_n_6 ;
  wire \r_count_reg[12]_i_1_n_7 ;
  wire \r_count_reg[4]_i_1_n_0 ;
  wire \r_count_reg[4]_i_1_n_4 ;
  wire \r_count_reg[4]_i_1_n_5 ;
  wire \r_count_reg[4]_i_1_n_6 ;
  wire \r_count_reg[4]_i_1_n_7 ;
  wire \r_count_reg[8]_i_1_n_0 ;
  wire \r_count_reg[8]_i_1_n_4 ;
  wire \r_count_reg[8]_i_1_n_5 ;
  wire \r_count_reg[8]_i_1_n_6 ;
  wire \r_count_reg[8]_i_1_n_7 ;
  wire [2:0]\NLW_r_count_reg[0]_i_2_CO_UNCONNECTED ;
  wire [3:0]\NLW_r_count_reg[12]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_r_count_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_r_count_reg[8]_i_1_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h8000000000000000)) 
    o_max_inferred_i_1
       (.I0(o_max_inferred_i_2_n_0),
        .I1(in0[1]),
        .I2(in0[0]),
        .I3(in0[3]),
        .I4(in0[2]),
        .I5(o_max_inferred_i_3_n_0),
        .O(out));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    o_max_inferred_i_2
       (.I0(in0[12]),
        .I1(in0[13]),
        .I2(in0[10]),
        .I3(in0[11]),
        .I4(in0[15]),
        .I5(in0[14]),
        .O(o_max_inferred_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    o_max_inferred_i_3
       (.I0(in0[6]),
        .I1(in0[7]),
        .I2(in0[4]),
        .I3(in0[5]),
        .I4(in0[9]),
        .I5(in0[8]),
        .O(o_max_inferred_i_3_n_0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'hD)) 
    \r_count[0]_i_1 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .O(\r_count[0]_i_1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[0]_i_10 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[1]),
        .O(\r_count[0]_i_10_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h21)) 
    \r_count[0]_i_11 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[0]),
        .O(\r_count[0]_i_11_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[0]_i_3 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[0]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[0]_i_4 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[0]_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[0]_i_5 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[0]_i_5_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[0]_i_6 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[0]_i_6_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_count[0]_i_7 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .O(\r_count[0]_i_7_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[0]_i_8 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[3]),
        .O(\r_count[0]_i_8_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[0]_i_9 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[2]),
        .O(\r_count[0]_i_9_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[12]_i_2 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[12]_i_2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[12]_i_3 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[12]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[12]_i_4 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[12]_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[12]_i_5 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[15]),
        .O(\r_count[12]_i_5_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[12]_i_6 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[14]),
        .O(\r_count[12]_i_6_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[12]_i_7 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[13]),
        .O(\r_count[12]_i_7_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[12]_i_8 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[12]),
        .O(\r_count[12]_i_8_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[4]_i_2 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[4]_i_2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[4]_i_3 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[4]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[4]_i_4 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[4]_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[4]_i_5 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[4]_i_5_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[4]_i_6 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[7]),
        .O(\r_count[4]_i_6_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[4]_i_7 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[6]),
        .O(\r_count[4]_i_7_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[4]_i_8 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[5]),
        .O(\r_count[4]_i_8_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[4]_i_9 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[4]),
        .O(\r_count[4]_i_9_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[8]_i_2 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[8]_i_2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[8]_i_3 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[8]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[8]_i_4 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[8]_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT2 #(
    .INIT(4'h4)) 
    \r_count[8]_i_5 
       (.I0(\r_count_reg[0]_2 ),
        .I1(\r_count_reg[0]_3 ),
        .O(\r_count[8]_i_5_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[8]_i_6 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[11]),
        .O(\r_count[8]_i_6_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[8]_i_7 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[10]),
        .O(\r_count[8]_i_7_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[8]_i_8 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[9]),
        .O(\r_count[8]_i_8_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h12)) 
    \r_count[8]_i_9 
       (.I0(\r_count_reg[0]_3 ),
        .I1(\r_count_reg[0]_2 ),
        .I2(in0[8]),
        .O(\r_count[8]_i_9_n_0 ));
  FDCE \r_count_reg[0] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[0]_i_2_n_7 ),
        .Q(in0[0]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_count_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\r_count_reg[0]_i_2_n_0 ,\NLW_r_count_reg[0]_i_2_CO_UNCONNECTED [2:0]}),
        .CYINIT(\r_count[0]_i_3_n_0 ),
        .DI({\r_count[0]_i_4_n_0 ,\r_count[0]_i_5_n_0 ,\r_count[0]_i_6_n_0 ,\r_count[0]_i_7_n_0 }),
        .O({\r_count_reg[0]_i_2_n_4 ,\r_count_reg[0]_i_2_n_5 ,\r_count_reg[0]_i_2_n_6 ,\r_count_reg[0]_i_2_n_7 }),
        .S({\r_count[0]_i_8_n_0 ,\r_count[0]_i_9_n_0 ,\r_count[0]_i_10_n_0 ,\r_count[0]_i_11_n_0 }));
  FDCE \r_count_reg[10] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[8]_i_1_n_5 ),
        .Q(in0[10]));
  FDCE \r_count_reg[11] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[8]_i_1_n_4 ),
        .Q(in0[11]));
  FDCE \r_count_reg[12] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[12]_i_1_n_7 ),
        .Q(in0[12]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_count_reg[12]_i_1 
       (.CI(\r_count_reg[8]_i_1_n_0 ),
        .CO(\NLW_r_count_reg[12]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,\r_count[12]_i_2_n_0 ,\r_count[12]_i_3_n_0 ,\r_count[12]_i_4_n_0 }),
        .O({\r_count_reg[12]_i_1_n_4 ,\r_count_reg[12]_i_1_n_5 ,\r_count_reg[12]_i_1_n_6 ,\r_count_reg[12]_i_1_n_7 }),
        .S({\r_count[12]_i_5_n_0 ,\r_count[12]_i_6_n_0 ,\r_count[12]_i_7_n_0 ,\r_count[12]_i_8_n_0 }));
  FDCE \r_count_reg[13] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[12]_i_1_n_6 ),
        .Q(in0[13]));
  FDCE \r_count_reg[14] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[12]_i_1_n_5 ),
        .Q(in0[14]));
  FDCE \r_count_reg[15] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[12]_i_1_n_4 ),
        .Q(in0[15]));
  FDCE \r_count_reg[1] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[0]_i_2_n_6 ),
        .Q(in0[1]));
  FDCE \r_count_reg[2] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[0]_i_2_n_5 ),
        .Q(in0[2]));
  FDCE \r_count_reg[3] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[0]_i_2_n_4 ),
        .Q(in0[3]));
  FDCE \r_count_reg[4] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[4]_i_1_n_7 ),
        .Q(in0[4]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_count_reg[4]_i_1 
       (.CI(\r_count_reg[0]_i_2_n_0 ),
        .CO({\r_count_reg[4]_i_1_n_0 ,\NLW_r_count_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\r_count[4]_i_2_n_0 ,\r_count[4]_i_3_n_0 ,\r_count[4]_i_4_n_0 ,\r_count[4]_i_5_n_0 }),
        .O({\r_count_reg[4]_i_1_n_4 ,\r_count_reg[4]_i_1_n_5 ,\r_count_reg[4]_i_1_n_6 ,\r_count_reg[4]_i_1_n_7 }),
        .S({\r_count[4]_i_6_n_0 ,\r_count[4]_i_7_n_0 ,\r_count[4]_i_8_n_0 ,\r_count[4]_i_9_n_0 }));
  FDCE \r_count_reg[5] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[4]_i_1_n_6 ),
        .Q(in0[5]));
  FDCE \r_count_reg[6] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[4]_i_1_n_5 ),
        .Q(in0[6]));
  FDCE \r_count_reg[7] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[4]_i_1_n_4 ),
        .Q(in0[7]));
  FDCE \r_count_reg[8] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[8]_i_1_n_7 ),
        .Q(in0[8]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_count_reg[8]_i_1 
       (.CI(\r_count_reg[4]_i_1_n_0 ),
        .CO({\r_count_reg[8]_i_1_n_0 ,\NLW_r_count_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({\r_count[8]_i_2_n_0 ,\r_count[8]_i_3_n_0 ,\r_count[8]_i_4_n_0 ,\r_count[8]_i_5_n_0 }),
        .O({\r_count_reg[8]_i_1_n_4 ,\r_count_reg[8]_i_1_n_5 ,\r_count_reg[8]_i_1_n_6 ,\r_count_reg[8]_i_1_n_7 }),
        .S({\r_count[8]_i_6_n_0 ,\r_count[8]_i_7_n_0 ,\r_count[8]_i_8_n_0 ,\r_count[8]_i_9_n_0 }));
  FDCE \r_count_reg[9] 
       (.C(\r_count_reg[0]_0 ),
        .CE(\r_count[0]_i_1_n_0 ),
        .CLR(\r_count_reg[0]_1 ),
        .D(\r_count_reg[8]_i_1_n_6 ),
        .Q(in0[9]));
endmodule

module clock_source_mmcm
   (o_bufio_clk_6000,
    o_bufr_clk_2000,
    o_bufr_clk_1200,
    o_bufg_clk_1200,
    o_bufg_clk_3000,
    o_locked0,
    FMC_CLK0_P,
    FMC_CLK0_N);
  output o_bufio_clk_6000;
  output o_bufr_clk_2000;
  output o_bufr_clk_1200;
  output o_bufg_clk_1200;
  output o_bufg_clk_3000;
  output o_locked0;
  input FMC_CLK0_P;
  input FMC_CLK0_N;

  wire FMC_CLK0_N;
  wire FMC_CLK0_P;
  wire ibufgds_clk_o;
  wire mmcm_clk_120_o;
  wire mmcm_clk_300_o;
  wire mmcm_clk_600_o;
  wire mmcm_clk_fb_o;
  (* RTL_KEEP = "true" *) wire o_bufg_clk_1200;
  (* RTL_KEEP = "true" *) wire o_bufg_clk_3000;
  (* RTL_KEEP = "true" *) wire o_bufio_clk_6000;
  (* RTL_KEEP = "true" *) wire o_bufr_clk_1200;
  (* RTL_KEEP = "true" *) wire o_bufr_clk_2000;
  (* RTL_KEEP = "true" *) wire o_locked0;
  wire NLW_inst_mmcm_adv_CLKFBOUTB_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKFBSTOPPED_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKINSTOPPED_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT0B_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT1B_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT2B_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT3_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT3B_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT4_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT5_UNCONNECTED;
  wire NLW_inst_mmcm_adv_CLKOUT6_UNCONNECTED;
  wire NLW_inst_mmcm_adv_DRDY_UNCONNECTED;
  wire NLW_inst_mmcm_adv_PSDONE_UNCONNECTED;
  wire [15:0]NLW_inst_mmcm_adv_DO_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG inst_bufg_clk_120
       (.I(mmcm_clk_120_o),
        .O(o_bufg_clk_1200));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG inst_bufg_clk_300
       (.I(mmcm_clk_300_o),
        .O(o_bufg_clk_3000));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFIO inst_bufio_600
       (.I(mmcm_clk_600_o),
        .O(o_bufio_clk_6000));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFR #(
    .BUFR_DIVIDE("5"),
    .SIM_DEVICE("7SERIES")) 
    inst_bufr_120
       (.CE(1'b1),
        .CLR(1'b0),
        .I(mmcm_clk_600_o),
        .O(o_bufr_clk_1200));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFR #(
    .BUFR_DIVIDE("3"),
    .SIM_DEVICE("7SERIES")) 
    inst_bufr_300
       (.CE(1'b1),
        .CLR(1'b0),
        .I(mmcm_clk_600_o),
        .O(o_bufr_clk_2000));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* IFD_DELAY_VALUE = "AUTO" *) 
  IBUFDS #(
    .IOSTANDARD("DEFAULT")) 
    inst_ibufgds_clk0
       (.I(FMC_CLK0_P),
        .IB(FMC_CLK0_N),
        .O(ibufgds_clk_o));
  (* BOX_TYPE = "PRIMITIVE" *) 
  MMCME2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT_F(24.000000),
    .CLKFBOUT_PHASE(0.000000),
    .CLKFBOUT_USE_FINE_PS("FALSE"),
    .CLKIN1_PERIOD(20.000000),
    .CLKIN2_PERIOD(0.000000),
    .CLKOUT0_DIVIDE_F(2.000000),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(0.000000),
    .CLKOUT0_USE_FINE_PS("FALSE"),
    .CLKOUT1_DIVIDE(10),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT1_USE_FINE_PS("FALSE"),
    .CLKOUT2_DIVIDE(4),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT2_USE_FINE_PS("FALSE"),
    .CLKOUT3_DIVIDE(6),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT3_USE_FINE_PS("FALSE"),
    .CLKOUT4_CASCADE("FALSE"),
    .CLKOUT4_DIVIDE(1),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT4_USE_FINE_PS("FALSE"),
    .CLKOUT5_DIVIDE(1),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .CLKOUT5_USE_FINE_PS("FALSE"),
    .CLKOUT6_DIVIDE(1),
    .CLKOUT6_DUTY_CYCLE(0.500000),
    .CLKOUT6_PHASE(0.000000),
    .CLKOUT6_USE_FINE_PS("FALSE"),
    .COMPENSATION("INTERNAL"),
    .DIVCLK_DIVIDE(1),
    .IS_CLKINSEL_INVERTED(1'b0),
    .IS_PSEN_INVERTED(1'b0),
    .IS_PSINCDEC_INVERTED(1'b0),
    .IS_PWRDWN_INVERTED(1'b0),
    .IS_RST_INVERTED(1'b0),
    .REF_JITTER1(0.010000),
    .REF_JITTER2(0.010000),
    .SS_EN("FALSE"),
    .SS_MODE("CENTER_HIGH"),
    .SS_MOD_PERIOD(10000),
    .STARTUP_WAIT("FALSE")) 
    inst_mmcm_adv
       (.CLKFBIN(mmcm_clk_fb_o),
        .CLKFBOUT(mmcm_clk_fb_o),
        .CLKFBOUTB(NLW_inst_mmcm_adv_CLKFBOUTB_UNCONNECTED),
        .CLKFBSTOPPED(NLW_inst_mmcm_adv_CLKFBSTOPPED_UNCONNECTED),
        .CLKIN1(ibufgds_clk_o),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKINSTOPPED(NLW_inst_mmcm_adv_CLKINSTOPPED_UNCONNECTED),
        .CLKOUT0(mmcm_clk_600_o),
        .CLKOUT0B(NLW_inst_mmcm_adv_CLKOUT0B_UNCONNECTED),
        .CLKOUT1(mmcm_clk_120_o),
        .CLKOUT1B(NLW_inst_mmcm_adv_CLKOUT1B_UNCONNECTED),
        .CLKOUT2(mmcm_clk_300_o),
        .CLKOUT2B(NLW_inst_mmcm_adv_CLKOUT2B_UNCONNECTED),
        .CLKOUT3(NLW_inst_mmcm_adv_CLKOUT3_UNCONNECTED),
        .CLKOUT3B(NLW_inst_mmcm_adv_CLKOUT3B_UNCONNECTED),
        .CLKOUT4(NLW_inst_mmcm_adv_CLKOUT4_UNCONNECTED),
        .CLKOUT5(NLW_inst_mmcm_adv_CLKOUT5_UNCONNECTED),
        .CLKOUT6(NLW_inst_mmcm_adv_CLKOUT6_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_inst_mmcm_adv_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_inst_mmcm_adv_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(o_locked0),
        .PSCLK(1'b0),
        .PSDONE(NLW_inst_mmcm_adv_PSDONE_UNCONNECTED),
        .PSEN(1'b0),
        .PSINCDEC(1'b0),
        .PWRDWN(1'b0),
        .RST(1'b0));
endmodule

module clock_source_pll
   (FMC_CLK1_P,
    FMC_CLK1_N,
    o_bufg_clk_1660,
    o_locked0,
    GCLK);
  output FMC_CLK1_P;
  output FMC_CLK1_N;
  output o_bufg_clk_1660;
  output o_locked0;
  input GCLK;

  wire FMC_CLK1_N;
  wire FMC_CLK1_P;
  wire GCLK;
  wire bufg_clk_50_o;
  wire ibuf_gclk_o;
  (* RTL_KEEP = "true" *) wire o_bufg_clk_1660;
  (* RTL_KEEP = "true" *) wire o_locked0;
  wire oddr_o;
  wire pll_clk_166_o;
  wire pll_clk_50_o;
  wire pll_clk_fb_o;
  wire NLW_inst_oddr_R_UNCONNECTED;
  wire NLW_inst_oddr_S_UNCONNECTED;
  wire NLW_inst_plle2_base_CLKOUT2_UNCONNECTED;
  wire NLW_inst_plle2_base_CLKOUT3_UNCONNECTED;
  wire NLW_inst_plle2_base_CLKOUT4_UNCONNECTED;
  wire NLW_inst_plle2_base_CLKOUT5_UNCONNECTED;
  wire NLW_inst_plle2_base_DRDY_UNCONNECTED;
  wire [15:0]NLW_inst_plle2_base_DO_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG inst_bufg_clk0
       (.I(pll_clk_50_o),
        .O(bufg_clk_50_o));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG inst_bufg_clk1
       (.I(pll_clk_166_o),
        .O(o_bufg_clk_1660));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* IFD_DELAY_VALUE = "AUTO" *) 
  IBUF #(
    .IOSTANDARD("DEFAULT")) 
    inst_ibuf_clk_in
       (.I(GCLK),
        .O(ibuf_gclk_o));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  OBUFDS inst_obufds
       (.I(oddr_o),
        .O(FMC_CLK1_P),
        .OB(FMC_CLK1_N));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* __SRVAL = "TRUE" *) 
  ODDR #(
    .DDR_CLK_EDGE("OPPOSITE_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    inst_oddr
       (.C(bufg_clk_50_o),
        .CE(1'b1),
        .D1(1'b1),
        .D2(1'b0),
        .Q(oddr_o),
        .R(NLW_inst_oddr_R_UNCONNECTED),
        .S(NLW_inst_oddr_S_UNCONNECTED));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "PLLE2_BASE" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:DWE,DEN,DCLK,DI[15],DI[14],DI[13],DI[12],DI[11],DI[10],DI[9],DI[8],DI[7],DI[6],DI[5],DI[4],DI[3],DI[2],DI[1],DI[0],DADDR[6],DADDR[5],DADDR[4],DADDR[3],DADDR[2],DADDR[1],DADDR[0],CLKIN2 VCC:CLKINSEL" *) 
  PLLE2_ADV #(
    .BANDWIDTH("OPTIMIZED"),
    .CLKFBOUT_MULT(10),
    .CLKFBOUT_PHASE(0.000000),
    .CLKIN1_PERIOD(10.000000),
    .CLKIN2_PERIOD(10.000000),
    .CLKOUT0_DIVIDE(20),
    .CLKOUT0_DUTY_CYCLE(0.500000),
    .CLKOUT0_PHASE(0.000000),
    .CLKOUT1_DIVIDE(6),
    .CLKOUT1_DUTY_CYCLE(0.500000),
    .CLKOUT1_PHASE(0.000000),
    .CLKOUT2_DIVIDE(1),
    .CLKOUT2_DUTY_CYCLE(0.500000),
    .CLKOUT2_PHASE(0.000000),
    .CLKOUT3_DIVIDE(1),
    .CLKOUT3_DUTY_CYCLE(0.500000),
    .CLKOUT3_PHASE(0.000000),
    .CLKOUT4_DIVIDE(1),
    .CLKOUT4_DUTY_CYCLE(0.500000),
    .CLKOUT4_PHASE(0.000000),
    .CLKOUT5_DIVIDE(1),
    .CLKOUT5_DUTY_CYCLE(0.500000),
    .CLKOUT5_PHASE(0.000000),
    .COMPENSATION("INTERNAL"),
    .DIVCLK_DIVIDE(1),
    .REF_JITTER1(0.000000),
    .STARTUP_WAIT("FALSE")) 
    inst_plle2_base
       (.CLKFBIN(pll_clk_fb_o),
        .CLKFBOUT(pll_clk_fb_o),
        .CLKIN1(ibuf_gclk_o),
        .CLKIN2(1'b0),
        .CLKINSEL(1'b1),
        .CLKOUT0(pll_clk_50_o),
        .CLKOUT1(pll_clk_166_o),
        .CLKOUT2(NLW_inst_plle2_base_CLKOUT2_UNCONNECTED),
        .CLKOUT3(NLW_inst_plle2_base_CLKOUT3_UNCONNECTED),
        .CLKOUT4(NLW_inst_plle2_base_CLKOUT4_UNCONNECTED),
        .CLKOUT5(NLW_inst_plle2_base_CLKOUT5_UNCONNECTED),
        .DADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DCLK(1'b0),
        .DEN(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DO(NLW_inst_plle2_base_DO_UNCONNECTED[15:0]),
        .DRDY(NLW_inst_plle2_base_DRDY_UNCONNECTED),
        .DWE(1'b0),
        .LOCKED(o_locked0),
        .PWRDWN(1'b0),
        .RST(1'b0));
endmodule

module crc_8
   (out,
    \r_crc_reg[2]_0 ,
    Q,
    E,
    \r_crc_reg[0]_0 ,
    \r_crc_reg[0]_1 );
  output [7:0]out;
  input \r_crc_reg[2]_0 ;
  input [7:0]Q;
  input [0:0]E;
  input \r_crc_reg[0]_0 ;
  input \r_crc_reg[0]_1 ;

  wire [0:0]E;
  wire [7:0]Q;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_crc[3]_i_2__0_n_0 ;
  wire \r_crc[3]_i_3__0_n_0 ;
  wire \r_crc[3]_i_4__0_n_0 ;
  wire \r_crc[5]_i_2__0_n_0 ;
  wire \r_crc[7]_i_1__1_n_0 ;
  wire \r_crc[7]_i_3__0_n_0 ;
  wire \r_crc_reg[0]_0 ;
  wire \r_crc_reg[0]_1 ;
  wire \r_crc_reg[2]_0 ;
  wire [7:0]ri_crc;

  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[0]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3__0_n_0 ),
        .I2(out[7]),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(out[0]),
        .O(ri_crc[0]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[1]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3__0_n_0 ),
        .I2(out[1]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(out[0]),
        .O(ri_crc[1]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[2]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3__0_n_0 ),
        .I2(\r_crc[3]_i_2__0_n_0 ),
        .I3(Q[0]),
        .I4(out[0]),
        .I5(\r_crc[3]_i_4__0_n_0 ),
        .O(ri_crc[2]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[3]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(out[3]),
        .I2(Q[3]),
        .I3(\r_crc[3]_i_2__0_n_0 ),
        .I4(\r_crc[3]_i_3__0_n_0 ),
        .I5(\r_crc[3]_i_4__0_n_0 ),
        .O(ri_crc[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_2__0 
       (.I0(out[1]),
        .I1(Q[1]),
        .O(\r_crc[3]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_3__0 
       (.I0(out[7]),
        .I1(Q[7]),
        .O(\r_crc[3]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_4__0 
       (.I0(out[2]),
        .I1(Q[2]),
        .O(\r_crc[3]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[4]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(out[3]),
        .I2(Q[3]),
        .I3(\r_crc[5]_i_2__0_n_0 ),
        .I4(Q[2]),
        .I5(out[2]),
        .O(ri_crc[4]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[5]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(out[3]),
        .I2(Q[3]),
        .I3(\r_crc[5]_i_2__0_n_0 ),
        .I4(Q[5]),
        .I5(out[5]),
        .O(ri_crc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[5]_i_2__0 
       (.I0(out[4]),
        .I1(Q[4]),
        .O(\r_crc[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[6]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3__0_n_0 ),
        .I2(out[4]),
        .I3(Q[4]),
        .I4(Q[5]),
        .I5(out[5]),
        .O(ri_crc[6]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_crc[7]_i_1__1 
       (.I0(E),
        .I1(\r_crc_reg[2]_0 ),
        .O(\r_crc[7]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[7]_i_2__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3__0_n_0 ),
        .I2(out[7]),
        .I3(Q[7]),
        .I4(Q[5]),
        .I5(out[5]),
        .O(ri_crc[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[7]_i_3__0 
       (.I0(out[6]),
        .I1(Q[6]),
        .O(\r_crc[7]_i_3__0_n_0 ));
  FDPE \r_crc_reg[0] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[0]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[0]));
  FDPE \r_crc_reg[1] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[1]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[1]));
  FDPE \r_crc_reg[2] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[2]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[2]));
  FDPE \r_crc_reg[3] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[3]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[3]));
  FDPE \r_crc_reg[4] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[4]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[4]));
  FDPE \r_crc_reg[5] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[5]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[5]));
  FDPE \r_crc_reg[6] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[6]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[6]));
  FDPE \r_crc_reg[7] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__1_n_0 ),
        .D(ri_crc[7]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[7]));
endmodule

(* ORIG_REF_NAME = "crc_8" *) 
module crc_8__hierPathDup__1
   (out,
    \r_crc_reg[7]_0 ,
    \r_crc_reg[0]_0 ,
    \r_crc_reg[0]_1 ,
    \r_crc_reg[2]_0 ,
    \r_crc_reg[0]_2 );
  output [7:0]out;
  input \r_crc_reg[7]_0 ;
  input \r_crc_reg[0]_0 ;
  input [7:0]\r_crc_reg[0]_1 ;
  input \r_crc_reg[2]_0 ;
  input \r_crc_reg[0]_2 ;

  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_crc[3]_i_2_n_0 ;
  wire \r_crc[3]_i_3_n_0 ;
  wire \r_crc[3]_i_4_n_0 ;
  wire \r_crc[5]_i_2_n_0 ;
  wire \r_crc[7]_i_1__0_n_0 ;
  wire \r_crc[7]_i_3_n_0 ;
  wire \r_crc_reg[0]_0 ;
  wire [7:0]\r_crc_reg[0]_1 ;
  wire \r_crc_reg[0]_2 ;
  wire \r_crc_reg[2]_0 ;
  wire \r_crc_reg[7]_0 ;
  wire [7:0]ri_crc;

  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[0]_i_1 
       (.I0(\r_crc[7]_i_3_n_0 ),
        .I1(\r_crc_reg[0]_1 [7]),
        .I2(out[7]),
        .I3(out[0]),
        .I4(\r_crc_reg[0]_1 [0]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[1]_i_1 
       (.I0(\r_crc[7]_i_3_n_0 ),
        .I1(\r_crc_reg[0]_1 [1]),
        .I2(out[1]),
        .I3(out[0]),
        .I4(\r_crc_reg[0]_1 [0]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[2]_i_1 
       (.I0(\r_crc[7]_i_3_n_0 ),
        .I1(\r_crc[3]_i_2_n_0 ),
        .I2(out[0]),
        .I3(\r_crc_reg[0]_1 [0]),
        .I4(\r_crc[3]_i_4_n_0 ),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[3]_i_1 
       (.I0(\r_crc_reg[0]_1 [3]),
        .I1(out[3]),
        .I2(\r_crc[3]_i_2_n_0 ),
        .I3(\r_crc[3]_i_3_n_0 ),
        .I4(\r_crc[3]_i_4_n_0 ),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_2 
       (.I0(\r_crc_reg[0]_1 [1]),
        .I1(out[1]),
        .O(\r_crc[3]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_3 
       (.I0(\r_crc_reg[0]_1 [7]),
        .I1(out[7]),
        .O(\r_crc[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_4 
       (.I0(\r_crc_reg[0]_1 [2]),
        .I1(out[2]),
        .O(\r_crc[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[4]_i_1 
       (.I0(\r_crc_reg[0]_1 [3]),
        .I1(out[3]),
        .I2(\r_crc[5]_i_2_n_0 ),
        .I3(out[2]),
        .I4(\r_crc_reg[0]_1 [2]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[4]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[5]_i_1 
       (.I0(\r_crc_reg[0]_1 [3]),
        .I1(out[3]),
        .I2(\r_crc[5]_i_2_n_0 ),
        .I3(out[5]),
        .I4(\r_crc_reg[0]_1 [5]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[5]_i_2 
       (.I0(\r_crc_reg[0]_1 [4]),
        .I1(out[4]),
        .O(\r_crc[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[6]_i_1 
       (.I0(\r_crc[7]_i_3_n_0 ),
        .I1(\r_crc_reg[0]_1 [4]),
        .I2(out[4]),
        .I3(out[5]),
        .I4(\r_crc_reg[0]_1 [5]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[6]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_crc[7]_i_1__0 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc_reg[0]_2 ),
        .O(\r_crc[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[7]_i_2 
       (.I0(\r_crc[7]_i_3_n_0 ),
        .I1(\r_crc_reg[0]_1 [7]),
        .I2(out[7]),
        .I3(out[5]),
        .I4(\r_crc_reg[0]_1 [5]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[7]_i_3 
       (.I0(\r_crc_reg[0]_1 [6]),
        .I1(out[6]),
        .O(\r_crc[7]_i_3_n_0 ));
  FDPE \r_crc_reg[0] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[0]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[0]));
  FDPE \r_crc_reg[1] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[1]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[1]));
  FDPE \r_crc_reg[2] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[2]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[2]));
  FDPE \r_crc_reg[3] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[3]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[3]));
  FDPE \r_crc_reg[4] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[4]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[4]));
  FDPE \r_crc_reg[5] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[5]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[5]));
  FDPE \r_crc_reg[6] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[6]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[6]));
  FDPE \r_crc_reg[7] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1__0_n_0 ),
        .D(ri_crc[7]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[7]));
endmodule

(* ORIG_REF_NAME = "crc_8" *) 
module crc_8__hierPathDup__2
   (out,
    \r_crc_reg[2]_0 ,
    Q,
    E,
    \r_crc_reg[7]_0 ,
    \r_crc_reg[0]_0 );
  output [7:0]out;
  input \r_crc_reg[2]_0 ;
  input [7:0]Q;
  input [0:0]E;
  input \r_crc_reg[7]_0 ;
  input \r_crc_reg[0]_0 ;

  wire [0:0]E;
  wire [7:0]Q;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_crc[3]_i_2_n_0 ;
  wire \r_crc[3]_i_3_n_0 ;
  wire \r_crc[3]_i_4_n_0 ;
  wire \r_crc[5]_i_2_n_0 ;
  wire \r_crc[7]_i_1_n_0 ;
  wire \r_crc[7]_i_3_n_0 ;
  wire \r_crc_reg[0]_0 ;
  wire \r_crc_reg[2]_0 ;
  wire \r_crc_reg[7]_0 ;
  wire [7:0]ri_crc;

  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[0]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3_n_0 ),
        .I2(out[7]),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(out[0]),
        .O(ri_crc[0]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[1]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3_n_0 ),
        .I2(out[1]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(out[0]),
        .O(ri_crc[1]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[2]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3_n_0 ),
        .I2(\r_crc[3]_i_2_n_0 ),
        .I3(Q[0]),
        .I4(out[0]),
        .I5(\r_crc[3]_i_4_n_0 ),
        .O(ri_crc[2]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[3]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(out[3]),
        .I2(Q[3]),
        .I3(\r_crc[3]_i_2_n_0 ),
        .I4(\r_crc[3]_i_3_n_0 ),
        .I5(\r_crc[3]_i_4_n_0 ),
        .O(ri_crc[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_2 
       (.I0(out[1]),
        .I1(Q[1]),
        .O(\r_crc[3]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_3 
       (.I0(out[7]),
        .I1(Q[7]),
        .O(\r_crc[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_4 
       (.I0(out[2]),
        .I1(Q[2]),
        .O(\r_crc[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[4]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(out[3]),
        .I2(Q[3]),
        .I3(\r_crc[5]_i_2_n_0 ),
        .I4(Q[2]),
        .I5(out[2]),
        .O(ri_crc[4]));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[5]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(out[3]),
        .I2(Q[3]),
        .I3(\r_crc[5]_i_2_n_0 ),
        .I4(Q[5]),
        .I5(out[5]),
        .O(ri_crc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[5]_i_2 
       (.I0(out[4]),
        .I1(Q[4]),
        .O(\r_crc[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[6]_i_1 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3_n_0 ),
        .I2(out[4]),
        .I3(Q[4]),
        .I4(Q[5]),
        .I5(out[5]),
        .O(ri_crc[6]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_crc[7]_i_1 
       (.I0(E),
        .I1(\r_crc_reg[2]_0 ),
        .O(\r_crc[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEBBEBEEBBEEBEBBE)) 
    \r_crc[7]_i_2 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc[7]_i_3_n_0 ),
        .I2(out[7]),
        .I3(Q[7]),
        .I4(Q[5]),
        .I5(out[5]),
        .O(ri_crc[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[7]_i_3 
       (.I0(out[6]),
        .I1(Q[6]),
        .O(\r_crc[7]_i_3_n_0 ));
  FDPE \r_crc_reg[0] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[0]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[0]));
  FDPE \r_crc_reg[1] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[1]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[1]));
  FDPE \r_crc_reg[2] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[2]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[2]));
  FDPE \r_crc_reg[3] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[3]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[3]));
  FDPE \r_crc_reg[4] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[4]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[4]));
  FDPE \r_crc_reg[5] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[5]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[5]));
  FDPE \r_crc_reg[6] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[6]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[6]));
  FDPE \r_crc_reg[7] 
       (.C(\r_crc_reg[7]_0 ),
        .CE(\r_crc[7]_i_1_n_0 ),
        .D(ri_crc[7]),
        .PRE(\r_crc_reg[0]_0 ),
        .Q(out[7]));
endmodule

(* ORIG_REF_NAME = "crc_8" *) 
module crc_8__hierPathDup__3
   (out,
    \r_crc_reg[0]_0 ,
    \r_crc_reg[0]_1 ,
    \r_crc_reg[0]_2 ,
    \r_crc_reg[2]_0 ,
    \r_crc_reg[0]_3 );
  output [7:0]out;
  input \r_crc_reg[0]_0 ;
  input \r_crc_reg[0]_1 ;
  input [7:0]\r_crc_reg[0]_2 ;
  input \r_crc_reg[2]_0 ;
  input \r_crc_reg[0]_3 ;

  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_crc[3]_i_2__0_n_0 ;
  wire \r_crc[3]_i_3__0_n_0 ;
  wire \r_crc[3]_i_4__0_n_0 ;
  wire \r_crc[5]_i_2__0_n_0 ;
  wire \r_crc[7]_i_1__2_n_0 ;
  wire \r_crc[7]_i_3__0_n_0 ;
  wire \r_crc_reg[0]_0 ;
  wire \r_crc_reg[0]_1 ;
  wire [7:0]\r_crc_reg[0]_2 ;
  wire \r_crc_reg[0]_3 ;
  wire \r_crc_reg[2]_0 ;
  wire [7:0]ri_crc;

  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[0]_i_1__0 
       (.I0(\r_crc[7]_i_3__0_n_0 ),
        .I1(\r_crc_reg[0]_2 [7]),
        .I2(out[7]),
        .I3(out[0]),
        .I4(\r_crc_reg[0]_2 [0]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[1]_i_1__0 
       (.I0(\r_crc[7]_i_3__0_n_0 ),
        .I1(\r_crc_reg[0]_2 [1]),
        .I2(out[1]),
        .I3(out[0]),
        .I4(\r_crc_reg[0]_2 [0]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[1]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[2]_i_1__0 
       (.I0(\r_crc[7]_i_3__0_n_0 ),
        .I1(\r_crc[3]_i_2__0_n_0 ),
        .I2(out[0]),
        .I3(\r_crc_reg[0]_2 [0]),
        .I4(\r_crc[3]_i_4__0_n_0 ),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[2]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[3]_i_1__0 
       (.I0(\r_crc_reg[0]_2 [3]),
        .I1(out[3]),
        .I2(\r_crc[3]_i_2__0_n_0 ),
        .I3(\r_crc[3]_i_3__0_n_0 ),
        .I4(\r_crc[3]_i_4__0_n_0 ),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_2__0 
       (.I0(\r_crc_reg[0]_2 [1]),
        .I1(out[1]),
        .O(\r_crc[3]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_3__0 
       (.I0(\r_crc_reg[0]_2 [7]),
        .I1(out[7]),
        .O(\r_crc[3]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[3]_i_4__0 
       (.I0(\r_crc_reg[0]_2 [2]),
        .I1(out[2]),
        .O(\r_crc[3]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[4]_i_1__0 
       (.I0(\r_crc_reg[0]_2 [3]),
        .I1(out[3]),
        .I2(\r_crc[5]_i_2__0_n_0 ),
        .I3(out[2]),
        .I4(\r_crc_reg[0]_2 [2]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[4]));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[5]_i_1__0 
       (.I0(\r_crc_reg[0]_2 [3]),
        .I1(out[3]),
        .I2(\r_crc[5]_i_2__0_n_0 ),
        .I3(out[5]),
        .I4(\r_crc_reg[0]_2 [5]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[5]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[5]_i_2__0 
       (.I0(\r_crc_reg[0]_2 [4]),
        .I1(out[4]),
        .O(\r_crc[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[6]_i_1__0 
       (.I0(\r_crc[7]_i_3__0_n_0 ),
        .I1(\r_crc_reg[0]_2 [4]),
        .I2(out[4]),
        .I3(out[5]),
        .I4(\r_crc_reg[0]_2 [5]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[6]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_crc[7]_i_1__2 
       (.I0(\r_crc_reg[2]_0 ),
        .I1(\r_crc_reg[0]_3 ),
        .O(\r_crc[7]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF96696996)) 
    \r_crc[7]_i_2__0 
       (.I0(\r_crc[7]_i_3__0_n_0 ),
        .I1(\r_crc_reg[0]_2 [7]),
        .I2(out[7]),
        .I3(out[5]),
        .I4(\r_crc_reg[0]_2 [5]),
        .I5(\r_crc_reg[2]_0 ),
        .O(ri_crc[7]));
  LUT2 #(
    .INIT(4'h6)) 
    \r_crc[7]_i_3__0 
       (.I0(\r_crc_reg[0]_2 [6]),
        .I1(out[6]),
        .O(\r_crc[7]_i_3__0_n_0 ));
  FDPE \r_crc_reg[0] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[0]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[0]));
  FDPE \r_crc_reg[1] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[1]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[1]));
  FDPE \r_crc_reg[2] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[2]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[2]));
  FDPE \r_crc_reg[3] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[3]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[3]));
  FDPE \r_crc_reg[4] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[4]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[4]));
  FDPE \r_crc_reg[5] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[5]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[5]));
  FDPE \r_crc_reg[6] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[6]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[6]));
  FDPE \r_crc_reg[7] 
       (.C(\r_crc_reg[0]_0 ),
        .CE(\r_crc[7]_i_1__2_n_0 ),
        .D(ri_crc[7]),
        .PRE(\r_crc_reg[0]_1 ),
        .Q(out[7]));
endmodule

module decoder_8b10b
   (in0,
    \dout_i_reg[7]_0 ,
    CLK,
    D);
  output in0;
  output [7:0]\dout_i_reg[7]_0 ;
  input CLK;
  input [9:0]D;

  wire CLK;
  wire [9:0]D;
  wire [7:5]b3;
  wire [7:0]\dout_i_reg[7]_0 ;
  wire g0_b0__0_n_0;
  wire g0_b1__0_n_0;
  wire g0_b2__0_n_0;
  wire g0_b3__0_n_0;
  wire g0_b4__0_n_0;
  wire in0;
  wire k;
  wire k0;
  wire k28__1;

  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT5 #(
    .INIT(32'h89BFFD91)) 
    \dout_i[5]_i_1__0 
       (.I0(D[7]),
        .I1(D[8]),
        .I2(k28__1),
        .I3(D[9]),
        .I4(D[6]),
        .O(b3[5]));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT5 #(
    .INIT(32'h98FBDF19)) 
    \dout_i[6]_i_1__0 
       (.I0(D[7]),
        .I1(D[8]),
        .I2(k28__1),
        .I3(D[9]),
        .I4(D[6]),
        .O(b3[6]));
  LUT5 #(
    .INIT(32'hFE518A7F)) 
    \dout_i[7]_i_1__0 
       (.I0(D[8]),
        .I1(D[6]),
        .I2(k28__1),
        .I3(D[7]),
        .I4(D[9]),
        .O(b3[7]));
  LUT6 #(
    .INIT(64'h0000000000000006)) 
    \dout_i[7]_i_2__0 
       (.I0(D[8]),
        .I1(D[9]),
        .I2(D[4]),
        .I3(D[3]),
        .I4(D[2]),
        .I5(D[5]),
        .O(k28__1));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b0__0_n_0),
        .Q(\dout_i_reg[7]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b1__0_n_0),
        .Q(\dout_i_reg[7]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b2__0_n_0),
        .Q(\dout_i_reg[7]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b3__0_n_0),
        .Q(\dout_i_reg[7]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b4__0_n_0),
        .Q(\dout_i_reg[7]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(b3[5]),
        .Q(\dout_i_reg[7]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(b3[6]),
        .Q(\dout_i_reg[7]_0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(b3[7]),
        .Q(\dout_i_reg[7]_0 [7]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEDA3C33DAAABADB7)) 
    g0_b0__0
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b0__0_n_0));
  LUT6 #(
    .INIT(64'hEDA5A55BCCCDCDB7)) 
    g0_b1__0
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b1__0_n_0));
  LUT6 #(
    .INIT(64'hFDB19967F0F1E5BF)) 
    g0_b2__0
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b2__0_n_0));
  LUT6 #(
    .INIT(64'hFCA99697FF01FD3F)) 
    g0_b3__0
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b3__0_n_0));
  LUT6 #(
    .INIT(64'hF8FF8117FEE9971F)) 
    g0_b4__0
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b4__0_n_0));
  LUT5 #(
    .INIT(32'hFFFF8001)) 
    kout_i_i_1__0
       (.I0(D[5]),
        .I1(D[2]),
        .I2(D[3]),
        .I3(D[4]),
        .I4(k0),
        .O(k));
  LUT5 #(
    .INIT(32'h40000002)) 
    kout_i_i_2__0
       (.I0(D[4]),
        .I1(D[9]),
        .I2(D[5]),
        .I3(D[7]),
        .I4(D[8]),
        .O(k0));
  FDRE #(
    .INIT(1'b0)) 
    kout_i_reg
       (.C(CLK),
        .CE(1'b1),
        .D(k),
        .Q(in0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "decoder_8b10b" *) 
module decoder_8b10b_33
   (in0,
    \dout_i_reg[7]_0 ,
    CLK,
    D);
  output in0;
  output [7:0]\dout_i_reg[7]_0 ;
  input CLK;
  input [9:0]D;

  wire CLK;
  wire [9:0]D;
  wire [7:5]b3;
  wire [7:0]\dout_i_reg[7]_0 ;
  wire g0_b0_n_0;
  wire g0_b1_n_0;
  wire g0_b2_n_0;
  wire g0_b3_n_0;
  wire g0_b4_n_0;
  wire in0;
  wire k;
  wire k0;
  wire k28__1;

  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT5 #(
    .INIT(32'h89BFFD91)) 
    \dout_i[5]_i_1 
       (.I0(D[7]),
        .I1(D[8]),
        .I2(k28__1),
        .I3(D[9]),
        .I4(D[6]),
        .O(b3[5]));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT5 #(
    .INIT(32'h98FBDF19)) 
    \dout_i[6]_i_1 
       (.I0(D[7]),
        .I1(D[8]),
        .I2(k28__1),
        .I3(D[9]),
        .I4(D[6]),
        .O(b3[6]));
  LUT5 #(
    .INIT(32'hFE518A7F)) 
    \dout_i[7]_i_1 
       (.I0(D[8]),
        .I1(D[6]),
        .I2(k28__1),
        .I3(D[7]),
        .I4(D[9]),
        .O(b3[7]));
  LUT6 #(
    .INIT(64'h0000000000000006)) 
    \dout_i[7]_i_2 
       (.I0(D[8]),
        .I1(D[9]),
        .I2(D[4]),
        .I3(D[3]),
        .I4(D[2]),
        .I5(D[5]),
        .O(k28__1));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b0_n_0),
        .Q(\dout_i_reg[7]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b1_n_0),
        .Q(\dout_i_reg[7]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b2_n_0),
        .Q(\dout_i_reg[7]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b3_n_0),
        .Q(\dout_i_reg[7]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(g0_b4_n_0),
        .Q(\dout_i_reg[7]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(b3[5]),
        .Q(\dout_i_reg[7]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(b3[6]),
        .Q(\dout_i_reg[7]_0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \dout_i_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(b3[7]),
        .Q(\dout_i_reg[7]_0 [7]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEDA3C33DAAABADB7)) 
    g0_b0
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b0_n_0));
  LUT6 #(
    .INIT(64'hEDA5A55BCCCDCDB7)) 
    g0_b1
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b1_n_0));
  LUT6 #(
    .INIT(64'hFDB19967F0F1E5BF)) 
    g0_b2
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b2_n_0));
  LUT6 #(
    .INIT(64'hFCA99697FF01FD3F)) 
    g0_b3
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b3_n_0));
  LUT6 #(
    .INIT(64'hF8FF8117FEE9971F)) 
    g0_b4
       (.I0(D[0]),
        .I1(D[1]),
        .I2(D[2]),
        .I3(D[3]),
        .I4(D[4]),
        .I5(D[5]),
        .O(g0_b4_n_0));
  LUT5 #(
    .INIT(32'hFFFF8001)) 
    kout_i_i_1
       (.I0(D[5]),
        .I1(D[2]),
        .I2(D[3]),
        .I3(D[4]),
        .I4(k0),
        .O(k));
  LUT5 #(
    .INIT(32'h40000002)) 
    kout_i_i_2
       (.I0(D[4]),
        .I1(D[9]),
        .I2(D[5]),
        .I3(D[7]),
        .I4(D[8]),
        .O(k0));
  FDRE #(
    .INIT(1'b0)) 
    kout_i_reg
       (.C(CLK),
        .CE(1'b1),
        .D(k),
        .Q(in0),
        .R(1'b0));
endmodule

module encoder_8b10b
   (out,
    CLK,
    \dout_reg[9]_0 );
  output [9:0]out;
  input CLK;
  input [8:0]\dout_reg[9]_0 ;

  wire CLK;
  wire [3:0]b4;
  wire [5:0]b6;
  wire \dout[0]_i_1__0_n_0 ;
  wire \dout[1]_i_1__0_n_0 ;
  wire \dout[2]_i_1__0_n_0 ;
  wire \dout[3]_i_1__0_n_0 ;
  wire \dout[4]_i_1__0_n_0 ;
  wire \dout[5]_i_1__0_n_0 ;
  wire \dout[9]_i_2__0_n_0 ;
  wire \dout[9]_i_4__0_n_0 ;
  wire [8:0]\dout_reg[9]_0 ;
  wire k28__4;
  wire \ngdb.disp_run_i_3__0_n_0 ;
  wire \ngdb.disp_run_reg_n_0 ;
  (* RTL_KEEP = "true" *) wire [9:0]out;
  wire pdes4;
  wire pdes6__13;

  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \dout[0]_i_1__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[0]),
        .O(\dout[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h477F8002BFFE011D)) 
    \dout[0]_i_2__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\dout_reg[9]_0 [0]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \dout[1]_i_1__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[1]),
        .O(\dout[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h87807F017F01FE1E)) 
    \dout[1]_i_2__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\ngdb.disp_run_reg_n_0 ),
        .I5(\dout_reg[9]_0 [0]),
        .O(b6[1]));
  LUT3 #(
    .INIT(8'h74)) 
    \dout[2]_i_1__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[2]),
        .O(\dout[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h4870B0F170F9F1E6)) 
    \dout[2]_i_2__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\ngdb.disp_run_reg_n_0 ),
        .I5(\dout_reg[9]_0 [0]),
        .O(b6[2]));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \dout[3]_i_1__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[3]),
        .O(\dout[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hB44C4CCE4CCDCDD1)) 
    \dout[3]_i_2__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [0]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[3]));
  (* SOFT_HLUTNM = "soft_lutpair425" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \dout[4]_i_1__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[4]),
        .O(\dout[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h122B2BB4EAAAAAAB)) 
    \dout[4]_i_2__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\dout_reg[9]_0 [0]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[4]));
  (* SOFT_HLUTNM = "soft_lutpair426" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \dout[5]_i_1__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[5]),
        .O(\dout[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h39969660C117177F)) 
    \dout[5]_i_2__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [0]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[5]));
  LUT6 #(
    .INIT(64'h8F8F0000B0BFFF0F)) 
    \dout[6]_i_1__0 
       (.I0(\dout[9]_i_2__0_n_0 ),
        .I1(\dout_reg[9]_0 [7]),
        .I2(\dout_reg[9]_0 [6]),
        .I3(k28__4),
        .I4(\dout_reg[9]_0 [5]),
        .I5(pdes6__13),
        .O(b4[0]));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT5 #(
    .INIT(32'h00DDFC2E)) 
    \dout[7]_i_1__0 
       (.I0(\dout_reg[9]_0 [7]),
        .I1(\dout_reg[9]_0 [6]),
        .I2(k28__4),
        .I3(\dout_reg[9]_0 [5]),
        .I4(pdes6__13),
        .O(b4[1]));
  (* SOFT_HLUTNM = "soft_lutpair423" *) 
  LUT5 #(
    .INIT(32'h66AA9A59)) 
    \dout[8]_i_1__0 
       (.I0(\dout_reg[9]_0 [7]),
        .I1(\dout_reg[9]_0 [6]),
        .I2(k28__4),
        .I3(\dout_reg[9]_0 [5]),
        .I4(pdes6__13),
        .O(b4[2]));
  LUT6 #(
    .INIT(64'h737330304C43CF3F)) 
    \dout[9]_i_1__0 
       (.I0(\dout[9]_i_2__0_n_0 ),
        .I1(\dout_reg[9]_0 [7]),
        .I2(\dout_reg[9]_0 [6]),
        .I3(k28__4),
        .I4(\dout_reg[9]_0 [5]),
        .I5(pdes6__13),
        .O(b4[3]));
  LUT3 #(
    .INIT(8'hA9)) 
    \dout[9]_i_2__0 
       (.I0(pdes6__13),
        .I1(\dout[9]_i_4__0_n_0 ),
        .I2(\dout_reg[9]_0 [8]),
        .O(\dout[9]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008000000)) 
    \dout[9]_i_3__0 
       (.I0(\dout_reg[9]_0 [8]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [0]),
        .I3(\dout_reg[9]_0 [4]),
        .I4(\dout_reg[9]_0 [2]),
        .I5(\dout_reg[9]_0 [1]),
        .O(k28__4));
  LUT6 #(
    .INIT(64'h0020200420040400)) 
    \dout[9]_i_4__0 
       (.I0(\dout_reg[9]_0 [3]),
        .I1(\dout_reg[9]_0 [4]),
        .I2(\ngdb.disp_run_reg_n_0 ),
        .I3(\dout_reg[9]_0 [2]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\dout_reg[9]_0 [0]),
        .O(\dout[9]_i_4__0_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[0]_i_1__0_n_0 ),
        .Q(out[0]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[1]_i_1__0_n_0 ),
        .Q(out[1]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[2]_i_1__0_n_0 ),
        .Q(out[2]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[3]_i_1__0_n_0 ),
        .Q(out[3]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[4]_i_1__0_n_0 ),
        .Q(out[4]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[5]_i_1__0_n_0 ),
        .Q(out[5]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[0]),
        .Q(out[6]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[1]),
        .Q(out[7]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[2]),
        .Q(out[8]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[3]),
        .Q(out[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6A99)) 
    \ngdb.disp_run_i_1__0 
       (.I0(pdes6__13),
        .I1(\dout_reg[9]_0 [5]),
        .I2(\dout_reg[9]_0 [7]),
        .I3(\dout_reg[9]_0 [6]),
        .O(pdes4));
  LUT3 #(
    .INIT(8'h74)) 
    \ngdb.disp_run_i_2__0 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(\ngdb.disp_run_i_3__0_n_0 ),
        .O(pdes6__13));
  LUT6 #(
    .INIT(64'h177E7EE0E881811F)) 
    \ngdb.disp_run_i_3__0 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [0]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(\ngdb.disp_run_i_3__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngdb.disp_run_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pdes4),
        .Q(\ngdb.disp_run_reg_n_0 ),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "encoder_8b10b" *) 
module encoder_8b10b_29
   (out,
    CLK,
    \dout_reg[9]_0 );
  output [9:0]out;
  input CLK;
  input [8:0]\dout_reg[9]_0 ;

  wire CLK;
  wire [3:0]b4;
  wire [5:0]b6;
  wire \dout[0]_i_1_n_0 ;
  wire \dout[1]_i_1_n_0 ;
  wire \dout[2]_i_1_n_0 ;
  wire \dout[3]_i_1_n_0 ;
  wire \dout[4]_i_1_n_0 ;
  wire \dout[5]_i_1_n_0 ;
  wire \dout[9]_i_2_n_0 ;
  wire \dout[9]_i_4_n_0 ;
  wire [8:0]\dout_reg[9]_0 ;
  wire k28__4;
  wire \ngdb.disp_run_i_3_n_0 ;
  wire \ngdb.disp_run_reg_n_0 ;
  (* RTL_KEEP = "true" *) wire [9:0]out;
  wire pdes4;
  wire pdes6__13;

  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \dout[0]_i_1 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[0]),
        .O(\dout[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h477F8002BFFE011D)) 
    \dout[0]_i_2 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\dout_reg[9]_0 [0]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \dout[1]_i_1 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[1]),
        .O(\dout[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h87807F017F01FE1E)) 
    \dout[1]_i_2 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\ngdb.disp_run_reg_n_0 ),
        .I5(\dout_reg[9]_0 [0]),
        .O(b6[1]));
  LUT3 #(
    .INIT(8'h74)) 
    \dout[2]_i_1 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[2]),
        .O(\dout[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h4870B0F170F9F1E6)) 
    \dout[2]_i_2 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\ngdb.disp_run_reg_n_0 ),
        .I5(\dout_reg[9]_0 [0]),
        .O(b6[2]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \dout[3]_i_1 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[3]),
        .O(\dout[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hB44C4CCE4CCDCDD1)) 
    \dout[3]_i_2 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [0]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[3]));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \dout[4]_i_1 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[4]),
        .O(\dout[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h122B2BB4EAAAAAAB)) 
    \dout[4]_i_2 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [1]),
        .I4(\dout_reg[9]_0 [0]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[4]));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \dout[5]_i_1 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(b6[5]),
        .O(\dout[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h39969660C117177F)) 
    \dout[5]_i_2 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [0]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(b6[5]));
  LUT6 #(
    .INIT(64'h8F8F0000B0BFFF0F)) 
    \dout[6]_i_1 
       (.I0(\dout[9]_i_2_n_0 ),
        .I1(\dout_reg[9]_0 [7]),
        .I2(\dout_reg[9]_0 [6]),
        .I3(k28__4),
        .I4(\dout_reg[9]_0 [5]),
        .I5(pdes6__13),
        .O(b4[0]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT5 #(
    .INIT(32'h00DDFC2E)) 
    \dout[7]_i_1 
       (.I0(\dout_reg[9]_0 [7]),
        .I1(\dout_reg[9]_0 [6]),
        .I2(k28__4),
        .I3(\dout_reg[9]_0 [5]),
        .I4(pdes6__13),
        .O(b4[1]));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT5 #(
    .INIT(32'h66AA9A59)) 
    \dout[8]_i_1 
       (.I0(\dout_reg[9]_0 [7]),
        .I1(\dout_reg[9]_0 [6]),
        .I2(k28__4),
        .I3(\dout_reg[9]_0 [5]),
        .I4(pdes6__13),
        .O(b4[2]));
  LUT6 #(
    .INIT(64'h737330304C43CF3F)) 
    \dout[9]_i_1 
       (.I0(\dout[9]_i_2_n_0 ),
        .I1(\dout_reg[9]_0 [7]),
        .I2(\dout_reg[9]_0 [6]),
        .I3(k28__4),
        .I4(\dout_reg[9]_0 [5]),
        .I5(pdes6__13),
        .O(b4[3]));
  LUT3 #(
    .INIT(8'hA9)) 
    \dout[9]_i_2 
       (.I0(pdes6__13),
        .I1(\dout[9]_i_4_n_0 ),
        .I2(\dout_reg[9]_0 [8]),
        .O(\dout[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000008000000)) 
    \dout[9]_i_3 
       (.I0(\dout_reg[9]_0 [8]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [0]),
        .I3(\dout_reg[9]_0 [4]),
        .I4(\dout_reg[9]_0 [2]),
        .I5(\dout_reg[9]_0 [1]),
        .O(k28__4));
  LUT6 #(
    .INIT(64'h0020200420040400)) 
    \dout[9]_i_4 
       (.I0(\dout_reg[9]_0 [3]),
        .I1(\dout_reg[9]_0 [4]),
        .I2(\ngdb.disp_run_reg_n_0 ),
        .I3(\dout_reg[9]_0 [2]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\dout_reg[9]_0 [0]),
        .O(\dout[9]_i_4_n_0 ));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[0]_i_1_n_0 ),
        .Q(out[0]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[1]_i_1_n_0 ),
        .Q(out[1]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[2]_i_1_n_0 ),
        .Q(out[2]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[3]_i_1_n_0 ),
        .Q(out[3]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[4]_i_1_n_0 ),
        .Q(out[4]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(\dout[5]_i_1_n_0 ),
        .Q(out[5]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[0]),
        .Q(out[6]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[1]),
        .Q(out[7]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[2]),
        .Q(out[8]),
        .R(1'b0));
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \dout_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .D(b4[3]),
        .Q(out[9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h6A99)) 
    \ngdb.disp_run_i_1 
       (.I0(pdes6__13),
        .I1(\dout_reg[9]_0 [5]),
        .I2(\dout_reg[9]_0 [7]),
        .I3(\dout_reg[9]_0 [6]),
        .O(pdes4));
  LUT3 #(
    .INIT(8'h74)) 
    \ngdb.disp_run_i_2 
       (.I0(\ngdb.disp_run_reg_n_0 ),
        .I1(k28__4),
        .I2(\ngdb.disp_run_i_3_n_0 ),
        .O(pdes6__13));
  LUT6 #(
    .INIT(64'h177E7EE0E881811F)) 
    \ngdb.disp_run_i_3 
       (.I0(\dout_reg[9]_0 [4]),
        .I1(\dout_reg[9]_0 [3]),
        .I2(\dout_reg[9]_0 [2]),
        .I3(\dout_reg[9]_0 [0]),
        .I4(\dout_reg[9]_0 [1]),
        .I5(\ngdb.disp_run_reg_n_0 ),
        .O(\ngdb.disp_run_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ngdb.disp_run_reg 
       (.C(CLK),
        .CE(1'b1),
        .D(pdes4),
        .Q(\ngdb.disp_run_reg_n_0 ),
        .R(1'b0));
endmodule

module handshake_synchronizer
   (in0,
    CLK,
    \r_sync_reg[1] ,
    out,
    \r_sync_reg[1]_0 ,
    D);
  output [4:0]in0;
  input CLK;
  input \r_sync_reg[1] ;
  input out;
  input \r_sync_reg[1]_0 ;
  input [4:0]D;

  wire CLK;
  wire [4:0]D;
  wire [4:0]in0;
  wire in_wr_flag;
  (* RTL_KEEP = "inst_sync_ack " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_req " *) wire o_sync__0;
  wire out;
  wire \r_in_data_reg_n_0_[0] ;
  wire \r_in_data_reg_n_0_[1] ;
  wire \r_in_data_reg_n_0_[2] ;
  wire \r_in_data_reg_n_0_[3] ;
  wire \r_in_data_reg_n_0_[4] ;
  wire r_in_req;
  wire r_in_wr;
  wire r_out_data0;
  wire r_out_req_reg_n_0;
  wire \r_sync_reg[1] ;
  wire \r_sync_reg[1]_0 ;
  wire ri_in_req;

  synchronizer__parameterized0__hierPathDup__1_18 inst_sync_ack
       (.CLK(CLK),
        .D(r_out_req_reg_n_0),
        .out(o_sync),
        .\r_sync_reg[1]_0 (\r_sync_reg[1] ));
  synchronizer__parameterized0__hierPathDup__2_19 inst_sync_req
       (.out(o_sync__0),
        .r_in_req(r_in_req),
        .\r_sync_reg[1]_0 (\r_sync_reg[1]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_in_data[4]_i_1__2 
       (.I0(out),
        .I1(r_in_wr),
        .O(in_wr_flag));
  FDCE \r_in_data_reg[0] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[0]),
        .Q(\r_in_data_reg_n_0_[0] ));
  FDCE \r_in_data_reg[1] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[1]),
        .Q(\r_in_data_reg_n_0_[1] ));
  FDCE \r_in_data_reg[2] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[2]),
        .Q(\r_in_data_reg_n_0_[2] ));
  FDCE \r_in_data_reg[3] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[3]),
        .Q(\r_in_data_reg_n_0_[3] ));
  FDCE \r_in_data_reg[4] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[4]),
        .Q(\r_in_data_reg_n_0_[4] ));
  FDCE r_in_req_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(ri_in_req),
        .Q(r_in_req));
  FDCE r_in_wr_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(out),
        .Q(r_in_wr));
  LUT2 #(
    .INIT(4'h2)) 
    \r_out_data[4]_i_1__2 
       (.I0(o_sync__0),
        .I1(r_out_req_reg_n_0),
        .O(r_out_data0));
  FDRE \r_out_data_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[0] ),
        .Q(in0[0]),
        .R(1'b0));
  FDRE \r_out_data_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[1] ),
        .Q(in0[1]),
        .R(1'b0));
  FDRE \r_out_data_reg[2] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[2] ),
        .Q(in0[2]),
        .R(1'b0));
  FDRE \r_out_data_reg[3] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[3] ),
        .Q(in0[3]),
        .R(1'b0));
  FDRE \r_out_data_reg[4] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[4] ),
        .Q(in0[4]),
        .R(1'b0));
  FDRE r_out_req_reg
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(o_sync__0),
        .Q(r_out_req_reg_n_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00AE)) 
    ri_in_req__0
       (.I0(r_in_req),
        .I1(out),
        .I2(r_in_wr),
        .I3(o_sync),
        .O(ri_in_req));
endmodule

(* ORIG_REF_NAME = "handshake_synchronizer" *) 
module handshake_synchronizer_0
   (in0,
    CLK,
    \r_sync_reg[1] ,
    D,
    \r_sync_reg[0] ,
    \r_in_data_reg[4]_0 );
  output [4:0]in0;
  input CLK;
  input \r_sync_reg[1] ;
  input [0:0]D;
  input \r_sync_reg[0] ;
  input [4:0]\r_in_data_reg[4]_0 ;

  wire CLK;
  wire [0:0]D;
  wire [4:0]in0;
  wire in_wr_flag;
  (* RTL_KEEP = "inst_sync_ack " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_req " *) wire o_sync__0;
  wire [4:0]r_in_data;
  wire [4:0]\r_in_data_reg[4]_0 ;
  wire r_in_req;
  wire r_in_wr;
  wire r_out_data0;
  wire r_out_req_reg_n_0;
  wire \r_sync_reg[0] ;
  wire \r_sync_reg[1] ;
  wire ri_in_req;

  synchronizer__parameterized0__hierPathDup__1 inst_sync_ack
       (.CLK(CLK),
        .D(r_out_req_reg_n_0),
        .out(o_sync),
        .\r_sync_reg[1]_0 (\r_sync_reg[1] ));
  synchronizer__parameterized0__hierPathDup__2 inst_sync_req
       (.out(o_sync__0),
        .r_in_req(r_in_req),
        .\r_sync_reg[0]_0 (\r_sync_reg[0] ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_in_data[4]_i_1__1 
       (.I0(D),
        .I1(r_in_wr),
        .O(in_wr_flag));
  FDCE \r_in_data_reg[0] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [0]),
        .Q(r_in_data[0]));
  FDCE \r_in_data_reg[1] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [1]),
        .Q(r_in_data[1]));
  FDCE \r_in_data_reg[2] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [2]),
        .Q(r_in_data[2]));
  FDCE \r_in_data_reg[3] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [3]),
        .Q(r_in_data[3]));
  FDCE \r_in_data_reg[4] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [4]),
        .Q(r_in_data[4]));
  FDCE r_in_req_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(ri_in_req),
        .Q(r_in_req));
  FDCE r_in_wr_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(D),
        .Q(r_in_wr));
  LUT2 #(
    .INIT(4'h2)) 
    \r_out_data[4]_i_1__1 
       (.I0(o_sync__0),
        .I1(r_out_req_reg_n_0),
        .O(r_out_data0));
  FDRE \r_out_data_reg[0] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(r_in_data[0]),
        .Q(in0[0]),
        .R(1'b0));
  FDRE \r_out_data_reg[1] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(r_in_data[1]),
        .Q(in0[1]),
        .R(1'b0));
  FDRE \r_out_data_reg[2] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(r_in_data[2]),
        .Q(in0[2]),
        .R(1'b0));
  FDRE \r_out_data_reg[3] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(r_in_data[3]),
        .Q(in0[3]),
        .R(1'b0));
  FDRE \r_out_data_reg[4] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(r_in_data[4]),
        .Q(in0[4]),
        .R(1'b0));
  FDRE r_out_req_reg
       (.C(\r_sync_reg[0] ),
        .CE(1'b1),
        .D(o_sync__0),
        .Q(r_out_req_reg_n_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00AE)) 
    ri_in_req__0
       (.I0(r_in_req),
        .I1(D),
        .I2(r_in_wr),
        .I3(o_sync),
        .O(ri_in_req));
endmodule

(* ORIG_REF_NAME = "handshake_synchronizer" *) 
module handshake_synchronizer_20
   (in0,
    CLK,
    \r_sync_reg[1] ,
    out,
    \r_sync_reg[0] ,
    D);
  output [4:0]in0;
  input CLK;
  input \r_sync_reg[1] ;
  input out;
  input \r_sync_reg[0] ;
  input [4:0]D;

  wire CLK;
  wire [4:0]D;
  wire [4:0]in0;
  wire in_wr_flag;
  (* RTL_KEEP = "inst_sync_ack " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_req " *) wire o_sync__0;
  wire out;
  wire \r_in_data_reg_n_0_[0] ;
  wire \r_in_data_reg_n_0_[1] ;
  wire \r_in_data_reg_n_0_[2] ;
  wire \r_in_data_reg_n_0_[3] ;
  wire \r_in_data_reg_n_0_[4] ;
  wire r_in_req;
  wire r_in_wr;
  wire r_out_data0;
  wire r_out_req_reg_n_0;
  wire \r_sync_reg[0] ;
  wire \r_sync_reg[1] ;
  wire ri_in_req__0;

  synchronizer__parameterized0__hierPathDup__1_59 inst_sync_ack
       (.CLK(CLK),
        .D(r_out_req_reg_n_0),
        .out(o_sync),
        .\r_sync_reg[1]_0 (\r_sync_reg[1] ));
  synchronizer__parameterized0__hierPathDup__2_60 inst_sync_req
       (.out(o_sync__0),
        .r_in_req(r_in_req),
        .\r_sync_reg[0]_0 (\r_sync_reg[0] ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_in_data[4]_i_1__0 
       (.I0(out),
        .I1(r_in_wr),
        .O(in_wr_flag));
  FDCE \r_in_data_reg[0] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[0]),
        .Q(\r_in_data_reg_n_0_[0] ));
  FDCE \r_in_data_reg[1] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[1]),
        .Q(\r_in_data_reg_n_0_[1] ));
  FDCE \r_in_data_reg[2] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[2]),
        .Q(\r_in_data_reg_n_0_[2] ));
  FDCE \r_in_data_reg[3] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[3]),
        .Q(\r_in_data_reg_n_0_[3] ));
  FDCE \r_in_data_reg[4] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(D[4]),
        .Q(\r_in_data_reg_n_0_[4] ));
  FDCE r_in_req_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(ri_in_req__0),
        .Q(r_in_req));
  FDCE r_in_wr_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(out),
        .Q(r_in_wr));
  LUT2 #(
    .INIT(4'h2)) 
    \r_out_data[4]_i_1__0 
       (.I0(o_sync__0),
        .I1(r_out_req_reg_n_0),
        .O(r_out_data0));
  FDRE \r_out_data_reg[0] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[0] ),
        .Q(in0[0]),
        .R(1'b0));
  FDRE \r_out_data_reg[1] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[1] ),
        .Q(in0[1]),
        .R(1'b0));
  FDRE \r_out_data_reg[2] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[2] ),
        .Q(in0[2]),
        .R(1'b0));
  FDRE \r_out_data_reg[3] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[3] ),
        .Q(in0[3]),
        .R(1'b0));
  FDRE \r_out_data_reg[4] 
       (.C(\r_sync_reg[0] ),
        .CE(r_out_data0),
        .D(\r_in_data_reg_n_0_[4] ),
        .Q(in0[4]),
        .R(1'b0));
  FDRE r_out_req_reg
       (.C(\r_sync_reg[0] ),
        .CE(1'b1),
        .D(o_sync__0),
        .Q(r_out_req_reg_n_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00AE)) 
    ri_in_req
       (.I0(r_in_req),
        .I1(out),
        .I2(r_in_wr),
        .I3(o_sync),
        .O(ri_in_req__0));
endmodule

(* ORIG_REF_NAME = "handshake_synchronizer" *) 
module handshake_synchronizer_21
   (in0,
    CLK,
    \r_sync_reg[1] ,
    D,
    \r_sync_reg[1]_0 ,
    \r_in_data_reg[4]_0 );
  output [4:0]in0;
  input CLK;
  input \r_sync_reg[1] ;
  input [0:0]D;
  input \r_sync_reg[1]_0 ;
  input [4:0]\r_in_data_reg[4]_0 ;

  wire CLK;
  wire [0:0]D;
  wire [4:0]in0;
  wire in_wr_flag;
  (* RTL_KEEP = "inst_sync_ack " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_req " *) wire o_sync__0;
  wire [4:0]r_in_data;
  wire [4:0]\r_in_data_reg[4]_0 ;
  wire r_in_req;
  wire r_in_wr;
  wire r_out_data0;
  wire r_out_req_reg_n_0;
  wire \r_sync_reg[1] ;
  wire \r_sync_reg[1]_0 ;
  wire ri_in_req__0;

  synchronizer__parameterized0__hierPathDup__1_57 inst_sync_ack
       (.CLK(CLK),
        .D(r_out_req_reg_n_0),
        .out(o_sync),
        .\r_sync_reg[1]_0 (\r_sync_reg[1] ));
  synchronizer__parameterized0__hierPathDup__2_58 inst_sync_req
       (.out(o_sync__0),
        .r_in_req(r_in_req),
        .\r_sync_reg[1]_0 (\r_sync_reg[1]_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_in_data[4]_i_1 
       (.I0(D),
        .I1(r_in_wr),
        .O(in_wr_flag));
  FDCE \r_in_data_reg[0] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [0]),
        .Q(r_in_data[0]));
  FDCE \r_in_data_reg[1] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [1]),
        .Q(r_in_data[1]));
  FDCE \r_in_data_reg[2] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [2]),
        .Q(r_in_data[2]));
  FDCE \r_in_data_reg[3] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [3]),
        .Q(r_in_data[3]));
  FDCE \r_in_data_reg[4] 
       (.C(CLK),
        .CE(in_wr_flag),
        .CLR(\r_sync_reg[1] ),
        .D(\r_in_data_reg[4]_0 [4]),
        .Q(r_in_data[4]));
  FDCE r_in_req_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(ri_in_req__0),
        .Q(r_in_req));
  FDCE r_in_wr_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1] ),
        .D(D),
        .Q(r_in_wr));
  LUT2 #(
    .INIT(4'h2)) 
    \r_out_data[4]_i_1 
       (.I0(o_sync__0),
        .I1(r_out_req_reg_n_0),
        .O(r_out_data0));
  FDRE \r_out_data_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(r_in_data[0]),
        .Q(in0[0]),
        .R(1'b0));
  FDRE \r_out_data_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(r_in_data[1]),
        .Q(in0[1]),
        .R(1'b0));
  FDRE \r_out_data_reg[2] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(r_in_data[2]),
        .Q(in0[2]),
        .R(1'b0));
  FDRE \r_out_data_reg[3] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(r_in_data[3]),
        .Q(in0[3]),
        .R(1'b0));
  FDRE \r_out_data_reg[4] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(r_out_data0),
        .D(r_in_data[4]),
        .Q(in0[4]),
        .R(1'b0));
  FDRE r_out_req_reg
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(o_sync__0),
        .Q(r_out_req_reg_n_0),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h00AE)) 
    ri_in_req
       (.I0(r_in_req),
        .I1(D),
        .I2(r_in_wr),
        .I3(o_sync),
        .O(ri_in_req__0));
endmodule

module loop_interface_handler_trx_a
   (out,
    o_running,
    \r_rst_reg[1] ,
    Q,
    o_pattern,
    o_pattern_addr,
    o_pattern_addr_0,
    o_pattern_addr_1,
    \r_state_reg[6]_0 ,
    \r_state_reg[9]_0 ,
    \r_pattern_num_reg[2]_0 ,
    D,
    \r_pattern_num_reg[2]_1 ,
    \r_state_reg[1]_0 ,
    \r_state_reg[1]_1 ,
    \r_state_reg[0]_0 ,
    \r_state_reg[0]_1 );
  output out;
  output o_running;
  output \r_rst_reg[1] ;
  output [2:0]Q;
  output [55:0]o_pattern;
  output o_pattern_addr;
  output o_pattern_addr_0;
  output o_pattern_addr_1;
  output \r_state_reg[6]_0 ;
  input \r_state_reg[9]_0 ;
  input \r_pattern_num_reg[2]_0 ;
  input [33:0]D;
  input [2:0]\r_pattern_num_reg[2]_1 ;
  input \r_state_reg[1]_0 ;
  input \r_state_reg[1]_1 ;
  input \r_state_reg[0]_0 ;
  input \r_state_reg[0]_1 ;

  wire [33:0]D;
  wire [2:0]Q;
  wire [55:0]o_pattern;
  wire o_pattern_addr;
  wire o_pattern_addr_0;
  wire o_pattern_addr_1;
  (* RTL_KEEP = "true" *) wire out;
  wire \r_bank_addr[0]_i_1_n_0 ;
  wire \r_bank_addr[0]_i_2_n_0 ;
  wire \r_bank_addr[0]_i_3_n_0 ;
  wire \r_bank_addr[1]_i_1_n_0 ;
  wire \r_bank_addr[1]_i_2_n_0 ;
  wire \r_bank_addr[2]_i_1_n_0 ;
  wire \r_bank_addr[2]_i_2_n_0 ;
  wire \r_bank_addr[2]_i_3_n_0 ;
  wire \r_bank_addr[2]_i_4_n_0 ;
  wire \r_bank_addr[2]_i_5_n_0 ;
  wire [2:0]r_pattern_num;
  wire \r_pattern_num_reg[2]_0 ;
  wire [2:0]\r_pattern_num_reg[2]_1 ;
  wire \r_rst_reg[1] ;
  wire \r_state[0]_i_2__1_n_0 ;
  wire \r_state[0]_i_3__1_n_0 ;
  wire \r_state[0]_i_4__1_n_0 ;
  wire \r_state[0]_i_5_n_0 ;
  wire \r_state[1]_i_2_n_0 ;
  wire \r_state[1]_i_3_n_0 ;
  wire \r_state[1]_i_4_n_0 ;
  wire \r_state[2]_i_2__1_n_0 ;
  wire \r_state[5]_i_2__2_n_0 ;
  wire \r_state[7]_i_2__0_n_0 ;
  wire \r_state[8]_i_2__1_n_0 ;
  wire \r_state[9]_i_10_n_0 ;
  wire \r_state[9]_i_11_n_0 ;
  wire \r_state[9]_i_1__1_n_0 ;
  wire \r_state[9]_i_4_n_0 ;
  wire \r_state[9]_i_5_n_0 ;
  wire \r_state[9]_i_6_n_0 ;
  wire \r_state[9]_i_7_n_0 ;
  wire \r_state[9]_i_8_n_0 ;
  wire \r_state[9]_i_9_n_0 ;
  (* RTL_KEEP = "true" *) wire [6:0]r_state_reg;
  wire \r_state_reg[0]_0 ;
  wire \r_state_reg[0]_1 ;
  wire \r_state_reg[1]_0 ;
  wire \r_state_reg[1]_1 ;
  wire \r_state_reg[6]_0 ;
  wire \r_state_reg[9]_0 ;
  wire \r_state_reg_n_0_[2] ;
  wire \r_state_reg_n_0_[4] ;
  wire \r_state_reg_n_0_[5] ;
  wire \r_state_reg_n_0_[7] ;
  wire [2:0]ri_pattern_num;
  wire [9:0]ri_state;
  wire [21:0]ri_temp;
  wire [55:21]ri_temp_0;

  assign o_running = r_state_reg[0];
  LUT2 #(
    .INIT(4'hE)) 
    o_trx_a_data_rd_inferred_i_1
       (.I0(r_state_reg[6]),
        .I1(Q[1]),
        .O(\r_state_reg[6]_0 ));
  LUT6 #(
    .INIT(64'h0000000F11111110)) 
    \r_bank_addr[0]_i_1 
       (.I0(r_state_reg[0]),
        .I1(\r_bank_addr[0]_i_2_n_0 ),
        .I2(\r_bank_addr[0]_i_3_n_0 ),
        .I3(\r_state[2]_i_2__1_n_0 ),
        .I4(\r_bank_addr[2]_i_4_n_0 ),
        .I5(o_pattern_addr_1),
        .O(\r_bank_addr[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_bank_addr[0]_i_2 
       (.I0(out),
        .I1(\r_state_reg_n_0_[4] ),
        .O(\r_bank_addr[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \r_bank_addr[0]_i_3 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\r_state[9]_i_10_n_0 ),
        .O(\r_bank_addr[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAABFAAAAAA80)) 
    \r_bank_addr[1]_i_1 
       (.I0(\r_bank_addr[1]_i_2_n_0 ),
        .I1(\r_state[9]_i_10_n_0 ),
        .I2(\r_bank_addr[2]_i_3_n_0 ),
        .I3(\r_state[2]_i_2__1_n_0 ),
        .I4(\r_bank_addr[2]_i_4_n_0 ),
        .I5(o_pattern_addr_0),
        .O(\r_bank_addr[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000014)) 
    \r_bank_addr[1]_i_2 
       (.I0(r_state_reg[0]),
        .I1(o_pattern_addr_1),
        .I2(o_pattern_addr_0),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(out),
        .O(\r_bank_addr[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAABFAAAAAA80)) 
    \r_bank_addr[2]_i_1 
       (.I0(\r_bank_addr[2]_i_2_n_0 ),
        .I1(\r_state[9]_i_10_n_0 ),
        .I2(\r_bank_addr[2]_i_3_n_0 ),
        .I3(\r_state[2]_i_2__1_n_0 ),
        .I4(\r_bank_addr[2]_i_4_n_0 ),
        .I5(o_pattern_addr),
        .O(\r_bank_addr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001540)) 
    \r_bank_addr[2]_i_2 
       (.I0(r_state_reg[0]),
        .I1(o_pattern_addr_0),
        .I2(o_pattern_addr_1),
        .I3(o_pattern_addr),
        .I4(\r_state_reg_n_0_[4] ),
        .I5(out),
        .O(\r_bank_addr[2]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_bank_addr[2]_i_3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\r_bank_addr[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0A0A0A0A0A0A0A0E)) 
    \r_bank_addr[2]_i_4 
       (.I0(\r_bank_addr[2]_i_5_n_0 ),
        .I1(r_state_reg[0]),
        .I2(\r_state[9]_i_5_n_0 ),
        .I3(\r_state[9]_i_8_n_0 ),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\r_bank_addr[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000110)) 
    \r_bank_addr[2]_i_5 
       (.I0(out),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(r_state_reg[0]),
        .I5(\r_state[0]_i_4__1_n_0 ),
        .O(\r_bank_addr[2]_i_5_n_0 ));
  FDCE \r_bank_addr_reg[0] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[0]_i_1_n_0 ),
        .Q(o_pattern_addr_1));
  FDCE \r_bank_addr_reg[1] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[1]_i_1_n_0 ),
        .Q(o_pattern_addr_0));
  FDCE \r_bank_addr_reg[2] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[2]_i_1_n_0 ),
        .Q(o_pattern_addr));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_pattern_num[0]_i_1 
       (.I0(r_pattern_num[0]),
        .I1(\r_state[1]_i_3_n_0 ),
        .I2(\r_pattern_num_reg[2]_1 [0]),
        .O(ri_pattern_num[0]));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_pattern_num[1]_i_1 
       (.I0(r_pattern_num[1]),
        .I1(\r_state[1]_i_3_n_0 ),
        .I2(\r_pattern_num_reg[2]_1 [1]),
        .O(ri_pattern_num[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_pattern_num[2]_i_1 
       (.I0(r_pattern_num[2]),
        .I1(\r_state[1]_i_3_n_0 ),
        .I2(\r_pattern_num_reg[2]_1 [2]),
        .O(ri_pattern_num[2]));
  FDCE \r_pattern_num_reg[0] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_pattern_num[0]),
        .Q(r_pattern_num[0]));
  FDCE \r_pattern_num_reg[1] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_pattern_num[1]),
        .Q(r_pattern_num[1]));
  FDCE \r_pattern_num_reg[2] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_pattern_num[2]),
        .Q(r_pattern_num[2]));
  LUT6 #(
    .INIT(64'hFFFFFEEAFEEAFFFF)) 
    \r_state[0]_i_1__2 
       (.I0(\r_state[0]_i_2__1_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(r_state_reg[0]),
        .I5(\r_state[0]_i_3__1_n_0 ),
        .O(ri_state[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFEE8)) 
    \r_state[0]_i_2__1 
       (.I0(\r_state[9]_i_6_n_0 ),
        .I1(out),
        .I2(\r_state_reg_n_0_[4] ),
        .I3(\r_state[0]_i_4__1_n_0 ),
        .I4(\r_state[9]_i_5_n_0 ),
        .I5(\r_state[0]_i_5_n_0 ),
        .O(\r_state[0]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[0]_i_3__1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state[9]_i_8_n_0 ),
        .I4(Q[1]),
        .I5(Q[0]),
        .O(\r_state[0]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[0]_i_4__1 
       (.I0(r_state_reg[6]),
        .I1(Q[2]),
        .O(\r_state[0]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'hF888F888F888F8F8)) 
    \r_state[0]_i_5 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(r_state_reg[6]),
        .I4(\r_state_reg[1]_0 ),
        .I5(\r_state_reg[1]_1 ),
        .O(\r_state[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h00000200FFFFFFFF)) 
    \r_state[1]_i_1__2 
       (.I0(\r_state[7]_i_2__0_n_0 ),
        .I1(out),
        .I2(\r_state_reg_n_0_[4] ),
        .I3(Q[2]),
        .I4(\r_state[1]_i_2_n_0 ),
        .I5(\r_state[1]_i_3_n_0 ),
        .O(ri_state[1]));
  LUT3 #(
    .INIT(8'hAB)) 
    \r_state[1]_i_2 
       (.I0(r_state_reg[6]),
        .I1(\r_state_reg[1]_0 ),
        .I2(\r_state_reg[1]_1 ),
        .O(\r_state[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \r_state[1]_i_3 
       (.I0(Q[0]),
        .I1(Q[1]),
        .I2(\r_state[1]_i_4_n_0 ),
        .I3(r_state_reg[0]),
        .O(\r_state[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[1]_i_4 
       (.I0(\r_bank_addr[0]_i_2_n_0 ),
        .I1(r_state_reg[6]),
        .I2(Q[2]),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state_reg_n_0_[7] ),
        .O(\r_state[1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'hFFFF2000)) 
    \r_state[2]_i_1__2 
       (.I0(\r_state[9]_i_10_n_0 ),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\r_state[9]_i_9_n_0 ),
        .I4(\r_state[2]_i_2__1_n_0 ),
        .O(ri_state[2]));
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[2]_i_2__1 
       (.I0(r_state_reg[6]),
        .I1(Q[2]),
        .I2(out),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(\r_state[7]_i_2__0_n_0 ),
        .O(\r_state[2]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \r_state[3]_i_1__2 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state[8]_i_2__1_n_0 ),
        .O(ri_state[3]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \r_state[4]_i_1__2 
       (.I0(\r_state[9]_i_9_n_0 ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\r_state[9]_i_10_n_0 ),
        .O(ri_state[4]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hFFFF2000)) 
    \r_state[5]_i_1__2 
       (.I0(\r_state[9]_i_10_n_0 ),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\r_state[9]_i_9_n_0 ),
        .I4(\r_state[5]_i_2__2_n_0 ),
        .O(ri_state[5]));
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[5]_i_2__2 
       (.I0(r_state_reg[6]),
        .I1(Q[2]),
        .I2(\r_state_reg_n_0_[4] ),
        .I3(out),
        .I4(\r_state[7]_i_2__0_n_0 ),
        .O(\r_state[5]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'h0400)) 
    \r_state[6]_i_1__1 
       (.I0(\r_state_reg_n_0_[2] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state[8]_i_2__1_n_0 ),
        .O(ri_temp_0[55]));
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[7]_i_1__1 
       (.I0(out),
        .I1(\r_state_reg_n_0_[4] ),
        .I2(r_state_reg[6]),
        .I3(Q[2]),
        .I4(\r_state[7]_i_2__0_n_0 ),
        .O(ri_state[7]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[7]_i_2__0 
       (.I0(r_state_reg[0]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state_reg_n_0_[7] ),
        .O(\r_state[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \r_state[8]_i_1__1 
       (.I0(\r_state_reg_n_0_[2] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state[8]_i_2__1_n_0 ),
        .O(ri_state[8]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[8]_i_2__1 
       (.I0(r_state_reg[0]),
        .I1(Q[0]),
        .I2(Q[1]),
        .I3(\r_bank_addr[0]_i_2_n_0 ),
        .I4(r_state_reg[6]),
        .I5(Q[2]),
        .O(\r_state[8]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[9]_i_10 
       (.I0(\r_state[9]_i_5_n_0 ),
        .I1(Q[2]),
        .I2(r_state_reg[6]),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(out),
        .I5(r_state_reg[0]),
        .O(\r_state[9]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_11 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[7] ),
        .O(\r_state[9]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEB)) 
    \r_state[9]_i_1__1 
       (.I0(\r_state[9]_i_4_n_0 ),
        .I1(\r_state[9]_i_5_n_0 ),
        .I2(r_state_reg[0]),
        .I3(\r_state[9]_i_6_n_0 ),
        .I4(\r_state[9]_i_7_n_0 ),
        .I5(\r_state[9]_i_8_n_0 ),
        .O(\r_state[9]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \r_state[9]_i_2__0 
       (.I0(\r_state[9]_i_9_n_0 ),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\r_state[9]_i_10_n_0 ),
        .O(ri_state[9]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[9]_i_3 
       (.I0(\r_state_reg[9]_0 ),
        .O(\r_rst_reg[1] ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h00F00EFEFFFF0EFE)) 
    \r_state[9]_i_4 
       (.I0(\r_state_reg[1]_0 ),
        .I1(\r_state_reg[1]_1 ),
        .I2(\r_state[9]_i_11_n_0 ),
        .I3(\r_state_reg[0]_0 ),
        .I4(\r_state_reg_n_0_[2] ),
        .I5(\r_state_reg[0]_1 ),
        .O(\r_state[9]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[9]_i_5 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[2] ),
        .O(\r_state[9]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_6 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\r_state[9]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hE8)) 
    \r_state[9]_i_7 
       (.I0(\r_state_reg_n_0_[2] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[5] ),
        .O(\r_state[9]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[9]_i_8 
       (.I0(Q[2]),
        .I1(r_state_reg[6]),
        .I2(\r_state_reg_n_0_[4] ),
        .I3(out),
        .O(\r_state[9]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_state[9]_i_9 
       (.I0(r_pattern_num[2]),
        .I1(o_pattern_addr),
        .I2(r_pattern_num[1]),
        .I3(o_pattern_addr_0),
        .I4(o_pattern_addr_1),
        .I5(r_pattern_num[0]),
        .O(\r_state[9]_i_9_n_0 ));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .D(ri_state[0]),
        .PRE(\r_rst_reg[1] ),
        .Q(r_state_reg[0]));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[1]),
        .Q(out));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[2]),
        .Q(\r_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[3]),
        .Q(Q[0]));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[4]),
        .Q(\r_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[5]),
        .Q(\r_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp_0[55]),
        .Q(r_state_reg[6]));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[7]),
        .Q(\r_state_reg_n_0_[7] ));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[8]),
        .Q(Q[1]));
  (* FSM_ENCODED_STATES = "S_TRX_WRITE_BANK:0100000000,S_WRITE_TRX:0000001000,S_WAIT_TRX_READY:0000000100,S_TRX_READ_PART_2:0010000000,S_START_LOOP:0000000010,S_TRX_READ_PART_1:0001000000,S_START_RESPONSE:0000010000,S_LOOP_DONE:1000000000,S_WAIT_TRX_VALID:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(\r_state[9]_i_1__1_n_0 ),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state[9]),
        .Q(Q[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[0]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[12]),
        .O(ri_temp[0]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[10]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[22]),
        .O(ri_temp[10]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[11]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[23]),
        .O(ri_temp[11]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[12]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[24]),
        .O(ri_temp[12]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[13]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[25]),
        .O(ri_temp[13]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[14]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[26]),
        .O(ri_temp[14]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[15]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[27]),
        .O(ri_temp[15]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[16]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[28]),
        .O(ri_temp[16]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[17]_i_1 
       (.I0(D[29]),
        .I1(\r_state_reg_n_0_[7] ),
        .O(ri_temp[17]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[18]_i_1 
       (.I0(D[30]),
        .I1(\r_state_reg_n_0_[7] ),
        .O(ri_temp[18]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[19]_i_1 
       (.I0(D[31]),
        .I1(\r_state_reg_n_0_[7] ),
        .O(ri_temp[19]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[1]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[13]),
        .O(ri_temp[1]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[20]_i_1 
       (.I0(D[32]),
        .I1(\r_state_reg_n_0_[7] ),
        .O(ri_temp[20]));
  LUT4 #(
    .INIT(16'h1400)) 
    \r_temp[21]_i_1 
       (.I0(\r_state_reg_n_0_[2] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state[8]_i_2__1_n_0 ),
        .O(ri_temp_0[21]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[21]_i_2 
       (.I0(D[33]),
        .I1(\r_state_reg_n_0_[7] ),
        .O(ri_temp[21]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[2]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[14]),
        .O(ri_temp[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[3]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[15]),
        .O(ri_temp[3]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[4]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[16]),
        .O(ri_temp[4]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[5]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[17]),
        .O(ri_temp[5]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[6]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[18]),
        .O(ri_temp[6]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[7]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[19]),
        .O(ri_temp[7]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[8]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[20]),
        .O(ri_temp[8]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_temp[9]_i_1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(D[21]),
        .O(ri_temp[9]));
  FDCE \r_temp_reg[0] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[0]),
        .Q(o_pattern[0]));
  FDCE \r_temp_reg[10] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[10]),
        .Q(o_pattern[10]));
  FDCE \r_temp_reg[11] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[11]),
        .Q(o_pattern[11]));
  FDCE \r_temp_reg[12] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[12]),
        .Q(o_pattern[12]));
  FDCE \r_temp_reg[13] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[13]),
        .Q(o_pattern[13]));
  FDCE \r_temp_reg[14] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[14]),
        .Q(o_pattern[14]));
  FDCE \r_temp_reg[15] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[15]),
        .Q(o_pattern[15]));
  FDCE \r_temp_reg[16] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[16]),
        .Q(o_pattern[16]));
  FDCE \r_temp_reg[17] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[17]),
        .Q(o_pattern[17]));
  FDCE \r_temp_reg[18] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[18]),
        .Q(o_pattern[18]));
  FDCE \r_temp_reg[19] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[19]),
        .Q(o_pattern[19]));
  FDCE \r_temp_reg[1] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[1]),
        .Q(o_pattern[1]));
  FDCE \r_temp_reg[20] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[20]),
        .Q(o_pattern[20]));
  FDCE \r_temp_reg[21] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[21]),
        .Q(o_pattern[21]));
  FDCE \r_temp_reg[22] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[0]),
        .Q(o_pattern[22]));
  FDCE \r_temp_reg[23] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[1]),
        .Q(o_pattern[23]));
  FDCE \r_temp_reg[24] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[2]),
        .Q(o_pattern[24]));
  FDCE \r_temp_reg[25] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[3]),
        .Q(o_pattern[25]));
  FDCE \r_temp_reg[26] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[4]),
        .Q(o_pattern[26]));
  FDCE \r_temp_reg[27] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[5]),
        .Q(o_pattern[27]));
  FDCE \r_temp_reg[28] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[6]),
        .Q(o_pattern[28]));
  FDCE \r_temp_reg[29] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[7]),
        .Q(o_pattern[29]));
  FDCE \r_temp_reg[2] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[2]),
        .Q(o_pattern[2]));
  FDCE \r_temp_reg[30] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[8]),
        .Q(o_pattern[30]));
  FDCE \r_temp_reg[31] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[9]),
        .Q(o_pattern[31]));
  FDCE \r_temp_reg[32] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[10]),
        .Q(o_pattern[32]));
  FDCE \r_temp_reg[33] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[11]),
        .Q(o_pattern[33]));
  FDCE \r_temp_reg[34] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[12]),
        .Q(o_pattern[34]));
  FDCE \r_temp_reg[35] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[13]),
        .Q(o_pattern[35]));
  FDCE \r_temp_reg[36] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[14]),
        .Q(o_pattern[36]));
  FDCE \r_temp_reg[37] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[15]),
        .Q(o_pattern[37]));
  FDCE \r_temp_reg[38] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[16]),
        .Q(o_pattern[38]));
  FDCE \r_temp_reg[39] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[17]),
        .Q(o_pattern[39]));
  FDCE \r_temp_reg[3] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[3]),
        .Q(o_pattern[3]));
  FDCE \r_temp_reg[40] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[18]),
        .Q(o_pattern[40]));
  FDCE \r_temp_reg[41] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[19]),
        .Q(o_pattern[41]));
  FDCE \r_temp_reg[42] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[20]),
        .Q(o_pattern[42]));
  FDCE \r_temp_reg[43] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[21]),
        .Q(o_pattern[43]));
  FDCE \r_temp_reg[44] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[22]),
        .Q(o_pattern[44]));
  FDCE \r_temp_reg[45] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[23]),
        .Q(o_pattern[45]));
  FDCE \r_temp_reg[46] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[24]),
        .Q(o_pattern[46]));
  FDCE \r_temp_reg[47] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[25]),
        .Q(o_pattern[47]));
  FDCE \r_temp_reg[48] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[26]),
        .Q(o_pattern[48]));
  FDCE \r_temp_reg[49] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[27]),
        .Q(o_pattern[49]));
  FDCE \r_temp_reg[4] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[4]),
        .Q(o_pattern[4]));
  FDCE \r_temp_reg[50] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[28]),
        .Q(o_pattern[50]));
  FDCE \r_temp_reg[51] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[29]),
        .Q(o_pattern[51]));
  FDCE \r_temp_reg[52] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[30]),
        .Q(o_pattern[52]));
  FDCE \r_temp_reg[53] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[31]),
        .Q(o_pattern[53]));
  FDCE \r_temp_reg[54] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[32]),
        .Q(o_pattern[54]));
  FDCE \r_temp_reg[55] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[55]),
        .CLR(\r_rst_reg[1] ),
        .D(D[33]),
        .Q(o_pattern[55]));
  FDCE \r_temp_reg[5] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[5]),
        .Q(o_pattern[5]));
  FDCE \r_temp_reg[6] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[6]),
        .Q(o_pattern[6]));
  FDCE \r_temp_reg[7] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[7]),
        .Q(o_pattern[7]));
  FDCE \r_temp_reg[8] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[8]),
        .Q(o_pattern[8]));
  FDCE \r_temp_reg[9] 
       (.C(\r_pattern_num_reg[2]_0 ),
        .CE(ri_temp_0[21]),
        .CLR(\r_rst_reg[1] ),
        .D(ri_temp[9]),
        .Q(o_pattern[9]));
endmodule

module loop_interface_handler_trx_b
   (in0,
    Q,
    \r_temp_reg[33]_0 ,
    r_wr_trx_reg_0,
    r_wr_trx_reg_1,
    \r_temp_reg[33]_1 ,
    \r_state_reg[0]_0 ,
    \r_state_reg[5]_0 );
  output in0;
  output [0:0]Q;
  output [33:0]\r_temp_reg[33]_0 ;
  input r_wr_trx_reg_0;
  input r_wr_trx_reg_1;
  input [55:0]\r_temp_reg[33]_1 ;
  input \r_state_reg[0]_0 ;
  input \r_state_reg[5]_0 ;

  wire [0:0]Q;
  wire in0;
  wire \r_state[0]_i_2__2_n_0 ;
  wire \r_state[2]_i_2__2_n_0 ;
  wire \r_state[3]_i_2__0_n_0 ;
  wire \r_state[5]_i_2__3_n_0 ;
  wire \r_state[5]_i_3__1_n_0 ;
  wire \r_state[6]_i_2__0_n_0 ;
  wire [6:0]r_state_reg;
  wire \r_state_reg[0]_0 ;
  wire \r_state_reg[5]_0 ;
  wire \r_temp[0]_i_1__0_n_0 ;
  wire \r_temp[10]_i_1__0_n_0 ;
  wire \r_temp[11]_i_1__0_n_0 ;
  wire \r_temp[12]_i_1__0_n_0 ;
  wire \r_temp[13]_i_1__0_n_0 ;
  wire \r_temp[14]_i_1__0_n_0 ;
  wire \r_temp[15]_i_1__0_n_0 ;
  wire \r_temp[16]_i_1__0_n_0 ;
  wire \r_temp[17]_i_1__0_n_0 ;
  wire \r_temp[18]_i_1__0_n_0 ;
  wire \r_temp[19]_i_1__0_n_0 ;
  wire \r_temp[1]_i_1__0_n_0 ;
  wire \r_temp[20]_i_1__0_n_0 ;
  wire \r_temp[21]_i_1__0_n_0 ;
  wire \r_temp[22]_i_1_n_0 ;
  wire \r_temp[23]_i_1_n_0 ;
  wire \r_temp[24]_i_1_n_0 ;
  wire \r_temp[25]_i_1_n_0 ;
  wire \r_temp[26]_i_1_n_0 ;
  wire \r_temp[27]_i_1_n_0 ;
  wire \r_temp[28]_i_1_n_0 ;
  wire \r_temp[29]_i_1_n_0 ;
  wire \r_temp[2]_i_1__0_n_0 ;
  wire \r_temp[30]_i_1_n_0 ;
  wire \r_temp[31]_i_1_n_0 ;
  wire \r_temp[32]_i_1_n_0 ;
  wire \r_temp[33]_i_2_n_0 ;
  wire \r_temp[3]_i_1__0_n_0 ;
  wire \r_temp[4]_i_1__0_n_0 ;
  wire \r_temp[5]_i_1__0_n_0 ;
  wire \r_temp[6]_i_1__0_n_0 ;
  wire \r_temp[7]_i_1__0_n_0 ;
  wire \r_temp[8]_i_1__0_n_0 ;
  wire \r_temp[9]_i_1__0_n_0 ;
  wire [33:0]\r_temp_reg[33]_0 ;
  wire [55:0]\r_temp_reg[33]_1 ;
  wire r_wr_trx_i_2_n_0;
  wire r_wr_trx_reg_0;
  wire r_wr_trx_reg_1;
  wire [6:0]ri_state__0;
  wire ri_temp;
  wire ri_wr_trx;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'hFFFEEEEE)) 
    \r_state[0]_i_1__3 
       (.I0(\r_state[0]_i_2__2_n_0 ),
        .I1(r_state_reg[6]),
        .I2(\r_state_reg[0]_0 ),
        .I3(r_state_reg[3]),
        .I4(r_state_reg[0]),
        .O(ri_state__0[0]));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFEFEE9)) 
    \r_state[0]_i_2__2 
       (.I0(r_state_reg[1]),
        .I1(Q),
        .I2(r_state_reg[2]),
        .I3(r_state_reg[5]),
        .I4(r_state_reg[0]),
        .I5(r_state_reg[3]),
        .O(\r_state[0]_i_2__2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[1]_i_1__3 
       (.I0(r_state_reg[3]),
        .I1(\r_state_reg[0]_0 ),
        .I2(r_state_reg[0]),
        .I3(r_state_reg[5]),
        .I4(\r_state[6]_i_2__0_n_0 ),
        .O(ri_state__0[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h0001001000000010)) 
    \r_state[2]_i_1__3 
       (.I0(\r_state[2]_i_2__2_n_0 ),
        .I1(Q),
        .I2(r_state_reg[1]),
        .I3(r_state_reg[6]),
        .I4(r_state_reg[2]),
        .I5(\r_state_reg[5]_0 ),
        .O(ri_state__0[2]));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[2]_i_2__2 
       (.I0(r_state_reg[3]),
        .I1(r_state_reg[0]),
        .I2(r_state_reg[5]),
        .O(\r_state[2]_i_2__2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \r_state[3]_i_1__3 
       (.I0(\r_state_reg[5]_0 ),
        .I1(r_state_reg[2]),
        .I2(r_state_reg[6]),
        .I3(\r_state[3]_i_2__0_n_0 ),
        .O(ri_state__0[3]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[3]_i_2__0 
       (.I0(r_state_reg[5]),
        .I1(r_state_reg[0]),
        .I2(r_state_reg[3]),
        .I3(Q),
        .I4(r_state_reg[1]),
        .O(\r_state[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \r_state[4]_i_1__3 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[3]),
        .I2(r_state_reg[5]),
        .I3(\r_state[6]_i_2__0_n_0 ),
        .O(ri_state__0[4]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h0000000002000808)) 
    \r_state[5]_i_1__3 
       (.I0(\r_state[5]_i_2__3_n_0 ),
        .I1(Q),
        .I2(r_state_reg[1]),
        .I3(\r_state_reg[5]_0 ),
        .I4(r_state_reg[5]),
        .I5(\r_state[5]_i_3__1_n_0 ),
        .O(ri_state__0[5]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[5]_i_2__3 
       (.I0(r_state_reg[2]),
        .I1(r_state_reg[6]),
        .O(\r_state[5]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[5]_i_3__1 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[3]),
        .O(\r_state[5]_i_3__1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h01000000)) 
    \r_state[6]_i_1__2 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[3]),
        .I2(\r_state_reg[5]_0 ),
        .I3(r_state_reg[5]),
        .I4(\r_state[6]_i_2__0_n_0 ),
        .O(ri_state__0[6]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[6]_i_2__0 
       (.I0(r_state_reg[6]),
        .I1(r_state_reg[2]),
        .I2(Q),
        .I3(r_state_reg[1]),
        .O(\r_state[6]_i_2__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .D(ri_state__0[0]),
        .PRE(r_wr_trx_reg_1),
        .Q(r_state_reg[0]));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_state__0[1]),
        .Q(r_state_reg[1]));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_state__0[2]),
        .Q(r_state_reg[2]));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_state__0[3]),
        .Q(r_state_reg[3]));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_state__0[4]),
        .Q(Q));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_state__0[5]),
        .Q(r_state_reg[5]));
  (* FSM_ENCODED_STATES = "S_IDLE:0000001,S_WAIT_READY_PART_1:0000100,S_READ_PART_2:0010000,S_WAIT_READY_PART_2:0100000,S_READ_PART_1:0000010,S_WRITE_PART_1:0001000,S_WRITE_PART_2:1000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_state__0[6]),
        .Q(r_state_reg[6]));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[0]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [22]),
        .I1(Q),
        .O(\r_temp[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[10]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [32]),
        .I1(Q),
        .O(\r_temp[10]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[11]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [33]),
        .I1(Q),
        .O(\r_temp[11]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[12]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [34]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [0]),
        .O(\r_temp[12]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[13]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [35]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [1]),
        .O(\r_temp[13]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[14]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [36]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [2]),
        .O(\r_temp[14]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[15]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [37]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [3]),
        .O(\r_temp[15]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[16]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [38]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [4]),
        .O(\r_temp[16]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[17]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [39]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [5]),
        .O(\r_temp[17]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[18]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [40]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [6]),
        .O(\r_temp[18]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[19]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [41]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [7]),
        .O(\r_temp[19]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[1]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [23]),
        .I1(Q),
        .O(\r_temp[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[20]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [42]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [8]),
        .O(\r_temp[20]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[21]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [43]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [9]),
        .O(\r_temp[21]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[22]_i_1 
       (.I0(\r_temp_reg[33]_1 [44]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [10]),
        .O(\r_temp[22]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[23]_i_1 
       (.I0(\r_temp_reg[33]_1 [45]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [11]),
        .O(\r_temp[23]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[24]_i_1 
       (.I0(\r_temp_reg[33]_1 [46]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [12]),
        .O(\r_temp[24]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[25]_i_1 
       (.I0(\r_temp_reg[33]_1 [47]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [13]),
        .O(\r_temp[25]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[26]_i_1 
       (.I0(\r_temp_reg[33]_1 [48]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [14]),
        .O(\r_temp[26]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[27]_i_1 
       (.I0(\r_temp_reg[33]_1 [49]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [15]),
        .O(\r_temp[27]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[28]_i_1 
       (.I0(\r_temp_reg[33]_1 [50]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [16]),
        .O(\r_temp[28]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[29]_i_1 
       (.I0(\r_temp_reg[33]_1 [51]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [17]),
        .O(\r_temp[29]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[2]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [24]),
        .I1(Q),
        .O(\r_temp[2]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[30]_i_1 
       (.I0(\r_temp_reg[33]_1 [52]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [18]),
        .O(\r_temp[30]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[31]_i_1 
       (.I0(\r_temp_reg[33]_1 [53]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [19]),
        .O(\r_temp[31]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[32]_i_1 
       (.I0(\r_temp_reg[33]_1 [54]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [20]),
        .O(\r_temp[32]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100010000)) 
    \r_temp[33]_i_1 
       (.I0(r_state_reg[6]),
        .I1(r_state_reg[2]),
        .I2(r_state_reg[5]),
        .I3(\r_state[5]_i_3__1_n_0 ),
        .I4(r_state_reg[1]),
        .I5(Q),
        .O(ri_temp));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_temp[33]_i_2 
       (.I0(\r_temp_reg[33]_1 [55]),
        .I1(r_state_reg[1]),
        .I2(\r_temp_reg[33]_1 [21]),
        .O(\r_temp[33]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[3]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [25]),
        .I1(Q),
        .O(\r_temp[3]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[4]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [26]),
        .I1(Q),
        .O(\r_temp[4]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[5]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [27]),
        .I1(Q),
        .O(\r_temp[5]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[6]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [28]),
        .I1(Q),
        .O(\r_temp[6]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[7]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [29]),
        .I1(Q),
        .O(\r_temp[7]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[8]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [30]),
        .I1(Q),
        .O(\r_temp[8]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_temp[9]_i_1__0 
       (.I0(\r_temp_reg[33]_1 [31]),
        .I1(Q),
        .O(\r_temp[9]_i_1__0_n_0 ));
  FDCE \r_temp_reg[0] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[0]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [0]));
  FDCE \r_temp_reg[10] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[10]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [10]));
  FDCE \r_temp_reg[11] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[11]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [11]));
  FDCE \r_temp_reg[12] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[12]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [12]));
  FDCE \r_temp_reg[13] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[13]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [13]));
  FDCE \r_temp_reg[14] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[14]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [14]));
  FDCE \r_temp_reg[15] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[15]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [15]));
  FDCE \r_temp_reg[16] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[16]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [16]));
  FDCE \r_temp_reg[17] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[17]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [17]));
  FDCE \r_temp_reg[18] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[18]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [18]));
  FDCE \r_temp_reg[19] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[19]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [19]));
  FDCE \r_temp_reg[1] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[1]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [1]));
  FDCE \r_temp_reg[20] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[20]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [20]));
  FDCE \r_temp_reg[21] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[21]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [21]));
  FDCE \r_temp_reg[22] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[22]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [22]));
  FDCE \r_temp_reg[23] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[23]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [23]));
  FDCE \r_temp_reg[24] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[24]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [24]));
  FDCE \r_temp_reg[25] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[25]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [25]));
  FDCE \r_temp_reg[26] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[26]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [26]));
  FDCE \r_temp_reg[27] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[27]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [27]));
  FDCE \r_temp_reg[28] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[28]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [28]));
  FDCE \r_temp_reg[29] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[29]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [29]));
  FDCE \r_temp_reg[2] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[2]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [2]));
  FDCE \r_temp_reg[30] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[30]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [30]));
  FDCE \r_temp_reg[31] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[31]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [31]));
  FDCE \r_temp_reg[32] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[32]_i_1_n_0 ),
        .Q(\r_temp_reg[33]_0 [32]));
  FDCE \r_temp_reg[33] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[33]_i_2_n_0 ),
        .Q(\r_temp_reg[33]_0 [33]));
  FDCE \r_temp_reg[3] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[3]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [3]));
  FDCE \r_temp_reg[4] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[4]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [4]));
  FDCE \r_temp_reg[5] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[5]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [5]));
  FDCE \r_temp_reg[6] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[6]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [6]));
  FDCE \r_temp_reg[7] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[7]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [7]));
  FDCE \r_temp_reg[8] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[8]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [8]));
  FDCE \r_temp_reg[9] 
       (.C(r_wr_trx_reg_0),
        .CE(ri_temp),
        .CLR(r_wr_trx_reg_1),
        .D(\r_temp[9]_i_1__0_n_0 ),
        .Q(\r_temp_reg[33]_0 [9]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h0000000000010002)) 
    r_wr_trx_i_1
       (.I0(r_state_reg[5]),
        .I1(\r_state[5]_i_3__1_n_0 ),
        .I2(r_wr_trx_i_2_n_0),
        .I3(r_state_reg[6]),
        .I4(r_state_reg[2]),
        .I5(\r_state_reg[5]_0 ),
        .O(ri_wr_trx));
  LUT2 #(
    .INIT(4'hE)) 
    r_wr_trx_i_2
       (.I0(r_state_reg[1]),
        .I1(Q),
        .O(r_wr_trx_i_2_n_0));
  FDCE r_wr_trx_reg
       (.C(r_wr_trx_reg_0),
        .CE(1'b1),
        .CLR(r_wr_trx_reg_1),
        .D(ri_wr_trx),
        .Q(in0));
endmodule

module loop_interface_top
   (out,
    o_loop_done,
    o_loop_timeout,
    o_loop_cycle,
    o_pattern_wr,
    o_pattern_addr,
    o_pattern,
    in0,
    Q,
    o_trx_a_data_wr,
    o_trx_b_data_i,
    o_trx_a_data_rd,
    r_q_reg,
    \r_temp_reg[33] ,
    \r_rst_reg[1] ,
    D,
    \r_pattern_num_reg[2] ,
    \r_state_reg[1] ,
    \r_state_reg[1]_0 ,
    \r_state_reg[0] ,
    \r_state_reg[0]_0 ,
    \r_state_reg[0]_1 ,
    \r_state_reg[5] );
  output out;
  output o_loop_done;
  output o_loop_timeout;
  output [15:0]o_loop_cycle;
  output o_pattern_wr;
  output [2:0]o_pattern_addr;
  output [55:0]o_pattern;
  output in0;
  output [0:0]Q;
  output [0:0]o_trx_a_data_wr;
  output [33:0]o_trx_b_data_i;
  output o_trx_a_data_rd;
  input r_q_reg;
  input [55:0]\r_temp_reg[33] ;
  input \r_rst_reg[1] ;
  input [33:0]D;
  input [2:0]\r_pattern_num_reg[2] ;
  input \r_state_reg[1] ;
  input \r_state_reg[1]_0 ;
  input \r_state_reg[0] ;
  input \r_state_reg[0]_0 ;
  input \r_state_reg[0]_1 ;
  input \r_state_reg[5] ;

  wire [33:0]D;
  wire [0:0]Q;
  wire in0;
  wire inst_handler_a_n_2;
  (* RTL_KEEP = "true" *) wire [15:0]o_loop_cycle;
  (* RTL_KEEP = "true" *) wire o_loop_done;
  (* RTL_KEEP = "inst_handler_a " *) wire o_loop_start;
  (* RTL_KEEP = "true" *) wire o_loop_timeout;
  (* RTL_KEEP = "inst_loop_cycle_counter " *) wire o_max;
  (* RTL_KEEP = "true" *) wire [55:0]o_pattern;
  (* RTL_KEEP = "true" *) wire [2:0]o_pattern_addr;
  (* RTL_KEEP = "true" *) wire o_pattern_wr;
  (* RTL_KEEP = "inst_local_reset " *) wire o_rst;
  (* RTL_KEEP = "inst_handler_a " *) wire o_running;
  wire o_trx_a_data_rd;
  wire [0:0]o_trx_a_data_wr;
  wire [33:0]o_trx_b_data_i;
  wire [2:0]\r_pattern_num_reg[2] ;
  wire r_q_reg;
  wire \r_rst_reg[1] ;
  wire \r_state_reg[0] ;
  wire \r_state_reg[0]_0 ;
  wire \r_state_reg[0]_1 ;
  wire \r_state_reg[1] ;
  wire \r_state_reg[1]_0 ;
  wire \r_state_reg[5] ;
  wire [55:0]\r_temp_reg[33] ;

  assign out = o_running;
  loop_interface_handler_trx_a inst_handler_a
       (.D(D),
        .Q({o_loop_done,o_pattern_wr,o_trx_a_data_wr}),
        .o_pattern(o_pattern),
        .o_pattern_addr(o_pattern_addr[2]),
        .o_pattern_addr_0(o_pattern_addr[1]),
        .o_pattern_addr_1(o_pattern_addr[0]),
        .o_running(o_running),
        .out(o_loop_start),
        .\r_pattern_num_reg[2]_0 (r_q_reg),
        .\r_pattern_num_reg[2]_1 (\r_pattern_num_reg[2] ),
        .\r_rst_reg[1] (inst_handler_a_n_2),
        .\r_state_reg[0]_0 (\r_state_reg[0] ),
        .\r_state_reg[0]_1 (\r_state_reg[0]_0 ),
        .\r_state_reg[1]_0 (\r_state_reg[1] ),
        .\r_state_reg[1]_1 (\r_state_reg[1]_0 ),
        .\r_state_reg[6]_0 (o_trx_a_data_rd),
        .\r_state_reg[9]_0 (o_rst));
  loop_interface_handler_trx_b inst_handler_b
       (.Q(Q),
        .in0(in0),
        .\r_state_reg[0]_0 (\r_state_reg[0]_1 ),
        .\r_state_reg[5]_0 (\r_state_reg[5] ),
        .\r_temp_reg[33]_0 (o_trx_b_data_i),
        .\r_temp_reg[33]_1 (\r_temp_reg[33] ),
        .r_wr_trx_reg_0(r_q_reg),
        .r_wr_trx_reg_1(inst_handler_a_n_2));
  async_reset__parameterized1__hierPathDup__2 inst_local_reset
       (.out(o_rst),
        .\r_rst_reg[0]_0 (r_q_reg),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  binary_counter inst_loop_cycle_counter
       (.in0(o_loop_cycle),
        .out(o_max),
        .\r_count_reg[0]_0 (r_q_reg),
        .\r_count_reg[0]_1 (inst_handler_a_n_2),
        .\r_count_reg[0]_2 (o_loop_start),
        .\r_count_reg[0]_3 (o_running));
  sr_ff_65 inst_sel_p_bank
       (.out(o_loop_timeout),
        .r_q_reg_0(r_q_reg),
        .r_q_reg_1(inst_handler_a_n_2),
        .r_q_reg_2(o_max),
        .r_q_reg_3(o_running));
endmodule

module lvds_transceiver_top
   (O268,
    \r_buffer_addr_reg[5] ,
    r_rply_wr_reg,
    \r_mux_stage_reg[7][7] ,
    I117,
    I118,
    \r_tlp_temp_wr_addr_reg[3] ,
    p_3_in,
    FMC_LA04_P,
    FMC_LA04_N,
    o_tlp,
    o_tlp_rdy,
    o_tlp_valid,
    o_mon_edge_tabs,
    o_mon_delay_tabs,
    r_rply_wr_reg_0,
    FMC_LA02_P,
    FMC_LA02_N,
    out,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[0]_1 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[1]_1 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[2]_1 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[3]_1 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[4]_1 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[5]_1 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[6]_1 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    \r_kd_reg[7]_1 ,
    in00,
    \r_rst_reg[1] ,
    inst_oserdese2_master,
    CLK,
    CLKB0,
    i_clk_200,
    FMC_LA07_P,
    FMC_LA07_N,
    \r_mux_stage_reg[7][7]_0 ,
    \r_wr_ptr_bin_reg[0] ,
    \r_rst_reg[0] ,
    \r_rd_ptr_bin_reg[3] );
  output [5:0]O268;
  output \r_buffer_addr_reg[5] ;
  output r_rply_wr_reg;
  output [7:0]\r_mux_stage_reg[7][7] ;
  output [3:0]I117;
  output I118;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [33:0]p_3_in;
  output FMC_LA04_P;
  output FMC_LA04_N;
  output [33:0]o_tlp;
  output o_tlp_rdy;
  output o_tlp_valid;
  output [4:0]o_mon_edge_tabs;
  output [4:0]o_mon_delay_tabs;
  output r_rply_wr_reg_0;
  output FMC_LA02_P;
  output FMC_LA02_N;
  input out;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[0]_1 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[1]_1 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[2]_1 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[3]_1 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[4]_1 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[5]_1 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[6]_1 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input \r_kd_reg[7]_1 ;
  input [33:0]in00;
  input \r_rst_reg[1] ;
  input inst_oserdese2_master;
  input CLK;
  input CLKB0;
  input i_clk_200;
  input FMC_LA07_P;
  input FMC_LA07_N;
  input [55:0]\r_mux_stage_reg[7][7]_0 ;
  input \r_wr_ptr_bin_reg[0] ;
  input \r_rst_reg[0] ;
  input \r_rd_ptr_bin_reg[3] ;

  wire CLK;
  wire CLKB0;
  wire FMC_LA02_N;
  wire FMC_LA02_P;
  wire FMC_LA04_N;
  wire FMC_LA04_P;
  wire FMC_LA07_N;
  wire FMC_LA07_P;
  wire [3:0]I117;
  wire I118;
  wire [5:0]O268;
  wire i_clk_200;
  wire [33:0]in00;
  wire inst_master_reset_n_0;
  wire inst_oserdese2_master;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_cal_done;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_cal_fail;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_clk_120;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_clk_200;
  (* RTL_KEEP = "inst_rx_packet_buffer " *) wire [8:0]o_data;
  (* RTL_KEEP = "inst_tx_packet_buffer " *) wire [8:0]o_data__0;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_delay_tabs;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire [4:0]o_mon_delay_tabs_orig;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_mon_delay_tabs_wr;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_edge_tabs;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire [4:0]o_mon_edge_tabs_orig;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire [7:0]o_packet_byte;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_packet_k_en;
  (* RTL_KEEP = "inst_link_layer_top " *) wire o_phys_cal_start;
  (* RTL_KEEP = "inst_link_layer_top " *) wire [7:0]o_phys_packet_byte;
  (* RTL_KEEP = "inst_link_layer_top " *) wire o_phys_packet_k_en;
  (* RTL_KEEP = "inst_sync_link_cal_done " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_link_cal_fail " *) wire o_sync__0;
  (* RTL_KEEP = "inst_sync_phys_cal_start " *) wire o_sync__1;
  (* RTL_KEEP = "true" *) wire [33:0]o_tlp;
  (* RTL_KEEP = "true" *) wire o_tlp_rdy;
  (* RTL_KEEP = "true" *) wire o_tlp_valid;
  wire out;
  wire [33:0]p_3_in;
  wire \r_buffer_addr_reg[5] ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[0]_1 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[1]_1 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[2]_1 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[3]_1 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[4]_1 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[5]_1 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[6]_1 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire \r_kd_reg[7]_1 ;
  wire [7:0]\r_mux_stage_reg[7][7] ;
  wire [55:0]\r_mux_stage_reg[7][7]_0 ;
  wire \r_rd_ptr_bin_reg[3] ;
  wire r_rply_wr_reg;
  wire r_rply_wr_reg_0;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  wire \r_wr_ptr_bin_reg[0] ;

  handshake_synchronizer_20 inst_cdc_mon_delay_tabs
       (.CLK(o_clk_200),
        .D(o_mon_delay_tabs_orig),
        .in0(o_mon_delay_tabs),
        .out(o_mon_delay_tabs_wr),
        .\r_sync_reg[0] (\r_rst_reg[1] ),
        .\r_sync_reg[1] (inst_master_reset_n_0));
  handshake_synchronizer_21 inst_cdc_mon_edge_tabs
       (.CLK(o_clk_200),
        .D(o_cal_done),
        .in0(o_mon_edge_tabs),
        .\r_in_data_reg[4]_0 (o_mon_edge_tabs_orig),
        .\r_sync_reg[1] (inst_master_reset_n_0),
        .\r_sync_reg[1]_0 (\r_rst_reg[1] ));
  transceiver_link_layer_top inst_link_layer_top
       (.D(o_data),
        .I117(I117),
        .I118(I118),
        .in0(o_tlp_rdy),
        .in00(in00),
        .o_phys_cal_start(o_phys_cal_start),
        .o_phys_packet_byte(o_phys_packet_byte),
        .o_phys_packet_k_en(o_phys_packet_k_en),
        .o_tlp(o_tlp),
        .o_tlp_valid(o_tlp_valid),
        .out(out),
        .p_3_in(p_3_in),
        .\r_buffer_addr_reg[0] (O268[0]),
        .\r_buffer_addr_reg[1] (O268[1]),
        .\r_buffer_addr_reg[2] (O268[2]),
        .\r_buffer_addr_reg[3] (O268[3]),
        .\r_buffer_addr_reg[4] (O268[4]),
        .\r_buffer_addr_reg[5] (O268[5]),
        .\r_buffer_addr_reg[5]_0 (\r_buffer_addr_reg[5] ),
        .\r_kd_reg[0] (\r_kd_reg[0] ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0]_0 ),
        .\r_kd_reg[0]_1 (\r_kd_reg[0]_1 ),
        .\r_kd_reg[1] (\r_kd_reg[1] ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1]_0 ),
        .\r_kd_reg[1]_1 (\r_kd_reg[1]_1 ),
        .\r_kd_reg[2] (\r_kd_reg[2] ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2]_0 ),
        .\r_kd_reg[2]_1 (\r_kd_reg[2]_1 ),
        .\r_kd_reg[3] (\r_kd_reg[3] ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3]_0 ),
        .\r_kd_reg[3]_1 (\r_kd_reg[3]_1 ),
        .\r_kd_reg[4] (\r_kd_reg[4] ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4]_0 ),
        .\r_kd_reg[4]_1 (\r_kd_reg[4]_1 ),
        .\r_kd_reg[5] (\r_kd_reg[5] ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5]_0 ),
        .\r_kd_reg[5]_1 (\r_kd_reg[5]_1 ),
        .\r_kd_reg[6] (\r_kd_reg[6] ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6]_0 ),
        .\r_kd_reg[6]_1 (\r_kd_reg[6]_1 ),
        .\r_kd_reg[7] (\r_kd_reg[7] ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7]_0 ),
        .\r_kd_reg[7]_1 (\r_kd_reg[7]_1 ),
        .\r_mux_stage_reg[7][7] (\r_mux_stage_reg[7][7] ),
        .\r_mux_stage_reg[7][7]_0 (\r_mux_stage_reg[7][7]_0 ),
        .\r_rd_ptr_bin_reg[3] (\r_rd_ptr_bin_reg[3] ),
        .r_rply_wr_reg(r_rply_wr_reg),
        .r_rply_wr_reg_0(r_rply_wr_reg_0),
        .\r_rst_reg[0] (inst_master_reset_n_0),
        .\r_rst_reg[1] (\r_rst_reg[1] ),
        .\r_state_reg[0]__0 (o_sync__0),
        .\r_state_reg[0]__0_0 (o_sync),
        .\r_tlp_temp_wr_addr_reg[3] (\r_tlp_temp_wr_addr_reg[3] ),
        .\r_wr_ptr_bin_reg[0] (\r_wr_ptr_bin_reg[0] ));
  async_reset__parameterized0_22 inst_master_reset
       (.out(out),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[3]_0 (inst_master_reset_n_0));
  transceiver_physical_layer_top inst_physical_layer_top
       (.CLK(CLK),
        .CLKB0(CLKB0),
        .FMC_LA02_N(FMC_LA02_N),
        .FMC_LA02_P(FMC_LA02_P),
        .FMC_LA04_N(FMC_LA04_N),
        .FMC_LA04_P(FMC_LA04_P),
        .FMC_LA07_N(FMC_LA07_N),
        .FMC_LA07_P(FMC_LA07_P),
        .\dout_reg[9] (o_data__0),
        .i_clk_200(i_clk_200),
        .inst_oserdese2_master(inst_oserdese2_master),
        .o_cal_done(o_cal_done),
        .o_cal_fail(o_cal_fail),
        .o_clk_200(o_clk_200),
        .o_mon_delay_tabs(o_mon_delay_tabs_orig),
        .o_mon_delay_tabs_wr(o_mon_delay_tabs_wr),
        .o_mon_edge_tabs(o_mon_edge_tabs_orig),
        .o_packet_byte(o_packet_byte),
        .o_packet_k_en(o_packet_k_en),
        .out(o_clk_120),
        .\r_rst_reg[1] (inst_master_reset_n_0),
        .r_start_reg(o_sync__1));
  transceiver_elastic_buffer__hierPathDup__1 inst_rx_packet_buffer
       (.D({o_packet_k_en,o_packet_byte}),
        .i_wr_clk(o_clk_120),
        .o_data(o_data),
        .out(out),
        .\r_rst_reg[1] (inst_master_reset_n_0));
  synchronizer__parameterized0__hierPathDup__6 inst_sync_link_cal_done
       (.D(o_cal_done),
        .out(o_sync),
        .\r_sync_reg[0]_0 (out),
        .\r_sync_reg[0]_1 (inst_master_reset_n_0));
  synchronizer__parameterized0__hierPathDup__7 inst_sync_link_cal_fail
       (.D(o_cal_fail),
        .out(o_sync__0),
        .\r_sync_reg[0]_0 (inst_master_reset_n_0),
        .\r_sync_reg[1]_0 (out));
  synchronizer__parameterized0__hierPathDup__8 inst_sync_phys_cal_start
       (.CLK(o_clk_120),
        .D(o_phys_cal_start),
        .out(o_sync__1),
        .\r_sync_reg[0]_0 (inst_master_reset_n_0));
  transceiver_elastic_buffer__hierPathDup__2 inst_tx_packet_buffer
       (.CLK(o_clk_120),
        .D({o_phys_packet_k_en,o_phys_packet_byte}),
        .o_data(o_data__0),
        .out(out),
        .\r_rst_reg[1] (inst_master_reset_n_0));
endmodule

(* ORIG_REF_NAME = "lvds_transceiver_top" *) 
module lvds_transceiver_top__parameterized0
   (O399,
    \r_buffer_addr_reg[4] ,
    \r_mux_stage_reg[5][7] ,
    \r_tlp_temp_rd_addr_reg[3] ,
    \r_tr_state_reg[6] ,
    \r_tlp_temp_wr_addr_reg[3] ,
    \r_stage_reg[7][7] ,
    o_clk_600,
    FMC_LA08_P,
    FMC_LA08_N,
    o_tlp,
    o_tlp_rdy,
    o_tlp_valid,
    o_mon_edge_tabs,
    o_mon_delay_tabs,
    r_rply_wr_reg,
    out,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    in0,
    \r_rst_reg[0] ,
    CLKB0,
    FMC_LA03_P,
    FMC_LA03_N,
    \r_rd_ptr_bin_reg[3] ,
    \r_wr_ptr_bin_reg[0] ,
    i_tlp,
    FMC_LA00_CC_P,
    FMC_LA00_CC_N);
  output [5:0]O399;
  output \r_buffer_addr_reg[4] ;
  output [7:0]\r_mux_stage_reg[5][7] ;
  output [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  output \r_tr_state_reg[6] ;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [55:0]\r_stage_reg[7][7] ;
  output o_clk_600;
  output FMC_LA08_P;
  output FMC_LA08_N;
  output [55:0]o_tlp;
  output o_tlp_rdy;
  output o_tlp_valid;
  output [4:0]o_mon_edge_tabs;
  output [4:0]o_mon_delay_tabs;
  output r_rply_wr_reg;
  input out;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input [55:0]in0;
  input \r_rst_reg[0] ;
  input CLKB0;
  input FMC_LA03_P;
  input FMC_LA03_N;
  input \r_rd_ptr_bin_reg[3] ;
  input \r_wr_ptr_bin_reg[0] ;
  input [33:0]i_tlp;
  input FMC_LA00_CC_P;
  input FMC_LA00_CC_N;

  wire CLKB0;
  wire FMC_LA00_CC_N;
  wire FMC_LA00_CC_P;
  wire FMC_LA03_N;
  wire FMC_LA03_P;
  wire FMC_LA08_N;
  wire FMC_LA08_P;
  wire [5:0]O399;
  wire [33:0]i_tlp;
  wire [55:0]in0;
  wire inst_master_reset_n_0;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_cal_done;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_cal_fail;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_clk_120;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_clk_200;
  wire o_clk_600;
  (* RTL_KEEP = "inst_rx_packet_buffer " *) wire [8:0]o_data;
  (* RTL_KEEP = "inst_tx_packet_buffer " *) wire [8:0]o_data__0;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_delay_tabs;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire [4:0]o_mon_delay_tabs_orig;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_mon_delay_tabs_wr;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_edge_tabs;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire [4:0]o_mon_edge_tabs_orig;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire [7:0]o_packet_byte;
  (* RTL_KEEP = "inst_physical_layer_top " *) wire o_packet_k_en;
  (* RTL_KEEP = "inst_link_layer_top " *) wire o_phys_cal_start;
  (* RTL_KEEP = "inst_link_layer_top " *) wire [7:0]o_phys_packet_byte;
  (* RTL_KEEP = "inst_link_layer_top " *) wire o_phys_packet_k_en;
  (* RTL_KEEP = "inst_sync_link_cal_done " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_link_cal_fail " *) wire o_sync__0;
  (* RTL_KEEP = "inst_sync_phys_cal_start " *) wire o_sync__1;
  (* RTL_KEEP = "true" *) wire [55:0]o_tlp;
  (* RTL_KEEP = "true" *) wire o_tlp_rdy;
  (* RTL_KEEP = "true" *) wire o_tlp_valid;
  wire out;
  wire \r_buffer_addr_reg[4] ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire [7:0]\r_mux_stage_reg[5][7] ;
  wire \r_rd_ptr_bin_reg[3] ;
  wire r_rply_wr_reg;
  wire \r_rst_reg[0] ;
  wire [55:0]\r_stage_reg[7][7] ;
  wire [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  wire [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  wire \r_tr_state_reg[6] ;
  wire \r_wr_ptr_bin_reg[0] ;

  handshake_synchronizer inst_cdc_mon_delay_tabs
       (.CLK(o_clk_200),
        .D(o_mon_delay_tabs_orig),
        .in0(o_mon_delay_tabs),
        .out(o_mon_delay_tabs_wr),
        .\r_sync_reg[1] (inst_master_reset_n_0),
        .\r_sync_reg[1]_0 (\r_rst_reg[0] ));
  handshake_synchronizer_0 inst_cdc_mon_edge_tabs
       (.CLK(o_clk_200),
        .D(o_cal_done),
        .in0(o_mon_edge_tabs),
        .\r_in_data_reg[4]_0 (o_mon_edge_tabs_orig),
        .\r_sync_reg[0] (\r_rst_reg[0] ),
        .\r_sync_reg[1] (inst_master_reset_n_0));
  transceiver_link_layer_top__parameterized0 inst_link_layer_top
       (.D(o_data),
        .i_tlp(i_tlp),
        .in0(in0),
        .o_phys_cal_start(o_phys_cal_start),
        .o_phys_packet_byte(o_phys_packet_byte),
        .o_phys_packet_k_en(o_phys_packet_k_en),
        .o_tlp(o_tlp),
        .o_tlp_rdy(o_tlp_rdy),
        .o_tlp_valid(o_tlp_valid),
        .out(out),
        .\r_buffer_addr_reg[0] (O399[0]),
        .\r_buffer_addr_reg[1] (O399[1]),
        .\r_buffer_addr_reg[2] (O399[2]),
        .\r_buffer_addr_reg[3] (O399[3]),
        .\r_buffer_addr_reg[4] (O399[4]),
        .\r_buffer_addr_reg[4]_0 (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[5] (O399[5]),
        .\r_kd_reg[0] (\r_kd_reg[0] ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0]_0 ),
        .\r_kd_reg[1] (\r_kd_reg[1] ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1]_0 ),
        .\r_kd_reg[2] (\r_kd_reg[2] ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2]_0 ),
        .\r_kd_reg[3] (\r_kd_reg[3] ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3]_0 ),
        .\r_kd_reg[4] (\r_kd_reg[4] ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4]_0 ),
        .\r_kd_reg[5] (\r_kd_reg[5] ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5]_0 ),
        .\r_kd_reg[6] (\r_kd_reg[6] ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6]_0 ),
        .\r_kd_reg[7] (\r_kd_reg[7] ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7]_0 ),
        .\r_mux_stage_reg[5][7] (\r_mux_stage_reg[5][7] ),
        .\r_rd_ptr_bin_reg[3] (\r_rd_ptr_bin_reg[3] ),
        .r_rply_wr_reg(r_rply_wr_reg),
        .\r_rst_reg[0] (\r_rst_reg[0] ),
        .\r_rst_reg[0]_0 (inst_master_reset_n_0),
        .\r_stage_reg[7][7] (\r_stage_reg[7][7] ),
        .\r_state_reg[0]__0 (o_sync),
        .\r_state_reg[2] (o_sync__0),
        .\r_tlp_temp_rd_addr_reg[3] (\r_tlp_temp_rd_addr_reg[3] ),
        .\r_tlp_temp_wr_addr_reg[3] (\r_tlp_temp_wr_addr_reg[3] ),
        .\r_tr_state_reg[6] (\r_tr_state_reg[6] ),
        .\r_wr_ptr_bin_reg[0] (\r_wr_ptr_bin_reg[0] ));
  async_reset__parameterized0 inst_master_reset
       (.out(out),
        .\r_rst_reg[3]_0 (inst_master_reset_n_0));
  transceiver_physical_layer_top__parameterized0 inst_physical_layer_top
       (.CLKB0(CLKB0),
        .FMC_LA00_CC_N(FMC_LA00_CC_N),
        .FMC_LA00_CC_P(FMC_LA00_CC_P),
        .FMC_LA03_N(FMC_LA03_N),
        .FMC_LA03_P(FMC_LA03_P),
        .FMC_LA08_N(FMC_LA08_N),
        .FMC_LA08_P(FMC_LA08_P),
        .\dout_reg[9] (o_data__0),
        .o_cal_done(o_cal_done),
        .o_cal_fail(o_cal_fail),
        .o_clk_200(o_clk_200),
        .o_clk_600(o_clk_600),
        .o_mon_delay_tabs(o_mon_delay_tabs_orig),
        .o_mon_delay_tabs_wr(o_mon_delay_tabs_wr),
        .o_mon_edge_tabs(o_mon_edge_tabs_orig),
        .o_packet_byte(o_packet_byte),
        .o_packet_k_en(o_packet_k_en),
        .out(o_clk_120),
        .\r_rst_reg[1] (inst_master_reset_n_0),
        .r_start_reg(o_sync__1));
  transceiver_elastic_buffer__hierPathDup__3 inst_rx_packet_buffer
       (.D({o_packet_k_en,o_packet_byte}),
        .i_wr_clk(o_clk_120),
        .o_data(o_data),
        .out(out),
        .\r_rst_reg[1] (inst_master_reset_n_0));
  synchronizer__parameterized0__hierPathDup__9 inst_sync_link_cal_done
       (.D(o_cal_done),
        .out(o_sync),
        .\r_sync_reg[0]_0 (inst_master_reset_n_0),
        .\r_sync_reg[1]_0 (out));
  synchronizer__parameterized0__hierPathDup__10 inst_sync_link_cal_fail
       (.D(o_cal_fail),
        .out(o_sync__0),
        .\r_sync_reg[0]_0 (out),
        .\r_sync_reg[0]_1 (inst_master_reset_n_0));
  synchronizer__parameterized0 inst_sync_phys_cal_start
       (.CLK(o_clk_120),
        .D(o_phys_cal_start),
        .out(o_sync__1),
        .\r_sync_reg[0]_0 (inst_master_reset_n_0));
  transceiver_elastic_buffer inst_tx_packet_buffer
       (.CLK(o_clk_120),
        .D({o_phys_packet_k_en,o_phys_packet_byte}),
        .out(o_data__0),
        .\r_rst_reg[1] (out),
        .\r_rst_reg[1]_0 (inst_master_reset_n_0));
endmodule

module mux_8
   (out,
    \r_pc_shift_out_reg[40] ,
    o_data_inferred_i_12_0,
    o_data_inferred_i_12_1,
    \r_pc_shift_out_reg[55] ,
    o_data_inferred_i_16_0,
    \r_pc_shift_out_reg[55]_0 ,
    o_data_inferred_i_12_2,
    o_data_inferred_i_12_3);
  output [15:0]out;
  input [2:0]\r_pc_shift_out_reg[40] ;
  input [4:0]o_data_inferred_i_12_0;
  input [4:0]o_data_inferred_i_12_1;
  input [15:0]\r_pc_shift_out_reg[55] ;
  input o_data_inferred_i_16_0;
  input [15:0]\r_pc_shift_out_reg[55]_0 ;
  input [4:0]o_data_inferred_i_12_2;
  input [4:0]o_data_inferred_i_12_3;

  wire [4:0]o_data_inferred_i_12_0;
  wire [4:0]o_data_inferred_i_12_1;
  wire [4:0]o_data_inferred_i_12_2;
  wire [4:0]o_data_inferred_i_12_3;
  wire o_data_inferred_i_16_0;
  wire o_data_inferred_i_17_n_0;
  wire o_data_inferred_i_18_n_0;
  wire o_data_inferred_i_19_n_0;
  wire o_data_inferred_i_20_n_0;
  wire o_data_inferred_i_21_n_0;
  wire o_data_inferred_i_22_n_0;
  wire o_data_inferred_i_23_n_0;
  wire o_data_inferred_i_24_n_0;
  wire o_data_inferred_i_25_n_0;
  wire o_data_inferred_i_26_n_0;
  (* RTL_KEEP = "true" *) wire [15:0]out;
  wire [2:0]\r_pc_shift_out_reg[40] ;
  wire [15:0]\r_pc_shift_out_reg[55] ;
  wire [15:0]\r_pc_shift_out_reg[55]_0 ;

  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_1
       (.I0(\r_pc_shift_out_reg[55]_0 [15]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [15]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[15]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_10
       (.I0(\r_pc_shift_out_reg[55]_0 [6]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [6]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[6]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_11
       (.I0(\r_pc_shift_out_reg[55]_0 [5]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [5]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[5]));
  MUXF7 o_data_inferred_i_12
       (.I0(o_data_inferred_i_17_n_0),
        .I1(o_data_inferred_i_18_n_0),
        .O(out[4]),
        .S(\r_pc_shift_out_reg[40] [2]));
  MUXF7 o_data_inferred_i_13
       (.I0(o_data_inferred_i_19_n_0),
        .I1(o_data_inferred_i_20_n_0),
        .O(out[3]),
        .S(\r_pc_shift_out_reg[40] [2]));
  MUXF7 o_data_inferred_i_14
       (.I0(o_data_inferred_i_21_n_0),
        .I1(o_data_inferred_i_22_n_0),
        .O(out[2]),
        .S(\r_pc_shift_out_reg[40] [2]));
  MUXF7 o_data_inferred_i_15
       (.I0(o_data_inferred_i_23_n_0),
        .I1(o_data_inferred_i_24_n_0),
        .O(out[1]),
        .S(\r_pc_shift_out_reg[40] [2]));
  MUXF7 o_data_inferred_i_16
       (.I0(o_data_inferred_i_25_n_0),
        .I1(o_data_inferred_i_26_n_0),
        .O(out[0]),
        .S(\r_pc_shift_out_reg[40] [2]));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    o_data_inferred_i_17
       (.I0(o_data_inferred_i_12_0[4]),
        .I1(o_data_inferred_i_12_1[4]),
        .I2(\r_pc_shift_out_reg[40] [1]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[55] [4]),
        .O(o_data_inferred_i_17_n_0));
  LUT5 #(
    .INIT(32'hB833B800)) 
    o_data_inferred_i_18
       (.I0(\r_pc_shift_out_reg[55]_0 [4]),
        .I1(\r_pc_shift_out_reg[40] [1]),
        .I2(o_data_inferred_i_12_2[4]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(o_data_inferred_i_12_3[4]),
        .O(o_data_inferred_i_18_n_0));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    o_data_inferred_i_19
       (.I0(o_data_inferred_i_12_0[3]),
        .I1(o_data_inferred_i_12_1[3]),
        .I2(\r_pc_shift_out_reg[40] [1]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[55] [3]),
        .O(o_data_inferred_i_19_n_0));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_2
       (.I0(\r_pc_shift_out_reg[55]_0 [14]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [14]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[14]));
  LUT5 #(
    .INIT(32'hB833B800)) 
    o_data_inferred_i_20
       (.I0(\r_pc_shift_out_reg[55]_0 [3]),
        .I1(\r_pc_shift_out_reg[40] [1]),
        .I2(o_data_inferred_i_12_2[3]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(o_data_inferred_i_12_3[3]),
        .O(o_data_inferred_i_20_n_0));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    o_data_inferred_i_21
       (.I0(o_data_inferred_i_12_0[2]),
        .I1(o_data_inferred_i_12_1[2]),
        .I2(\r_pc_shift_out_reg[40] [1]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[55] [2]),
        .O(o_data_inferred_i_21_n_0));
  LUT5 #(
    .INIT(32'hB833B800)) 
    o_data_inferred_i_22
       (.I0(\r_pc_shift_out_reg[55]_0 [2]),
        .I1(\r_pc_shift_out_reg[40] [1]),
        .I2(o_data_inferred_i_12_2[2]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(o_data_inferred_i_12_3[2]),
        .O(o_data_inferred_i_22_n_0));
  LUT5 #(
    .INIT(32'hAFC0A0C0)) 
    o_data_inferred_i_23
       (.I0(o_data_inferred_i_12_0[1]),
        .I1(o_data_inferred_i_12_1[1]),
        .I2(\r_pc_shift_out_reg[40] [1]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[55] [1]),
        .O(o_data_inferred_i_23_n_0));
  LUT5 #(
    .INIT(32'hB833B800)) 
    o_data_inferred_i_24
       (.I0(\r_pc_shift_out_reg[55]_0 [1]),
        .I1(\r_pc_shift_out_reg[40] [1]),
        .I2(o_data_inferred_i_12_2[1]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(o_data_inferred_i_12_3[1]),
        .O(o_data_inferred_i_24_n_0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hAFA0C0C0AFA0CFCF)) 
    o_data_inferred_i_25
       (.I0(o_data_inferred_i_12_0[0]),
        .I1(o_data_inferred_i_12_1[0]),
        .I2(\r_pc_shift_out_reg[40] [1]),
        .I3(\r_pc_shift_out_reg[55] [0]),
        .I4(\r_pc_shift_out_reg[40] [0]),
        .I5(o_data_inferred_i_16_0),
        .O(o_data_inferred_i_25_n_0));
  LUT5 #(
    .INIT(32'hB833B800)) 
    o_data_inferred_i_26
       (.I0(\r_pc_shift_out_reg[55]_0 [0]),
        .I1(\r_pc_shift_out_reg[40] [1]),
        .I2(o_data_inferred_i_12_2[0]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(o_data_inferred_i_12_3[0]),
        .O(o_data_inferred_i_26_n_0));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_3
       (.I0(\r_pc_shift_out_reg[55]_0 [13]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [13]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[13]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_4
       (.I0(\r_pc_shift_out_reg[55]_0 [12]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [12]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[12]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_5
       (.I0(\r_pc_shift_out_reg[55]_0 [11]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [11]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[11]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_6
       (.I0(\r_pc_shift_out_reg[55]_0 [10]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [10]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[10]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_7
       (.I0(\r_pc_shift_out_reg[55]_0 [9]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [9]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[9]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_8
       (.I0(\r_pc_shift_out_reg[55]_0 [8]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [8]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[8]));
  LUT5 #(
    .INIT(32'h88003000)) 
    o_data_inferred_i_9
       (.I0(\r_pc_shift_out_reg[55]_0 [7]),
        .I1(\r_pc_shift_out_reg[40] [2]),
        .I2(\r_pc_shift_out_reg[55] [7]),
        .I3(\r_pc_shift_out_reg[40] [0]),
        .I4(\r_pc_shift_out_reg[40] [1]),
        .O(out[7]));
endmodule

module packet_checker_controller
   (out,
    o_tlp_temp_wr,
    o_tlp_temp_wr_addr,
    o_tlp_temp_rd_addr,
    o_tr_result,
    o_tr_result_wr,
    o_tr_result_rd,
    o_id_result,
    o_id_result_wr,
    Q,
    o_tlp_valid,
    r_proc_valid_tr_reg_0,
    \r_rst_reg[1] ,
    r_k_skp_n,
    r_k_stop,
    r_k_start_tlp,
    r_k_start_dllp,
    \r_tr_state[7]_i_3_0 ,
    \r_tr_state[7]_i_3_1 ,
    \r_proc_state_reg[0]_0 ,
    \r_proc_state_reg[0]_1 ,
    \r_rst_reg[1]_0 );
  output out;
  output o_tlp_temp_wr;
  output [3:0]o_tlp_temp_wr_addr;
  output [3:0]o_tlp_temp_rd_addr;
  output [4:0]o_tr_result;
  output o_tr_result_wr;
  output o_tr_result_rd;
  output [4:0]o_id_result;
  output o_id_result_wr;
  output [0:0]Q;
  output [0:0]o_tlp_valid;
  input [12:0]r_proc_valid_tr_reg_0;
  input \r_rst_reg[1] ;
  input r_k_skp_n;
  input r_k_stop;
  input r_k_start_tlp;
  input r_k_start_dllp;
  input [7:0]\r_tr_state[7]_i_3_0 ;
  input [7:0]\r_tr_state[7]_i_3_1 ;
  input \r_proc_state_reg[0]_0 ;
  input \r_proc_state_reg[0]_1 ;
  input \r_rst_reg[1]_0 ;

  wire [0:0]Q;
  wire [3:0]in12;
  wire in3;
  wire inst_local_reset_n_0;
  (* RTL_KEEP = "true" *) wire [4:0]o_id_result;
  (* RTL_KEEP = "true" *) wire o_id_result_wr;
  (* RTL_KEEP = "true" *) wire [3:0]o_tlp_temp_rd_addr;
  (* RTL_KEEP = "true" *) wire o_tlp_temp_wr;
  (* RTL_KEEP = "true" *) wire [3:0]o_tlp_temp_wr_addr;
  wire [0:0]o_tlp_valid;
  (* RTL_KEEP = "true" *) wire [4:0]o_tr_result;
  (* RTL_KEEP = "true" *) wire o_tr_result_rd;
  (* RTL_KEEP = "true" *) wire o_tr_result_wr;
  (* RTL_KEEP = "true" *) wire out;
  wire [4:0]p_0_in__0;
  wire [3:0]p_0_in__1;
  wire [3:0]p_0_in__2;
  wire r_k_skp_n;
  wire r_k_start_dllp;
  wire r_k_start_tlp;
  wire r_k_stop;
  wire \r_proc_frame_id_header[0]_i_1_n_0 ;
  wire \r_proc_frame_id_header[1]_i_1_n_0 ;
  wire \r_proc_frame_id_header[2]_i_1_n_0 ;
  wire \r_proc_frame_id_header[3]_i_1_n_0 ;
  wire \r_proc_frame_id_header[3]_i_2_n_0 ;
  wire \r_proc_frame_id_header[4]_i_1_n_0 ;
  wire \r_proc_frame_id_header[4]_i_2_n_0 ;
  wire \r_proc_frame_id_header_reg_n_0_[4] ;
  wire [4:0]r_proc_frame_id_ref_reg;
  wire [3:0]r_proc_frame_num_header;
  wire [3:0]r_proc_frame_num_tr;
  wire \r_proc_frame_num_tr[3]_i_1_n_0 ;
  wire \r_proc_id_result[4]_i_1_n_0 ;
  wire \r_proc_state[0]_i_2_n_0 ;
  wire \r_proc_state[0]_i_3_n_0 ;
  wire \r_proc_state[1]_i_1__0_n_0 ;
  wire \r_proc_state[2]_i_2_n_0 ;
  wire \r_proc_state[3]_i_2_n_0 ;
  wire \r_proc_state[3]_i_3_n_0 ;
  wire \r_proc_state[3]_i_4_n_0 ;
  wire \r_proc_state[3]_i_5_n_0 ;
  wire \r_proc_state[3]_i_6_n_0 ;
  wire \r_proc_state[4]_i_2_n_0 ;
  wire \r_proc_state[4]_i_3_n_0 ;
  wire \r_proc_state[4]_i_4_n_0 ;
  wire \r_proc_state[4]_i_5_n_0 ;
  wire \r_proc_state[5]_i_2_n_0 ;
  wire \r_proc_state[6]_i_1_n_0 ;
  wire \r_proc_state[6]_i_4_n_0 ;
  wire \r_proc_state[6]_i_5_n_0 ;
  wire \r_proc_state[6]_i_6_n_0 ;
  wire \r_proc_state_reg[0]_0 ;
  wire \r_proc_state_reg[0]_1 ;
  wire \r_proc_state_reg_n_0_[0] ;
  wire \r_proc_state_reg_n_0_[2] ;
  wire \r_proc_state_reg_n_0_[3] ;
  wire \r_proc_state_reg_n_0_[4] ;
  wire r_proc_valid_tr;
  wire [12:0]r_proc_valid_tr_reg_0;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire \r_tlp_temp_wr_addr[3]_i_3_n_0 ;
  wire \r_tlp_temp_wr_addr[3]_i_4_n_0 ;
  wire [3:0]r_tr_byte_cnt;
  wire \r_tr_byte_cnt[0]_i_1_n_0 ;
  wire \r_tr_byte_cnt[1]_i_1_n_0 ;
  wire \r_tr_byte_cnt[2]_i_1_n_0 ;
  wire \r_tr_byte_cnt[3]_i_2_n_0 ;
  wire \r_tr_byte_cnt[3]_i_3_n_0 ;
  wire \r_tr_byte_cnt[3]_i_4_n_0 ;
  wire \r_tr_frame_num[0]_i_1_n_0 ;
  wire \r_tr_frame_num[1]_i_1_n_0 ;
  wire \r_tr_frame_num[2]_i_1_n_0 ;
  wire \r_tr_frame_num[3]_i_1_n_0 ;
  wire \r_tr_frame_num[4]_i_2_n_0 ;
  wire \r_tr_frame_num_reg_n_0_[0] ;
  wire \r_tr_frame_num_reg_n_0_[1] ;
  wire \r_tr_frame_num_reg_n_0_[2] ;
  wire \r_tr_frame_num_reg_n_0_[3] ;
  wire \r_tr_result[0]_i_1_n_0 ;
  wire \r_tr_result[1]_i_1_n_0 ;
  wire \r_tr_result[2]_i_1_n_0 ;
  wire \r_tr_result[3]_i_1_n_0 ;
  wire \r_tr_result[4]_i_2__0_n_0 ;
  wire \r_tr_state[0]_i_2_n_0 ;
  wire \r_tr_state[0]_i_3_n_0 ;
  wire \r_tr_state[0]_i_4_n_0 ;
  wire \r_tr_state[3]_i_2_n_0 ;
  wire \r_tr_state[4]_i_2_n_0 ;
  wire \r_tr_state[4]_i_3_n_0 ;
  wire \r_tr_state[5]_i_2_n_0 ;
  wire \r_tr_state[7]_i_10_n_0 ;
  wire \r_tr_state[7]_i_11_n_0 ;
  wire \r_tr_state[7]_i_1_n_0 ;
  wire [7:0]\r_tr_state[7]_i_3_0 ;
  wire [7:0]\r_tr_state[7]_i_3_1 ;
  wire \r_tr_state[7]_i_3_n_0 ;
  wire \r_tr_state[7]_i_4_n_0 ;
  wire \r_tr_state[7]_i_5_n_0 ;
  wire \r_tr_state[7]_i_6_n_0 ;
  wire \r_tr_state[7]_i_7_n_0 ;
  wire \r_tr_state[7]_i_8_n_0 ;
  wire \r_tr_state[7]_i_9_n_0 ;
  wire \r_tr_state_reg_n_0_[1] ;
  wire \r_tr_state_reg_n_0_[2] ;
  wire \r_tr_state_reg_n_0_[4] ;
  wire \r_tr_state_reg_n_0_[5] ;
  wire ri_proc_frame_id_ref;
  wire [3:0]ri_proc_frame_num_tr;
  wire [3:0]ri_proc_id_result;
  wire [6:0]ri_proc_state;
  wire ri_tlp_temp_wr_addr;
  wire ri_tr_byte_cnt;
  wire ri_tr_frame_num;
  wire ri_tr_result;
  wire [7:0]ri_tr_state;
  wire \ri_tr_state_inferred__1/i___0_n_0 ;
  wire \ri_tr_state_inferred__1/i___1_n_0 ;
  wire \ri_tr_state_inferred__1/i___2_n_0 ;
  wire \ri_tr_state_inferred__1/i___3_n_0 ;
  wire \ri_tr_state_inferred__1/i__n_0 ;

  async_reset__parameterized1_56 inst_local_reset
       (.\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ),
        .\r_rst_reg[1]_2 (\r_rst_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \r_proc_frame_id_header[0]_i_1 
       (.I0(r_proc_valid_tr_reg_0[0]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[0]),
        .O(\r_proc_frame_id_header[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'h8BB8)) 
    \r_proc_frame_id_header[1]_i_1 
       (.I0(r_proc_valid_tr_reg_0[1]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[1]),
        .I3(in12[0]),
        .O(\r_proc_frame_id_header[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h8BB8B8B8)) 
    \r_proc_frame_id_header[2]_i_1 
       (.I0(r_proc_valid_tr_reg_0[2]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[2]),
        .I3(in12[0]),
        .I4(in12[1]),
        .O(\r_proc_frame_id_header[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000001000100000)) 
    \r_proc_frame_id_header[3]_i_1 
       (.I0(o_tlp_valid),
        .I1(o_id_result_wr),
        .I2(\r_proc_state[4]_i_3_n_0 ),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state_reg_n_0_[0] ),
        .I5(\r_proc_state_reg_n_0_[3] ),
        .O(\r_proc_frame_id_header[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B8B8B8B8B8B8)) 
    \r_proc_frame_id_header[3]_i_2 
       (.I0(r_proc_valid_tr_reg_0[3]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[3]),
        .I3(in12[1]),
        .I4(in12[0]),
        .I5(in12[2]),
        .O(\r_proc_frame_id_header[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_proc_frame_id_header[4]_i_1 
       (.I0(in12[2]),
        .I1(in12[0]),
        .I2(in12[1]),
        .I3(in12[3]),
        .I4(\r_proc_frame_id_header[4]_i_2_n_0 ),
        .I5(\r_proc_frame_id_header_reg_n_0_[4] ),
        .O(\r_proc_frame_id_header[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_proc_frame_id_header[4]_i_2 
       (.I0(\r_proc_state_reg_n_0_[0] ),
        .I1(o_tlp_valid),
        .I2(o_id_result_wr),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state[4]_i_3_n_0 ),
        .I5(\r_proc_state_reg_n_0_[3] ),
        .O(\r_proc_frame_id_header[4]_i_2_n_0 ));
  FDCE \r_proc_frame_id_header_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_id_header[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[0]_i_1_n_0 ),
        .Q(in12[0]));
  FDCE \r_proc_frame_id_header_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_id_header[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[1]_i_1_n_0 ),
        .Q(in12[1]));
  FDCE \r_proc_frame_id_header_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_id_header[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[2]_i_1_n_0 ),
        .Q(in12[2]));
  FDCE \r_proc_frame_id_header_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_id_header[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[3]_i_2_n_0 ),
        .Q(in12[3]));
  FDCE \r_proc_frame_id_header_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[4]_i_1_n_0 ),
        .Q(\r_proc_frame_id_header_reg_n_0_[4] ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_proc_frame_id_ref[0]_i_1 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .O(p_0_in__0[0]));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_proc_frame_id_ref[1]_i_1 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .I1(r_proc_frame_id_ref_reg[1]),
        .O(p_0_in__0[1]));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_proc_frame_id_ref[2]_i_1 
       (.I0(r_proc_frame_id_ref_reg[2]),
        .I1(r_proc_frame_id_ref_reg[1]),
        .I2(r_proc_frame_id_ref_reg[0]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_proc_frame_id_ref[3]_i_1 
       (.I0(r_proc_frame_id_ref_reg[3]),
        .I1(r_proc_frame_id_ref_reg[0]),
        .I2(r_proc_frame_id_ref_reg[1]),
        .I3(r_proc_frame_id_ref_reg[2]),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'h0000000000001000)) 
    \r_proc_frame_id_ref[4]_i_1 
       (.I0(o_tr_result_rd),
        .I1(\r_proc_state_reg_n_0_[3] ),
        .I2(\r_proc_state[4]_i_3_n_0 ),
        .I3(o_tlp_valid),
        .I4(o_id_result_wr),
        .I5(\r_proc_state_reg_n_0_[0] ),
        .O(ri_proc_frame_id_ref));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \r_proc_frame_id_ref[4]_i_2 
       (.I0(r_proc_frame_id_ref_reg[4]),
        .I1(r_proc_frame_id_ref_reg[2]),
        .I2(r_proc_frame_id_ref_reg[1]),
        .I3(r_proc_frame_id_ref_reg[0]),
        .I4(r_proc_frame_id_ref_reg[3]),
        .O(p_0_in__0[4]));
  FDCE \r_proc_frame_id_ref_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[0]),
        .Q(r_proc_frame_id_ref_reg[0]));
  FDCE \r_proc_frame_id_ref_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[1]),
        .Q(r_proc_frame_id_ref_reg[1]));
  FDCE \r_proc_frame_id_ref_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[2]),
        .Q(r_proc_frame_id_ref_reg[2]));
  FDCE \r_proc_frame_id_ref_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[3]),
        .Q(r_proc_frame_id_ref_reg[3]));
  FDCE \r_proc_frame_id_ref_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[4]),
        .Q(r_proc_frame_id_ref_reg[4]));
  FDCE \r_proc_frame_num_header_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[1]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[4]),
        .Q(r_proc_frame_num_header[0]));
  FDCE \r_proc_frame_num_header_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[1]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[5]),
        .Q(r_proc_frame_num_header[1]));
  FDCE \r_proc_frame_num_header_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[1]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[6]),
        .Q(r_proc_frame_num_header[2]));
  FDCE \r_proc_frame_num_header_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[1]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[7]),
        .Q(r_proc_frame_num_header[3]));
  (* \PinAttr:I2:HOLD_DETOUR  = "191" *) 
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \r_proc_frame_num_tr[0]_i_1 
       (.I0(r_proc_valid_tr_reg_0[8]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[0]),
        .O(ri_proc_frame_num_tr[0]));
  (* \PinAttr:I3:HOLD_DETOUR  = "191" *) 
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'hB88B)) 
    \r_proc_frame_num_tr[1]_i_1 
       (.I0(r_proc_valid_tr_reg_0[9]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[1]),
        .I3(r_proc_frame_num_tr[0]),
        .O(ri_proc_frame_num_tr[1]));
  LUT5 #(
    .INIT(32'hBBB8888B)) 
    \r_proc_frame_num_tr[2]_i_1 
       (.I0(r_proc_valid_tr_reg_0[10]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[1]),
        .I3(r_proc_frame_num_tr[0]),
        .I4(r_proc_frame_num_tr[2]),
        .O(ri_proc_frame_num_tr[2]));
  LUT6 #(
    .INIT(64'h0000011200000000)) 
    \r_proc_frame_num_tr[3]_i_1 
       (.I0(\r_proc_state_reg_n_0_[2] ),
        .I1(o_tr_result_rd),
        .I2(\r_proc_state_reg_n_0_[0] ),
        .I3(o_id_result_wr),
        .I4(o_tlp_valid),
        .I5(\r_proc_state[0]_i_3_n_0 ),
        .O(\r_proc_frame_num_tr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBB88888888B)) 
    \r_proc_frame_num_tr[3]_i_2 
       (.I0(r_proc_valid_tr_reg_0[11]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[2]),
        .I3(r_proc_frame_num_tr[0]),
        .I4(r_proc_frame_num_tr[1]),
        .I5(r_proc_frame_num_tr[3]),
        .O(ri_proc_frame_num_tr[3]));
  FDCE \r_proc_frame_num_tr_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_num_tr[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[0]),
        .Q(r_proc_frame_num_tr[0]));
  FDCE \r_proc_frame_num_tr_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_num_tr[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[1]),
        .Q(r_proc_frame_num_tr[1]));
  FDCE \r_proc_frame_num_tr_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_num_tr[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[2]),
        .Q(r_proc_frame_num_tr[2]));
  FDCE \r_proc_frame_num_tr_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_frame_num_tr[3]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[3]),
        .Q(r_proc_frame_num_tr[3]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[0]_i_1 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[0]),
        .O(ri_proc_id_result[0]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[1]_i_1 
       (.I0(r_proc_frame_id_ref_reg[1]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[1]),
        .O(ri_proc_id_result[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "170" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[2]_i_1 
       (.I0(r_proc_frame_id_ref_reg[2]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[2]),
        .O(ri_proc_id_result[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[3]_i_1 
       (.I0(r_proc_frame_id_ref_reg[3]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[3]),
        .O(ri_proc_id_result[3]));
  LUT6 #(
    .INIT(64'h0000000000040400)) 
    \r_proc_id_result[4]_i_1 
       (.I0(\r_proc_state_reg_n_0_[0] ),
        .I1(\r_proc_state[5]_i_2_n_0 ),
        .I2(o_tr_result_rd),
        .I3(\r_proc_state_reg_n_0_[2] ),
        .I4(\r_proc_state_reg_n_0_[3] ),
        .I5(\r_proc_state_reg_n_0_[4] ),
        .O(\r_proc_id_result[4]_i_1_n_0 ));
  FDCE \r_proc_id_result_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_id_result[4]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[0]),
        .Q(o_id_result[0]));
  FDCE \r_proc_id_result_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_id_result[4]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[1]),
        .Q(o_id_result[1]));
  FDCE \r_proc_id_result_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_id_result[4]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[2]),
        .Q(o_id_result[2]));
  FDCE \r_proc_id_result_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_id_result[4]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[3]),
        .Q(o_id_result[3]));
  FDCE \r_proc_id_result_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_id_result[4]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_state_reg_n_0_[3] ),
        .Q(o_id_result[4]));
  LUT6 #(
    .INIT(64'hFFFFCFFFEEEE3EEE)) 
    \r_proc_state[0]_i_1 
       (.I0(\r_proc_state[0]_i_2_n_0 ),
        .I1(o_tr_result_rd),
        .I2(\r_proc_state[5]_i_2_n_0 ),
        .I3(\r_proc_state[0]_i_3_n_0 ),
        .I4(\r_proc_state_reg_n_0_[2] ),
        .I5(\r_proc_state_reg_n_0_[0] ),
        .O(ri_proc_state[0]));
  LUT6 #(
    .INIT(64'hFFFEFEEAFFFEFEE8)) 
    \r_proc_state[0]_i_2 
       (.I0(o_id_result_wr),
        .I1(o_tlp_valid),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(\r_proc_state_reg_n_0_[4] ),
        .I4(\r_proc_state_reg_n_0_[2] ),
        .I5(\r_proc_state[6]_i_4_n_0 ),
        .O(\r_proc_state[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[0]_i_3 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(\r_proc_state_reg_n_0_[3] ),
        .O(\r_proc_state[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    \r_proc_state[1]_i_1__0 
       (.I0(\r_proc_state_reg_n_0_[2] ),
        .I1(\r_proc_state_reg_n_0_[4] ),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(\r_proc_state[5]_i_2_n_0 ),
        .I4(o_tr_result_rd),
        .I5(\r_proc_state_reg_n_0_[0] ),
        .O(\r_proc_state[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000305000)) 
    \r_proc_state[2]_i_1 
       (.I0(\r_proc_state[4]_i_2_n_0 ),
        .I1(\r_proc_state[3]_i_2_n_0 ),
        .I2(\r_proc_state[4]_i_3_n_0 ),
        .I3(\r_proc_state_reg_n_0_[3] ),
        .I4(o_tr_result_rd),
        .I5(\r_proc_state[2]_i_2_n_0 ),
        .O(ri_proc_state[2]));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_proc_state[2]_i_2 
       (.I0(\r_proc_state_reg_n_0_[0] ),
        .I1(o_tlp_valid),
        .I2(o_id_result_wr),
        .O(\r_proc_state[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h000011F1)) 
    \r_proc_state[3]_i_1 
       (.I0(o_tr_result_rd),
        .I1(\r_proc_state[6]_i_4_n_0 ),
        .I2(\r_proc_state[3]_i_2_n_0 ),
        .I3(o_id_result_wr),
        .I4(\r_proc_state[3]_i_3_n_0 ),
        .O(ri_proc_state[3]));
  LUT6 #(
    .INIT(64'h0082000000000082)) 
    \r_proc_state[3]_i_2 
       (.I0(\r_proc_state[3]_i_4_n_0 ),
        .I1(r_proc_frame_num_header[2]),
        .I2(r_proc_frame_num_tr[2]),
        .I3(\r_proc_state[3]_i_5_n_0 ),
        .I4(r_proc_frame_num_tr[1]),
        .I5(r_proc_frame_num_header[1]),
        .O(\r_proc_state[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFDFFFDFFFF)) 
    \r_proc_state[3]_i_3 
       (.I0(\r_proc_state[0]_i_3_n_0 ),
        .I1(o_tlp_valid),
        .I2(\r_proc_state_reg_n_0_[2] ),
        .I3(\r_proc_state_reg_n_0_[0] ),
        .I4(o_id_result_wr),
        .I5(o_tr_result_rd),
        .O(\r_proc_state[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hD0DD0000FFFFD0DD)) 
    \r_proc_state[3]_i_4 
       (.I0(\r_proc_state[4]_i_5_n_0 ),
        .I1(\r_proc_state[3]_i_6_n_0 ),
        .I2(r_proc_frame_id_ref_reg[3]),
        .I3(in12[3]),
        .I4(r_proc_frame_id_ref_reg[4]),
        .I5(\r_proc_frame_id_header_reg_n_0_[4] ),
        .O(\r_proc_state[3]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h6FFFFF6F)) 
    \r_proc_state[3]_i_5 
       (.I0(r_proc_frame_num_header[0]),
        .I1(r_proc_frame_num_tr[0]),
        .I2(r_proc_valid_tr),
        .I3(r_proc_frame_num_tr[3]),
        .I4(r_proc_frame_num_header[3]),
        .O(\r_proc_state[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hD0DDDDDD0000D0DD)) 
    \r_proc_state[3]_i_6 
       (.I0(in12[2]),
        .I1(r_proc_frame_id_ref_reg[2]),
        .I2(r_proc_frame_id_ref_reg[0]),
        .I3(in12[0]),
        .I4(in12[1]),
        .I5(r_proc_frame_id_ref_reg[1]),
        .O(\r_proc_state[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000800000)) 
    \r_proc_state[4]_i_1 
       (.I0(\r_proc_state[4]_i_2_n_0 ),
        .I1(\r_proc_state_reg_n_0_[3] ),
        .I2(\r_proc_state[4]_i_3_n_0 ),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state[5]_i_2_n_0 ),
        .I5(\r_proc_state_reg_n_0_[0] ),
        .O(ri_proc_state[4]));
  LUT6 #(
    .INIT(64'h8F88FFFF00008F88)) 
    \r_proc_state[4]_i_2 
       (.I0(\r_proc_state[4]_i_4_n_0 ),
        .I1(\r_proc_state[4]_i_5_n_0 ),
        .I2(r_proc_frame_id_ref_reg[3]),
        .I3(in12[3]),
        .I4(r_proc_frame_id_ref_reg[4]),
        .I5(\r_proc_frame_id_header_reg_n_0_[4] ),
        .O(\r_proc_state[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[4]_i_3 
       (.I0(\r_proc_state_reg_n_0_[2] ),
        .I1(\r_proc_state_reg_n_0_[4] ),
        .O(\r_proc_state[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hDDFDFFFF00F0DDFD)) 
    \r_proc_state[4]_i_4 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .I1(in12[0]),
        .I2(in12[2]),
        .I3(r_proc_frame_id_ref_reg[2]),
        .I4(r_proc_frame_id_ref_reg[1]),
        .I5(in12[1]),
        .O(\r_proc_state[4]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hD0DD)) 
    \r_proc_state[4]_i_5 
       (.I0(r_proc_frame_id_ref_reg[3]),
        .I1(in12[3]),
        .I2(in12[2]),
        .I3(r_proc_frame_id_ref_reg[2]),
        .O(\r_proc_state[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000400000000)) 
    \r_proc_state[5]_i_1 
       (.I0(\r_proc_state_reg_n_0_[0] ),
        .I1(\r_proc_state[5]_i_2_n_0 ),
        .I2(o_tr_result_rd),
        .I3(\r_proc_state_reg_n_0_[2] ),
        .I4(\r_proc_state_reg_n_0_[3] ),
        .I5(\r_proc_state_reg_n_0_[4] ),
        .O(ri_proc_state[5]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[5]_i_2 
       (.I0(o_id_result_wr),
        .I1(o_tlp_valid),
        .O(\r_proc_state[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFF2A2)) 
    \r_proc_state[6]_i_1 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(\r_proc_state_reg[0]_0 ),
        .I2(\r_proc_state_reg_n_0_[2] ),
        .I3(\r_proc_state[6]_i_4_n_0 ),
        .I4(\r_proc_state[6]_i_5_n_0 ),
        .O(\r_proc_state[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000010001000000)) 
    \r_proc_state[6]_i_2 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(\r_proc_state_reg_n_0_[3] ),
        .I2(\r_proc_state_reg_n_0_[0] ),
        .I3(\r_proc_state[6]_i_6_n_0 ),
        .I4(o_tlp_valid),
        .I5(\r_proc_state_reg_n_0_[2] ),
        .O(ri_proc_state[6]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_proc_state[6]_i_4 
       (.I0(r_proc_frame_num_tr[3]),
        .I1(r_proc_frame_num_tr[1]),
        .I2(r_proc_frame_num_tr[0]),
        .I3(r_proc_frame_num_tr[2]),
        .O(\r_proc_state[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6EFF)) 
    \r_proc_state[6]_i_5 
       (.I0(\r_proc_state_reg_n_0_[0] ),
        .I1(\r_proc_state[4]_i_3_n_0 ),
        .I2(\r_proc_state_reg[0]_1 ),
        .I3(\r_proc_state[5]_i_2_n_0 ),
        .I4(o_tr_result_rd),
        .I5(\r_proc_state_reg_n_0_[3] ),
        .O(\r_proc_state[6]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[6]_i_6 
       (.I0(o_id_result_wr),
        .I1(o_tr_result_rd),
        .O(\r_proc_state[6]_i_6_n_0 ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_proc_state_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .D(ri_proc_state[0]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_proc_state_reg_n_0_[0] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_state[1]_i_1__0_n_0 ),
        .Q(o_tr_result_rd));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[2]),
        .Q(\r_proc_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[3]),
        .Q(\r_proc_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[4]),
        .Q(\r_proc_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[5] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[5]),
        .Q(o_tlp_valid));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[6] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[6]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[6]),
        .Q(o_id_result_wr));
  FDCE r_proc_valid_tr_reg
       (.C(\r_rst_reg[1] ),
        .CE(\r_proc_state[1]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[12]),
        .Q(r_proc_valid_tr));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_tlp_temp_rd_addr[0]_i_1 
       (.I0(o_tlp_temp_rd_addr[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_tlp_temp_rd_addr[1]_i_1 
       (.I0(o_tlp_temp_rd_addr[0]),
        .I1(o_tlp_temp_rd_addr[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_temp_rd_addr[2]_i_1 
       (.I0(o_tlp_temp_rd_addr[2]),
        .I1(o_tlp_temp_rd_addr[1]),
        .I2(o_tlp_temp_rd_addr[0]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_tlp_temp_rd_addr[3]_i_1 
       (.I0(o_tlp_temp_rd_addr[3]),
        .I1(o_tlp_temp_rd_addr[0]),
        .I2(o_tlp_temp_rd_addr[1]),
        .I3(o_tlp_temp_rd_addr[2]),
        .O(p_0_in__2[3]));
  FDCE \r_tlp_temp_rd_addr_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[0]),
        .Q(o_tlp_temp_rd_addr[0]));
  FDCE \r_tlp_temp_rd_addr_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[1]),
        .Q(o_tlp_temp_rd_addr[1]));
  FDCE \r_tlp_temp_rd_addr_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[2]),
        .Q(o_tlp_temp_rd_addr[2]));
  FDCE \r_tlp_temp_rd_addr_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[3]),
        .Q(o_tlp_temp_rd_addr[3]));
  (* \PinAttr:I0:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_tlp_temp_wr_addr[0]_i_1 
       (.I0(o_tlp_temp_wr_addr[0]),
        .O(p_0_in__1[0]));
  (* \PinAttr:I0:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_tlp_temp_wr_addr[1]_i_1 
       (.I0(o_tlp_temp_wr_addr[0]),
        .I1(o_tlp_temp_wr_addr[1]),
        .O(p_0_in__1[1]));
  (* \PinAttr:I2:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_temp_wr_addr[2]_i_1 
       (.I0(o_tlp_temp_wr_addr[2]),
        .I1(o_tlp_temp_wr_addr[1]),
        .I2(o_tlp_temp_wr_addr[0]),
        .O(p_0_in__1[2]));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_tlp_temp_wr_addr[3]_i_1 
       (.I0(out),
        .I1(o_tlp_temp_wr),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(\r_tlp_temp_wr_addr[3]_i_3_n_0 ),
        .I5(\r_tlp_temp_wr_addr[3]_i_4_n_0 ),
        .O(ri_tlp_temp_wr_addr));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_tlp_temp_wr_addr[3]_i_2 
       (.I0(o_tlp_temp_wr_addr[3]),
        .I1(o_tlp_temp_wr_addr[0]),
        .I2(o_tlp_temp_wr_addr[1]),
        .I3(o_tlp_temp_wr_addr[2]),
        .O(p_0_in__1[3]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tlp_temp_wr_addr[3]_i_3 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(o_tr_result_wr),
        .O(\r_tlp_temp_wr_addr[3]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_tlp_temp_wr_addr[3]_i_4 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(Q),
        .O(\r_tlp_temp_wr_addr[3]_i_4_n_0 ));
  FDCE \r_tlp_temp_wr_addr_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[0]),
        .Q(o_tlp_temp_wr_addr[0]));
  FDCE \r_tlp_temp_wr_addr_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[1]),
        .Q(o_tlp_temp_wr_addr[1]));
  FDCE \r_tlp_temp_wr_addr_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[2]),
        .Q(o_tlp_temp_wr_addr[2]));
  FDCE \r_tlp_temp_wr_addr_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[3]),
        .Q(o_tlp_temp_wr_addr[3]));
  LUT5 #(
    .INIT(32'h14141455)) 
    \r_tr_byte_cnt[0]_i_1 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(r_k_skp_n),
        .I2(r_tr_byte_cnt[0]),
        .I3(\r_tr_state_reg_n_0_[2] ),
        .I4(\r_tr_state_reg_n_0_[5] ),
        .O(\r_tr_byte_cnt[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111111110011010)) 
    \r_tr_byte_cnt[1]_i_1 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(r_tr_byte_cnt[1]),
        .I3(r_tr_byte_cnt[0]),
        .I4(r_k_skp_n),
        .I5(o_tlp_temp_wr),
        .O(\r_tr_byte_cnt[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h55550014)) 
    \r_tr_byte_cnt[2]_i_1 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_byte_cnt[3]_i_4_n_0 ),
        .I2(r_tr_byte_cnt[2]),
        .I3(o_tlp_temp_wr),
        .I4(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_byte_cnt[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_tr_byte_cnt[3]_i_1 
       (.I0(out),
        .I1(Q),
        .I2(o_tr_result_wr),
        .I3(\r_tr_byte_cnt[3]_i_3_n_0 ),
        .O(ri_tr_byte_cnt));
  LUT6 #(
    .INIT(64'h0000000000004144)) 
    \r_tr_byte_cnt[3]_i_2 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(r_tr_byte_cnt[3]),
        .I2(r_tr_byte_cnt[2]),
        .I3(\r_tr_byte_cnt[3]_i_4_n_0 ),
        .I4(o_tlp_temp_wr),
        .I5(\r_tr_state_reg_n_0_[1] ),
        .O(\r_tr_byte_cnt[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEE9)) 
    \r_tr_byte_cnt[3]_i_3 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_state_reg_n_0_[2] ),
        .I2(o_tlp_temp_wr),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_byte_cnt[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \r_tr_byte_cnt[3]_i_4 
       (.I0(r_k_skp_n),
        .I1(r_tr_byte_cnt[1]),
        .I2(r_tr_byte_cnt[0]),
        .O(\r_tr_byte_cnt[3]_i_4_n_0 ));
  FDCE \r_tr_byte_cnt_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[0]_i_1_n_0 ),
        .Q(r_tr_byte_cnt[0]));
  FDCE \r_tr_byte_cnt_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[1]_i_1_n_0 ),
        .Q(r_tr_byte_cnt[1]));
  FDCE \r_tr_byte_cnt_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[2]_i_1_n_0 ),
        .Q(r_tr_byte_cnt[2]));
  FDCE \r_tr_byte_cnt_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[3]_i_2_n_0 ),
        .Q(r_tr_byte_cnt[3]));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_tr_frame_num[0]_i_1 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .O(\r_tr_frame_num[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \r_tr_frame_num[1]_i_1 
       (.I0(\r_tr_frame_num_reg_n_0_[1] ),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .I2(o_tlp_temp_wr),
        .O(\r_tr_frame_num[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \r_tr_frame_num[2]_i_1 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .I2(\r_tr_frame_num_reg_n_0_[1] ),
        .I3(\r_tr_frame_num_reg_n_0_[2] ),
        .O(\r_tr_frame_num[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h2AAA8000)) 
    \r_tr_frame_num[3]_i_1 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[1] ),
        .I2(\r_tr_frame_num_reg_n_0_[0] ),
        .I3(\r_tr_frame_num_reg_n_0_[2] ),
        .I4(\r_tr_frame_num_reg_n_0_[3] ),
        .O(\r_tr_frame_num[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000028)) 
    \r_tr_frame_num[4]_i_1 
       (.I0(\r_tr_state[5]_i_2_n_0 ),
        .I1(\r_tr_state_reg_n_0_[4] ),
        .I2(o_tlp_temp_wr),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(o_tr_result_wr),
        .O(ri_tr_frame_num));
  LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
    \r_tr_frame_num[4]_i_2 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[2] ),
        .I2(\r_tr_frame_num_reg_n_0_[0] ),
        .I3(\r_tr_frame_num_reg_n_0_[1] ),
        .I4(\r_tr_frame_num_reg_n_0_[3] ),
        .I5(in3),
        .O(\r_tr_frame_num[4]_i_2_n_0 ));
  FDCE \r_tr_frame_num_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[0]_i_1_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[0] ));
  FDCE \r_tr_frame_num_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[1]_i_1_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[1] ));
  FDCE \r_tr_frame_num_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[2]_i_1_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[2] ));
  FDCE \r_tr_frame_num_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[3]_i_1_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[3] ));
  FDCE \r_tr_frame_num_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[4]_i_2_n_0 ),
        .Q(in3));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[0]_i_1 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .O(\r_tr_result[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[1]_i_1 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[1] ),
        .O(\r_tr_result[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[2]_i_1 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[2] ),
        .O(\r_tr_result[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[3]_i_1 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[3] ),
        .O(\r_tr_result[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0028)) 
    \r_tr_result[4]_i_1 
       (.I0(\r_tr_state[7]_i_6_n_0 ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(o_tlp_temp_wr),
        .I3(o_tr_result_wr),
        .O(ri_tr_result));
  LUT2 #(
    .INIT(4'h8)) 
    \r_tr_result[4]_i_2__0 
       (.I0(\r_tr_state[7]_i_3_n_0 ),
        .I1(o_tlp_temp_wr),
        .O(\r_tr_result[4]_i_2__0_n_0 ));
  FDCE \r_tr_result_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[0]_i_1_n_0 ),
        .Q(o_tr_result[0]));
  FDCE \r_tr_result_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[1]_i_1_n_0 ),
        .Q(o_tr_result[1]));
  FDCE \r_tr_result_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[2]_i_1_n_0 ),
        .Q(o_tr_result[2]));
  FDCE \r_tr_result_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[3]_i_1_n_0 ),
        .Q(o_tr_result[3]));
  FDCE \r_tr_result_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[4]_i_2__0_n_0 ),
        .Q(o_tr_result[4]));
  LUT6 #(
    .INIT(64'hD0FFFFFFFFD0D0D0)) 
    \r_tr_state[0]_i_1 
       (.I0(\r_tr_state[0]_i_2_n_0 ),
        .I1(Q),
        .I2(\r_tr_state[0]_i_3_n_0 ),
        .I3(\r_tr_state[3]_i_2_n_0 ),
        .I4(\r_tr_state[0]_i_4_n_0 ),
        .I5(out),
        .O(ri_tr_state[0]));
  LUT6 #(
    .INIT(64'h0000000100000017)) 
    \r_tr_state[0]_i_2 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(o_tlp_temp_wr),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .I3(o_tr_result_wr),
        .I4(\r_tr_state_reg_n_0_[1] ),
        .I5(\r_tr_state_reg_n_0_[2] ),
        .O(\r_tr_state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_tr_state[0]_i_3 
       (.I0(o_tlp_temp_wr),
        .I1(o_tr_result_wr),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(\r_tr_state_reg_n_0_[4] ),
        .I5(Q),
        .O(\r_tr_state[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tr_state[0]_i_4 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_state_reg_n_0_[2] ),
        .O(\r_tr_state[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_tr_state[1]_i_1 
       (.I0(r_k_start_dllp),
        .I1(\r_tr_state[4]_i_2_n_0 ),
        .O(ri_tr_state[1]));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \r_tr_state[2]_i_1 
       (.I0(\r_tr_state[3]_i_2_n_0 ),
        .I1(o_tr_result_wr),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(\r_tr_state_reg_n_0_[1] ),
        .I4(out),
        .I5(Q),
        .O(ri_tr_state[2]));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \r_tr_state[3]_i_1 
       (.I0(\r_tr_state[3]_i_2_n_0 ),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(o_tr_result_wr),
        .I3(\r_tr_state_reg_n_0_[2] ),
        .I4(out),
        .I5(Q),
        .O(ri_tr_state[3]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_tr_state[3]_i_2 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_state[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_tr_state[4]_i_1 
       (.I0(r_k_start_dllp),
        .I1(\r_tr_state[4]_i_2_n_0 ),
        .O(ri_tr_state[4]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFDFF)) 
    \r_tr_state[4]_i_2 
       (.I0(\r_tr_state[4]_i_3_n_0 ),
        .I1(\r_tr_state_reg_n_0_[4] ),
        .I2(Q),
        .I3(out),
        .I4(o_tlp_temp_wr),
        .I5(\r_tr_state_reg_n_0_[5] ),
        .O(\r_tr_state[4]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_tr_state[4]_i_3 
       (.I0(o_tr_result_wr),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .O(\r_tr_state[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000028)) 
    \r_tr_state[5]_i_1__0 
       (.I0(\r_tr_state[5]_i_2_n_0 ),
        .I1(\r_tr_state_reg_n_0_[4] ),
        .I2(o_tlp_temp_wr),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(o_tr_result_wr),
        .I5(r_k_stop),
        .O(ri_tr_state[5]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_tr_state[5]_i_2 
       (.I0(\r_tr_state_reg_n_0_[2] ),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(Q),
        .I3(out),
        .O(\r_tr_state[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_tr_state[6]_i_1 
       (.I0(\r_tr_state[7]_i_6_n_0 ),
        .I1(o_tlp_temp_wr),
        .I2(o_tr_result_wr),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(in3),
        .O(ri_tr_state[6]));
  LUT6 #(
    .INIT(64'hFFF8FFF0FFF8F0F0)) 
    \r_tr_state[7]_i_1 
       (.I0(\r_tr_state_reg_n_0_[2] ),
        .I1(\r_tr_state[7]_i_3_n_0 ),
        .I2(\r_tr_state[7]_i_4_n_0 ),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(\r_tr_state[7]_i_5_n_0 ),
        .I5(in3),
        .O(\r_tr_state[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFE0FFFF)) 
    \r_tr_state[7]_i_10 
       (.I0(r_k_start_tlp),
        .I1(r_k_start_dllp),
        .I2(out),
        .I3(Q),
        .I4(\ri_tr_state_inferred__1/i___3_n_0 ),
        .I5(\r_tr_state[7]_i_11_n_0 ),
        .O(\r_tr_state[7]_i_10_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_state[7]_i_11 
       (.I0(o_tr_result_wr),
        .I1(o_tlp_temp_wr),
        .O(\r_tr_state[7]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h000A008000000080)) 
    \r_tr_state[7]_i_2 
       (.I0(\r_tr_state[7]_i_6_n_0 ),
        .I1(in3),
        .I2(\r_tr_state_reg_n_0_[5] ),
        .I3(o_tr_result_wr),
        .I4(o_tlp_temp_wr),
        .I5(r_k_stop),
        .O(ri_tr_state[7]));
  LUT4 #(
    .INIT(16'h0002)) 
    \r_tr_state[7]_i_3 
       (.I0(r_k_stop),
        .I1(\r_tr_state[7]_i_7_n_0 ),
        .I2(\r_tr_state[7]_i_8_n_0 ),
        .I3(\r_tr_state[7]_i_9_n_0 ),
        .O(\r_tr_state[7]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFE0)) 
    \r_tr_state[7]_i_4 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_state_reg_n_0_[4] ),
        .I2(r_k_skp_n),
        .I3(\r_tr_state[7]_i_10_n_0 ),
        .O(\r_tr_state[7]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_tr_state[7]_i_5 
       (.I0(r_tr_byte_cnt[1]),
        .I1(r_tr_byte_cnt[0]),
        .I2(r_tr_byte_cnt[3]),
        .I3(r_tr_byte_cnt[2]),
        .O(\r_tr_state[7]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_tr_state[7]_i_6 
       (.I0(out),
        .I1(Q),
        .I2(\r_tr_state_reg_n_0_[1] ),
        .I3(\r_tr_state_reg_n_0_[2] ),
        .I4(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_state[7]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \r_tr_state[7]_i_7 
       (.I0(\r_tr_state[7]_i_3_0 [6]),
        .I1(\r_tr_state[7]_i_3_1 [6]),
        .I2(\r_tr_state[7]_i_3_0 [7]),
        .I3(\r_tr_state[7]_i_3_1 [7]),
        .O(\r_tr_state[7]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_tr_state[7]_i_8 
       (.I0(\r_tr_state[7]_i_3_0 [3]),
        .I1(\r_tr_state[7]_i_3_1 [3]),
        .I2(\r_tr_state[7]_i_3_1 [4]),
        .I3(\r_tr_state[7]_i_3_0 [4]),
        .I4(\r_tr_state[7]_i_3_1 [5]),
        .I5(\r_tr_state[7]_i_3_0 [5]),
        .O(\r_tr_state[7]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_tr_state[7]_i_9 
       (.I0(\r_tr_state[7]_i_3_0 [0]),
        .I1(\r_tr_state[7]_i_3_1 [0]),
        .I2(\r_tr_state[7]_i_3_1 [2]),
        .I3(\r_tr_state[7]_i_3_0 [2]),
        .I4(\r_tr_state[7]_i_3_1 [1]),
        .I5(\r_tr_state[7]_i_3_0 [1]),
        .O(\r_tr_state[7]_i_9_n_0 ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_tr_state_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .D(ri_tr_state[0]),
        .PRE(inst_local_reset_n_0),
        .Q(out));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[1]),
        .Q(\r_tr_state_reg_n_0_[1] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[2]),
        .Q(\r_tr_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[3]),
        .Q(Q));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[4]),
        .Q(\r_tr_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[5] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[5]),
        .Q(\r_tr_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[6] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[6]),
        .Q(o_tlp_temp_wr));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[7] 
       (.C(\r_rst_reg[1] ),
        .CE(\r_tr_state[7]_i_1_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[7]),
        .Q(o_tr_result_wr));
  LUT4 #(
    .INIT(16'h0116)) 
    \ri_tr_state_inferred__1/i_ 
       (.I0(out),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(Q),
        .O(\ri_tr_state_inferred__1/i__n_0 ));
  LUT4 #(
    .INIT(16'hFEE8)) 
    \ri_tr_state_inferred__1/i___0 
       (.I0(out),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(Q),
        .O(\ri_tr_state_inferred__1/i___0_n_0 ));
  LUT4 #(
    .INIT(16'h0116)) 
    \ri_tr_state_inferred__1/i___1 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(o_tlp_temp_wr),
        .I3(o_tr_result_wr),
        .O(\ri_tr_state_inferred__1/i___1_n_0 ));
  LUT4 #(
    .INIT(16'hFEE8)) 
    \ri_tr_state_inferred__1/i___2 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(o_tlp_temp_wr),
        .I3(o_tr_result_wr),
        .O(\ri_tr_state_inferred__1/i___2_n_0 ));
  LUT4 #(
    .INIT(16'h0012)) 
    \ri_tr_state_inferred__1/i___3 
       (.I0(\ri_tr_state_inferred__1/i__n_0 ),
        .I1(\ri_tr_state_inferred__1/i___0_n_0 ),
        .I2(\ri_tr_state_inferred__1/i___1_n_0 ),
        .I3(\ri_tr_state_inferred__1/i___2_n_0 ),
        .O(\ri_tr_state_inferred__1/i___3_n_0 ));
endmodule

(* ORIG_REF_NAME = "packet_checker_controller" *) 
module packet_checker_controller__parameterized0
   (out,
    o_tlp_temp_wr,
    o_tlp_temp_wr_addr,
    o_tlp_temp_rd_addr,
    o_tr_result,
    o_tr_result_wr,
    o_tr_result_rd,
    o_id_result,
    o_id_result_wr,
    Q,
    o_tlp_valid,
    r_proc_valid_tr_reg_0,
    \r_rst_reg[0] ,
    r_k_skp_n,
    \r_tr_state[7]_i_4__0_0 ,
    \r_tr_state[7]_i_4__0_1 ,
    r_k_stop,
    r_k_start_tlp,
    r_k_start_dllp,
    \r_proc_state_reg[0]_0 ,
    \r_proc_state_reg[0]_1 ,
    \r_rst_reg[1] );
  output out;
  output o_tlp_temp_wr;
  output [3:0]o_tlp_temp_wr_addr;
  output [3:0]o_tlp_temp_rd_addr;
  output [4:0]o_tr_result;
  output o_tr_result_wr;
  output o_tr_result_rd;
  output [4:0]o_id_result;
  output o_id_result_wr;
  output [0:0]Q;
  output [0:0]o_tlp_valid;
  input [12:0]r_proc_valid_tr_reg_0;
  input \r_rst_reg[0] ;
  input r_k_skp_n;
  input [7:0]\r_tr_state[7]_i_4__0_0 ;
  input [7:0]\r_tr_state[7]_i_4__0_1 ;
  input r_k_stop;
  input r_k_start_tlp;
  input r_k_start_dllp;
  input \r_proc_state_reg[0]_0 ;
  input \r_proc_state_reg[0]_1 ;
  input \r_rst_reg[1] ;

  wire [0:0]Q;
  wire [3:0]in12;
  wire in3;
  wire inst_local_reset_n_0;
  (* RTL_KEEP = "true" *) wire [4:0]o_id_result;
  (* RTL_KEEP = "true" *) wire o_id_result_wr;
  (* RTL_KEEP = "true" *) wire [3:0]o_tlp_temp_rd_addr;
  (* RTL_KEEP = "true" *) wire o_tlp_temp_wr;
  (* RTL_KEEP = "true" *) wire [3:0]o_tlp_temp_wr_addr;
  wire [0:0]o_tlp_valid;
  (* RTL_KEEP = "true" *) wire [4:0]o_tr_result;
  (* RTL_KEEP = "true" *) wire o_tr_result_rd;
  (* RTL_KEEP = "true" *) wire o_tr_result_wr;
  (* RTL_KEEP = "true" *) wire out;
  wire [4:0]p_0_in__0;
  wire [3:0]p_0_in__1;
  wire [3:0]p_0_in__2;
  wire r_k_skp_n;
  wire r_k_start_dllp;
  wire r_k_start_tlp;
  wire r_k_stop;
  wire \r_proc_frame_id_header[0]_i_1__0_n_0 ;
  wire \r_proc_frame_id_header[1]_i_1__0_n_0 ;
  wire \r_proc_frame_id_header[2]_i_1__0_n_0 ;
  wire \r_proc_frame_id_header[3]_i_1__0_n_0 ;
  wire \r_proc_frame_id_header[3]_i_2__0_n_0 ;
  wire \r_proc_frame_id_header[4]_i_1__0_n_0 ;
  wire \r_proc_frame_id_header[4]_i_2__0_n_0 ;
  wire \r_proc_frame_id_header_reg_n_0_[4] ;
  wire \r_proc_frame_id_ref[4]_i_3_n_0 ;
  wire [4:0]r_proc_frame_id_ref_reg;
  wire [3:0]r_proc_frame_num_header;
  wire [3:0]r_proc_frame_num_tr;
  wire \r_proc_frame_num_tr[3]_i_1__0_n_0 ;
  wire \r_proc_id_result[4]_i_1__0_n_0 ;
  wire \r_proc_state[0]_i_2__0_n_0 ;
  wire \r_proc_state[1]_i_2_n_0 ;
  wire \r_proc_state[2]_i_2__0_n_0 ;
  wire \r_proc_state[3]_i_2__0_n_0 ;
  wire \r_proc_state[3]_i_3__0_n_0 ;
  wire \r_proc_state[3]_i_4__0_n_0 ;
  wire \r_proc_state[3]_i_5__0_n_0 ;
  wire \r_proc_state[3]_i_6__0_n_0 ;
  wire \r_proc_state[4]_i_2__0_n_0 ;
  wire \r_proc_state[4]_i_3__0_n_0 ;
  wire \r_proc_state[4]_i_4__0_n_0 ;
  wire \r_proc_state[4]_i_5__0_n_0 ;
  wire \r_proc_state[5]_i_2__0_n_0 ;
  wire \r_proc_state[6]_i_1__0_n_0 ;
  wire \r_proc_state[6]_i_4__0_n_0 ;
  wire \r_proc_state[6]_i_5__0_n_0 ;
  wire \r_proc_state[6]_i_6__0_n_0 ;
  wire \r_proc_state_reg[0]_0 ;
  wire \r_proc_state_reg[0]_1 ;
  wire \r_proc_state_reg_n_0_[0] ;
  wire \r_proc_state_reg_n_0_[2] ;
  wire \r_proc_state_reg_n_0_[3] ;
  wire \r_proc_state_reg_n_0_[4] ;
  wire r_proc_valid_tr;
  wire [12:0]r_proc_valid_tr_reg_0;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire [3:0]r_tr_byte_cnt;
  wire \r_tr_byte_cnt[0]_i_1__0_n_0 ;
  wire \r_tr_byte_cnt[1]_i_1__0_n_0 ;
  wire \r_tr_byte_cnt[2]_i_1__0_n_0 ;
  wire \r_tr_byte_cnt[3]_i_2__0_n_0 ;
  wire \r_tr_byte_cnt[3]_i_3__0_n_0 ;
  wire \r_tr_byte_cnt[3]_i_4__0_n_0 ;
  wire \r_tr_frame_num[0]_i_1__0_n_0 ;
  wire \r_tr_frame_num[1]_i_1__0_n_0 ;
  wire \r_tr_frame_num[2]_i_1__0_n_0 ;
  wire \r_tr_frame_num[3]_i_1__0_n_0 ;
  wire \r_tr_frame_num[4]_i_2__0_n_0 ;
  wire \r_tr_frame_num[4]_i_3_n_0 ;
  wire \r_tr_frame_num[4]_i_4_n_0 ;
  wire \r_tr_frame_num_reg_n_0_[0] ;
  wire \r_tr_frame_num_reg_n_0_[1] ;
  wire \r_tr_frame_num_reg_n_0_[2] ;
  wire \r_tr_frame_num_reg_n_0_[3] ;
  wire \r_tr_result[0]_i_1__0_n_0 ;
  wire \r_tr_result[1]_i_1__0_n_0 ;
  wire \r_tr_result[2]_i_1__0_n_0 ;
  wire \r_tr_result[3]_i_1__0_n_0 ;
  wire \r_tr_result[4]_i_2_n_0 ;
  wire \r_tr_state[0]_i_2__0_n_0 ;
  wire \r_tr_state[0]_i_3__0_n_0 ;
  wire \r_tr_state[0]_i_4__0_n_0 ;
  wire \r_tr_state[0]_i_5_n_0 ;
  wire \r_tr_state[0]_i_6_n_0 ;
  wire \r_tr_state[0]_i_7_n_0 ;
  wire \r_tr_state[2]_i_2_n_0 ;
  wire \r_tr_state[3]_i_2__0_n_0 ;
  wire \r_tr_state[4]_i_2__0_n_0 ;
  wire \r_tr_state[6]_i_2_n_0 ;
  wire \r_tr_state[6]_i_3_n_0 ;
  wire \r_tr_state[7]_i_10__0_n_0 ;
  wire \r_tr_state[7]_i_11__0_n_0 ;
  wire \r_tr_state[7]_i_1__0_n_0 ;
  wire \r_tr_state[7]_i_3__0_n_0 ;
  wire [7:0]\r_tr_state[7]_i_4__0_0 ;
  wire [7:0]\r_tr_state[7]_i_4__0_1 ;
  wire \r_tr_state[7]_i_4__0_n_0 ;
  wire \r_tr_state[7]_i_5__0_n_0 ;
  wire \r_tr_state[7]_i_6__0_n_0 ;
  wire \r_tr_state[7]_i_7__0_n_0 ;
  wire \r_tr_state[7]_i_8__0_n_0 ;
  wire \r_tr_state[7]_i_9__0_n_0 ;
  wire \r_tr_state_reg_n_0_[1] ;
  wire \r_tr_state_reg_n_0_[2] ;
  wire \r_tr_state_reg_n_0_[4] ;
  wire \r_tr_state_reg_n_0_[5] ;
  wire ri_proc_frame_id_ref;
  wire [3:0]ri_proc_frame_num_tr;
  wire [3:0]ri_proc_id_result;
  wire [6:0]ri_proc_state;
  wire ri_tlp_temp_wr_addr;
  wire ri_tr_byte_cnt;
  wire ri_tr_frame_num;
  wire ri_tr_result;
  wire [7:0]ri_tr_state;
  wire \ri_tr_state_inferred__1/i___0_n_0 ;
  wire \ri_tr_state_inferred__1/i___1_n_0 ;
  wire \ri_tr_state_inferred__1/i___2_n_0 ;
  wire \ri_tr_state_inferred__1/i___3_n_0 ;
  wire \ri_tr_state_inferred__1/i__n_0 ;

  async_reset__parameterized1_17 inst_local_reset
       (.\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hA3)) 
    \r_proc_frame_id_header[0]_i_1__0 
       (.I0(r_proc_valid_tr_reg_0[0]),
        .I1(in12[0]),
        .I2(\r_proc_state_reg_n_0_[0] ),
        .O(\r_proc_frame_id_header[0]_i_1__0_n_0 ));
  (* \PinAttr:I3:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT4 #(
    .INIT(16'h8BB8)) 
    \r_proc_frame_id_header[1]_i_1__0 
       (.I0(r_proc_valid_tr_reg_0[1]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[1]),
        .I3(in12[0]),
        .O(\r_proc_frame_id_header[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8BB8B8B8)) 
    \r_proc_frame_id_header[2]_i_1__0 
       (.I0(r_proc_valid_tr_reg_0[2]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[2]),
        .I3(in12[0]),
        .I4(in12[1]),
        .O(\r_proc_frame_id_header[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040400)) 
    \r_proc_frame_id_header[3]_i_1__0 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(\r_proc_state[1]_i_2_n_0 ),
        .I2(o_tr_result_rd),
        .I3(\r_proc_state_reg_n_0_[0] ),
        .I4(\r_proc_state_reg_n_0_[3] ),
        .I5(\r_proc_state_reg_n_0_[2] ),
        .O(\r_proc_frame_id_header[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h8BB8B8B8B8B8B8B8)) 
    \r_proc_frame_id_header[3]_i_2__0 
       (.I0(r_proc_valid_tr_reg_0[3]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(in12[3]),
        .I3(in12[1]),
        .I4(in12[0]),
        .I5(in12[2]),
        .O(\r_proc_frame_id_header[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_proc_frame_id_header[4]_i_1__0 
       (.I0(in12[2]),
        .I1(in12[0]),
        .I2(in12[1]),
        .I3(in12[3]),
        .I4(\r_proc_frame_id_header[4]_i_2__0_n_0 ),
        .I5(\r_proc_frame_id_header_reg_n_0_[4] ),
        .O(\r_proc_frame_id_header[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_proc_frame_id_header[4]_i_2__0 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(o_tlp_valid),
        .I2(o_id_result_wr),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state[5]_i_2__0_n_0 ),
        .I5(\r_proc_state_reg_n_0_[3] ),
        .O(\r_proc_frame_id_header[4]_i_2__0_n_0 ));
  FDCE \r_proc_frame_id_header_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_id_header[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[0]_i_1__0_n_0 ),
        .Q(in12[0]));
  FDCE \r_proc_frame_id_header_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_id_header[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[1]_i_1__0_n_0 ),
        .Q(in12[1]));
  FDCE \r_proc_frame_id_header_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_id_header[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[2]_i_1__0_n_0 ),
        .Q(in12[2]));
  FDCE \r_proc_frame_id_header_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_id_header[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[3]_i_2__0_n_0 ),
        .Q(in12[3]));
  FDCE \r_proc_frame_id_header_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_frame_id_header[4]_i_1__0_n_0 ),
        .Q(\r_proc_frame_id_header_reg_n_0_[4] ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_proc_frame_id_ref[0]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .O(p_0_in__0[0]));
  (* \PinAttr:I1:HOLD_DETOUR  = "191" *) 
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_proc_frame_id_ref[1]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .I1(r_proc_frame_id_ref_reg[1]),
        .O(p_0_in__0[1]));
  (* \PinAttr:I1:HOLD_DETOUR  = "191" *) 
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_proc_frame_id_ref[2]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[2]),
        .I1(r_proc_frame_id_ref_reg[1]),
        .I2(r_proc_frame_id_ref_reg[0]),
        .O(p_0_in__0[2]));
  (* \PinAttr:I0:HOLD_DETOUR  = "194" *) 
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_proc_frame_id_ref[3]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[3]),
        .I1(r_proc_frame_id_ref_reg[0]),
        .I2(r_proc_frame_id_ref_reg[1]),
        .I3(r_proc_frame_id_ref_reg[2]),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \r_proc_frame_id_ref[4]_i_1__0 
       (.I0(\r_proc_frame_id_ref[4]_i_3_n_0 ),
        .I1(\r_proc_state_reg_n_0_[3] ),
        .I2(o_tr_result_rd),
        .I3(o_id_result_wr),
        .I4(\r_proc_state_reg_n_0_[0] ),
        .I5(o_tlp_valid),
        .O(ri_proc_frame_id_ref));
  (* \PinAttr:I4:HOLD_DETOUR  = "194" *) 
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \r_proc_frame_id_ref[4]_i_2__0 
       (.I0(r_proc_frame_id_ref_reg[4]),
        .I1(r_proc_frame_id_ref_reg[2]),
        .I2(r_proc_frame_id_ref_reg[1]),
        .I3(r_proc_frame_id_ref_reg[0]),
        .I4(r_proc_frame_id_ref_reg[3]),
        .O(p_0_in__0[4]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_proc_frame_id_ref[4]_i_3 
       (.I0(\r_proc_state_reg_n_0_[2] ),
        .I1(\r_proc_state_reg_n_0_[4] ),
        .O(\r_proc_frame_id_ref[4]_i_3_n_0 ));
  FDCE \r_proc_frame_id_ref_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[0]),
        .Q(r_proc_frame_id_ref_reg[0]));
  FDCE \r_proc_frame_id_ref_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[1]),
        .Q(r_proc_frame_id_ref_reg[1]));
  FDCE \r_proc_frame_id_ref_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[2]),
        .Q(r_proc_frame_id_ref_reg[2]));
  FDCE \r_proc_frame_id_ref_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[3]),
        .Q(r_proc_frame_id_ref_reg[3]));
  FDCE \r_proc_frame_id_ref_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_frame_id_ref),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__0[4]),
        .Q(r_proc_frame_id_ref_reg[4]));
  FDCE \r_proc_frame_num_header_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[1]),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[4]),
        .Q(r_proc_frame_num_header[0]));
  FDCE \r_proc_frame_num_header_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[1]),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[5]),
        .Q(r_proc_frame_num_header[1]));
  FDCE \r_proc_frame_num_header_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[1]),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[6]),
        .Q(r_proc_frame_num_header[2]));
  FDCE \r_proc_frame_num_header_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[1]),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[7]),
        .Q(r_proc_frame_num_header[3]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \r_proc_frame_num_tr[0]_i_1__0 
       (.I0(r_proc_valid_tr_reg_0[8]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[0]),
        .O(ri_proc_frame_num_tr[0]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT4 #(
    .INIT(16'hB88B)) 
    \r_proc_frame_num_tr[1]_i_1__0 
       (.I0(r_proc_valid_tr_reg_0[9]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[1]),
        .I3(r_proc_frame_num_tr[0]),
        .O(ri_proc_frame_num_tr[1]));
  LUT5 #(
    .INIT(32'hB8B8B88B)) 
    \r_proc_frame_num_tr[2]_i_1__0 
       (.I0(r_proc_valid_tr_reg_0[10]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[2]),
        .I3(r_proc_frame_num_tr[0]),
        .I4(r_proc_frame_num_tr[1]),
        .O(ri_proc_frame_num_tr[2]));
  LUT5 #(
    .INIT(32'h00010110)) 
    \r_proc_frame_num_tr[3]_i_1__0 
       (.I0(o_tr_result_rd),
        .I1(\r_proc_state[3]_i_3__0_n_0 ),
        .I2(o_id_result_wr),
        .I3(\r_proc_state_reg_n_0_[0] ),
        .I4(\r_proc_state_reg_n_0_[2] ),
        .O(\r_proc_frame_num_tr[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8B8B8B8B88B)) 
    \r_proc_frame_num_tr[3]_i_2__0 
       (.I0(r_proc_valid_tr_reg_0[11]),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(r_proc_frame_num_tr[3]),
        .I3(r_proc_frame_num_tr[2]),
        .I4(r_proc_frame_num_tr[1]),
        .I5(r_proc_frame_num_tr[0]),
        .O(ri_proc_frame_num_tr[3]));
  FDCE \r_proc_frame_num_tr_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_num_tr[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[0]),
        .Q(r_proc_frame_num_tr[0]));
  FDCE \r_proc_frame_num_tr_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_num_tr[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[1]),
        .Q(r_proc_frame_num_tr[1]));
  FDCE \r_proc_frame_num_tr_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_num_tr[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[2]),
        .Q(r_proc_frame_num_tr[2]));
  FDCE \r_proc_frame_num_tr_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_frame_num_tr[3]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_frame_num_tr[3]),
        .Q(r_proc_frame_num_tr[3]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[0]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[0]),
        .O(ri_proc_id_result[0]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[1]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[1]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[1]),
        .O(ri_proc_id_result[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[2]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[2]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[2]),
        .O(ri_proc_id_result[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_proc_id_result[3]_i_1__0 
       (.I0(r_proc_frame_id_ref_reg[3]),
        .I1(\r_proc_state_reg_n_0_[2] ),
        .I2(in12[3]),
        .O(ri_proc_id_result[3]));
  LUT6 #(
    .INIT(64'h0000000400000400)) 
    \r_proc_id_result[4]_i_1__0 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(\r_proc_state[1]_i_2_n_0 ),
        .I2(o_tr_result_rd),
        .I3(\r_proc_state_reg_n_0_[3] ),
        .I4(\r_proc_state_reg_n_0_[0] ),
        .I5(\r_proc_state_reg_n_0_[2] ),
        .O(\r_proc_id_result[4]_i_1__0_n_0 ));
  FDCE \r_proc_id_result_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_id_result[4]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[0]),
        .Q(o_id_result[0]));
  FDCE \r_proc_id_result_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_id_result[4]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[1]),
        .Q(o_id_result[1]));
  FDCE \r_proc_id_result_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_id_result[4]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[2]),
        .Q(o_id_result[2]));
  FDCE \r_proc_id_result_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_id_result[4]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_id_result[3]),
        .Q(o_id_result[3]));
  FDCE \r_proc_id_result_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_id_result[4]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(\r_proc_state_reg_n_0_[3] ),
        .Q(o_id_result[4]));
  LUT6 #(
    .INIT(64'hFEFEFEFEFEFEFEEB)) 
    \r_proc_state[0]_i_1__0 
       (.I0(\r_proc_state[0]_i_2__0_n_0 ),
        .I1(o_tr_result_rd),
        .I2(\r_proc_state_reg_n_0_[0] ),
        .I3(\r_proc_state_reg_n_0_[2] ),
        .I4(\r_proc_state_reg_n_0_[3] ),
        .I5(\r_proc_state[2]_i_2__0_n_0 ),
        .O(ri_proc_state[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFCFFFEFCC0)) 
    \r_proc_state[0]_i_2__0 
       (.I0(\r_proc_state[6]_i_4__0_n_0 ),
        .I1(\r_proc_state_reg_n_0_[4] ),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(\r_proc_state_reg_n_0_[2] ),
        .I4(o_id_result_wr),
        .I5(o_tlp_valid),
        .O(\r_proc_state[0]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_proc_state[1]_i_1 
       (.I0(\r_proc_state_reg_n_0_[2] ),
        .I1(\r_proc_state_reg_n_0_[4] ),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state[1]_i_2_n_0 ),
        .I5(\r_proc_state_reg_n_0_[0] ),
        .O(ri_proc_state[1]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[1]_i_2 
       (.I0(o_id_result_wr),
        .I1(o_tlp_valid),
        .O(\r_proc_state[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000005300000)) 
    \r_proc_state[2]_i_1__0 
       (.I0(\r_proc_state[4]_i_2__0_n_0 ),
        .I1(\r_proc_state[3]_i_2__0_n_0 ),
        .I2(o_tr_result_rd),
        .I3(\r_proc_state_reg_n_0_[3] ),
        .I4(\r_proc_state[5]_i_2__0_n_0 ),
        .I5(\r_proc_state[2]_i_2__0_n_0 ),
        .O(ri_proc_state[2]));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_proc_state[2]_i_2__0 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(o_tlp_valid),
        .I2(o_id_result_wr),
        .O(\r_proc_state[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000005C00000)) 
    \r_proc_state[3]_i_1__0 
       (.I0(\r_proc_state[6]_i_4__0_n_0 ),
        .I1(\r_proc_state[3]_i_2__0_n_0 ),
        .I2(o_tr_result_rd),
        .I3(o_id_result_wr),
        .I4(\r_proc_state[5]_i_2__0_n_0 ),
        .I5(\r_proc_state[3]_i_3__0_n_0 ),
        .O(ri_proc_state[3]));
  LUT5 #(
    .INIT(32'h00820000)) 
    \r_proc_state[3]_i_2__0 
       (.I0(r_proc_valid_tr),
        .I1(r_proc_frame_num_header[3]),
        .I2(r_proc_frame_num_tr[3]),
        .I3(\r_proc_state[3]_i_4__0_n_0 ),
        .I4(\r_proc_state[3]_i_5__0_n_0 ),
        .O(\r_proc_state[3]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_proc_state[3]_i_3__0 
       (.I0(o_tlp_valid),
        .I1(\r_proc_state_reg_n_0_[4] ),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .O(\r_proc_state[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_proc_state[3]_i_4__0 
       (.I0(r_proc_frame_num_header[0]),
        .I1(r_proc_frame_num_tr[0]),
        .I2(r_proc_frame_num_tr[2]),
        .I3(r_proc_frame_num_header[2]),
        .I4(r_proc_frame_num_tr[1]),
        .I5(r_proc_frame_num_header[1]),
        .O(\r_proc_state[3]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hD0DD0000FFFFD0DD)) 
    \r_proc_state[3]_i_5__0 
       (.I0(\r_proc_state[4]_i_5__0_n_0 ),
        .I1(\r_proc_state[3]_i_6__0_n_0 ),
        .I2(r_proc_frame_id_ref_reg[3]),
        .I3(in12[3]),
        .I4(r_proc_frame_id_ref_reg[4]),
        .I5(\r_proc_frame_id_header_reg_n_0_[4] ),
        .O(\r_proc_state[3]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'hD0DDDDDD0000D0DD)) 
    \r_proc_state[3]_i_6__0 
       (.I0(in12[2]),
        .I1(r_proc_frame_id_ref_reg[2]),
        .I2(r_proc_frame_id_ref_reg[0]),
        .I3(in12[0]),
        .I4(in12[1]),
        .I5(r_proc_frame_id_ref_reg[1]),
        .O(\r_proc_state[3]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h00080000)) 
    \r_proc_state[4]_i_1__0 
       (.I0(\r_proc_state[4]_i_2__0_n_0 ),
        .I1(\r_proc_state_reg_n_0_[3] ),
        .I2(\r_proc_state_reg_n_0_[0] ),
        .I3(\r_proc_state_reg_n_0_[2] ),
        .I4(\r_proc_state[4]_i_3__0_n_0 ),
        .O(ri_proc_state[4]));
  LUT6 #(
    .INIT(64'h8F88FFFF00008F88)) 
    \r_proc_state[4]_i_2__0 
       (.I0(\r_proc_state[4]_i_4__0_n_0 ),
        .I1(\r_proc_state[4]_i_5__0_n_0 ),
        .I2(r_proc_frame_id_ref_reg[3]),
        .I3(in12[3]),
        .I4(r_proc_frame_id_ref_reg[4]),
        .I5(\r_proc_frame_id_header_reg_n_0_[4] ),
        .O(\r_proc_state[4]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_proc_state[4]_i_3__0 
       (.I0(o_tr_result_rd),
        .I1(o_id_result_wr),
        .I2(o_tlp_valid),
        .I3(\r_proc_state_reg_n_0_[4] ),
        .O(\r_proc_state[4]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hDDFDFFFF00F0DDFD)) 
    \r_proc_state[4]_i_4__0 
       (.I0(r_proc_frame_id_ref_reg[0]),
        .I1(in12[0]),
        .I2(in12[2]),
        .I3(r_proc_frame_id_ref_reg[2]),
        .I4(r_proc_frame_id_ref_reg[1]),
        .I5(in12[1]),
        .O(\r_proc_state[4]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hB0BB)) 
    \r_proc_state[4]_i_5__0 
       (.I0(in12[3]),
        .I1(r_proc_frame_id_ref_reg[3]),
        .I2(in12[2]),
        .I3(r_proc_frame_id_ref_reg[2]),
        .O(\r_proc_state[4]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_proc_state[5]_i_1__0 
       (.I0(o_id_result_wr),
        .I1(o_tlp_valid),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state[5]_i_2__0_n_0 ),
        .I5(\r_proc_state_reg_n_0_[4] ),
        .O(ri_proc_state[5]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[5]_i_2__0 
       (.I0(\r_proc_state_reg_n_0_[2] ),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .O(\r_proc_state[5]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFCFFFFFCEFFCEF)) 
    \r_proc_state[6]_i_1__0 
       (.I0(\r_proc_state[6]_i_4__0_n_0 ),
        .I1(\r_proc_state[6]_i_5__0_n_0 ),
        .I2(\r_proc_state_reg_n_0_[2] ),
        .I3(\r_proc_state_reg_n_0_[4] ),
        .I4(\r_proc_state_reg[0]_0 ),
        .I5(\r_proc_state_reg_n_0_[0] ),
        .O(\r_proc_state[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000010001000000)) 
    \r_proc_state[6]_i_2__0 
       (.I0(\r_proc_state_reg_n_0_[4] ),
        .I1(\r_proc_state_reg_n_0_[0] ),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(\r_proc_state[6]_i_6__0_n_0 ),
        .I4(o_tlp_valid),
        .I5(\r_proc_state_reg_n_0_[2] ),
        .O(ri_proc_state[6]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_proc_state[6]_i_4__0 
       (.I0(r_proc_frame_num_tr[2]),
        .I1(r_proc_frame_num_tr[1]),
        .I2(r_proc_frame_num_tr[0]),
        .I3(r_proc_frame_num_tr[3]),
        .O(\r_proc_state[6]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFFFFFE)) 
    \r_proc_state[6]_i_5__0 
       (.I0(o_id_result_wr),
        .I1(o_tlp_valid),
        .I2(\r_proc_state_reg_n_0_[3] ),
        .I3(o_tr_result_rd),
        .I4(\r_proc_state_reg_n_0_[4] ),
        .I5(\r_proc_state_reg[0]_1 ),
        .O(\r_proc_state[6]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_proc_state[6]_i_6__0 
       (.I0(o_id_result_wr),
        .I1(o_tr_result_rd),
        .O(\r_proc_state[6]_i_6__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_proc_state_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .D(ri_proc_state[0]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_proc_state_reg_n_0_[0] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[1]),
        .Q(o_tr_result_rd));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[2]),
        .Q(\r_proc_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[3]),
        .Q(\r_proc_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[4]),
        .Q(\r_proc_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[5] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[5]),
        .Q(o_tlp_valid));
  (* FSM_ENCODED_STATES = "S_PROC_CHECK:0000010,S_PROC_WRITE_TLP:0100000,S_PROC_WRITE_RESULT:1000000,S_PROC_WAIT_TLP_RDY:0010000,S_PROC_DISCARD:0000100,S_PROC_ACCEPT:0001000,S_PROC_IDLE:0000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_proc_state_reg[6] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_proc_state[6]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_proc_state[6]),
        .Q(o_id_result_wr));
  FDCE r_proc_valid_tr_reg
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[1]),
        .CLR(inst_local_reset_n_0),
        .D(r_proc_valid_tr_reg_0[12]),
        .Q(r_proc_valid_tr));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_tlp_temp_rd_addr[0]_i_1__0 
       (.I0(o_tlp_temp_rd_addr[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_tlp_temp_rd_addr[1]_i_1__0 
       (.I0(o_tlp_temp_rd_addr[0]),
        .I1(o_tlp_temp_rd_addr[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_temp_rd_addr[2]_i_1__0 
       (.I0(o_tlp_temp_rd_addr[2]),
        .I1(o_tlp_temp_rd_addr[1]),
        .I2(o_tlp_temp_rd_addr[0]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_tlp_temp_rd_addr[3]_i_1__0 
       (.I0(o_tlp_temp_rd_addr[3]),
        .I1(o_tlp_temp_rd_addr[0]),
        .I2(o_tlp_temp_rd_addr[1]),
        .I3(o_tlp_temp_rd_addr[2]),
        .O(p_0_in__2[3]));
  FDCE \r_tlp_temp_rd_addr_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[0]),
        .Q(o_tlp_temp_rd_addr[0]));
  FDCE \r_tlp_temp_rd_addr_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[1]),
        .Q(o_tlp_temp_rd_addr[1]));
  FDCE \r_tlp_temp_rd_addr_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[2]),
        .Q(o_tlp_temp_rd_addr[2]));
  FDCE \r_tlp_temp_rd_addr_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_proc_state[6]),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__2[3]),
        .Q(o_tlp_temp_rd_addr[3]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_tlp_temp_wr_addr[0]_i_1__0 
       (.I0(o_tlp_temp_wr_addr[0]),
        .O(p_0_in__1[0]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_tlp_temp_wr_addr[1]_i_1__0 
       (.I0(o_tlp_temp_wr_addr[0]),
        .I1(o_tlp_temp_wr_addr[1]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_temp_wr_addr[2]_i_1__0 
       (.I0(o_tlp_temp_wr_addr[2]),
        .I1(o_tlp_temp_wr_addr[1]),
        .I2(o_tlp_temp_wr_addr[0]),
        .O(p_0_in__1[2]));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \r_tlp_temp_wr_addr[3]_i_1__0 
       (.I0(\r_tr_state[3]_i_2__0_n_0 ),
        .I1(o_tr_result_wr),
        .I2(\r_tr_state_reg_n_0_[1] ),
        .I3(o_tlp_temp_wr),
        .I4(\r_tr_state_reg_n_0_[2] ),
        .I5(\r_tr_state_reg_n_0_[5] ),
        .O(ri_tlp_temp_wr_addr));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_tlp_temp_wr_addr[3]_i_2__0 
       (.I0(o_tlp_temp_wr_addr[3]),
        .I1(o_tlp_temp_wr_addr[0]),
        .I2(o_tlp_temp_wr_addr[1]),
        .I3(o_tlp_temp_wr_addr[2]),
        .O(p_0_in__1[3]));
  FDCE \r_tlp_temp_wr_addr_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[0]),
        .Q(o_tlp_temp_wr_addr[0]));
  FDCE \r_tlp_temp_wr_addr_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[1]),
        .Q(o_tlp_temp_wr_addr[1]));
  FDCE \r_tlp_temp_wr_addr_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[2]),
        .Q(o_tlp_temp_wr_addr[2]));
  FDCE \r_tlp_temp_wr_addr_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_temp_wr_addr),
        .CLR(inst_local_reset_n_0),
        .D(p_0_in__1[3]),
        .Q(o_tlp_temp_wr_addr[3]));
  LUT5 #(
    .INIT(32'h14141455)) 
    \r_tr_byte_cnt[0]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(r_k_skp_n),
        .I2(r_tr_byte_cnt[0]),
        .I3(\r_tr_state_reg_n_0_[2] ),
        .I4(\r_tr_state_reg_n_0_[5] ),
        .O(\r_tr_byte_cnt[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h5555555500005104)) 
    \r_tr_byte_cnt[1]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(r_k_skp_n),
        .I2(r_tr_byte_cnt[0]),
        .I3(r_tr_byte_cnt[1]),
        .I4(o_tlp_temp_wr),
        .I5(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_byte_cnt[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h5454545454544554)) 
    \r_tr_byte_cnt[2]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_state[6]_i_3_n_0 ),
        .I2(r_tr_byte_cnt[2]),
        .I3(r_k_skp_n),
        .I4(r_tr_byte_cnt[1]),
        .I5(r_tr_byte_cnt[0]),
        .O(\r_tr_byte_cnt[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200020228)) 
    \r_tr_byte_cnt[3]_i_1__0 
       (.I0(\r_tr_byte_cnt[3]_i_3__0_n_0 ),
        .I1(\r_tr_state_reg_n_0_[4] ),
        .I2(o_tlp_temp_wr),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(\r_tr_state_reg_n_0_[2] ),
        .I5(\r_tr_state_reg_n_0_[1] ),
        .O(ri_tr_byte_cnt));
  LUT5 #(
    .INIT(32'h00000006)) 
    \r_tr_byte_cnt[3]_i_2__0 
       (.I0(\r_tr_byte_cnt[3]_i_4__0_n_0 ),
        .I1(r_tr_byte_cnt[3]),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .I3(o_tlp_temp_wr),
        .I4(\r_tr_state_reg_n_0_[1] ),
        .O(\r_tr_byte_cnt[3]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_tr_byte_cnt[3]_i_3__0 
       (.I0(o_tr_result_wr),
        .I1(Q),
        .I2(out),
        .O(\r_tr_byte_cnt[3]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_tr_byte_cnt[3]_i_4__0 
       (.I0(r_tr_byte_cnt[0]),
        .I1(r_tr_byte_cnt[1]),
        .I2(r_k_skp_n),
        .I3(r_tr_byte_cnt[2]),
        .O(\r_tr_byte_cnt[3]_i_4__0_n_0 ));
  FDCE \r_tr_byte_cnt_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[0]_i_1__0_n_0 ),
        .Q(r_tr_byte_cnt[0]));
  FDCE \r_tr_byte_cnt_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[1]_i_1__0_n_0 ),
        .Q(r_tr_byte_cnt[1]));
  FDCE \r_tr_byte_cnt_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[2]_i_1__0_n_0 ),
        .Q(r_tr_byte_cnt[2]));
  FDCE \r_tr_byte_cnt_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_byte_cnt[3]_i_2__0_n_0 ),
        .Q(r_tr_byte_cnt[3]));
  (* \PinAttr:I1:HOLD_DETOUR  = "189" *) 
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_tr_frame_num[0]_i_1__0 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .O(\r_tr_frame_num[0]_i_1__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "189" *) 
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \r_tr_frame_num[1]_i_1__0 
       (.I0(\r_tr_frame_num_reg_n_0_[1] ),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .I2(o_tlp_temp_wr),
        .O(\r_tr_frame_num[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \r_tr_frame_num[2]_i_1__0 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .I2(\r_tr_frame_num_reg_n_0_[1] ),
        .I3(\r_tr_frame_num_reg_n_0_[2] ),
        .O(\r_tr_frame_num[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT5 #(
    .INIT(32'h2AAA8000)) 
    \r_tr_frame_num[3]_i_1__0 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[1] ),
        .I2(\r_tr_frame_num_reg_n_0_[0] ),
        .I3(\r_tr_frame_num_reg_n_0_[2] ),
        .I4(\r_tr_frame_num_reg_n_0_[3] ),
        .O(\r_tr_frame_num[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000440)) 
    \r_tr_frame_num[4]_i_1__0 
       (.I0(\r_tr_frame_num[4]_i_3_n_0 ),
        .I1(\r_tr_frame_num[4]_i_4_n_0 ),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .I3(o_tlp_temp_wr),
        .I4(\r_tr_state_reg_n_0_[5] ),
        .I5(o_tr_result_wr),
        .O(ri_tr_frame_num));
  LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
    \r_tr_frame_num[4]_i_2__0 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_frame_num_reg_n_0_[2] ),
        .I2(\r_tr_frame_num_reg_n_0_[0] ),
        .I3(\r_tr_frame_num_reg_n_0_[1] ),
        .I4(\r_tr_frame_num_reg_n_0_[3] ),
        .I5(in3),
        .O(\r_tr_frame_num[4]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_frame_num[4]_i_3 
       (.I0(out),
        .I1(Q),
        .O(\r_tr_frame_num[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tr_frame_num[4]_i_4 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_state_reg_n_0_[2] ),
        .O(\r_tr_frame_num[4]_i_4_n_0 ));
  FDCE \r_tr_frame_num_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[0]_i_1__0_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[0] ));
  FDCE \r_tr_frame_num_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[1]_i_1__0_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[1] ));
  FDCE \r_tr_frame_num_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[2]_i_1__0_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[2] ));
  FDCE \r_tr_frame_num_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[3]_i_1__0_n_0 ),
        .Q(\r_tr_frame_num_reg_n_0_[3] ));
  FDCE \r_tr_frame_num_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_frame_num),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_frame_num[4]_i_2__0_n_0 ),
        .Q(in3));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[0]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[0] ),
        .O(\r_tr_result[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[1]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[1] ),
        .O(\r_tr_result[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[2]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[2] ),
        .O(\r_tr_result[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_result[3]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(\r_tr_frame_num_reg_n_0_[3] ),
        .O(\r_tr_result[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200020000)) 
    \r_tr_result[4]_i_1__0 
       (.I0(\r_tr_state[3]_i_2__0_n_0 ),
        .I1(o_tr_result_wr),
        .I2(\r_tr_state_reg_n_0_[1] ),
        .I3(\r_tr_state_reg_n_0_[2] ),
        .I4(\r_tr_state_reg_n_0_[5] ),
        .I5(o_tlp_temp_wr),
        .O(ri_tr_result));
  LUT2 #(
    .INIT(4'h2)) 
    \r_tr_result[4]_i_2 
       (.I0(o_tlp_temp_wr),
        .I1(\r_tr_state[7]_i_4__0_n_0 ),
        .O(\r_tr_result[4]_i_2_n_0 ));
  FDCE \r_tr_result_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[0]_i_1__0_n_0 ),
        .Q(o_tr_result[0]));
  FDCE \r_tr_result_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[1]_i_1__0_n_0 ),
        .Q(o_tr_result[1]));
  FDCE \r_tr_result_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[2]_i_1__0_n_0 ),
        .Q(o_tr_result[2]));
  FDCE \r_tr_result_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[3]_i_1__0_n_0 ),
        .Q(o_tr_result[3]));
  FDCE \r_tr_result_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tr_result),
        .CLR(inst_local_reset_n_0),
        .D(\r_tr_result[4]_i_2_n_0 ),
        .Q(o_tr_result[4]));
  LUT6 #(
    .INIT(64'hFFFF51FF5155FF55)) 
    \r_tr_state[0]_i_1__0 
       (.I0(\r_tr_state[0]_i_2__0_n_0 ),
        .I1(\r_tr_state[0]_i_3__0_n_0 ),
        .I2(\r_tr_state[0]_i_4__0_n_0 ),
        .I3(\r_tr_state[0]_i_5_n_0 ),
        .I4(\r_tr_state[0]_i_6_n_0 ),
        .I5(out),
        .O(ri_tr_state[0]));
  LUT6 #(
    .INIT(64'h0000001000101030)) 
    \r_tr_state[0]_i_2__0 
       (.I0(\r_tr_state_reg_n_0_[2] ),
        .I1(Q),
        .I2(\r_tr_state[0]_i_7_n_0 ),
        .I3(\r_tr_state_reg_n_0_[4] ),
        .I4(o_tlp_temp_wr),
        .I5(\r_tr_state_reg_n_0_[5] ),
        .O(\r_tr_state[0]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tr_state[0]_i_3__0 
       (.I0(o_tr_result_wr),
        .I1(o_tlp_temp_wr),
        .O(\r_tr_state[0]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_state[0]_i_4__0 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(Q),
        .O(\r_tr_state[0]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tr_state[0]_i_5 
       (.I0(\r_tr_state_reg_n_0_[2] ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .O(\r_tr_state[0]_i_5_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_tr_state[0]_i_6 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(o_tlp_temp_wr),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_state[0]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tr_state[0]_i_7 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(o_tr_result_wr),
        .O(\r_tr_state[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \r_tr_state[1]_i_1__0 
       (.I0(\r_tr_state[4]_i_2__0_n_0 ),
        .I1(Q),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .I3(out),
        .I4(\r_tr_state_reg_n_0_[2] ),
        .I5(r_k_start_dllp),
        .O(ri_tr_state[1]));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    \r_tr_state[2]_i_1__0 
       (.I0(out),
        .I1(Q),
        .I2(o_tr_result_wr),
        .I3(\r_tr_state_reg_n_0_[1] ),
        .I4(\r_tr_state_reg_n_0_[2] ),
        .I5(\r_tr_state[2]_i_2_n_0 ),
        .O(ri_tr_state[2]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_tr_state[2]_i_2 
       (.I0(\r_tr_state_reg_n_0_[5] ),
        .I1(o_tlp_temp_wr),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_state[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \r_tr_state[3]_i_1__0 
       (.I0(\r_tr_state[3]_i_2__0_n_0 ),
        .I1(o_tr_result_wr),
        .I2(\r_tr_state_reg_n_0_[1] ),
        .I3(o_tlp_temp_wr),
        .I4(\r_tr_state_reg_n_0_[5] ),
        .I5(\r_tr_state_reg_n_0_[2] ),
        .O(ri_tr_state[3]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_tr_state[3]_i_2__0 
       (.I0(out),
        .I1(Q),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .O(\r_tr_state[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_tr_state[4]_i_1__0 
       (.I0(\r_tr_state_reg_n_0_[2] ),
        .I1(out),
        .I2(\r_tr_state_reg_n_0_[4] ),
        .I3(Q),
        .I4(\r_tr_state[4]_i_2__0_n_0 ),
        .I5(r_k_start_dllp),
        .O(ri_tr_state[4]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_tr_state[4]_i_2__0 
       (.I0(o_tr_result_wr),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(o_tlp_temp_wr),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .O(\r_tr_state[4]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h2A)) 
    \r_tr_state[5]_i_1 
       (.I0(ri_tr_frame_num),
        .I1(o_tlp_temp_wr),
        .I2(r_k_stop),
        .O(ri_tr_state[5]));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \r_tr_state[6]_i_1__0 
       (.I0(\r_tr_state[6]_i_2_n_0 ),
        .I1(Q),
        .I2(out),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(in3),
        .I5(\r_tr_state[6]_i_3_n_0 ),
        .O(ri_tr_state[6]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_tr_state[6]_i_2 
       (.I0(o_tr_result_wr),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .O(\r_tr_state[6]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_tr_state[6]_i_3 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(o_tlp_temp_wr),
        .O(\r_tr_state[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h2FF22FF2FFFF2FF2)) 
    \r_tr_state[7]_i_10__0 
       (.I0(\r_tr_state[7]_i_4__0_1 [0]),
        .I1(\r_tr_state[7]_i_4__0_0 [0]),
        .I2(\r_tr_state[7]_i_4__0_0 [2]),
        .I3(\r_tr_state[7]_i_4__0_1 [2]),
        .I4(\r_tr_state[7]_i_4__0_0 [4]),
        .I5(\r_tr_state[7]_i_4__0_1 [4]),
        .O(\r_tr_state[7]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'h6F66)) 
    \r_tr_state[7]_i_11__0 
       (.I0(\r_tr_state[7]_i_4__0_1 [3]),
        .I1(\r_tr_state[7]_i_4__0_0 [3]),
        .I2(\r_tr_state[7]_i_4__0_1 [0]),
        .I3(\r_tr_state[7]_i_4__0_0 [0]),
        .O(\r_tr_state[7]_i_11__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEFFEAEAEEEEEAEA)) 
    \r_tr_state[7]_i_1__0 
       (.I0(\r_tr_state[7]_i_3__0_n_0 ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(in3),
        .I3(\r_tr_state[7]_i_4__0_n_0 ),
        .I4(\r_tr_state[7]_i_5__0_n_0 ),
        .I5(\r_tr_state_reg_n_0_[2] ),
        .O(\r_tr_state[7]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000010221000)) 
    \r_tr_state[7]_i_2__0 
       (.I0(o_tlp_temp_wr),
        .I1(o_tr_result_wr),
        .I2(in3),
        .I3(\r_tr_state_reg_n_0_[5] ),
        .I4(r_k_stop),
        .I5(\r_tr_state[7]_i_6__0_n_0 ),
        .O(ri_tr_state[7]));
  LUT4 #(
    .INIT(16'hFFE0)) 
    \r_tr_state[7]_i_3__0 
       (.I0(\r_tr_state_reg_n_0_[1] ),
        .I1(\r_tr_state_reg_n_0_[4] ),
        .I2(r_k_skp_n),
        .I3(\r_tr_state[7]_i_7__0_n_0 ),
        .O(\r_tr_state[7]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFBE)) 
    \r_tr_state[7]_i_4__0 
       (.I0(\r_tr_state[7]_i_8__0_n_0 ),
        .I1(\r_tr_state[7]_i_4__0_0 [6]),
        .I2(\r_tr_state[7]_i_4__0_1 [6]),
        .I3(\r_tr_state[7]_i_9__0_n_0 ),
        .I4(\r_tr_state[7]_i_10__0_n_0 ),
        .I5(\r_tr_state[7]_i_11__0_n_0 ),
        .O(\r_tr_state[7]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_tr_state[7]_i_5__0 
       (.I0(r_tr_byte_cnt[1]),
        .I1(r_tr_byte_cnt[0]),
        .I2(r_tr_byte_cnt[3]),
        .I3(r_tr_byte_cnt[2]),
        .O(\r_tr_state[7]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_tr_state[7]_i_6__0 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(Q),
        .I2(out),
        .I3(\r_tr_state_reg_n_0_[2] ),
        .I4(\r_tr_state_reg_n_0_[1] ),
        .O(\r_tr_state[7]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFE0FFFFFF)) 
    \r_tr_state[7]_i_7__0 
       (.I0(r_k_start_tlp),
        .I1(r_k_start_dllp),
        .I2(out),
        .I3(\r_tr_state[0]_i_3__0_n_0 ),
        .I4(\ri_tr_state_inferred__1/i___3_n_0 ),
        .I5(Q),
        .O(\r_tr_state[7]_i_7__0_n_0 ));
  LUT5 #(
    .INIT(32'h6F66FFFF)) 
    \r_tr_state[7]_i_8__0 
       (.I0(\r_tr_state[7]_i_4__0_1 [7]),
        .I1(\r_tr_state[7]_i_4__0_0 [7]),
        .I2(\r_tr_state[7]_i_4__0_1 [5]),
        .I3(\r_tr_state[7]_i_4__0_0 [5]),
        .I4(r_k_stop),
        .O(\r_tr_state[7]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h66F666F6FFFF66F6)) 
    \r_tr_state[7]_i_9__0 
       (.I0(\r_tr_state[7]_i_4__0_1 [1]),
        .I1(\r_tr_state[7]_i_4__0_0 [1]),
        .I2(\r_tr_state[7]_i_4__0_1 [5]),
        .I3(\r_tr_state[7]_i_4__0_0 [5]),
        .I4(\r_tr_state[7]_i_4__0_1 [4]),
        .I5(\r_tr_state[7]_i_4__0_0 [4]),
        .O(\r_tr_state[7]_i_9__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_tr_state_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .D(ri_tr_state[0]),
        .PRE(inst_local_reset_n_0),
        .Q(out));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[1]),
        .Q(\r_tr_state_reg_n_0_[1] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[2]),
        .Q(\r_tr_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[3]),
        .Q(Q));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[4]),
        .Q(\r_tr_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[5] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[5]),
        .Q(\r_tr_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[6] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[6]),
        .Q(o_tlp_temp_wr));
  (* FSM_ENCODED_STATES = "S_TR_IDLE:00000001,S_TR_RECV_DLLP:00000100,S_TR_WRITE_DLLP:00001000,S_TR_START_TLP:00010000,S_TR_START_DLLP:00000010,S_TR_WRITE_TLP:01000000,S_TR_RECV_TLP:00100000,S_TR_WRITE_RESULT:10000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_tr_state_reg[7] 
       (.C(\r_rst_reg[0] ),
        .CE(\r_tr_state[7]_i_1__0_n_0 ),
        .CLR(inst_local_reset_n_0),
        .D(ri_tr_state[7]),
        .Q(o_tr_result_wr));
  LUT4 #(
    .INIT(16'h0116)) 
    \ri_tr_state_inferred__1/i_ 
       (.I0(out),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(Q),
        .O(\ri_tr_state_inferred__1/i__n_0 ));
  LUT4 #(
    .INIT(16'hFEE8)) 
    \ri_tr_state_inferred__1/i___0 
       (.I0(out),
        .I1(\r_tr_state_reg_n_0_[1] ),
        .I2(\r_tr_state_reg_n_0_[2] ),
        .I3(Q),
        .O(\ri_tr_state_inferred__1/i___0_n_0 ));
  LUT4 #(
    .INIT(16'h0116)) 
    \ri_tr_state_inferred__1/i___1 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(o_tlp_temp_wr),
        .I3(o_tr_result_wr),
        .O(\ri_tr_state_inferred__1/i___1_n_0 ));
  LUT4 #(
    .INIT(16'hFEE8)) 
    \ri_tr_state_inferred__1/i___2 
       (.I0(\r_tr_state_reg_n_0_[4] ),
        .I1(\r_tr_state_reg_n_0_[5] ),
        .I2(o_tlp_temp_wr),
        .I3(o_tr_result_wr),
        .O(\ri_tr_state_inferred__1/i___2_n_0 ));
  LUT4 #(
    .INIT(16'h0012)) 
    \ri_tr_state_inferred__1/i___3 
       (.I0(\ri_tr_state_inferred__1/i__n_0 ),
        .I1(\ri_tr_state_inferred__1/i___0_n_0 ),
        .I2(\ri_tr_state_inferred__1/i___1_n_0 ),
        .I3(\ri_tr_state_inferred__1/i___2_n_0 ),
        .O(\ri_tr_state_inferred__1/i___3_n_0 ));
endmodule

module packet_checker_input_shift
   (out,
    E,
    Q,
    \r_stage_reg[6][7]_0 );
  output [63:0]out;
  input [0:0]E;
  input [7:0]Q;
  input \r_stage_reg[6][7]_0 ;

  wire [0:0]E;
  wire [7:0]Q;
  (* RTL_KEEP = "true" *) wire [41:0]\^out ;
  wire \r_stage_reg[6][7]_0 ;

  assign out[41:8] = \^out [41:8];
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][0] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[0]),
        .Q(\^out [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][1] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[1]),
        .Q(\^out [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][2] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[2]),
        .Q(\^out [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][3] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[3]),
        .Q(\^out [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][4] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[4]),
        .Q(\^out [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][5] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[5]),
        .Q(\^out [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][6] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[6]),
        .Q(\^out [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][7] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(Q[7]),
        .Q(\^out [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][0] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [0]),
        .Q(\^out [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][1] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [1]),
        .Q(\^out [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][2] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [2]),
        .Q(\^out [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][3] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [3]),
        .Q(\^out [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][4] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [4]),
        .Q(\^out [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][5] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [5]),
        .Q(\^out [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][6] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [6]),
        .Q(\^out [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][7] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [7]),
        .Q(\^out [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][0] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [8]),
        .Q(\^out [16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][1] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [9]),
        .Q(\^out [17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][2] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [10]),
        .Q(\^out [18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][3] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [11]),
        .Q(\^out [19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][4] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [12]),
        .Q(\^out [20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][5] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [13]),
        .Q(\^out [21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][6] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [14]),
        .Q(\^out [22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][7] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [15]),
        .Q(\^out [23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][0] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [16]),
        .Q(\^out [24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][1] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [17]),
        .Q(\^out [25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][2] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [18]),
        .Q(\^out [26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][3] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [19]),
        .Q(\^out [27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][4] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [20]),
        .Q(\^out [28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][5] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [21]),
        .Q(\^out [29]),
        .R(1'b0));
  (* \PinAttr:D:HOLD_DETOUR  = "192" *) 
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][6] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [22]),
        .Q(\^out [30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][7] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [23]),
        .Q(\^out [31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][0] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [24]),
        .Q(\^out [32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][1] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [25]),
        .Q(\^out [33]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][2] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [26]),
        .Q(\^out [34]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][3] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [27]),
        .Q(\^out [35]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][4] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [28]),
        .Q(\^out [36]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][5] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [29]),
        .Q(\^out [37]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][6] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [30]),
        .Q(\^out [38]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][7] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [31]),
        .Q(\^out [39]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][0] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [32]),
        .Q(\^out [40]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][1] 
       (.C(\r_stage_reg[6][7]_0 ),
        .CE(E),
        .D(\^out [33]),
        .Q(\^out [41]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "packet_checker_input_shift" *) 
module packet_checker_input_shift__parameterized0
   (out,
    E,
    Q,
    \r_stage_reg[9][7]_0 );
  output [79:0]out;
  input [0:0]E;
  input [7:0]Q;
  input \r_stage_reg[9][7]_0 ;

  wire [0:0]E;
  wire [7:0]Q;
  (* RTL_KEEP = "true" *) wire [63:0]\^out ;
  wire \r_stage_reg[9][7]_0 ;

  assign out[63:8] = \^out [63:8];
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[0]),
        .Q(\^out [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[1]),
        .Q(\^out [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[2]),
        .Q(\^out [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[3]),
        .Q(\^out [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[4]),
        .Q(\^out [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[5]),
        .Q(\^out [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[6]),
        .Q(\^out [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[0][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(Q[7]),
        .Q(\^out [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [0]),
        .Q(\^out [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [1]),
        .Q(\^out [9]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [2]),
        .Q(\^out [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [3]),
        .Q(\^out [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [4]),
        .Q(\^out [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [5]),
        .Q(\^out [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [6]),
        .Q(\^out [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[1][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [7]),
        .Q(\^out [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [8]),
        .Q(\^out [16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [9]),
        .Q(\^out [17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [10]),
        .Q(\^out [18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [11]),
        .Q(\^out [19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [12]),
        .Q(\^out [20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [13]),
        .Q(\^out [21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [14]),
        .Q(\^out [22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[2][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [15]),
        .Q(\^out [23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [16]),
        .Q(\^out [24]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [17]),
        .Q(\^out [25]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [18]),
        .Q(\^out [26]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [19]),
        .Q(\^out [27]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [20]),
        .Q(\^out [28]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [21]),
        .Q(\^out [29]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [22]),
        .Q(\^out [30]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[3][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [23]),
        .Q(\^out [31]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [24]),
        .Q(\^out [32]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [25]),
        .Q(\^out [33]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [26]),
        .Q(\^out [34]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [27]),
        .Q(\^out [35]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [28]),
        .Q(\^out [36]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [29]),
        .Q(\^out [37]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [30]),
        .Q(\^out [38]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[4][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [31]),
        .Q(\^out [39]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [32]),
        .Q(\^out [40]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [33]),
        .Q(\^out [41]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [34]),
        .Q(\^out [42]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [35]),
        .Q(\^out [43]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [36]),
        .Q(\^out [44]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [37]),
        .Q(\^out [45]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [38]),
        .Q(\^out [46]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[5][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [39]),
        .Q(\^out [47]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [40]),
        .Q(\^out [48]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [41]),
        .Q(\^out [49]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [42]),
        .Q(\^out [50]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [43]),
        .Q(\^out [51]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [44]),
        .Q(\^out [52]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [45]),
        .Q(\^out [53]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [46]),
        .Q(\^out [54]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[6][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [47]),
        .Q(\^out [55]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][0] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [48]),
        .Q(\^out [56]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][1] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [49]),
        .Q(\^out [57]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][2] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [50]),
        .Q(\^out [58]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][3] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [51]),
        .Q(\^out [59]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][4] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [52]),
        .Q(\^out [60]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][5] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [53]),
        .Q(\^out [61]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][6] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [54]),
        .Q(\^out [62]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_stage_reg[7][7] 
       (.C(\r_stage_reg[9][7]_0 ),
        .CE(E),
        .D(\^out [55]),
        .Q(\^out [63]),
        .R(1'b0));
endmodule

module packet_generator_controller
   (out,
    o_crc_calc,
    o_sel_rply,
    o_rply_id_set,
    o_rply_wr,
    o_rply_rd,
    o_frame_load,
    Q,
    o_sel_dllp,
    o_packet_run,
    o_packet_stop,
    o_tlp_header,
    o_rply_id,
    r_tlp_id_all_ack_reg_0,
    \r_tlp_id_ack_reg[3]_0 ,
    in0,
    \r_rst_reg[0] ,
    \r_state_reg[2]_0 ,
    r_rply_enable_reg_0,
    \r_tlp_id_ack_reg[0]_0 ,
    \r_state_reg[1]_0 ,
    r_tlp_enable_reg_0,
    r_tlp_enable_reg_1,
    \r_rst_reg[1] );
  output out;
  output o_crc_calc;
  output o_sel_rply;
  output o_rply_id_set;
  output o_rply_wr;
  output o_rply_rd;
  output o_frame_load;
  output [0:0]Q;
  output o_sel_dllp;
  output o_packet_run;
  output o_packet_stop;
  output [7:0]o_tlp_header;
  output [3:0]o_rply_id;
  output r_tlp_id_all_ack_reg_0;
  output [3:0]\r_tlp_id_ack_reg[3]_0 ;
  output in0;
  input \r_rst_reg[0] ;
  input \r_state_reg[2]_0 ;
  input r_rply_enable_reg_0;
  input \r_tlp_id_ack_reg[0]_0 ;
  input \r_state_reg[1]_0 ;
  input r_tlp_enable_reg_0;
  input r_tlp_enable_reg_1;
  input \r_rst_reg[1] ;

  wire in0;
  wire inst_local_reset_n_0;
  (* RTL_KEEP = "true" *) wire o_crc_calc;
  wire o_crc_calc_inferred_i_2_n_0;
  (* RTL_KEEP = "true" *) wire o_frame_load;
  (* RTL_KEEP = "true" *) wire o_packet_run;
  (* RTL_KEEP = "true" *) wire o_packet_stop;
  (* RTL_KEEP = "true" *) wire [3:0]o_rply_id;
  (* RTL_KEEP = "true" *) wire o_rply_id_set;
  (* RTL_KEEP = "true" *) wire o_rply_rd;
  (* RTL_KEEP = "true" *) wire o_rply_wr;
  (* RTL_KEEP = "true" *) wire o_sel_dllp;
  (* RTL_KEEP = "true" *) wire [7:0]o_tlp_header;
  (* RTL_KEEP = "true" *) wire out;
  wire p_0_in3_in;
  wire p_1_in;
  wire p_1_in4_in;
  wire p_2_in;
  wire p_3_in;
  wire [3:0]r_byte_cnt;
  wire \r_byte_cnt[0]_i_1__0_n_0 ;
  wire \r_byte_cnt[1]_i_1__0_n_0 ;
  wire \r_byte_cnt[2]_i_1__0_n_0 ;
  wire \r_byte_cnt[3]_i_2__0_n_0 ;
  wire \r_byte_cnt[3]_i_3_n_0 ;
  wire \r_byte_cnt[3]_i_4_n_0 ;
  wire \r_byte_cnt[3]_i_5_n_0 ;
  wire \r_frame_cnt[0]_i_1_n_0 ;
  wire \r_frame_cnt[1]_i_1_n_0 ;
  wire \r_frame_cnt[2]_i_1_n_0 ;
  wire \r_frame_cnt[3]_i_2_n_0 ;
  wire \r_frame_cnt[3]_i_3_n_0 ;
  wire \r_frame_cnt[3]_i_4__0_n_0 ;
  wire r_rply_enable_i_1_n_0;
  wire r_rply_enable_reg_n_0;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire \r_state[0]_i_10_n_0 ;
  wire \r_state[0]_i_11_n_0 ;
  wire \r_state[0]_i_12_n_0 ;
  wire \r_state[0]_i_13_n_0 ;
  wire \r_state[0]_i_14_n_0 ;
  wire \r_state[0]_i_15_n_0 ;
  wire \r_state[0]_i_16_n_0 ;
  wire \r_state[0]_i_2__5_n_0 ;
  wire \r_state[0]_i_3__4_n_0 ;
  wire \r_state[0]_i_4__9_n_0 ;
  wire \r_state[0]_i_5__7_n_0 ;
  wire \r_state[0]_i_6__0_n_0 ;
  wire \r_state[0]_i_7_n_0 ;
  wire \r_state[0]_i_8_n_0 ;
  wire \r_state[0]_i_9_n_0 ;
  wire \r_state[10]_i_2__0_n_0 ;
  wire \r_state[10]_i_3__0_n_0 ;
  wire \r_state[10]_i_4__0_n_0 ;
  wire \r_state[11]_i_2__3_n_0 ;
  wire \r_state[11]_i_3_n_0 ;
  wire \r_state[11]_i_4_n_0 ;
  wire \r_state[11]_i_5_n_0 ;
  wire \r_state[11]_i_6_n_0 ;
  wire \r_state[12]_i_2__1_n_0 ;
  wire \r_state[12]_i_3__1_n_0 ;
  wire \r_state[12]_i_4__1_n_0 ;
  wire \r_state[12]_i_5__0_n_0 ;
  wire \r_state[12]_i_6__0_n_0 ;
  wire \r_state[12]_i_7__1_n_0 ;
  wire \r_state[12]_i_8__0_n_0 ;
  wire \r_state[13]_i_10__0_n_0 ;
  wire \r_state[13]_i_11_n_0 ;
  wire \r_state[13]_i_3_n_0 ;
  wire \r_state[13]_i_4_n_0 ;
  wire \r_state[13]_i_5_n_0 ;
  wire \r_state[13]_i_6_n_0 ;
  wire \r_state[13]_i_7_n_0 ;
  wire \r_state[13]_i_8_n_0 ;
  wire \r_state[13]_i_9_n_0 ;
  wire \r_state[1]_i_2__2_n_0 ;
  wire \r_state[1]_i_3__0_n_0 ;
  wire \r_state[2]_i_2__5_n_0 ;
  wire \r_state[3]_i_2__3_n_0 ;
  wire \r_state[4]_i_2__1_n_0 ;
  wire \r_state[4]_i_3__0_n_0 ;
  wire \r_state[4]_i_4__0_n_0 ;
  wire \r_state[4]_i_5__1_n_0 ;
  wire \r_state[4]_i_6_n_0 ;
  wire \r_state[5]_i_2__5_n_0 ;
  wire \r_state[5]_i_3__2_n_0 ;
  wire \r_state[5]_i_4__0_n_0 ;
  wire \r_state[5]_i_5__0_n_0 ;
  wire \r_state[5]_i_6__0_n_0 ;
  wire \r_state[6]_i_2__2_n_0 ;
  wire \r_state[6]_i_3__1_n_0 ;
  wire \r_state[6]_i_4_n_0 ;
  wire \r_state[6]_i_5_n_0 ;
  wire \r_state[6]_i_6_n_0 ;
  wire \r_state[7]_i_2__3_n_0 ;
  wire \r_state[7]_i_3__0_n_0 ;
  wire \r_state[7]_i_4__0_n_0 ;
  wire \r_state[7]_i_5__0_n_0 ;
  wire \r_state[7]_i_6_n_0 ;
  wire \r_state[7]_i_7_n_0 ;
  wire \r_state[7]_i_8_n_0 ;
  wire \r_state[7]_i_9_n_0 ;
  wire \r_state[8]_i_2__2_n_0 ;
  wire \r_state[8]_i_3_n_0 ;
  wire \r_state[8]_i_4_n_0 ;
  wire \r_state[9]_i_2__1_n_0 ;
  wire \r_state_reg[1]_0 ;
  wire \r_state_reg[2]_0 ;
  wire \r_state_reg_n_0_[10] ;
  wire \r_state_reg_n_0_[12] ;
  wire \r_state_reg_n_0_[3] ;
  wire \r_state_reg_n_0_[5] ;
  wire \r_state_reg_n_0_[6] ;
  wire r_tlp_enable;
  wire r_tlp_enable_reg_0;
  wire r_tlp_enable_reg_1;
  wire \r_tlp_id[0]_i_1_n_0 ;
  wire \r_tlp_id[1]_i_1_n_0 ;
  wire \r_tlp_id[2]_i_1_n_0 ;
  wire \r_tlp_id[3]_i_2_n_0 ;
  wire \r_tlp_id[3]_i_3_n_0 ;
  wire \r_tlp_id_ack[4]_i_2_n_0 ;
  wire [4:4]r_tlp_id_ack_reg;
  wire \r_tlp_id_ack_reg[0]_0 ;
  wire [3:0]\^r_tlp_id_ack_reg[3]_0 ;
  wire r_tlp_id_all_ack_i_2_n_0;
  wire r_tlp_id_all_ack_i_3_n_0;
  wire r_tlp_id_all_ack_i_4_n_0;
  wire r_tlp_id_all_ack_i_5_n_0;
  wire r_tlp_id_all_ack_i_6_n_0;
  wire \^r_tlp_id_all_ack_reg_0 ;
  wire \r_tlp_id_nack[3]_i_2_n_0 ;
  wire \r_tlp_id_nack[4]_i_2_n_0 ;
  wire [4:4]r_tlp_id_nack_reg;
  wire \r_tlp_id_nack_reg_n_0_[0] ;
  wire \r_tlp_id_nack_reg_n_0_[1] ;
  wire \r_tlp_id_nack_reg_n_0_[2] ;
  wire \r_tlp_id_nack_reg_n_0_[3] ;
  wire \r_tlp_id_rply[0]_i_1_n_0 ;
  wire \r_tlp_id_rply[1]_i_1_n_0 ;
  wire \r_tlp_id_rply[2]_i_1_n_0 ;
  wire \r_tlp_id_rply[2]_i_2_n_0 ;
  wire \r_tlp_id_rply[3]_i_1_n_0 ;
  wire \r_tlp_id_rply[3]_i_2_n_0 ;
  wire \r_tlp_id_rply[4]_i_2_n_0 ;
  wire \r_tlp_id_rply[4]_i_3_n_0 ;
  wire \r_tlp_id_rply[4]_i_4_n_0 ;
  wire \r_tlp_id_rply[4]_i_5_n_0 ;
  wire [4:4]r_tlp_id_rply__0;
  wire r_tlp_id_wait_ack_reg_n_0;
  wire ri_byte_cnt;
  wire ri_frame_cnt;
  wire ri_rply_wr;
  wire [13:0]ri_state__0;
  wire ri_tlp_enable;
  wire ri_tlp_id;
  wire [4:4]ri_tlp_id_ack;
  wire [3:0]ri_tlp_id_ack__0;
  wire ri_tlp_id_all_ack;
  wire [4:0]ri_tlp_id_nack;
  wire ri_tlp_id_rply;
  wire ri_tlp_id_wait_ack;
  wire rply_done;

  assign Q[0] = o_sel_dllp;
  assign o_sel_rply = o_rply_rd;
  async_reset__parameterized1_53 inst_local_reset
       (.\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    o_crc_calc_inferred_i_1
       (.I0(p_1_in4_in),
        .I1(p_2_in),
        .I2(p_3_in),
        .I3(o_crc_calc_inferred_i_2_n_0),
        .I4(\r_state_reg_n_0_[6] ),
        .I5(\r_state_reg_n_0_[5] ),
        .O(o_crc_calc));
  LUT2 #(
    .INIT(4'h1)) 
    o_crc_calc_inferred_i_2
       (.I0(\r_state_reg_n_0_[10] ),
        .I1(rply_done),
        .O(o_crc_calc_inferred_i_2_n_0));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    o_frame_load_inferred_i_1
       (.I0(o_sel_dllp),
        .I1(p_0_in3_in),
        .I2(p_2_in),
        .I3(p_3_in),
        .I4(p_1_in),
        .O(o_frame_load));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    o_packet_run_inferred_i_1
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(p_0_in3_in),
        .I2(o_sel_dllp),
        .I3(p_1_in),
        .I4(out),
        .I5(o_packet_stop),
        .O(o_packet_run));
  LUT4 #(
    .INIT(16'hFFFE)) 
    o_rply_id_set_inferred_i_1
       (.I0(p_1_in),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .O(o_rply_id_set));
  LUT2 #(
    .INIT(4'hE)) 
    o_sel_rply_inferred_i_1
       (.I0(p_3_in),
        .I1(p_1_in4_in),
        .O(o_rply_rd));
  LUT2 #(
    .INIT(4'hE)) 
    o_tlp_ack_inferred_i_1
       (.I0(p_2_in),
        .I1(p_0_in3_in),
        .O(in0));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \r_byte_cnt[0]_i_1__0 
       (.I0(out),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(r_byte_cnt[0]),
        .O(\r_byte_cnt[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT5 #(
    .INIT(32'h00010100)) 
    \r_byte_cnt[1]_i_1__0 
       (.I0(out),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(r_byte_cnt[0]),
        .I4(r_byte_cnt[1]),
        .O(\r_byte_cnt[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001010101000000)) 
    \r_byte_cnt[2]_i_1__0 
       (.I0(p_2_in),
        .I1(p_3_in),
        .I2(out),
        .I3(r_byte_cnt[0]),
        .I4(r_byte_cnt[1]),
        .I5(r_byte_cnt[2]),
        .O(\r_byte_cnt[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000022A)) 
    \r_byte_cnt[3]_i_1__0 
       (.I0(\r_byte_cnt[3]_i_3_n_0 ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(out),
        .I3(\r_byte_cnt[3]_i_4_n_0 ),
        .I4(\r_state[8]_i_3_n_0 ),
        .I5(\r_state[12]_i_5__0_n_0 ),
        .O(ri_byte_cnt));
  LUT5 #(
    .INIT(32'h00000014)) 
    \r_byte_cnt[3]_i_2__0 
       (.I0(p_2_in),
        .I1(r_byte_cnt[3]),
        .I2(\r_byte_cnt[3]_i_5_n_0 ),
        .I3(out),
        .I4(p_3_in),
        .O(\r_byte_cnt[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEFEEEFEFFE)) 
    \r_byte_cnt[3]_i_3 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(out),
        .I2(p_2_in),
        .I3(p_3_in),
        .I4(\r_state_reg_n_0_[6] ),
        .I5(p_1_in4_in),
        .O(\r_byte_cnt[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_byte_cnt[3]_i_4 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in4_in),
        .I2(p_2_in),
        .I3(p_3_in),
        .O(\r_byte_cnt[3]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \r_byte_cnt[3]_i_5 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[1]),
        .I2(r_byte_cnt[0]),
        .O(\r_byte_cnt[3]_i_5_n_0 ));
  FDCE \r_byte_cnt_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[0]_i_1__0_n_0 ),
        .Q(r_byte_cnt[0]));
  FDCE \r_byte_cnt_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[1]_i_1__0_n_0 ),
        .Q(r_byte_cnt[1]));
  FDCE \r_byte_cnt_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[2]_i_1__0_n_0 ),
        .Q(r_byte_cnt[2]));
  FDCE \r_byte_cnt_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[3]_i_2__0_n_0 ),
        .Q(r_byte_cnt[3]));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_frame_cnt[0]_i_1 
       (.I0(out),
        .I1(o_tlp_header[4]),
        .O(\r_frame_cnt[0]_i_1_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_frame_cnt[1]_i_1 
       (.I0(o_tlp_header[5]),
        .I1(o_tlp_header[4]),
        .I2(out),
        .O(\r_frame_cnt[1]_i_1_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "196" *) 
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT4 #(
    .INIT(16'h0078)) 
    \r_frame_cnt[2]_i_1 
       (.I0(o_tlp_header[4]),
        .I1(o_tlp_header[5]),
        .I2(o_tlp_header[6]),
        .I3(out),
        .O(\r_frame_cnt[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000CCA0000)) 
    \r_frame_cnt[3]_i_1 
       (.I0(\r_frame_cnt[3]_i_3_n_0 ),
        .I1(\r_frame_cnt[3]_i_4__0_n_0 ),
        .I2(p_0_in3_in),
        .I3(out),
        .I4(\r_state[1]_i_2__2_n_0 ),
        .I5(\r_state[6]_i_5_n_0 ),
        .O(ri_frame_cnt));
  (* \PinAttr:I3:HOLD_DETOUR  = "196" *) 
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT5 #(
    .INIT(32'h15554000)) 
    \r_frame_cnt[3]_i_2 
       (.I0(out),
        .I1(o_tlp_header[6]),
        .I2(o_tlp_header[5]),
        .I3(o_tlp_header[4]),
        .I4(o_tlp_header[7]),
        .O(\r_frame_cnt[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h16)) 
    \r_frame_cnt[3]_i_3 
       (.I0(p_1_in),
        .I1(p_3_in),
        .I2(p_2_in),
        .O(\r_frame_cnt[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_frame_cnt[3]_i_4__0 
       (.I0(p_2_in),
        .I1(p_1_in),
        .I2(p_3_in),
        .O(\r_frame_cnt[3]_i_4__0_n_0 ));
  FDCE \r_frame_cnt_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[0]_i_1_n_0 ),
        .Q(o_tlp_header[4]));
  FDCE \r_frame_cnt_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[1]_i_1_n_0 ),
        .Q(o_tlp_header[5]));
  FDCE \r_frame_cnt_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[2]_i_1_n_0 ),
        .Q(o_tlp_header[6]));
  FDCE \r_frame_cnt_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[3]_i_2_n_0 ),
        .Q(o_tlp_header[7]));
  (* OPT_MODIFIED = "PROPCONST" *) 
  LUT2 #(
    .INIT(4'h4)) 
    r_rply_enable_i_1
       (.I0(rply_done),
        .I1(r_rply_enable_reg_n_0),
        .O(r_rply_enable_i_1_n_0));
  FDCE r_rply_enable_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_rply_enable_i_1_n_0),
        .Q(r_rply_enable_reg_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    r_rply_wr_i_1
       (.I0(ri_state__0[6]),
        .I1(ri_state__0[7]),
        .O(ri_rply_wr));
  FDCE r_rply_wr_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_rply_wr),
        .Q(o_rply_wr));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[0]_i_10 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(p_0_in3_in),
        .I2(p_3_in),
        .I3(p_2_in),
        .I4(p_1_in4_in),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[0]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFEFFFFFFFFF)) 
    \r_state[0]_i_11 
       (.I0(\r_tlp_id_rply[4]_i_4_n_0 ),
        .I1(r_rply_enable_reg_n_0),
        .I2(out),
        .I3(\r_state[0]_i_15_n_0 ),
        .I4(p_1_in),
        .I5(\r_state[13]_i_8_n_0 ),
        .O(\r_state[0]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    \r_state[0]_i_12 
       (.I0(\r_state[12]_i_5__0_n_0 ),
        .I1(\r_state[0]_i_16_n_0 ),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(p_3_in),
        .I4(p_2_in),
        .I5(\r_state[8]_i_3_n_0 ),
        .O(\r_state[0]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \r_state[0]_i_13 
       (.I0(\r_state[0]_i_10_n_0 ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(o_sel_dllp),
        .I4(o_crc_calc_inferred_i_2_n_0),
        .I5(\r_state_reg_n_0_[12] ),
        .O(\r_state[0]_i_13_n_0 ));
  LUT3 #(
    .INIT(8'h17)) 
    \r_state[0]_i_14 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(rply_done),
        .I2(\r_state_reg_n_0_[10] ),
        .O(\r_state[0]_i_14_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \r_state[0]_i_15 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg[1]_0 ),
        .O(\r_state[0]_i_15_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEEA)) 
    \r_state[0]_i_16 
       (.I0(p_1_in4_in),
        .I1(o_sel_dllp),
        .I2(p_0_in3_in),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(p_1_in),
        .O(\r_state[0]_i_16_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00045555)) 
    \r_state[0]_i_1__6 
       (.I0(\r_state[0]_i_2__5_n_0 ),
        .I1(p_1_in4_in),
        .I2(\r_state[0]_i_3__4_n_0 ),
        .I3(\r_state[0]_i_4__9_n_0 ),
        .I4(\r_state[0]_i_5__7_n_0 ),
        .I5(\r_state[0]_i_6__0_n_0 ),
        .O(ri_state__0[0]));
  LUT6 #(
    .INIT(64'h101110111011FFFF)) 
    \r_state[0]_i_2__5 
       (.I0(\r_state[8]_i_3_n_0 ),
        .I1(\r_state[0]_i_7_n_0 ),
        .I2(\r_state[0]_i_4__9_n_0 ),
        .I3(\r_state[11]_i_6_n_0 ),
        .I4(\r_state[0]_i_8_n_0 ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[0]_i_2__5_n_0 ));
  LUT6 #(
    .INIT(64'h00000000F6FFFFF6)) 
    \r_state[0]_i_3__4 
       (.I0(r_tlp_id_rply__0),
        .I1(r_tlp_id_nack_reg),
        .I2(\r_state[7]_i_6_n_0 ),
        .I3(\r_tlp_id_nack_reg_n_0_[3] ),
        .I4(o_rply_id[3]),
        .I5(\r_state[7]_i_8_n_0 ),
        .O(\r_state[0]_i_3__4_n_0 ));
  LUT5 #(
    .INIT(32'h0400FFFF)) 
    \r_state[0]_i_4__9 
       (.I0(r_byte_cnt[0]),
        .I1(r_byte_cnt[1]),
        .I2(r_byte_cnt[3]),
        .I3(r_byte_cnt[2]),
        .I4(out),
        .O(\r_state[0]_i_4__9_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \r_state[0]_i_5__7 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(o_packet_stop),
        .I5(o_crc_calc_inferred_i_2_n_0),
        .O(\r_state[0]_i_5__7_n_0 ));
  LUT6 #(
    .INIT(64'hFFAEFFFFFFFFFFAE)) 
    \r_state[0]_i_6__0 
       (.I0(\r_state[0]_i_9_n_0 ),
        .I1(\r_state[0]_i_10_n_0 ),
        .I2(\r_state[0]_i_11_n_0 ),
        .I3(\r_state[0]_i_12_n_0 ),
        .I4(out),
        .I5(\r_state[0]_i_13_n_0 ),
        .O(\r_state[0]_i_6__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]_i_7 
       (.I0(p_3_in),
        .I1(p_2_in),
        .I2(p_1_in4_in),
        .O(\r_state[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFAFAF8FFFAFAFA)) 
    \r_state[0]_i_8 
       (.I0(\r_state[8]_i_3_n_0 ),
        .I1(o_packet_stop),
        .I2(p_1_in4_in),
        .I3(p_2_in),
        .I4(p_3_in),
        .I5(\r_state[0]_i_14_n_0 ),
        .O(\r_state[0]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAA8)) 
    \r_state[0]_i_9 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_byte_cnt[3]_i_4_n_0 ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(rply_done),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state[12]_i_5__0_n_0 ),
        .O(\r_state[0]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h80808000AA80AA00)) 
    \r_state[10]_i_1__2 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(\r_state[10]_i_2__0_n_0 ),
        .I2(\r_state[10]_i_3__0_n_0 ),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(\r_state[10]_i_4__0_n_0 ),
        .I5(\r_state[11]_i_3_n_0 ),
        .O(ri_state__0[10]));
  LUT5 #(
    .INIT(32'h0A000A30)) 
    \r_state[10]_i_2__0 
       (.I0(\r_state[11]_i_6_n_0 ),
        .I1(\r_state[10]_i_4__0_n_0 ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(\r_state[0]_i_3__4_n_0 ),
        .O(\r_state[10]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[10]_i_3__0 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(out),
        .O(\r_state[10]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h0020)) 
    \r_state[10]_i_4__0 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[3]),
        .I2(r_byte_cnt[1]),
        .I3(r_byte_cnt[0]),
        .O(\r_state[10]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h08080808080808AA)) 
    \r_state[11]_i_1__1 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(rply_done),
        .I2(\r_state[11]_i_3_n_0 ),
        .I3(\r_state[11]_i_4_n_0 ),
        .I4(out),
        .I5(\r_state_reg_n_0_[5] ),
        .O(ri_state__0[11]));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \r_state[11]_i_2__3 
       (.I0(p_2_in),
        .I1(p_3_in),
        .I2(\r_state[12]_i_5__0_n_0 ),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(o_packet_stop),
        .I5(o_crc_calc_inferred_i_2_n_0),
        .O(\r_state[11]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'hBFBFBFBFBFBFBF00)) 
    \r_state[11]_i_3 
       (.I0(r_rply_enable_reg_n_0),
        .I1(\r_state[13]_i_8_n_0 ),
        .I2(\r_state[11]_i_5_n_0 ),
        .I3(\r_state[5]_i_3__2_n_0 ),
        .I4(\r_state[5]_i_2__5_n_0 ),
        .I5(out),
        .O(\r_state[11]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFF0FFF0FF3AFFFFF)) 
    \r_state[11]_i_4 
       (.I0(\r_state[0]_i_3__4_n_0 ),
        .I1(\r_state[11]_i_6_n_0 ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(rply_done),
        .I5(\r_state[10]_i_4__0_n_0 ),
        .O(\r_state[11]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00020000)) 
    \r_state[11]_i_5 
       (.I0(\r_state_reg[1]_0 ),
        .I1(p_1_in4_in),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(out),
        .O(\r_state[11]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFBFF)) 
    \r_state[11]_i_6 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[3]),
        .I3(r_byte_cnt[2]),
        .I4(\r_state[13]_i_8_n_0 ),
        .O(\r_state[11]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000E0000)) 
    \r_state[12]_i_1__1 
       (.I0(\r_state[12]_i_2__1_n_0 ),
        .I1(\r_state[12]_i_3__1_n_0 ),
        .I2(\r_state_reg_n_0_[12] ),
        .I3(o_packet_stop),
        .I4(\r_state[12]_i_4__1_n_0 ),
        .I5(\r_state[12]_i_5__0_n_0 ),
        .O(ri_state__0[12]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[12]_i_2__1 
       (.I0(\r_state[10]_i_3__0_n_0 ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(rply_done),
        .I5(\r_state[12]_i_6__0_n_0 ),
        .O(\r_state[12]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000020FF2)) 
    \r_state[12]_i_3__1 
       (.I0(\r_state[7]_i_2__3_n_0 ),
        .I1(\r_state[12]_i_7__1_n_0 ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(rply_done),
        .I4(\r_state[5]_i_3__2_n_0 ),
        .I5(\r_state[13]_i_5_n_0 ),
        .O(\r_state[12]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[12]_i_4__1 
       (.I0(p_3_in),
        .I1(p_2_in),
        .O(\r_state[12]_i_4__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[12]_i_5__0 
       (.I0(p_1_in),
        .I1(o_sel_dllp),
        .I2(p_0_in3_in),
        .I3(\r_state_reg_n_0_[3] ),
        .O(\r_state[12]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'hFDFFFDFF000000FF)) 
    \r_state[12]_i_6__0 
       (.I0(\r_state_reg[1]_0 ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state[4]_i_5__1_n_0 ),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(\r_state[12]_i_8__0_n_0 ),
        .I5(out),
        .O(\r_state[12]_i_6__0_n_0 ));
  LUT5 #(
    .INIT(32'h0400FFFF)) 
    \r_state[12]_i_7__1 
       (.I0(r_byte_cnt[0]),
        .I1(r_byte_cnt[1]),
        .I2(r_byte_cnt[3]),
        .I3(r_byte_cnt[2]),
        .I4(\r_state_reg_n_0_[12] ),
        .O(\r_state[12]_i_7__1_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[12]_i_8__0 
       (.I0(r_byte_cnt[3]),
        .I1(r_byte_cnt[2]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .O(\r_state[12]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000055540000)) 
    \r_state[13]_i_10__0 
       (.I0(out),
        .I1(\r_state[6]_i_6_n_0 ),
        .I2(r_byte_cnt[2]),
        .I3(r_byte_cnt[3]),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[5]_i_3__2_n_0 ),
        .O(\r_state[13]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \r_state[13]_i_11 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[3]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .O(\r_state[13]_i_11_n_0 ));
  LUT5 #(
    .INIT(32'h000000AE)) 
    \r_state[13]_i_1__0 
       (.I0(\r_state[13]_i_3_n_0 ),
        .I1(\r_state[13]_i_4_n_0 ),
        .I2(\r_state[13]_i_5_n_0 ),
        .I3(\r_state[13]_i_6_n_0 ),
        .I4(\r_state[13]_i_7_n_0 ),
        .O(ri_state__0[13]));
  LUT6 #(
    .INIT(64'h00FF004000400040)) 
    \r_state[13]_i_3 
       (.I0(\r_state[5]_i_3__2_n_0 ),
        .I1(\r_state[13]_i_8_n_0 ),
        .I2(\r_state[13]_i_9_n_0 ),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(o_packet_stop),
        .I5(\r_state[13]_i_10__0_n_0 ),
        .O(\r_state[13]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000444400FF0400)) 
    \r_state[13]_i_4 
       (.I0(\r_state[10]_i_4__0_n_0 ),
        .I1(o_packet_stop),
        .I2(\r_state[0]_i_3__4_n_0 ),
        .I3(p_1_in4_in),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[13]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFEAEAEAFA)) 
    \r_state[13]_i_5 
       (.I0(out),
        .I1(p_1_in4_in),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(\r_state[13]_i_11_n_0 ),
        .I4(\r_state[13]_i_8_n_0 ),
        .I5(\r_state_reg_n_0_[5] ),
        .O(\r_state[13]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[13]_i_6 
       (.I0(p_3_in),
        .I1(o_packet_stop),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(rply_done),
        .I4(p_2_in),
        .I5(p_1_in),
        .O(\r_state[13]_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[13]_i_7 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(p_0_in3_in),
        .I2(o_sel_dllp),
        .O(\r_state[13]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \r_state[13]_i_8 
       (.I0(r_tlp_id_wait_ack_reg_n_0),
        .I1(r_tlp_enable),
        .I2(\r_state_reg[2]_0 ),
        .O(\r_state[13]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h00400000)) 
    \r_state[13]_i_9 
       (.I0(r_rply_enable_reg_n_0),
        .I1(out),
        .I2(o_packet_stop),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(\r_state_reg[1]_0 ),
        .O(\r_state[13]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h00200020AA200020)) 
    \r_state[1]_i_1__6 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(\r_state[4]_i_3__0_n_0 ),
        .I2(o_sel_dllp),
        .I3(out),
        .I4(\r_state[1]_i_2__2_n_0 ),
        .I5(\r_state[1]_i_3__0_n_0 ),
        .O(ri_state__0[1]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[1]_i_2__2 
       (.I0(p_1_in4_in),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[6] ),
        .O(\r_state[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h88888A88AAAAAAAA)) 
    \r_state[1]_i_3__0 
       (.I0(\r_state_reg[1]_0 ),
        .I1(r_rply_enable_reg_n_0),
        .I2(\r_state_reg[2]_0 ),
        .I3(r_tlp_enable),
        .I4(r_tlp_id_wait_ack_reg_n_0),
        .I5(o_sel_dllp),
        .O(\r_state[1]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h888888A8)) 
    \r_state[2]_i_1__6 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(\r_state[2]_i_2__5_n_0 ),
        .I2(p_0_in3_in),
        .I3(out),
        .I4(\r_state[4]_i_3__0_n_0 ),
        .O(ri_state__0[2]));
  LUT6 #(
    .INIT(64'h00000000AAAA0020)) 
    \r_state[2]_i_2__5 
       (.I0(\r_state[11]_i_5_n_0 ),
        .I1(\r_state_reg[2]_0 ),
        .I2(r_tlp_enable),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .I4(p_0_in3_in),
        .I5(r_rply_enable_reg_n_0),
        .O(\r_state[2]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'h88888A88)) 
    \r_state[3]_i_1__6 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(\r_state[3]_i_2__3_n_0 ),
        .I2(\r_state[4]_i_3__0_n_0 ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(out),
        .O(ri_state__0[3]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAA8A0000)) 
    \r_state[3]_i_2__3 
       (.I0(\r_state[11]_i_5_n_0 ),
        .I1(\r_state_reg[2]_0 ),
        .I2(r_tlp_enable),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .I4(\r_state_reg_n_0_[3] ),
        .I5(r_rply_enable_reg_n_0),
        .O(\r_state[3]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'h00000000AAABAAAA)) 
    \r_state[4]_i_1__5 
       (.I0(\r_state[4]_i_2__1_n_0 ),
        .I1(\r_state[4]_i_3__0_n_0 ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(out),
        .I4(p_1_in),
        .I5(\r_state[4]_i_4__0_n_0 ),
        .O(ri_state__0[4]));
  LUT6 #(
    .INIT(64'h00FF080000000000)) 
    \r_state[4]_i_2__1 
       (.I0(p_1_in),
        .I1(\r_state_reg[1]_0 ),
        .I2(\r_state[4]_i_5__1_n_0 ),
        .I3(out),
        .I4(\r_state_reg_n_0_[3] ),
        .I5(\r_state[1]_i_2__2_n_0 ),
        .O(\r_state[4]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFCFFFCFCFCAAFCAA)) 
    \r_state[4]_i_3__0 
       (.I0(\r_state[5]_i_2__5_n_0 ),
        .I1(\r_state[10]_i_4__0_n_0 ),
        .I2(\r_state[4]_i_6_n_0 ),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(\r_state[0]_i_3__4_n_0 ),
        .I5(p_1_in4_in),
        .O(\r_state[4]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[4]_i_4__0 
       (.I0(\r_state[13]_i_6_n_0 ),
        .I1(o_sel_dllp),
        .I2(p_0_in3_in),
        .I3(\r_state_reg_n_0_[12] ),
        .O(\r_state[4]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hAABA)) 
    \r_state[4]_i_5__1 
       (.I0(r_rply_enable_reg_n_0),
        .I1(\r_state_reg[2]_0 ),
        .I2(r_tlp_enable),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .O(\r_state[4]_i_5__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFAAABAA)) 
    \r_state[4]_i_6 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state[13]_i_8_n_0 ),
        .I2(\r_state[13]_i_11_n_0 ),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(p_1_in4_in),
        .O(\r_state[4]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000000D)) 
    \r_state[5]_i_1__4 
       (.I0(\r_state[5]_i_2__5_n_0 ),
        .I1(o_sel_dllp),
        .I2(\r_state[5]_i_3__2_n_0 ),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(\r_state[5]_i_4__0_n_0 ),
        .I5(\r_state[5]_i_5__0_n_0 ),
        .O(ri_state__0[5]));
  LUT5 #(
    .INIT(32'h0004FFFF)) 
    \r_state[5]_i_2__5 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[2]),
        .I3(r_byte_cnt[3]),
        .I4(\r_state_reg_n_0_[5] ),
        .O(\r_state[5]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[5]_i_3__2 
       (.I0(p_1_in4_in),
        .I1(\r_state_reg_n_0_[6] ),
        .O(\r_state[5]_i_3__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[5]_i_4__0 
       (.I0(rply_done),
        .I1(\r_state_reg_n_0_[10] ),
        .I2(o_packet_stop),
        .I3(p_3_in),
        .O(\r_state[5]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFDDD)) 
    \r_state[5]_i_5__0 
       (.I0(\r_state[5]_i_6__0_n_0 ),
        .I1(out),
        .I2(o_sel_dllp),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(p_1_in),
        .I5(p_2_in),
        .O(\r_state[5]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[5]_i_6__0 
       (.I0(p_0_in3_in),
        .I1(\r_state_reg_n_0_[3] ),
        .O(\r_state[5]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000AE)) 
    \r_state[6]_i_1__5 
       (.I0(\r_state[6]_i_2__2_n_0 ),
        .I1(\r_state[6]_i_3__1_n_0 ),
        .I2(\r_state[6]_i_4_n_0 ),
        .I3(\r_state[6]_i_5_n_0 ),
        .I4(p_3_in),
        .I5(p_1_in),
        .O(ri_state__0[6]));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \r_state[6]_i_2__2 
       (.I0(out),
        .I1(p_0_in3_in),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(p_2_in),
        .I5(p_1_in4_in),
        .O(\r_state[6]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000003000500000)) 
    \r_state[6]_i_3__1 
       (.I0(p_1_in4_in),
        .I1(\r_state[10]_i_4__0_n_0 ),
        .I2(\r_state[10]_i_3__0_n_0 ),
        .I3(p_0_in3_in),
        .I4(p_2_in),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[6]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888C8888)) 
    \r_state[6]_i_4 
       (.I0(p_1_in4_in),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(\r_state[6]_i_6_n_0 ),
        .I3(r_byte_cnt[3]),
        .I4(r_byte_cnt[2]),
        .I5(\r_state[13]_i_8_n_0 ),
        .O(\r_state[6]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[6]_i_5 
       (.I0(\r_state_reg_n_0_[10] ),
        .I1(rply_done),
        .I2(o_packet_stop),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(\r_state_reg_n_0_[3] ),
        .I5(o_sel_dllp),
        .O(\r_state[6]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \r_state[6]_i_6 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .O(\r_state[6]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0008AAAA00080008)) 
    \r_state[7]_i_1__3 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(\r_state[7]_i_2__3_n_0 ),
        .I2(\r_state[7]_i_3__0_n_0 ),
        .I3(\r_state[7]_i_4__0_n_0 ),
        .I4(\r_state[11]_i_3_n_0 ),
        .I5(p_2_in),
        .O(ri_state__0[7]));
  LUT6 #(
    .INIT(64'hFFFFAAABAAAAAAAA)) 
    \r_state[7]_i_2__3 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(\r_state[7]_i_5__0_n_0 ),
        .I2(\r_state[7]_i_6_n_0 ),
        .I3(\r_state[7]_i_7_n_0 ),
        .I4(\r_state[7]_i_8_n_0 ),
        .I5(p_1_in4_in),
        .O(\r_state[7]_i_2__3_n_0 ));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \r_state[7]_i_3__0 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in4_in),
        .I2(out),
        .I3(\r_state_reg_n_0_[5] ),
        .O(\r_state[7]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000F00FFFDFFFF)) 
    \r_state[7]_i_4__0 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(\r_state[13]_i_8_n_0 ),
        .I2(\r_state[7]_i_9_n_0 ),
        .I3(r_byte_cnt[1]),
        .I4(r_byte_cnt[0]),
        .I5(p_2_in),
        .O(\r_state[7]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_state[7]_i_5__0 
       (.I0(r_tlp_id_nack_reg),
        .I1(r_tlp_id_rply__0),
        .O(\r_state[7]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_state[7]_i_6 
       (.I0(o_rply_id[0]),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(\r_tlp_id_nack_reg_n_0_[2] ),
        .I3(o_rply_id[2]),
        .I4(\r_tlp_id_nack_reg_n_0_[1] ),
        .I5(o_rply_id[1]),
        .O(\r_state[7]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_state[7]_i_7 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(o_rply_id[3]),
        .O(\r_state[7]_i_7_n_0 ));
  LUT5 #(
    .INIT(32'hFBFFFFFF)) 
    \r_state[7]_i_8 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[3]),
        .I3(r_byte_cnt[2]),
        .I4(r_rply_enable_reg_n_0),
        .O(\r_state[7]_i_8_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \r_state[7]_i_9 
       (.I0(r_byte_cnt[3]),
        .I1(r_byte_cnt[2]),
        .O(\r_state[7]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[8]_i_1__2 
       (.I0(\r_state[8]_i_2__2_n_0 ),
        .I1(p_0_in3_in),
        .I2(p_2_in),
        .I3(\r_state[8]_i_3_n_0 ),
        .I4(\r_state_reg_n_0_[3] ),
        .I5(o_sel_dllp),
        .O(ri_state__0[8]));
  LUT6 #(
    .INIT(64'h00000000BABABABE)) 
    \r_state[8]_i_2__2 
       (.I0(p_1_in),
        .I1(p_1_in4_in),
        .I2(p_3_in),
        .I3(\r_state[0]_i_3__4_n_0 ),
        .I4(\r_state[10]_i_4__0_n_0 ),
        .I5(\r_state[8]_i_4_n_0 ),
        .O(\r_state[8]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[8]_i_3 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(o_packet_stop),
        .I2(rply_done),
        .I3(\r_state_reg_n_0_[10] ),
        .O(\r_state[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFEFEFEFE)) 
    \r_state[8]_i_4 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(out),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(p_1_in4_in),
        .I4(p_3_in),
        .I5(p_1_in),
        .O(\r_state[8]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0002AAAA00020002)) 
    \r_state[9]_i_1__4 
       (.I0(\r_state[11]_i_2__3_n_0 ),
        .I1(out),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state[9]_i_2__1_n_0 ),
        .I4(\r_state[11]_i_3_n_0 ),
        .I5(p_3_in),
        .O(ri_state__0[9]));
  LUT6 #(
    .INIT(64'hFCF3FDFFFCFFFDFF)) 
    \r_state[9]_i_2__1 
       (.I0(\r_state[0]_i_3__4_n_0 ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(\r_state[10]_i_4__0_n_0 ),
        .I3(p_1_in4_in),
        .I4(p_3_in),
        .I5(\r_state[11]_i_6_n_0 ),
        .O(\r_state[9]_i_2__1_n_0 ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .D(ri_state__0[0]),
        .PRE(inst_local_reset_n_0),
        .Q(out));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[10] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[10]),
        .Q(\r_state_reg_n_0_[10] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[11]),
        .Q(rply_done));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[12]),
        .Q(\r_state_reg_n_0_[12] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[13]),
        .Q(o_packet_stop));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[1]),
        .Q(o_sel_dllp));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[2]),
        .Q(p_0_in3_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[3]),
        .Q(\r_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[4]),
        .Q(p_1_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[5]),
        .Q(\r_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[6]),
        .Q(\r_state_reg_n_0_[6] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[7]),
        .Q(p_2_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[8]),
        .Q(p_1_in4_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[9]),
        .Q(p_3_in));
  LUT4 #(
    .INIT(16'h000E)) 
    r_tlp_enable_i_1
       (.I0(r_tlp_enable),
        .I1(r_tlp_enable_reg_0),
        .I2(r_tlp_enable_reg_1),
        .I3(r_rply_enable_reg_n_0),
        .O(ri_tlp_enable));
  FDCE r_tlp_enable_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_enable),
        .Q(r_tlp_enable));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[0]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[0] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [0]),
        .O(\r_tlp_id[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[1]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[1] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(\r_tlp_id[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[2]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [2]),
        .O(\r_tlp_id[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000014)) 
    \r_tlp_id[3]_i_1 
       (.I0(\r_tlp_id[3]_i_3_n_0 ),
        .I1(\r_state_reg_n_0_[3] ),
        .I2(out),
        .I3(p_3_in),
        .I4(p_2_in),
        .I5(\r_state[8]_i_3_n_0 ),
        .O(ri_tlp_id));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[3]_i_2 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [3]),
        .O(\r_tlp_id[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_tlp_id[3]_i_3 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in4_in),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(o_sel_dllp),
        .I5(p_0_in3_in),
        .O(\r_tlp_id[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \r_tlp_id_ack[0]_i_1 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I1(\^r_tlp_id_all_ack_reg_0 ),
        .I2(\r_tlp_id_ack_reg[0]_0 ),
        .O(ri_tlp_id_ack__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_tlp_id_ack[1]_i_1 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [1]),
        .I1(\r_tlp_id_ack_reg[0]_0 ),
        .I2(\^r_tlp_id_all_ack_reg_0 ),
        .I3(\^r_tlp_id_ack_reg[3]_0 [0]),
        .O(ri_tlp_id_ack__0[1]));
  (* \PinAttr:I0:HOLD_DETOUR  = "177" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_tlp_id_ack[2]_i_1 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [2]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I2(\^r_tlp_id_all_ack_reg_0 ),
        .I3(\r_tlp_id_ack_reg[0]_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(ri_tlp_id_ack__0[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_tlp_id_ack[3]_i_1 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [3]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [1]),
        .I2(\r_tlp_id_ack_reg[0]_0 ),
        .I3(\^r_tlp_id_all_ack_reg_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I5(\^r_tlp_id_ack_reg[3]_0 [2]),
        .O(ri_tlp_id_ack__0[3]));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_id_ack[4]_i_1 
       (.I0(r_tlp_id_ack_reg),
        .I1(\r_tlp_id_ack[4]_i_2_n_0 ),
        .I2(\^r_tlp_id_ack_reg[3]_0 [3]),
        .O(ri_tlp_id_ack));
  (* \PinAttr:I0:HOLD_DETOUR  = "177" *) 
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_tlp_id_ack[4]_i_2 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [2]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I2(\^r_tlp_id_all_ack_reg_0 ),
        .I3(\r_tlp_id_ack_reg[0]_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(\r_tlp_id_ack[4]_i_2_n_0 ));
  FDCE \r_tlp_id_ack_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[0]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [0]));
  FDCE \r_tlp_id_ack_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[1]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [1]));
  FDCE \r_tlp_id_ack_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[2]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [2]));
  FDCE \r_tlp_id_ack_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[3]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [3]));
  FDCE \r_tlp_id_ack_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack),
        .Q(r_tlp_id_ack_reg));
  LUT2 #(
    .INIT(4'h2)) 
    r_tlp_id_all_ack_i_1
       (.I0(r_tlp_id_all_ack_i_2_n_0),
        .I1(r_tlp_id_all_ack_i_3_n_0),
        .O(ri_tlp_id_all_ack));
  LUT6 #(
    .INIT(64'h0009090006000009)) 
    r_tlp_id_all_ack_i_2
       (.I0(ri_tlp_id_ack__0[3]),
        .I1(\r_tlp_id_nack_reg_n_0_[3] ),
        .I2(r_tlp_id_all_ack_i_4_n_0),
        .I3(r_tlp_id_all_ack_i_5_n_0),
        .I4(\r_tlp_id_nack_reg_n_0_[2] ),
        .I5(ri_tlp_id_ack__0[2]),
        .O(r_tlp_id_all_ack_i_2_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_tlp_id_all_ack_i_3
       (.I0(r_tlp_id_all_ack_i_6_n_0),
        .I1(\r_tlp_id_nack_reg_n_0_[3] ),
        .I2(r_tlp_id_nack_reg),
        .I3(\^r_tlp_id_ack_reg[3]_0 [3]),
        .I4(\r_tlp_id_ack[4]_i_2_n_0 ),
        .I5(r_tlp_id_ack_reg),
        .O(r_tlp_id_all_ack_i_3_n_0));
  LUT6 #(
    .INIT(64'h77E7BB7BDDBDEEDE)) 
    r_tlp_id_all_ack_i_4
       (.I0(ri_tlp_id_nack[0]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [1]),
        .I2(\r_tlp_id_ack_reg[0]_0 ),
        .I3(\^r_tlp_id_all_ack_reg_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I5(ri_tlp_id_nack[1]),
        .O(r_tlp_id_all_ack_i_4_n_0));
  LUT5 #(
    .INIT(32'h22200000)) 
    r_tlp_id_all_ack_i_5
       (.I0(\r_tlp_id_nack_reg_n_0_[1] ),
        .I1(r_tlp_id_wait_ack_reg_n_0),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .I4(\r_tlp_id_nack_reg_n_0_[0] ),
        .O(r_tlp_id_all_ack_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000888000000000)) 
    r_tlp_id_all_ack_i_6
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(p_0_in3_in),
        .I3(p_2_in),
        .I4(r_tlp_id_wait_ack_reg_n_0),
        .I5(\r_tlp_id_nack_reg_n_0_[1] ),
        .O(r_tlp_id_all_ack_i_6_n_0));
  FDPE r_tlp_id_all_ack_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .D(ri_tlp_id_all_ack),
        .PRE(inst_local_reset_n_0),
        .Q(\^r_tlp_id_all_ack_reg_0 ));
  LUT4 #(
    .INIT(16'hAB54)) 
    \r_tlp_id_nack[0]_i_1 
       (.I0(r_tlp_id_wait_ack_reg_n_0),
        .I1(p_2_in),
        .I2(p_0_in3_in),
        .I3(\r_tlp_id_nack_reg_n_0_[0] ),
        .O(ri_tlp_id_nack[0]));
  LUT5 #(
    .INIT(32'h999AAAAA)) 
    \r_tlp_id_nack[1]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[1] ),
        .I1(r_tlp_id_wait_ack_reg_n_0),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .I4(\r_tlp_id_nack_reg_n_0_[0] ),
        .O(ri_tlp_id_nack[1]));
  LUT6 #(
    .INIT(64'hAAAA666AAAAAAAAA)) 
    \r_tlp_id_nack[2]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(p_0_in3_in),
        .I3(p_2_in),
        .I4(r_tlp_id_wait_ack_reg_n_0),
        .I5(\r_tlp_id_nack_reg_n_0_[1] ),
        .O(ri_tlp_id_nack[2]));
  LUT6 #(
    .INIT(64'hFFF7FFFF00080000)) 
    \r_tlp_id_nack[3]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(\r_tlp_id_nack[3]_i_2_n_0 ),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .I4(\r_tlp_id_nack_reg_n_0_[1] ),
        .I5(\r_tlp_id_nack_reg_n_0_[3] ),
        .O(ri_tlp_id_nack[3]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tlp_id_nack[3]_i_2 
       (.I0(p_0_in3_in),
        .I1(p_2_in),
        .O(\r_tlp_id_nack[3]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \r_tlp_id_nack[4]_i_1 
       (.I0(r_tlp_id_nack_reg),
        .I1(\r_tlp_id_nack_reg_n_0_[3] ),
        .I2(\r_tlp_id_nack_reg_n_0_[2] ),
        .I3(\r_tlp_id_nack[4]_i_2_n_0 ),
        .I4(\r_tlp_id_nack_reg_n_0_[1] ),
        .O(ri_tlp_id_nack[4]));
  LUT4 #(
    .INIT(16'h00A8)) 
    \r_tlp_id_nack[4]_i_2 
       (.I0(\r_tlp_id_nack_reg_n_0_[0] ),
        .I1(p_0_in3_in),
        .I2(p_2_in),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .O(\r_tlp_id_nack[4]_i_2_n_0 ));
  FDCE \r_tlp_id_nack_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[0]),
        .Q(\r_tlp_id_nack_reg_n_0_[0] ));
  FDCE \r_tlp_id_nack_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[1]),
        .Q(\r_tlp_id_nack_reg_n_0_[1] ));
  FDCE \r_tlp_id_nack_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[2]),
        .Q(\r_tlp_id_nack_reg_n_0_[2] ));
  FDCE \r_tlp_id_nack_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[3]),
        .Q(\r_tlp_id_nack_reg_n_0_[3] ));
  FDCE \r_tlp_id_nack_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[4]),
        .Q(r_tlp_id_nack_reg));
  FDCE \r_tlp_id_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[0]_i_1_n_0 ),
        .Q(o_tlp_header[0]));
  FDCE \r_tlp_id_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[1]_i_1_n_0 ),
        .Q(o_tlp_header[1]));
  FDCE \r_tlp_id_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[2]_i_1_n_0 ),
        .Q(o_tlp_header[2]));
  FDCE \r_tlp_id_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[3]_i_2_n_0 ),
        .Q(o_tlp_header[3]));
  LUT5 #(
    .INIT(32'hCFC0C5C5)) 
    \r_tlp_id_rply[0]_i_1 
       (.I0(o_rply_id[0]),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(out),
        .I3(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I4(\r_state_reg_n_0_[3] ),
        .O(\r_tlp_id_rply[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF600F6FF060006)) 
    \r_tlp_id_rply[1]_i_1 
       (.I0(o_rply_id[0]),
        .I1(o_rply_id[1]),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(out),
        .I4(\r_tlp_id_nack_reg_n_0_[1] ),
        .I5(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(\r_tlp_id_rply[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hAAAACCCCAAAA0FF0)) 
    \r_tlp_id_rply[2]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\^r_tlp_id_ack_reg[3]_0 [2]),
        .I2(o_rply_id[2]),
        .I3(\r_tlp_id_rply[2]_i_2_n_0 ),
        .I4(out),
        .I5(\r_state_reg_n_0_[3] ),
        .O(\r_tlp_id_rply[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \r_tlp_id_rply[2]_i_2 
       (.I0(o_rply_id[0]),
        .I1(o_rply_id[1]),
        .O(\r_tlp_id_rply[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACAFACAFACA0)) 
    \r_tlp_id_rply[3]_i_1 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(\^r_tlp_id_ack_reg[3]_0 [3]),
        .I2(out),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_tlp_id_rply[3]_i_2_n_0 ),
        .I5(o_rply_id[3]),
        .O(\r_tlp_id_rply[3]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \r_tlp_id_rply[3]_i_2 
       (.I0(o_rply_id[2]),
        .I1(o_rply_id[1]),
        .I2(o_rply_id[0]),
        .O(\r_tlp_id_rply[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_tlp_id_rply[4]_i_1 
       (.I0(\r_tlp_id_rply[4]_i_3_n_0 ),
        .I1(\r_tlp_id_rply[4]_i_4_n_0 ),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(p_1_in4_in),
        .I5(o_packet_stop),
        .O(ri_tlp_id_rply));
  LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
    \r_tlp_id_rply[4]_i_2 
       (.I0(\r_tlp_id_rply[4]_i_5_n_0 ),
        .I1(o_rply_id[3]),
        .I2(o_rply_id[0]),
        .I3(o_rply_id[1]),
        .I4(o_rply_id[2]),
        .I5(r_tlp_id_rply__0),
        .O(\r_tlp_id_rply[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100010116)) 
    \r_tlp_id_rply[4]_i_3 
       (.I0(out),
        .I1(p_0_in3_in),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(p_3_in),
        .I4(p_1_in),
        .I5(p_2_in),
        .O(\r_tlp_id_rply[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_tlp_id_rply[4]_i_4 
       (.I0(o_sel_dllp),
        .I1(\r_state_reg_n_0_[10] ),
        .I2(rply_done),
        .I3(\r_state_reg_n_0_[12] ),
        .O(\r_tlp_id_rply[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tlp_id_rply[4]_i_5 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(out),
        .O(\r_tlp_id_rply[4]_i_5_n_0 ));
  FDCE \r_tlp_id_rply_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[0]_i_1_n_0 ),
        .Q(o_rply_id[0]));
  FDCE \r_tlp_id_rply_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[1]_i_1_n_0 ),
        .Q(o_rply_id[1]));
  FDCE \r_tlp_id_rply_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[2]_i_1_n_0 ),
        .Q(o_rply_id[2]));
  FDCE \r_tlp_id_rply_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[3]_i_1_n_0 ),
        .Q(o_rply_id[3]));
  FDCE \r_tlp_id_rply_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[4]_i_2_n_0 ),
        .Q(r_tlp_id_rply__0));
  LUT2 #(
    .INIT(4'h8)) 
    r_tlp_id_wait_ack_i_1
       (.I0(r_tlp_id_all_ack_i_2_n_0),
        .I1(r_tlp_id_all_ack_i_3_n_0),
        .O(ri_tlp_id_wait_ack));
  FDCE r_tlp_id_wait_ack_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_wait_ack),
        .Q(r_tlp_id_wait_ack_reg_n_0));
endmodule

(* ORIG_REF_NAME = "packet_generator_controller" *) 
module packet_generator_controller__parameterized0
   (out,
    o_crc_calc,
    o_sel_rply,
    o_rply_id_set,
    o_rply_wr,
    o_rply_rd,
    o_frame_load,
    Q,
    o_sel_dllp,
    o_packet_run,
    o_packet_stop,
    o_tlp_header,
    o_rply_id,
    r_tlp_id_all_ack_reg_0,
    \r_tlp_id_ack_reg[3]_0 ,
    in0,
    \r_rst_reg[1] ,
    \r_state_reg[2]_0 ,
    r_rply_enable_reg_0,
    \r_tlp_id_ack_reg[0]_0 ,
    \r_state_reg[3]_0 ,
    r_tlp_enable_reg_0,
    r_tlp_enable_reg_1,
    \r_rst_reg[1]_0 );
  output out;
  output o_crc_calc;
  output o_sel_rply;
  output o_rply_id_set;
  output o_rply_wr;
  output o_rply_rd;
  output o_frame_load;
  output [0:0]Q;
  output o_sel_dllp;
  output o_packet_run;
  output o_packet_stop;
  output [7:0]o_tlp_header;
  output [3:0]o_rply_id;
  output r_tlp_id_all_ack_reg_0;
  output [3:0]\r_tlp_id_ack_reg[3]_0 ;
  output in0;
  input \r_rst_reg[1] ;
  input \r_state_reg[2]_0 ;
  input r_rply_enable_reg_0;
  input \r_tlp_id_ack_reg[0]_0 ;
  input \r_state_reg[3]_0 ;
  input r_tlp_enable_reg_0;
  input r_tlp_enable_reg_1;
  input \r_rst_reg[1]_0 ;

  wire in0;
  wire inst_local_reset_n_0;
  (* RTL_KEEP = "true" *) wire o_crc_calc;
  (* RTL_KEEP = "true" *) wire o_frame_load;
  (* RTL_KEEP = "true" *) wire o_packet_run;
  (* RTL_KEEP = "true" *) wire o_packet_stop;
  (* RTL_KEEP = "true" *) wire [3:0]o_rply_id;
  (* RTL_KEEP = "true" *) wire o_rply_id_set;
  (* RTL_KEEP = "true" *) wire o_rply_rd;
  (* RTL_KEEP = "true" *) wire o_rply_wr;
  (* RTL_KEEP = "true" *) wire o_sel_dllp;
  (* RTL_KEEP = "true" *) wire [7:0]o_tlp_header;
  (* RTL_KEEP = "true" *) wire out;
  wire p_0_in3_in;
  wire p_1_in;
  wire p_1_in4_in;
  wire p_2_in;
  wire p_3_in;
  wire [3:0]r_byte_cnt;
  wire \r_byte_cnt[0]_i_1__1_n_0 ;
  wire \r_byte_cnt[1]_i_1__1_n_0 ;
  wire \r_byte_cnt[2]_i_1__1_n_0 ;
  wire \r_byte_cnt[3]_i_2__1_n_0 ;
  wire \r_byte_cnt[3]_i_3__0_n_0 ;
  wire \r_byte_cnt[3]_i_4__0_n_0 ;
  wire \r_byte_cnt[3]_i_5__0_n_0 ;
  wire \r_frame_cnt[0]_i_1__0_n_0 ;
  wire \r_frame_cnt[1]_i_1__0_n_0 ;
  wire \r_frame_cnt[2]_i_1__0_n_0 ;
  wire \r_frame_cnt[3]_i_2__0_n_0 ;
  wire \r_frame_cnt[3]_i_3__0_n_0 ;
  wire \r_frame_cnt[3]_i_4_n_0 ;
  wire r_rply_enable_i_1__0_n_0;
  wire r_rply_enable_reg_n_0;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire \r_state[0]_i_10__1_n_0 ;
  wire \r_state[0]_i_11__1_n_0 ;
  wire \r_state[0]_i_12__1_n_0 ;
  wire \r_state[0]_i_13__0_n_0 ;
  wire \r_state[0]_i_14__0_n_0 ;
  wire \r_state[0]_i_2__9_n_0 ;
  wire \r_state[0]_i_3__8_n_0 ;
  wire \r_state[0]_i_4__7_n_0 ;
  wire \r_state[0]_i_5__5_n_0 ;
  wire \r_state[0]_i_6__3_n_0 ;
  wire \r_state[0]_i_7__1_n_0 ;
  wire \r_state[0]_i_8__1_n_0 ;
  wire \r_state[0]_i_9__2_n_0 ;
  wire \r_state[10]_i_2__1_n_0 ;
  wire \r_state[10]_i_3__1_n_0 ;
  wire \r_state[10]_i_4__1_n_0 ;
  wire \r_state[11]_i_2__4_n_0 ;
  wire \r_state[11]_i_3__1_n_0 ;
  wire \r_state[11]_i_4__0_n_0 ;
  wire \r_state[11]_i_5__0_n_0 ;
  wire \r_state[12]_i_2__4_n_0 ;
  wire \r_state[12]_i_3__4_n_0 ;
  wire \r_state[12]_i_4__3_n_0 ;
  wire \r_state[12]_i_5__1_n_0 ;
  wire \r_state[12]_i_6__1_n_0 ;
  wire \r_state[12]_i_7__0_n_0 ;
  wire \r_state[12]_i_8__1_n_0 ;
  wire \r_state[13]_i_10_n_0 ;
  wire \r_state[13]_i_11__0_n_0 ;
  wire \r_state[13]_i_12_n_0 ;
  wire \r_state[13]_i_13_n_0 ;
  wire \r_state[13]_i_3__0_n_0 ;
  wire \r_state[13]_i_4__0_n_0 ;
  wire \r_state[13]_i_5__0_n_0 ;
  wire \r_state[13]_i_6__0_n_0 ;
  wire \r_state[13]_i_7__0_n_0 ;
  wire \r_state[13]_i_8__0_n_0 ;
  wire \r_state[13]_i_9__0_n_0 ;
  wire \r_state[1]_i_2__3_n_0 ;
  wire \r_state[1]_i_3__1_n_0 ;
  wire \r_state[2]_i_2__9_n_0 ;
  wire \r_state[2]_i_3__0_n_0 ;
  wire \r_state[3]_i_2__6_n_0 ;
  wire \r_state[3]_i_3__2_n_0 ;
  wire \r_state[4]_i_2__3_n_0 ;
  wire \r_state[4]_i_3__1_n_0 ;
  wire \r_state[4]_i_4__1_n_0 ;
  wire \r_state[4]_i_5__0_n_0 ;
  wire \r_state[4]_i_6__0_n_0 ;
  wire \r_state[5]_i_2__7_n_0 ;
  wire \r_state[5]_i_3__3_n_0 ;
  wire \r_state[5]_i_4__1_n_0 ;
  wire \r_state[6]_i_2__5_n_0 ;
  wire \r_state[6]_i_3__3_n_0 ;
  wire \r_state[6]_i_4__0_n_0 ;
  wire \r_state[6]_i_5__0_n_0 ;
  wire \r_state[6]_i_6__0_n_0 ;
  wire \r_state[7]_i_2__8_n_0 ;
  wire \r_state[7]_i_3__6_n_0 ;
  wire \r_state[7]_i_4__3_n_0 ;
  wire \r_state[7]_i_5__2_n_0 ;
  wire \r_state[7]_i_6__0_n_0 ;
  wire \r_state[8]_i_2__3_n_0 ;
  wire \r_state[8]_i_3__0_n_0 ;
  wire \r_state[8]_i_4__0_n_0 ;
  wire \r_state[8]_i_5_n_0 ;
  wire \r_state[8]_i_6_n_0 ;
  wire \r_state[9]_i_2__3_n_0 ;
  wire \r_state_reg[2]_0 ;
  wire \r_state_reg[3]_0 ;
  wire \r_state_reg_n_0_[10] ;
  wire \r_state_reg_n_0_[12] ;
  wire \r_state_reg_n_0_[3] ;
  wire \r_state_reg_n_0_[5] ;
  wire \r_state_reg_n_0_[6] ;
  wire r_tlp_enable;
  wire r_tlp_enable_reg_0;
  wire r_tlp_enable_reg_1;
  wire \r_tlp_id[0]_i_1__0_n_0 ;
  wire \r_tlp_id[1]_i_1__0_n_0 ;
  wire \r_tlp_id[2]_i_1__0_n_0 ;
  wire \r_tlp_id[3]_i_2__0_n_0 ;
  wire \r_tlp_id[3]_i_3__0_n_0 ;
  wire \r_tlp_id[3]_i_4_n_0 ;
  wire \r_tlp_id_ack[4]_i_2__0_n_0 ;
  wire [4:4]r_tlp_id_ack_reg;
  wire \r_tlp_id_ack_reg[0]_0 ;
  wire [3:0]\^r_tlp_id_ack_reg[3]_0 ;
  wire r_tlp_id_all_ack_i_2__0_n_0;
  wire r_tlp_id_all_ack_i_3__0_n_0;
  wire r_tlp_id_all_ack_i_4__0_n_0;
  wire r_tlp_id_all_ack_i_5__0_n_0;
  wire \^r_tlp_id_all_ack_reg_0 ;
  wire \r_tlp_id_nack[3]_i_2__0_n_0 ;
  wire \r_tlp_id_nack[4]_i_2__0_n_0 ;
  wire [4:4]r_tlp_id_nack_reg;
  wire \r_tlp_id_nack_reg_n_0_[0] ;
  wire \r_tlp_id_nack_reg_n_0_[1] ;
  wire \r_tlp_id_nack_reg_n_0_[2] ;
  wire \r_tlp_id_nack_reg_n_0_[3] ;
  wire \r_tlp_id_rply[0]_i_1__0_n_0 ;
  wire \r_tlp_id_rply[1]_i_1__0_n_0 ;
  wire \r_tlp_id_rply[2]_i_1__0_n_0 ;
  wire \r_tlp_id_rply[2]_i_2__0_n_0 ;
  wire \r_tlp_id_rply[3]_i_1__0_n_0 ;
  wire \r_tlp_id_rply[3]_i_2__0_n_0 ;
  wire \r_tlp_id_rply[4]_i_2__0_n_0 ;
  wire \r_tlp_id_rply[4]_i_3__0_n_0 ;
  wire [4:4]r_tlp_id_rply__0;
  wire r_tlp_id_wait_ack_reg_n_0;
  wire ri_byte_cnt;
  wire ri_frame_cnt;
  wire ri_rply_wr;
  wire [13:0]ri_state__0;
  wire ri_tlp_enable;
  wire ri_tlp_id;
  wire [4:4]ri_tlp_id_ack;
  wire [3:0]ri_tlp_id_ack__0;
  wire ri_tlp_id_all_ack;
  wire [4:0]ri_tlp_id_nack;
  wire ri_tlp_id_rply;
  wire ri_tlp_id_wait_ack;
  wire rply_done;

  assign Q[0] = o_sel_dllp;
  assign o_sel_rply = o_rply_rd;
  async_reset__parameterized1_14 inst_local_reset
       (.\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ),
        .\r_rst_reg[1]_2 (\r_rst_reg[1]_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    o_crc_calc_inferred_i_1__0
       (.I0(p_1_in4_in),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state[12]_i_4__3_n_0 ),
        .I4(\r_state_reg_n_0_[10] ),
        .I5(rply_done),
        .O(o_crc_calc));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    o_frame_load_inferred_i_1__0
       (.I0(o_sel_dllp),
        .I1(p_0_in3_in),
        .I2(p_2_in),
        .I3(p_3_in),
        .I4(p_1_in),
        .O(o_frame_load));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    o_packet_run_inferred_i_1__0
       (.I0(out),
        .I1(p_1_in),
        .I2(o_sel_dllp),
        .I3(p_0_in3_in),
        .I4(\r_state_reg_n_0_[3] ),
        .I5(o_packet_stop),
        .O(o_packet_run));
  LUT4 #(
    .INIT(16'hFFFE)) 
    o_rply_id_set_inferred_i_1__0
       (.I0(p_1_in),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .O(o_rply_id_set));
  LUT2 #(
    .INIT(4'hE)) 
    o_sel_rply_inferred_i_1__0
       (.I0(p_3_in),
        .I1(p_1_in4_in),
        .O(o_rply_rd));
  LUT2 #(
    .INIT(4'hE)) 
    o_tlp_ack_inferred_i_1__0
       (.I0(p_2_in),
        .I1(p_0_in3_in),
        .O(in0));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \r_byte_cnt[0]_i_1__1 
       (.I0(p_3_in),
        .I1(p_2_in),
        .I2(out),
        .I3(r_byte_cnt[0]),
        .O(\r_byte_cnt[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT5 #(
    .INIT(32'h00010100)) 
    \r_byte_cnt[1]_i_1__1 
       (.I0(p_3_in),
        .I1(p_2_in),
        .I2(out),
        .I3(r_byte_cnt[0]),
        .I4(r_byte_cnt[1]),
        .O(\r_byte_cnt[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0001010101000000)) 
    \r_byte_cnt[2]_i_1__1 
       (.I0(p_3_in),
        .I1(p_2_in),
        .I2(out),
        .I3(r_byte_cnt[0]),
        .I4(r_byte_cnt[1]),
        .I5(r_byte_cnt[2]),
        .O(\r_byte_cnt[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000022A)) 
    \r_byte_cnt[3]_i_1__1 
       (.I0(\r_byte_cnt[3]_i_3__0_n_0 ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(out),
        .I3(\r_byte_cnt[3]_i_4__0_n_0 ),
        .I4(\r_state[6]_i_6__0_n_0 ),
        .I5(\r_byte_cnt[3]_i_5__0_n_0 ),
        .O(ri_byte_cnt));
  LUT6 #(
    .INIT(64'h0000000000006AAA)) 
    \r_byte_cnt[3]_i_2__1 
       (.I0(r_byte_cnt[3]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[1]),
        .I3(r_byte_cnt[2]),
        .I4(out),
        .I5(\r_state[12]_i_4__3_n_0 ),
        .O(\r_byte_cnt[3]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF0116)) 
    \r_byte_cnt[3]_i_3__0 
       (.I0(p_2_in),
        .I1(p_3_in),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(p_1_in4_in),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(out),
        .O(\r_byte_cnt[3]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_byte_cnt[3]_i_4__0 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_3_in),
        .I2(p_2_in),
        .I3(p_1_in4_in),
        .O(\r_byte_cnt[3]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_byte_cnt[3]_i_5__0 
       (.I0(p_1_in),
        .I1(o_sel_dllp),
        .I2(p_0_in3_in),
        .I3(\r_state_reg_n_0_[3] ),
        .O(\r_byte_cnt[3]_i_5__0_n_0 ));
  FDCE \r_byte_cnt_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[0]_i_1__1_n_0 ),
        .Q(r_byte_cnt[0]));
  FDCE \r_byte_cnt_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[1]_i_1__1_n_0 ),
        .Q(r_byte_cnt[1]));
  FDCE \r_byte_cnt_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[2]_i_1__1_n_0 ),
        .Q(r_byte_cnt[2]));
  FDCE \r_byte_cnt_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_byte_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_byte_cnt[3]_i_2__1_n_0 ),
        .Q(r_byte_cnt[3]));
  (* \PinAttr:I1:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_frame_cnt[0]_i_1__0 
       (.I0(out),
        .I1(o_tlp_header[4]),
        .O(\r_frame_cnt[0]_i_1__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "190" *) 
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_frame_cnt[1]_i_1__0 
       (.I0(o_tlp_header[5]),
        .I1(o_tlp_header[4]),
        .I2(out),
        .O(\r_frame_cnt[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT4 #(
    .INIT(16'h0078)) 
    \r_frame_cnt[2]_i_1__0 
       (.I0(o_tlp_header[4]),
        .I1(o_tlp_header[5]),
        .I2(o_tlp_header[6]),
        .I3(out),
        .O(\r_frame_cnt[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000116)) 
    \r_frame_cnt[3]_i_1__0 
       (.I0(p_1_in),
        .I1(p_2_in),
        .I2(p_3_in),
        .I3(\r_frame_cnt[3]_i_3__0_n_0 ),
        .I4(\r_frame_cnt[3]_i_4_n_0 ),
        .I5(\r_state[6]_i_6__0_n_0 ),
        .O(ri_frame_cnt));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT5 #(
    .INIT(32'h15554000)) 
    \r_frame_cnt[3]_i_2__0 
       (.I0(out),
        .I1(o_tlp_header[6]),
        .I2(o_tlp_header[5]),
        .I3(o_tlp_header[4]),
        .I4(o_tlp_header[7]),
        .O(\r_frame_cnt[3]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_frame_cnt[3]_i_3__0 
       (.I0(p_0_in3_in),
        .I1(out),
        .O(\r_frame_cnt[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEEE)) 
    \r_frame_cnt[3]_i_4 
       (.I0(\r_state[13]_i_9__0_n_0 ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(p_0_in3_in),
        .I3(out),
        .I4(o_sel_dllp),
        .I5(\r_state_reg_n_0_[3] ),
        .O(\r_frame_cnt[3]_i_4_n_0 ));
  FDCE \r_frame_cnt_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[0]_i_1__0_n_0 ),
        .Q(o_tlp_header[4]));
  FDCE \r_frame_cnt_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[1]_i_1__0_n_0 ),
        .Q(o_tlp_header[5]));
  FDCE \r_frame_cnt_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[2]_i_1__0_n_0 ),
        .Q(o_tlp_header[6]));
  FDCE \r_frame_cnt_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_frame_cnt),
        .CLR(inst_local_reset_n_0),
        .D(\r_frame_cnt[3]_i_2__0_n_0 ),
        .Q(o_tlp_header[7]));
  (* OPT_MODIFIED = "PROPCONST" *) 
  LUT2 #(
    .INIT(4'h4)) 
    r_rply_enable_i_1__0
       (.I0(rply_done),
        .I1(r_rply_enable_reg_n_0),
        .O(r_rply_enable_i_1__0_n_0));
  FDCE r_rply_enable_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_rply_enable_i_1__0_n_0),
        .Q(r_rply_enable_reg_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    r_rply_wr_i_1__0
       (.I0(ri_state__0[6]),
        .I1(ri_state__0[7]),
        .O(ri_rply_wr));
  FDCE r_rply_wr_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_rply_wr),
        .Q(o_rply_wr));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]_i_10__1 
       (.I0(p_1_in4_in),
        .I1(p_2_in),
        .I2(p_3_in),
        .O(\r_state[0]_i_10__1_n_0 ));
  LUT6 #(
    .INIT(64'h2020202020002020)) 
    \r_state[0]_i_11__1 
       (.I0(\r_state_reg[3]_0 ),
        .I1(r_rply_enable_reg_n_0),
        .I2(out),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .I4(r_tlp_enable),
        .I5(\r_state_reg[2]_0 ),
        .O(\r_state[0]_i_11__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \r_state[0]_i_12__1 
       (.I0(\r_state[0]_i_13__0_n_0 ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(o_sel_dllp),
        .I4(\r_state[0]_i_14__0_n_0 ),
        .I5(\r_byte_cnt[3]_i_4__0_n_0 ),
        .O(\r_state[0]_i_12__1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]_i_13__0 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(rply_done),
        .I2(\r_state_reg_n_0_[10] ),
        .O(\r_state[0]_i_13__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[0]_i_14__0 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(p_0_in3_in),
        .I2(out),
        .O(\r_state[0]_i_14__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF55555504)) 
    \r_state[0]_i_1__10 
       (.I0(\r_state[0]_i_2__9_n_0 ),
        .I1(\r_state[0]_i_3__8_n_0 ),
        .I2(\r_state[0]_i_4__7_n_0 ),
        .I3(\r_state[0]_i_5__5_n_0 ),
        .I4(\r_state[0]_i_6__3_n_0 ),
        .I5(\r_state[0]_i_7__1_n_0 ),
        .O(ri_state__0[0]));
  LUT5 #(
    .INIT(32'h0000022A)) 
    \r_state[0]_i_2__9 
       (.I0(\r_state[0]_i_8__1_n_0 ),
        .I1(o_sel_dllp),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(p_0_in3_in),
        .I4(o_packet_stop),
        .O(\r_state[0]_i_2__9_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEFE)) 
    \r_state[0]_i_3__8 
       (.I0(\r_state[12]_i_4__3_n_0 ),
        .I1(p_1_in4_in),
        .I2(o_packet_stop),
        .I3(rply_done),
        .I4(\r_state_reg_n_0_[10] ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(\r_state[0]_i_3__8_n_0 ));
  LUT6 #(
    .INIT(64'h0101151501001515)) 
    \r_state[0]_i_4__7 
       (.I0(\r_state[6]_i_6__0_n_0 ),
        .I1(p_2_in),
        .I2(p_3_in),
        .I3(\r_state[0]_i_9__2_n_0 ),
        .I4(p_1_in4_in),
        .I5(\r_state[8]_i_2__3_n_0 ),
        .O(\r_state[0]_i_4__7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFA8)) 
    \r_state[0]_i_5__5 
       (.I0(p_1_in),
        .I1(\r_state[6]_i_6__0_n_0 ),
        .I2(\r_byte_cnt[3]_i_4__0_n_0 ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(p_0_in3_in),
        .I5(o_sel_dllp),
        .O(\r_state[0]_i_5__5_n_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFEE00000000)) 
    \r_state[0]_i_6__3 
       (.I0(\r_state[0]_i_10__1_n_0 ),
        .I1(\r_state[6]_i_6__0_n_0 ),
        .I2(\r_state[0]_i_9__2_n_0 ),
        .I3(\r_state[13]_i_13_n_0 ),
        .I4(\r_state[2]_i_3__0_n_0 ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[0]_i_6__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF7F7F0)) 
    \r_state[0]_i_7__1 
       (.I0(\r_state[13]_i_8__0_n_0 ),
        .I1(\r_state[0]_i_8__1_n_0 ),
        .I2(\r_state[0]_i_11__1_n_0 ),
        .I3(out),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[0]_i_12__1_n_0 ),
        .O(\r_state[0]_i_7__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[0]_i_8__1 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(rply_done),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(p_1_in),
        .I4(\r_byte_cnt[3]_i_4__0_n_0 ),
        .O(\r_state[0]_i_8__1_n_0 ));
  LUT5 #(
    .INIT(32'h0004FFFF)) 
    \r_state[0]_i_9__2 
       (.I0(r_byte_cnt[3]),
        .I1(r_byte_cnt[2]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .I4(out),
        .O(\r_state[0]_i_9__2_n_0 ));
  LUT6 #(
    .INIT(64'h80808000AA80AA00)) 
    \r_state[10]_i_1__4 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(\r_state[10]_i_2__1_n_0 ),
        .I2(\r_state[10]_i_3__1_n_0 ),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(\r_state[10]_i_4__1_n_0 ),
        .I5(\r_state[11]_i_3__1_n_0 ),
        .O(ri_state__0[10]));
  LUT5 #(
    .INIT(32'h05000530)) 
    \r_state[10]_i_2__1 
       (.I0(\r_state[11]_i_5__0_n_0 ),
        .I1(\r_state[10]_i_4__1_n_0 ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(\r_state[8]_i_2__3_n_0 ),
        .O(\r_state[10]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[10]_i_3__1 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(out),
        .O(\r_state[10]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[10]_i_4__1 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[2]),
        .I3(r_byte_cnt[3]),
        .O(\r_state[10]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h08080808080808AA)) 
    \r_state[11]_i_1__4 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(rply_done),
        .I2(\r_state[11]_i_3__1_n_0 ),
        .I3(\r_state[11]_i_4__0_n_0 ),
        .I4(out),
        .I5(\r_state_reg_n_0_[5] ),
        .O(ri_state__0[11]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[11]_i_2__4 
       (.I0(\r_state[12]_i_4__3_n_0 ),
        .I1(p_1_in),
        .I2(o_sel_dllp),
        .I3(p_0_in3_in),
        .I4(\r_state_reg_n_0_[3] ),
        .I5(\r_state[6]_i_6__0_n_0 ),
        .O(\r_state[11]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFEFFFEFFFFFFF00)) 
    \r_state[11]_i_3__1 
       (.I0(\r_state[13]_i_10_n_0 ),
        .I1(r_rply_enable_reg_n_0),
        .I2(\r_state[2]_i_3__0_n_0 ),
        .I3(\r_state[13]_i_9__0_n_0 ),
        .I4(\r_state[5]_i_2__7_n_0 ),
        .I5(out),
        .O(\r_state[11]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hF3F3F3F3FBCBFFFF)) 
    \r_state[11]_i_4__0 
       (.I0(\r_state[8]_i_2__3_n_0 ),
        .I1(p_1_in4_in),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(\r_state[11]_i_5__0_n_0 ),
        .I4(rply_done),
        .I5(\r_state[10]_i_4__1_n_0 ),
        .O(\r_state[11]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h00001000)) 
    \r_state[11]_i_5__0 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[3]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .I4(\r_state[2]_i_3__0_n_0 ),
        .O(\r_state[11]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000AE)) 
    \r_state[12]_i_1__4 
       (.I0(\r_state[12]_i_2__4_n_0 ),
        .I1(\r_state[13]_i_4__0_n_0 ),
        .I2(\r_state[12]_i_3__4_n_0 ),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(\r_state[12]_i_4__3_n_0 ),
        .I5(\r_state[12]_i_5__1_n_0 ),
        .O(ri_state__0[12]));
  LUT6 #(
    .INIT(64'h0500040405000400)) 
    \r_state[12]_i_2__4 
       (.I0(\r_state[5]_i_4__1_n_0 ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state[13]_i_9__0_n_0 ),
        .I3(\r_state[12]_i_6__1_n_0 ),
        .I4(out),
        .I5(\r_state[12]_i_7__0_n_0 ),
        .O(\r_state[12]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAEEEEAAAAF00F)) 
    \r_state[12]_i_3__4 
       (.I0(\r_state[12]_i_8__1_n_0 ),
        .I1(\r_state[8]_i_2__3_n_0 ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(rply_done),
        .I4(\r_state_reg_n_0_[6] ),
        .I5(p_1_in4_in),
        .O(\r_state[12]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_4__3 
       (.I0(p_3_in),
        .I1(p_2_in),
        .O(\r_state[12]_i_4__3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[12]_i_5__1 
       (.I0(o_packet_stop),
        .I1(\r_state_reg_n_0_[3] ),
        .I2(p_0_in3_in),
        .I3(o_sel_dllp),
        .I4(p_1_in),
        .O(\r_state[12]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000800AAAAAAAA)) 
    \r_state[12]_i_6__1 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(\r_state[2]_i_3__0_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state_reg[3]_0 ),
        .I4(r_rply_enable_reg_n_0),
        .I5(out),
        .O(\r_state[12]_i_6__1_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[12]_i_7__0 
       (.I0(r_byte_cnt[3]),
        .I1(r_byte_cnt[2]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .O(\r_state[12]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \r_state[12]_i_8__1 
       (.I0(\r_state[10]_i_4__1_n_0 ),
        .I1(\r_state_reg_n_0_[10] ),
        .I2(rply_done),
        .I3(\r_state_reg_n_0_[12] ),
        .O(\r_state[12]_i_8__1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \r_state[13]_i_10 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg[3]_0 ),
        .O(\r_state[13]_i_10_n_0 ));
  LUT5 #(
    .INIT(32'h0000FB00)) 
    \r_state[13]_i_11__0 
       (.I0(\r_state_reg[2]_0 ),
        .I1(r_tlp_enable),
        .I2(r_tlp_id_wait_ack_reg_n_0),
        .I3(out),
        .I4(r_rply_enable_reg_n_0),
        .O(\r_state[13]_i_11__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[13]_i_12 
       (.I0(out),
        .I1(\r_state[5]_i_2__7_n_0 ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[6] ),
        .O(\r_state[13]_i_12_n_0 ));
  LUT4 #(
    .INIT(16'hFFF7)) 
    \r_state[13]_i_13 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[3]),
        .I3(r_byte_cnt[2]),
        .O(\r_state[13]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h0000AE0000000000)) 
    \r_state[13]_i_1__3 
       (.I0(\r_state[13]_i_3__0_n_0 ),
        .I1(\r_state[13]_i_4__0_n_0 ),
        .I2(\r_state[13]_i_5__0_n_0 ),
        .I3(\r_state[13]_i_6__0_n_0 ),
        .I4(\r_state[13]_i_7__0_n_0 ),
        .I5(\r_state[13]_i_8__0_n_0 ),
        .O(ri_state__0[13]));
  LUT6 #(
    .INIT(64'h00FF000000100000)) 
    \r_state[13]_i_3__0 
       (.I0(\r_state[13]_i_9__0_n_0 ),
        .I1(\r_state[13]_i_10_n_0 ),
        .I2(\r_state[13]_i_11__0_n_0 ),
        .I3(\r_state_reg_n_0_[12] ),
        .I4(o_packet_stop),
        .I5(\r_state[13]_i_12_n_0 ),
        .O(\r_state[13]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000E000F000F)) 
    \r_state[13]_i_4__0 
       (.I0(\r_state[13]_i_13_n_0 ),
        .I1(\r_state[2]_i_3__0_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(out),
        .I4(p_1_in4_in),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[13]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFBBBBFF00FBFF)) 
    \r_state[13]_i_5__0 
       (.I0(\r_state[10]_i_4__1_n_0 ),
        .I1(o_packet_stop),
        .I2(\r_state[8]_i_2__3_n_0 ),
        .I3(p_1_in4_in),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[13]_i_5__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[13]_i_6__0 
       (.I0(p_1_in),
        .I1(p_2_in),
        .I2(p_3_in),
        .O(\r_state[13]_i_6__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[13]_i_7__0 
       (.I0(o_packet_stop),
        .I1(rply_done),
        .I2(\r_state_reg_n_0_[10] ),
        .O(\r_state[13]_i_7__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[13]_i_8__0 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(p_0_in3_in),
        .I2(o_sel_dllp),
        .O(\r_state[13]_i_8__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[13]_i_9__0 
       (.I0(p_1_in4_in),
        .I1(\r_state_reg_n_0_[6] ),
        .O(\r_state[13]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'h00200020AA200020)) 
    \r_state[1]_i_1__10 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(\r_state[4]_i_3__1_n_0 ),
        .I2(o_sel_dllp),
        .I3(out),
        .I4(\r_state[1]_i_2__3_n_0 ),
        .I5(\r_state[1]_i_3__1_n_0 ),
        .O(ri_state__0[1]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[1]_i_2__3 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_1_in4_in),
        .O(\r_state[1]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'h8A8A8A8A8AAA8A8A)) 
    \r_state[1]_i_3__1 
       (.I0(\r_state_reg[3]_0 ),
        .I1(r_rply_enable_reg_n_0),
        .I2(o_sel_dllp),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .I4(r_tlp_enable),
        .I5(\r_state_reg[2]_0 ),
        .O(\r_state[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h808880888088A0A8)) 
    \r_state[2]_i_1__10 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(\r_state[2]_i_2__9_n_0 ),
        .I2(p_0_in3_in),
        .I3(\r_state[2]_i_3__0_n_0 ),
        .I4(out),
        .I5(\r_state[4]_i_3__1_n_0 ),
        .O(ri_state__0[2]));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_state[2]_i_2__9 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg[3]_0 ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(out),
        .I5(r_rply_enable_reg_n_0),
        .O(\r_state[2]_i_2__9_n_0 ));
  LUT3 #(
    .INIT(8'hFB)) 
    \r_state[2]_i_3__0 
       (.I0(r_tlp_id_wait_ack_reg_n_0),
        .I1(r_tlp_enable),
        .I2(\r_state_reg[2]_0 ),
        .O(\r_state[2]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h008022A200800080)) 
    \r_state[3]_i_1__10 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(out),
        .I2(\r_state[3]_i_2__6_n_0 ),
        .I3(\r_state[3]_i_3__2_n_0 ),
        .I4(\r_state[4]_i_3__1_n_0 ),
        .I5(\r_state_reg_n_0_[3] ),
        .O(ri_state__0[3]));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[3]_i_2__6 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in4_in),
        .I2(\r_state_reg[3]_0 ),
        .I3(\r_state_reg_n_0_[5] ),
        .O(\r_state[3]_i_2__6_n_0 ));
  LUT5 #(
    .INIT(32'h11111511)) 
    \r_state[3]_i_3__2 
       (.I0(r_rply_enable_reg_n_0),
        .I1(\r_state_reg_n_0_[3] ),
        .I2(r_tlp_id_wait_ack_reg_n_0),
        .I3(r_tlp_enable),
        .I4(\r_state_reg[2]_0 ),
        .O(\r_state[3]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000BAAA)) 
    \r_state[4]_i_1__8 
       (.I0(\r_state[4]_i_2__3_n_0 ),
        .I1(\r_state[4]_i_3__1_n_0 ),
        .I2(\r_state[4]_i_4__1_n_0 ),
        .I3(p_1_in),
        .I4(o_frame_load),
        .I5(\r_state[6]_i_6__0_n_0 ),
        .O(ri_state__0[4]));
  LUT6 #(
    .INIT(64'h0088008800880F88)) 
    \r_state[4]_i_2__3 
       (.I0(p_1_in),
        .I1(\r_state[4]_i_5__0_n_0 ),
        .I2(out),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[13]_i_9__0_n_0 ),
        .O(\r_state[4]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFAAFCAA)) 
    \r_state[4]_i_3__1 
       (.I0(\r_state[5]_i_2__7_n_0 ),
        .I1(\r_state[4]_i_6__0_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(p_1_in4_in),
        .I4(\r_state[8]_i_2__3_n_0 ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[4]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[4]_i_4__1 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(out),
        .O(\r_state[4]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000200000)) 
    \r_state[4]_i_5__0 
       (.I0(\r_state[2]_i_3__0_n_0 ),
        .I1(r_rply_enable_reg_n_0),
        .I2(out),
        .I3(\r_state[13]_i_9__0_n_0 ),
        .I4(\r_state_reg[3]_0 ),
        .I5(\r_state_reg_n_0_[5] ),
        .O(\r_state[4]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h0002100200020002)) 
    \r_state[4]_i_6__0 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[3]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .I4(\r_state[2]_i_3__0_n_0 ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[4]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000300010001)) 
    \r_state[5]_i_1__6 
       (.I0(\r_state[5]_i_2__7_n_0 ),
        .I1(\r_state[5]_i_3__3_n_0 ),
        .I2(\r_state[5]_i_4__1_n_0 ),
        .I3(o_packet_stop),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(o_sel_dllp),
        .O(ri_state__0[5]));
  LUT5 #(
    .INIT(32'h0004FFFF)) 
    \r_state[5]_i_2__7 
       (.I0(r_byte_cnt[1]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[2]),
        .I3(r_byte_cnt[3]),
        .I4(\r_state_reg_n_0_[5] ),
        .O(\r_state[5]_i_2__7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFFFFFF)) 
    \r_state[5]_i_3__3 
       (.I0(\r_state[13]_i_9__0_n_0 ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(p_0_in3_in),
        .I4(out),
        .I5(\r_state[13]_i_6__0_n_0 ),
        .O(\r_state[5]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[5]_i_4__1 
       (.I0(\r_state_reg_n_0_[10] ),
        .I1(rply_done),
        .O(\r_state[5]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000AE)) 
    \r_state[6]_i_1__9 
       (.I0(\r_state[6]_i_2__5_n_0 ),
        .I1(\r_state[13]_i_4__0_n_0 ),
        .I2(\r_state[6]_i_3__3_n_0 ),
        .I3(\r_state[6]_i_4__0_n_0 ),
        .I4(\r_state[6]_i_5__0_n_0 ),
        .I5(\r_state[6]_i_6__0_n_0 ),
        .O(ri_state__0[6]));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \r_state[6]_i_2__5 
       (.I0(p_1_in4_in),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_2_in),
        .I3(out),
        .I4(p_0_in3_in),
        .I5(\r_state_reg_n_0_[5] ),
        .O(\r_state[6]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFCBB)) 
    \r_state[6]_i_3__3 
       (.I0(\r_state[10]_i_4__1_n_0 ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_1_in4_in),
        .I3(p_2_in),
        .I4(p_0_in3_in),
        .O(\r_state[6]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[6]_i_4__0 
       (.I0(o_sel_dllp),
        .I1(\r_state_reg_n_0_[3] ),
        .O(\r_state[6]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[6]_i_5__0 
       (.I0(p_3_in),
        .I1(p_1_in),
        .O(\r_state[6]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[6]_i_6__0 
       (.I0(o_packet_stop),
        .I1(\r_state_reg_n_0_[10] ),
        .I2(rply_done),
        .I3(\r_state_reg_n_0_[12] ),
        .O(\r_state[6]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h00200020AAAA0020)) 
    \r_state[7]_i_1__6 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(\r_state[7]_i_2__8_n_0 ),
        .I2(\r_state[7]_i_3__6_n_0 ),
        .I3(\r_state[7]_i_4__3_n_0 ),
        .I4(p_2_in),
        .I5(\r_state[11]_i_3__1_n_0 ),
        .O(ri_state__0[7]));
  LUT6 #(
    .INIT(64'h0000555455555555)) 
    \r_state[7]_i_2__8 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(\r_state[7]_i_5__2_n_0 ),
        .I2(\r_state[8]_i_4__0_n_0 ),
        .I3(\r_state[7]_i_6__0_n_0 ),
        .I4(\r_state[8]_i_5_n_0 ),
        .I5(p_1_in4_in),
        .O(\r_state[7]_i_2__8_n_0 ));
  LUT3 #(
    .INIT(8'h15)) 
    \r_state[7]_i_3__6 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_1_in4_in),
        .O(\r_state[7]_i_3__6_n_0 ));
  LUT6 #(
    .INIT(64'hFBFBFBFBFBFBAAFB)) 
    \r_state[7]_i_4__3 
       (.I0(out),
        .I1(p_2_in),
        .I2(\r_state[10]_i_4__1_n_0 ),
        .I3(\r_state_reg_n_0_[6] ),
        .I4(\r_state[2]_i_3__0_n_0 ),
        .I5(\r_state[13]_i_13_n_0 ),
        .O(\r_state[7]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_state[7]_i_5__2 
       (.I0(r_tlp_id_nack_reg),
        .I1(r_tlp_id_rply__0),
        .O(\r_state[7]_i_5__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \r_state[7]_i_6__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(o_rply_id[3]),
        .O(\r_state[7]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h00000000BABABABE)) 
    \r_state[8]_i_1__4 
       (.I0(p_1_in),
        .I1(p_1_in4_in),
        .I2(p_3_in),
        .I3(\r_state[8]_i_2__3_n_0 ),
        .I4(\r_state[10]_i_4__1_n_0 ),
        .I5(\r_state[8]_i_3__0_n_0 ),
        .O(ri_state__0[8]));
  LUT6 #(
    .INIT(64'h00000000F6FFFFF6)) 
    \r_state[8]_i_2__3 
       (.I0(r_tlp_id_rply__0),
        .I1(r_tlp_id_nack_reg),
        .I2(\r_state[8]_i_4__0_n_0 ),
        .I3(\r_tlp_id_nack_reg_n_0_[3] ),
        .I4(o_rply_id[3]),
        .I5(\r_state[8]_i_5_n_0 ),
        .O(\r_state[8]_i_2__3_n_0 ));
  LUT5 #(
    .INIT(32'hFEFEFEEE)) 
    \r_state[8]_i_3__0 
       (.I0(\r_state[6]_i_6__0_n_0 ),
        .I1(\r_state[8]_i_6_n_0 ),
        .I2(p_1_in),
        .I3(p_3_in),
        .I4(p_1_in4_in),
        .O(\r_state[8]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_state[8]_i_4__0 
       (.I0(o_rply_id[0]),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(\r_tlp_id_nack_reg_n_0_[1] ),
        .I3(o_rply_id[1]),
        .I4(\r_tlp_id_nack_reg_n_0_[2] ),
        .I5(o_rply_id[2]),
        .O(\r_state[8]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'hEFFFFFFF)) 
    \r_state[8]_i_5 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[3]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .I4(r_rply_enable_reg_n_0),
        .O(\r_state[8]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \r_state[8]_i_6 
       (.I0(\r_state[10]_i_3__1_n_0 ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_0_in3_in),
        .I3(p_2_in),
        .I4(o_sel_dllp),
        .I5(\r_state_reg_n_0_[3] ),
        .O(\r_state[8]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0002AAAA00020002)) 
    \r_state[9]_i_1__8 
       (.I0(\r_state[11]_i_2__4_n_0 ),
        .I1(out),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state[9]_i_2__3_n_0 ),
        .I4(\r_state[11]_i_3__1_n_0 ),
        .I5(p_3_in),
        .O(ri_state__0[9]));
  LUT6 #(
    .INIT(64'hFFFFFFFFF0CFF5FF)) 
    \r_state[9]_i_2__3 
       (.I0(\r_state[8]_i_2__3_n_0 ),
        .I1(\r_state[11]_i_5__0_n_0 ),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(p_1_in4_in),
        .I4(p_3_in),
        .I5(\r_state[10]_i_4__1_n_0 ),
        .O(\r_state[9]_i_2__3_n_0 ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(ri_state__0[0]),
        .PRE(inst_local_reset_n_0),
        .Q(out));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[10] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[10]),
        .Q(\r_state_reg_n_0_[10] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[11]),
        .Q(rply_done));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[12]),
        .Q(\r_state_reg_n_0_[12] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[13]),
        .Q(o_packet_stop));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[1]),
        .Q(o_sel_dllp));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[2]),
        .Q(p_0_in3_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[3]),
        .Q(\r_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[4]),
        .Q(p_1_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[5]),
        .Q(\r_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[6]),
        .Q(\r_state_reg_n_0_[6] ));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[7]),
        .Q(p_2_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[8]),
        .Q(p_1_in4_in));
  (* FSM_ENCODED_STATES = "S_START_TLP:00000000000100,S_WAIT:01000000000000,S_RELOAD_TLP:00000010000000,S_SEND_TLP:00000001000000,S_START_DLLP:00000000000010,S_RPLY_DONE:00100000000000,S_START_RPLY:00000000010000,S_RELOAD_RPLY:00001000000000,S_SEND_DLLP:00000000100000,S_TLP_DONE:00010000000000,S_IDLE:00000000000001,S_SEND_RPLY:00000100000000,S_STOP:10000000000000,S_PREP_RPLY:00000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[9]),
        .Q(p_3_in));
  LUT4 #(
    .INIT(16'h000E)) 
    r_tlp_enable_i_1__0
       (.I0(r_tlp_enable),
        .I1(r_tlp_enable_reg_0),
        .I2(r_tlp_enable_reg_1),
        .I3(r_rply_enable_reg_n_0),
        .O(ri_tlp_enable));
  FDCE r_tlp_enable_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_enable),
        .Q(r_tlp_enable));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[0]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[0] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [0]),
        .O(\r_tlp_id[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[1]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[1] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(\r_tlp_id[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[2]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [2]),
        .O(\r_tlp_id[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000006)) 
    \r_tlp_id[3]_i_1__0 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(out),
        .I2(p_0_in3_in),
        .I3(o_sel_dllp),
        .I4(\r_tlp_id[3]_i_3__0_n_0 ),
        .I5(\r_tlp_id[3]_i_4_n_0 ),
        .O(ri_tlp_id));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_tlp_id[3]_i_2__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(out),
        .I2(\^r_tlp_id_ack_reg[3]_0 [3]),
        .O(\r_tlp_id[3]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_tlp_id[3]_i_3__0 
       (.I0(p_1_in),
        .I1(\r_state_reg_n_0_[5] ),
        .O(\r_tlp_id[3]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_tlp_id[3]_i_4 
       (.I0(\r_state[6]_i_6__0_n_0 ),
        .I1(p_1_in4_in),
        .I2(p_2_in),
        .I3(p_3_in),
        .I4(\r_state_reg_n_0_[6] ),
        .O(\r_tlp_id[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT3 #(
    .INIT(8'h9A)) 
    \r_tlp_id_ack[0]_i_1__0 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I1(\^r_tlp_id_all_ack_reg_0 ),
        .I2(\r_tlp_id_ack_reg[0]_0 ),
        .O(ri_tlp_id_ack__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_tlp_id_ack[1]_i_1__0 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [1]),
        .I1(\r_tlp_id_ack_reg[0]_0 ),
        .I2(\^r_tlp_id_all_ack_reg_0 ),
        .I3(\^r_tlp_id_ack_reg[3]_0 [0]),
        .O(ri_tlp_id_ack__0[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_tlp_id_ack[2]_i_1__0 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [2]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I2(\^r_tlp_id_all_ack_reg_0 ),
        .I3(\r_tlp_id_ack_reg[0]_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(ri_tlp_id_ack__0[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_tlp_id_ack[3]_i_1__0 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [3]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [1]),
        .I2(\r_tlp_id_ack_reg[0]_0 ),
        .I3(\^r_tlp_id_all_ack_reg_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I5(\^r_tlp_id_ack_reg[3]_0 [2]),
        .O(ri_tlp_id_ack__0[3]));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_id_ack[4]_i_1__0 
       (.I0(r_tlp_id_ack_reg),
        .I1(\r_tlp_id_ack[4]_i_2__0_n_0 ),
        .I2(\^r_tlp_id_ack_reg[3]_0 [3]),
        .O(ri_tlp_id_ack));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_tlp_id_ack[4]_i_2__0 
       (.I0(\^r_tlp_id_ack_reg[3]_0 [2]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I2(\^r_tlp_id_all_ack_reg_0 ),
        .I3(\r_tlp_id_ack_reg[0]_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(\r_tlp_id_ack[4]_i_2__0_n_0 ));
  FDCE \r_tlp_id_ack_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[0]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [0]));
  FDCE \r_tlp_id_ack_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[1]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [1]));
  FDCE \r_tlp_id_ack_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[2]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [2]));
  FDCE \r_tlp_id_ack_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack__0[3]),
        .Q(\^r_tlp_id_ack_reg[3]_0 [3]));
  FDCE \r_tlp_id_ack_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_ack),
        .Q(r_tlp_id_ack_reg));
  LUT2 #(
    .INIT(4'h2)) 
    r_tlp_id_all_ack_i_1__0
       (.I0(r_tlp_id_all_ack_i_2__0_n_0),
        .I1(r_tlp_id_all_ack_i_3__0_n_0),
        .O(ri_tlp_id_all_ack));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_tlp_id_all_ack_i_2__0
       (.I0(r_tlp_id_all_ack_i_4__0_n_0),
        .I1(ri_tlp_id_ack__0[2]),
        .I2(ri_tlp_id_ack__0[3]),
        .I3(\r_tlp_id_nack_reg_n_0_[3] ),
        .I4(r_tlp_id_all_ack_i_5__0_n_0),
        .I5(\r_tlp_id_nack_reg_n_0_[2] ),
        .O(r_tlp_id_all_ack_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_tlp_id_all_ack_i_3__0
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(\r_tlp_id_nack[4]_i_2__0_n_0 ),
        .I2(r_tlp_id_nack_reg),
        .I3(\^r_tlp_id_ack_reg[3]_0 [3]),
        .I4(\r_tlp_id_ack[4]_i_2__0_n_0 ),
        .I5(r_tlp_id_ack_reg),
        .O(r_tlp_id_all_ack_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h77E7BB7BDDBDEEDE)) 
    r_tlp_id_all_ack_i_4__0
       (.I0(ri_tlp_id_nack[0]),
        .I1(\^r_tlp_id_ack_reg[3]_0 [1]),
        .I2(\r_tlp_id_ack_reg[0]_0 ),
        .I3(\^r_tlp_id_all_ack_reg_0 ),
        .I4(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I5(ri_tlp_id_nack[1]),
        .O(r_tlp_id_all_ack_i_4__0_n_0));
  LUT5 #(
    .INIT(32'h22200000)) 
    r_tlp_id_all_ack_i_5__0
       (.I0(\r_tlp_id_nack_reg_n_0_[1] ),
        .I1(r_tlp_id_wait_ack_reg_n_0),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .I4(\r_tlp_id_nack_reg_n_0_[0] ),
        .O(r_tlp_id_all_ack_i_5__0_n_0));
  FDPE r_tlp_id_all_ack_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(ri_tlp_id_all_ack),
        .PRE(inst_local_reset_n_0),
        .Q(\^r_tlp_id_all_ack_reg_0 ));
  LUT4 #(
    .INIT(16'hAA56)) 
    \r_tlp_id_nack[0]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[0] ),
        .I1(p_0_in3_in),
        .I2(p_2_in),
        .I3(r_tlp_id_wait_ack_reg_n_0),
        .O(ri_tlp_id_nack[0]));
  LUT5 #(
    .INIT(32'h999AAAAA)) 
    \r_tlp_id_nack[1]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[1] ),
        .I1(r_tlp_id_wait_ack_reg_n_0),
        .I2(p_2_in),
        .I3(p_0_in3_in),
        .I4(\r_tlp_id_nack_reg_n_0_[0] ),
        .O(ri_tlp_id_nack[1]));
  LUT6 #(
    .INIT(64'hAAAA666AAAAAAAAA)) 
    \r_tlp_id_nack[2]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(p_0_in3_in),
        .I3(p_2_in),
        .I4(r_tlp_id_wait_ack_reg_n_0),
        .I5(\r_tlp_id_nack_reg_n_0_[1] ),
        .O(ri_tlp_id_nack[2]));
  LUT6 #(
    .INIT(64'hAAA6AAAAAAAAAAAA)) 
    \r_tlp_id_nack[3]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(\r_tlp_id_nack_reg_n_0_[1] ),
        .I2(r_tlp_id_wait_ack_reg_n_0),
        .I3(\r_tlp_id_nack[3]_i_2__0_n_0 ),
        .I4(\r_tlp_id_nack_reg_n_0_[0] ),
        .I5(\r_tlp_id_nack_reg_n_0_[2] ),
        .O(ri_tlp_id_nack[3]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_tlp_id_nack[3]_i_2__0 
       (.I0(p_0_in3_in),
        .I1(p_2_in),
        .O(\r_tlp_id_nack[3]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_tlp_id_nack[4]_i_1__0 
       (.I0(r_tlp_id_nack_reg),
        .I1(\r_tlp_id_nack[4]_i_2__0_n_0 ),
        .I2(\r_tlp_id_nack_reg_n_0_[3] ),
        .O(ri_tlp_id_nack[4]));
  LUT6 #(
    .INIT(64'h0000888000000000)) 
    \r_tlp_id_nack[4]_i_2__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(p_0_in3_in),
        .I3(p_2_in),
        .I4(r_tlp_id_wait_ack_reg_n_0),
        .I5(\r_tlp_id_nack_reg_n_0_[1] ),
        .O(\r_tlp_id_nack[4]_i_2__0_n_0 ));
  FDCE \r_tlp_id_nack_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[0]),
        .Q(\r_tlp_id_nack_reg_n_0_[0] ));
  FDCE \r_tlp_id_nack_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[1]),
        .Q(\r_tlp_id_nack_reg_n_0_[1] ));
  FDCE \r_tlp_id_nack_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[2]),
        .Q(\r_tlp_id_nack_reg_n_0_[2] ));
  FDCE \r_tlp_id_nack_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[3]),
        .Q(\r_tlp_id_nack_reg_n_0_[3] ));
  FDCE \r_tlp_id_nack_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_nack[4]),
        .Q(r_tlp_id_nack_reg));
  FDCE \r_tlp_id_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[0]_i_1__0_n_0 ),
        .Q(o_tlp_header[0]));
  FDCE \r_tlp_id_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[1]_i_1__0_n_0 ),
        .Q(o_tlp_header[1]));
  FDCE \r_tlp_id_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[2]_i_1__0_n_0 ),
        .Q(o_tlp_header[2]));
  FDCE \r_tlp_id_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id[3]_i_2__0_n_0 ),
        .Q(o_tlp_header[3]));
  LUT5 #(
    .INIT(32'hCFC0C5C5)) 
    \r_tlp_id_rply[0]_i_1__0 
       (.I0(o_rply_id[0]),
        .I1(\r_tlp_id_nack_reg_n_0_[0] ),
        .I2(out),
        .I3(\^r_tlp_id_ack_reg[3]_0 [0]),
        .I4(\r_state_reg_n_0_[3] ),
        .O(\r_tlp_id_rply[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFF600F6FF060006)) 
    \r_tlp_id_rply[1]_i_1__0 
       (.I0(o_rply_id[0]),
        .I1(o_rply_id[1]),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(out),
        .I4(\r_tlp_id_nack_reg_n_0_[1] ),
        .I5(\^r_tlp_id_ack_reg[3]_0 [1]),
        .O(\r_tlp_id_rply[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAACCCCAAAA0FF0)) 
    \r_tlp_id_rply[2]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[2] ),
        .I1(\^r_tlp_id_ack_reg[3]_0 [2]),
        .I2(o_rply_id[2]),
        .I3(\r_tlp_id_rply[2]_i_2__0_n_0 ),
        .I4(out),
        .I5(\r_state_reg_n_0_[3] ),
        .O(\r_tlp_id_rply[2]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \r_tlp_id_rply[2]_i_2__0 
       (.I0(o_rply_id[0]),
        .I1(o_rply_id[1]),
        .O(\r_tlp_id_rply[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hACA0ACAFACAFACA0)) 
    \r_tlp_id_rply[3]_i_1__0 
       (.I0(\r_tlp_id_nack_reg_n_0_[3] ),
        .I1(\^r_tlp_id_ack_reg[3]_0 [3]),
        .I2(out),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_tlp_id_rply[3]_i_2__0_n_0 ),
        .I5(o_rply_id[3]),
        .O(\r_tlp_id_rply[3]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \r_tlp_id_rply[3]_i_2__0 
       (.I0(o_rply_id[2]),
        .I1(o_rply_id[1]),
        .I2(o_rply_id[0]),
        .O(\r_tlp_id_rply[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_tlp_id_rply[4]_i_1__0 
       (.I0(\r_tlp_id_rply[4]_i_3__0_n_0 ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_1_in4_in),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(o_sel_dllp),
        .I5(\r_state[6]_i_6__0_n_0 ),
        .O(ri_tlp_id_rply));
  LUT6 #(
    .INIT(64'h2AAAAAAA80000000)) 
    \r_tlp_id_rply[4]_i_2__0 
       (.I0(\r_state[4]_i_4__1_n_0 ),
        .I1(o_rply_id[3]),
        .I2(o_rply_id[0]),
        .I3(o_rply_id[1]),
        .I4(o_rply_id[2]),
        .I5(r_tlp_id_rply__0),
        .O(\r_tlp_id_rply[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100010116)) 
    \r_tlp_id_rply[4]_i_3__0 
       (.I0(out),
        .I1(p_0_in3_in),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(p_3_in),
        .I4(p_2_in),
        .I5(p_1_in),
        .O(\r_tlp_id_rply[4]_i_3__0_n_0 ));
  FDCE \r_tlp_id_rply_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[0]_i_1__0_n_0 ),
        .Q(o_rply_id[0]));
  FDCE \r_tlp_id_rply_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[1]_i_1__0_n_0 ),
        .Q(o_rply_id[1]));
  FDCE \r_tlp_id_rply_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[2]_i_1__0_n_0 ),
        .Q(o_rply_id[2]));
  FDCE \r_tlp_id_rply_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[3]_i_1__0_n_0 ),
        .Q(o_rply_id[3]));
  FDCE \r_tlp_id_rply_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_tlp_id_rply),
        .CLR(inst_local_reset_n_0),
        .D(\r_tlp_id_rply[4]_i_2__0_n_0 ),
        .Q(r_tlp_id_rply__0));
  LUT2 #(
    .INIT(4'h8)) 
    r_tlp_id_wait_ack_i_1__0
       (.I0(r_tlp_id_all_ack_i_2__0_n_0),
        .I1(r_tlp_id_all_ack_i_3__0_n_0),
        .O(ri_tlp_id_wait_ack));
  FDCE r_tlp_id_wait_ack_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_tlp_id_wait_ack),
        .Q(r_tlp_id_wait_ack_reg_n_0));
endmodule

module packet_generator_replay_buffer
   (out,
    \r_buffer_addr_reg[4]_0 ,
    \r_buffer_addr_reg[5]_0 ,
    \r_buffer_addr_reg[5]_1 ,
    r_rply_wr_reg,
    \r_buffer_addr_reg[3]_0 ,
    \r_buffer_addr_reg[2]_0 ,
    \r_buffer_addr_reg[1]_0 ,
    \r_buffer_addr_reg[0]_0 ,
    r_rply_wr_reg_0,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[0]_1 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[1]_1 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[2]_1 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[3]_1 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[4]_1 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[5]_1 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[6]_1 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    \r_kd_reg[7]_1 ,
    \r_buffer_addr_reg[0]_1 ,
    \r_buffer_addr_reg[0]_2 ,
    \r_buffer_addr_reg[6]_0 ,
    \r_buffer_addr_reg[0]_3 ,
    \r_buffer_addr_reg[0]_4 ,
    \r_buffer_addr_reg[3]_1 );
  output [7:0]out;
  output \r_buffer_addr_reg[4]_0 ;
  output \r_buffer_addr_reg[5]_0 ;
  output \r_buffer_addr_reg[5]_1 ;
  output r_rply_wr_reg;
  output \r_buffer_addr_reg[3]_0 ;
  output \r_buffer_addr_reg[2]_0 ;
  output \r_buffer_addr_reg[1]_0 ;
  output \r_buffer_addr_reg[0]_0 ;
  output r_rply_wr_reg_0;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[0]_1 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[1]_1 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[2]_1 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[3]_1 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[4]_1 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[5]_1 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[6]_1 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input \r_kd_reg[7]_1 ;
  input \r_buffer_addr_reg[0]_1 ;
  input \r_buffer_addr_reg[0]_2 ;
  input \r_buffer_addr_reg[6]_0 ;
  input \r_buffer_addr_reg[0]_3 ;
  input \r_buffer_addr_reg[0]_4 ;
  input [3:0]\r_buffer_addr_reg[3]_1 ;

  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_buffer_addr[2]_i_2_n_0 ;
  wire \r_buffer_addr[3]_i_2_n_0 ;
  wire \r_buffer_addr[4]_i_2_n_0 ;
  wire \r_buffer_addr[5]_i_2_n_0 ;
  wire \r_buffer_addr[6]_i_1_n_0 ;
  wire \r_buffer_addr[6]_i_3_n_0 ;
  wire \r_buffer_addr[6]_i_4_n_0 ;
  wire \r_buffer_addr_reg[0]_0 ;
  wire \r_buffer_addr_reg[0]_1 ;
  wire \r_buffer_addr_reg[0]_2 ;
  wire \r_buffer_addr_reg[0]_3 ;
  wire \r_buffer_addr_reg[0]_4 ;
  wire \r_buffer_addr_reg[1]_0 ;
  wire \r_buffer_addr_reg[2]_0 ;
  wire \r_buffer_addr_reg[3]_0 ;
  wire [3:0]\r_buffer_addr_reg[3]_1 ;
  wire \r_buffer_addr_reg[4]_0 ;
  wire \r_buffer_addr_reg[5]_0 ;
  wire \r_buffer_addr_reg[5]_1 ;
  wire \r_buffer_addr_reg[6]_0 ;
  wire \r_buffer_addr_reg_n_0_[6] ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[0]_1 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[1]_1 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[2]_1 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[3]_1 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[4]_1 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[5]_1 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[6]_1 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire \r_kd_reg[7]_1 ;
  wire r_rply_wr_reg;
  wire r_rply_wr_reg_0;
  wire [6:0]ri_buffer_addr;

  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_1 
       (.I0(\r_kd_reg[7] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[7]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[7]_1 ),
        .O(out[7]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_2 
       (.I0(\r_kd_reg[6] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[6]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[6]_1 ),
        .O(out[6]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_3 
       (.I0(\r_kd_reg[5] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[5]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[5]_1 ),
        .O(out[5]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_4 
       (.I0(\r_kd_reg[4] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[4]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[4]_1 ),
        .O(out[4]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_5 
       (.I0(\r_kd_reg[3] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[3]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[3]_1 ),
        .O(out[3]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_6 
       (.I0(\r_kd_reg[2] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[2]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[2]_1 ),
        .O(out[2]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_7 
       (.I0(\r_kd_reg[1] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[1]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[1]_1 ),
        .O(out[1]));
  LUT6 #(
    .INIT(64'h2F20FFFF2F200000)) 
    \/o_byte_inferred_i_8 
       (.I0(\r_kd_reg[0] ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_kd_reg[0]_0 ),
        .I4(\r_buffer_addr_reg_n_0_[6] ),
        .I5(\r_kd_reg[0]_1 ),
        .O(out[0]));
  LUT4 #(
    .INIT(16'h2000)) 
    \/replay_buffer_reg_0_15_0_0_i_1 
       (.I0(\r_buffer_addr_reg[0]_1 ),
        .I1(\r_buffer_addr_reg[4]_0 ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .O(r_rply_wr_reg));
  LUT3 #(
    .INIT(8'h40)) 
    \/replay_buffer_reg_0_31_0_0_i_1 
       (.I0(\r_buffer_addr_reg[5]_0 ),
        .I1(\r_buffer_addr_reg_n_0_[6] ),
        .I2(\r_buffer_addr_reg[0]_1 ),
        .O(\r_buffer_addr_reg[5]_1 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hA3)) 
    \r_buffer_addr[0]_i_1 
       (.I0(\r_buffer_addr_reg[3]_1 [0]),
        .I1(\r_buffer_addr_reg[0]_0 ),
        .I2(\r_buffer_addr_reg[0]_3 ),
        .O(ri_buffer_addr[0]));
  (* \PinAttr:I3:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT5 #(
    .INIT(32'h606F6F60)) 
    \r_buffer_addr[1]_i_1 
       (.I0(\r_buffer_addr_reg[3]_1 [0]),
        .I1(\r_buffer_addr_reg[3]_1 [1]),
        .I2(\r_buffer_addr_reg[0]_3 ),
        .I3(\r_buffer_addr_reg[0]_0 ),
        .I4(\r_buffer_addr_reg[1]_0 ),
        .O(ri_buffer_addr[1]));
  LUT6 #(
    .INIT(64'h560056FF56FF5600)) 
    \r_buffer_addr[2]_i_1 
       (.I0(\r_buffer_addr_reg[3]_1 [2]),
        .I1(\r_buffer_addr_reg[3]_1 [1]),
        .I2(\r_buffer_addr_reg[3]_1 [0]),
        .I3(\r_buffer_addr_reg[0]_3 ),
        .I4(\r_buffer_addr_reg[2]_0 ),
        .I5(\r_buffer_addr[2]_i_2_n_0 ),
        .O(ri_buffer_addr[2]));
  LUT2 #(
    .INIT(4'h8)) 
    \r_buffer_addr[2]_i_2 
       (.I0(\r_buffer_addr_reg[0]_0 ),
        .I1(\r_buffer_addr_reg[1]_0 ),
        .O(\r_buffer_addr[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hA900A9FFA9FFA900)) 
    \r_buffer_addr[3]_i_1 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr[6]_i_3_n_0 ),
        .I2(\r_buffer_addr_reg[3]_1 [0]),
        .I3(\r_buffer_addr_reg[0]_3 ),
        .I4(\r_buffer_addr_reg[3]_0 ),
        .I5(\r_buffer_addr[3]_i_2_n_0 ),
        .O(ri_buffer_addr[3]));
  LUT3 #(
    .INIT(8'h80)) 
    \r_buffer_addr[3]_i_2 
       (.I0(\r_buffer_addr_reg[2]_0 ),
        .I1(\r_buffer_addr_reg[1]_0 ),
        .I2(\r_buffer_addr_reg[0]_0 ),
        .O(\r_buffer_addr[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h3938FFFF39380000)) 
    \r_buffer_addr[4]_i_1 
       (.I0(\r_buffer_addr_reg[3]_1 [0]),
        .I1(\r_buffer_addr_reg[3]_1 [1]),
        .I2(\r_buffer_addr_reg[3]_1 [3]),
        .I3(\r_buffer_addr_reg[3]_1 [2]),
        .I4(\r_buffer_addr_reg[0]_3 ),
        .I5(\r_buffer_addr[4]_i_2_n_0 ),
        .O(ri_buffer_addr[4]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \r_buffer_addr[4]_i_2 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_buffer_addr_reg[2]_0 ),
        .I2(\r_buffer_addr_reg[1]_0 ),
        .I3(\r_buffer_addr_reg[0]_0 ),
        .I4(\r_buffer_addr_reg[3]_0 ),
        .O(\r_buffer_addr[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hC6C2FFFFC6C20000)) 
    \r_buffer_addr[5]_i_1 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr_reg[3]_1 [2]),
        .I2(\r_buffer_addr_reg[3]_1 [1]),
        .I3(\r_buffer_addr_reg[3]_1 [0]),
        .I4(\r_buffer_addr_reg[0]_3 ),
        .I5(\r_buffer_addr[5]_i_2_n_0 ),
        .O(ri_buffer_addr[5]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_buffer_addr[5]_i_2 
       (.I0(\r_buffer_addr_reg[5]_0 ),
        .I1(\r_buffer_addr_reg[3]_0 ),
        .I2(\r_buffer_addr_reg[0]_0 ),
        .I3(\r_buffer_addr_reg[1]_0 ),
        .I4(\r_buffer_addr_reg[2]_0 ),
        .I5(\r_buffer_addr_reg[4]_0 ),
        .O(\r_buffer_addr[5]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_buffer_addr[6]_i_1 
       (.I0(\r_buffer_addr_reg[0]_3 ),
        .I1(\r_buffer_addr_reg[0]_1 ),
        .I2(\r_buffer_addr_reg[0]_4 ),
        .O(\r_buffer_addr[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h202F2F202F202F20)) 
    \r_buffer_addr[6]_i_2 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr[6]_i_3_n_0 ),
        .I2(\r_buffer_addr_reg[0]_3 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_buffer_addr[6]_i_4_n_0 ),
        .I5(\r_buffer_addr_reg[5]_0 ),
        .O(ri_buffer_addr[6]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_buffer_addr[6]_i_3 
       (.I0(\r_buffer_addr_reg[3]_1 [2]),
        .I1(\r_buffer_addr_reg[3]_1 [1]),
        .O(\r_buffer_addr[6]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_buffer_addr[6]_i_4 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_buffer_addr_reg[2]_0 ),
        .I2(\r_buffer_addr_reg[1]_0 ),
        .I3(\r_buffer_addr_reg[0]_0 ),
        .I4(\r_buffer_addr_reg[3]_0 ),
        .O(\r_buffer_addr[6]_i_4_n_0 ));
  FDCE \r_buffer_addr_reg[0] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[0]),
        .Q(\r_buffer_addr_reg[0]_0 ));
  FDCE \r_buffer_addr_reg[1] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[1]),
        .Q(\r_buffer_addr_reg[1]_0 ));
  FDCE \r_buffer_addr_reg[2] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[2]),
        .Q(\r_buffer_addr_reg[2]_0 ));
  FDCE \r_buffer_addr_reg[3] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[3]),
        .Q(\r_buffer_addr_reg[3]_0 ));
  FDCE \r_buffer_addr_reg[4] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[4]),
        .Q(\r_buffer_addr_reg[4]_0 ));
  FDCE \r_buffer_addr_reg[5] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[5]),
        .Q(\r_buffer_addr_reg[5]_0 ));
  FDCE \r_buffer_addr_reg[6] 
       (.C(\r_buffer_addr_reg[0]_2 ),
        .CE(\r_buffer_addr[6]_i_1_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_0 ),
        .D(ri_buffer_addr[6]),
        .Q(\r_buffer_addr_reg_n_0_[6] ));
  LUT2 #(
    .INIT(4'h2)) 
    replay_buffer_reg_0_63_0_0_i_1
       (.I0(\r_buffer_addr_reg[0]_1 ),
        .I1(\r_buffer_addr_reg_n_0_[6] ),
        .O(r_rply_wr_reg_0));
endmodule

(* ORIG_REF_NAME = "packet_generator_replay_buffer" *) 
module packet_generator_replay_buffer__parameterized0
   (out,
    \r_buffer_addr_reg[4]_0 ,
    \r_buffer_addr_reg[5]_0 ,
    \r_buffer_addr_reg[4]_1 ,
    \r_buffer_addr_reg[3]_0 ,
    \r_buffer_addr_reg[2]_0 ,
    \r_buffer_addr_reg[1]_0 ,
    \r_buffer_addr_reg[0]_0 ,
    r_rply_wr_reg,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    \r_buffer_addr_reg[0]_1 ,
    \r_buffer_addr_reg[6]_0 ,
    \r_buffer_addr_reg[6]_1 ,
    \r_buffer_addr_reg[3]_1 ,
    \r_buffer_addr_reg[0]_2 ,
    \r_buffer_addr_reg[0]_3 );
  output [7:0]out;
  output \r_buffer_addr_reg[4]_0 ;
  output \r_buffer_addr_reg[5]_0 ;
  output \r_buffer_addr_reg[4]_1 ;
  output \r_buffer_addr_reg[3]_0 ;
  output \r_buffer_addr_reg[2]_0 ;
  output \r_buffer_addr_reg[1]_0 ;
  output \r_buffer_addr_reg[0]_0 ;
  output r_rply_wr_reg;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input \r_buffer_addr_reg[0]_1 ;
  input \r_buffer_addr_reg[6]_0 ;
  input \r_buffer_addr_reg[6]_1 ;
  input [3:0]\r_buffer_addr_reg[3]_1 ;
  input \r_buffer_addr_reg[0]_2 ;
  input \r_buffer_addr_reg[0]_3 ;

  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_buffer_addr[3]_i_2__0_n_0 ;
  wire \r_buffer_addr[4]_i_2__0_n_0 ;
  wire \r_buffer_addr[5]_i_2__0_n_0 ;
  wire \r_buffer_addr[6]_i_1__0_n_0 ;
  wire \r_buffer_addr[6]_i_3__0_n_0 ;
  wire \r_buffer_addr[6]_i_4__0_n_0 ;
  wire \r_buffer_addr_reg[0]_0 ;
  wire \r_buffer_addr_reg[0]_1 ;
  wire \r_buffer_addr_reg[0]_2 ;
  wire \r_buffer_addr_reg[0]_3 ;
  wire \r_buffer_addr_reg[1]_0 ;
  wire \r_buffer_addr_reg[2]_0 ;
  wire \r_buffer_addr_reg[3]_0 ;
  wire [3:0]\r_buffer_addr_reg[3]_1 ;
  wire \r_buffer_addr_reg[4]_0 ;
  wire \r_buffer_addr_reg[4]_1 ;
  wire \r_buffer_addr_reg[5]_0 ;
  wire \r_buffer_addr_reg[6]_0 ;
  wire \r_buffer_addr_reg[6]_1 ;
  wire \r_buffer_addr_reg_n_0_[6] ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire r_rply_wr_reg;
  wire [6:0]ri_buffer_addr;

  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_1 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[7] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[7]_0 ),
        .O(out[7]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_2 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[6] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[6]_0 ),
        .O(out[6]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_3 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[5] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[5]_0 ),
        .O(out[5]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_4 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[4] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[4]_0 ),
        .O(out[4]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_5 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[3] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[3]_0 ),
        .O(out[3]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_6 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[2] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[2]_0 ),
        .O(out[2]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_7 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[1] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[1]_0 ),
        .O(out[1]));
  LUT5 #(
    .INIT(32'h04FF0400)) 
    \/o_byte_inferred_i_8 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_kd_reg[0] ),
        .I2(\r_buffer_addr_reg[5]_0 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_kd_reg[0]_0 ),
        .O(out[0]));
  LUT4 #(
    .INIT(16'h1000)) 
    \/replay_buffer_reg_0_15_0_0__7_i_1 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_buffer_addr_reg[5]_0 ),
        .I2(\r_buffer_addr_reg_n_0_[6] ),
        .I3(\r_buffer_addr_reg[0]_1 ),
        .O(\r_buffer_addr_reg[4]_1 ));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT3 #(
    .INIT(8'hA3)) 
    \r_buffer_addr[0]_i_1__0 
       (.I0(\r_buffer_addr_reg[3]_1 [0]),
        .I1(\r_buffer_addr_reg[0]_0 ),
        .I2(\r_buffer_addr_reg[0]_2 ),
        .O(ri_buffer_addr[0]));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT4 #(
    .INIT(16'h8BB8)) 
    \r_buffer_addr[1]_i_1__0 
       (.I0(\r_buffer_addr_reg[3]_1 [1]),
        .I1(\r_buffer_addr_reg[0]_2 ),
        .I2(\r_buffer_addr_reg[0]_0 ),
        .I3(\r_buffer_addr_reg[1]_0 ),
        .O(ri_buffer_addr[1]));
  LUT6 #(
    .INIT(64'h606F6F606F606F60)) 
    \r_buffer_addr[2]_i_1__0 
       (.I0(\r_buffer_addr_reg[3]_1 [0]),
        .I1(\r_buffer_addr_reg[3]_1 [2]),
        .I2(\r_buffer_addr_reg[0]_2 ),
        .I3(\r_buffer_addr_reg[2]_0 ),
        .I4(\r_buffer_addr_reg[1]_0 ),
        .I5(\r_buffer_addr_reg[0]_0 ),
        .O(ri_buffer_addr[2]));
  LUT6 #(
    .INIT(64'h9666FFFF96660000)) 
    \r_buffer_addr[3]_i_1__0 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr_reg[3]_1 [1]),
        .I2(\r_buffer_addr_reg[3]_1 [2]),
        .I3(\r_buffer_addr_reg[3]_1 [0]),
        .I4(\r_buffer_addr_reg[0]_2 ),
        .I5(\r_buffer_addr[3]_i_2__0_n_0 ),
        .O(ri_buffer_addr[3]));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_buffer_addr[3]_i_2__0 
       (.I0(\r_buffer_addr_reg[3]_0 ),
        .I1(\r_buffer_addr_reg[0]_0 ),
        .I2(\r_buffer_addr_reg[1]_0 ),
        .I3(\r_buffer_addr_reg[2]_0 ),
        .O(\r_buffer_addr[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h1788FFFF17880000)) 
    \r_buffer_addr[4]_i_1__0 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr_reg[3]_1 [1]),
        .I2(\r_buffer_addr_reg[3]_1 [0]),
        .I3(\r_buffer_addr_reg[3]_1 [2]),
        .I4(\r_buffer_addr_reg[0]_2 ),
        .I5(\r_buffer_addr[4]_i_2__0_n_0 ),
        .O(ri_buffer_addr[4]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \r_buffer_addr[4]_i_2__0 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_buffer_addr_reg[2]_0 ),
        .I2(\r_buffer_addr_reg[1]_0 ),
        .I3(\r_buffer_addr_reg[0]_0 ),
        .I4(\r_buffer_addr_reg[3]_0 ),
        .O(\r_buffer_addr[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h622AFFFF622A0000)) 
    \r_buffer_addr[5]_i_1__0 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr_reg[3]_1 [2]),
        .I2(\r_buffer_addr_reg[3]_1 [1]),
        .I3(\r_buffer_addr_reg[3]_1 [0]),
        .I4(\r_buffer_addr_reg[0]_2 ),
        .I5(\r_buffer_addr[5]_i_2__0_n_0 ),
        .O(ri_buffer_addr[5]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_buffer_addr[5]_i_2__0 
       (.I0(\r_buffer_addr_reg[5]_0 ),
        .I1(\r_buffer_addr_reg[3]_0 ),
        .I2(\r_buffer_addr_reg[0]_0 ),
        .I3(\r_buffer_addr_reg[1]_0 ),
        .I4(\r_buffer_addr_reg[2]_0 ),
        .I5(\r_buffer_addr_reg[4]_0 ),
        .O(\r_buffer_addr[5]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_buffer_addr[6]_i_1__0 
       (.I0(\r_buffer_addr_reg[0]_2 ),
        .I1(\r_buffer_addr_reg[0]_1 ),
        .I2(\r_buffer_addr_reg[0]_3 ),
        .O(\r_buffer_addr[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h202F2F202F202F20)) 
    \r_buffer_addr[6]_i_2__0 
       (.I0(\r_buffer_addr_reg[3]_1 [3]),
        .I1(\r_buffer_addr[6]_i_3__0_n_0 ),
        .I2(\r_buffer_addr_reg[0]_2 ),
        .I3(\r_buffer_addr_reg_n_0_[6] ),
        .I4(\r_buffer_addr[6]_i_4__0_n_0 ),
        .I5(\r_buffer_addr_reg[5]_0 ),
        .O(ri_buffer_addr[6]));
  LUT3 #(
    .INIT(8'h1F)) 
    \r_buffer_addr[6]_i_3__0 
       (.I0(\r_buffer_addr_reg[3]_1 [1]),
        .I1(\r_buffer_addr_reg[3]_1 [0]),
        .I2(\r_buffer_addr_reg[3]_1 [2]),
        .O(\r_buffer_addr[6]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_buffer_addr[6]_i_4__0 
       (.I0(\r_buffer_addr_reg[4]_0 ),
        .I1(\r_buffer_addr_reg[2]_0 ),
        .I2(\r_buffer_addr_reg[1]_0 ),
        .I3(\r_buffer_addr_reg[0]_0 ),
        .I4(\r_buffer_addr_reg[3]_0 ),
        .O(\r_buffer_addr[6]_i_4__0_n_0 ));
  FDCE \r_buffer_addr_reg[0] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[0]),
        .Q(\r_buffer_addr_reg[0]_0 ));
  FDCE \r_buffer_addr_reg[1] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[1]),
        .Q(\r_buffer_addr_reg[1]_0 ));
  FDCE \r_buffer_addr_reg[2] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[2]),
        .Q(\r_buffer_addr_reg[2]_0 ));
  FDCE \r_buffer_addr_reg[3] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[3]),
        .Q(\r_buffer_addr_reg[3]_0 ));
  FDCE \r_buffer_addr_reg[4] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[4]),
        .Q(\r_buffer_addr_reg[4]_0 ));
  FDCE \r_buffer_addr_reg[5] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[5]),
        .Q(\r_buffer_addr_reg[5]_0 ));
  FDCE \r_buffer_addr_reg[6] 
       (.C(\r_buffer_addr_reg[6]_0 ),
        .CE(\r_buffer_addr[6]_i_1__0_n_0 ),
        .CLR(\r_buffer_addr_reg[6]_1 ),
        .D(ri_buffer_addr[6]),
        .Q(\r_buffer_addr_reg_n_0_[6] ));
  LUT2 #(
    .INIT(4'h2)) 
    replay_buffer_reg_0_63_0_0__7_i_1
       (.I0(\r_buffer_addr_reg[0]_1 ),
        .I1(\r_buffer_addr_reg_n_0_[6] ),
        .O(r_rply_wr_reg));
endmodule

module packet_generator_shift_out
   (out,
    D,
    \r_mux_stage_reg[6][7]_0 ,
    \r_mux_stage_reg[7][7]_0 ,
    \r_mux_stage_reg[1][0]_0 ,
    \r_mux_stage_reg[7][7]_1 ,
    \r_mux_stage_reg[6][0]_0 );
  output [7:0]out;
  input [7:0]D;
  input \r_mux_stage_reg[6][7]_0 ;
  input [55:0]\r_mux_stage_reg[7][7]_0 ;
  input \r_mux_stage_reg[1][0]_0 ;
  input [15:0]\r_mux_stage_reg[7][7]_1 ;
  input \r_mux_stage_reg[6][0]_0 ;

  wire [7:0]D;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire [7:0]\r_mux_stage_reg[0]_0 ;
  wire \r_mux_stage_reg[1][0]_0 ;
  wire [7:0]\r_mux_stage_reg[1]_1 ;
  wire [7:0]\r_mux_stage_reg[2]_2 ;
  wire [7:0]\r_mux_stage_reg[3]_3 ;
  wire [7:0]\r_mux_stage_reg[4]_4 ;
  wire [7:0]\r_mux_stage_reg[5]_5 ;
  wire \r_mux_stage_reg[6][0]_0 ;
  wire \r_mux_stage_reg[6][7]_0 ;
  wire [7:0]\r_mux_stage_reg[6]_6 ;
  wire [55:0]\r_mux_stage_reg[7][7]_0 ;
  wire [15:0]\r_mux_stage_reg[7][7]_1 ;
  wire [7:0]\ri_mux_stage[1]_7 ;
  wire [7:0]\ri_mux_stage[2]_8 ;
  wire [7:0]\ri_mux_stage[3]_9 ;
  wire [7:0]\ri_mux_stage[4]_10 ;
  wire [7:0]\ri_mux_stage[5]_11 ;
  wire [7:0]\ri_mux_stage[6]_12 ;
  wire [7:0]\ri_mux_stage[7]_13 ;

  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [0]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [0]),
        .O(\ri_mux_stage[1]_7 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [1]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [1]),
        .O(\ri_mux_stage[1]_7 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [2]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [2]),
        .O(\ri_mux_stage[1]_7 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [3]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [3]),
        .O(\ri_mux_stage[1]_7 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [4]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [4]),
        .O(\ri_mux_stage[1]_7 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [5]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [5]),
        .O(\ri_mux_stage[1]_7 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [6]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [6]),
        .O(\ri_mux_stage[1]_7 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [7]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [7]),
        .O(\ri_mux_stage[1]_7 [7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [8]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [0]),
        .O(\ri_mux_stage[2]_8 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [9]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [1]),
        .O(\ri_mux_stage[2]_8 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [10]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [2]),
        .O(\ri_mux_stage[2]_8 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [11]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [3]),
        .O(\ri_mux_stage[2]_8 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [12]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [4]),
        .O(\ri_mux_stage[2]_8 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [13]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [5]),
        .O(\ri_mux_stage[2]_8 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [14]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [6]),
        .O(\ri_mux_stage[2]_8 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [15]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [7]),
        .O(\ri_mux_stage[2]_8 [7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [16]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [0]),
        .O(\ri_mux_stage[3]_9 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [17]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [1]),
        .O(\ri_mux_stage[3]_9 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [18]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [2]),
        .O(\ri_mux_stage[3]_9 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [19]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [3]),
        .O(\ri_mux_stage[3]_9 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [20]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [4]),
        .O(\ri_mux_stage[3]_9 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [21]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [5]),
        .O(\ri_mux_stage[3]_9 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [22]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [6]),
        .O(\ri_mux_stage[3]_9 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [23]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [7]),
        .O(\ri_mux_stage[3]_9 [7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [24]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [0]),
        .O(\ri_mux_stage[4]_10 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [25]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [1]),
        .O(\ri_mux_stage[4]_10 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [26]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [2]),
        .O(\ri_mux_stage[4]_10 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [27]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [3]),
        .O(\ri_mux_stage[4]_10 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [28]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [4]),
        .O(\ri_mux_stage[4]_10 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [29]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [5]),
        .O(\ri_mux_stage[4]_10 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [30]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [6]),
        .O(\ri_mux_stage[4]_10 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[4][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [31]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[3]_3 [7]),
        .O(\ri_mux_stage[4]_10 [7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [32]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [0]),
        .O(\ri_mux_stage[5]_11 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [33]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [1]),
        .O(\ri_mux_stage[5]_11 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [34]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [2]),
        .O(\ri_mux_stage[5]_11 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [35]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [3]),
        .O(\ri_mux_stage[5]_11 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [36]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [4]),
        .O(\ri_mux_stage[5]_11 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [37]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [5]),
        .O(\ri_mux_stage[5]_11 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [38]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [6]),
        .O(\ri_mux_stage[5]_11 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[5][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_0 [39]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[4]_4 [7]),
        .O(\ri_mux_stage[5]_11 [7]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [0]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [40]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [0]),
        .O(\ri_mux_stage[6]_12 [0]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [1]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [41]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [1]),
        .O(\ri_mux_stage[6]_12 [1]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [2]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [42]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [2]),
        .O(\ri_mux_stage[6]_12 [2]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [3]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [43]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [3]),
        .O(\ri_mux_stage[6]_12 [3]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [4]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [44]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [4]),
        .O(\ri_mux_stage[6]_12 [4]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [5]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [45]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [5]),
        .O(\ri_mux_stage[6]_12 [5]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [6]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [46]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [6]),
        .O(\ri_mux_stage[6]_12 [6]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[6][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [7]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [47]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[5]_5 [7]),
        .O(\ri_mux_stage[6]_12 [7]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][0]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [8]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [48]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [0]),
        .O(\ri_mux_stage[7]_13 [0]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][1]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [9]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [49]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [1]),
        .O(\ri_mux_stage[7]_13 [1]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][2]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [10]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [50]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [2]),
        .O(\ri_mux_stage[7]_13 [2]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][3]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [11]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [51]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [3]),
        .O(\ri_mux_stage[7]_13 [3]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][4]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [12]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [52]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [4]),
        .O(\ri_mux_stage[7]_13 [4]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][5]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [13]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [53]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [5]),
        .O(\ri_mux_stage[7]_13 [5]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][6]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [14]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [54]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [6]),
        .O(\ri_mux_stage[7]_13 [6]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[7][7]_i_1 
       (.I0(\r_mux_stage_reg[7][7]_1 [15]),
        .I1(\r_mux_stage_reg[6][0]_0 ),
        .I2(\r_mux_stage_reg[7][7]_0 [55]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[6]_6 [7]),
        .O(\ri_mux_stage[7]_13 [7]));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[0]),
        .Q(\r_mux_stage_reg[0]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[1]),
        .Q(\r_mux_stage_reg[0]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[2]),
        .Q(\r_mux_stage_reg[0]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[3]),
        .Q(\r_mux_stage_reg[0]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[4]),
        .Q(\r_mux_stage_reg[0]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[5]),
        .Q(\r_mux_stage_reg[0]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[6]),
        .Q(\r_mux_stage_reg[0]_0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(D[7]),
        .Q(\r_mux_stage_reg[0]_0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [0]),
        .Q(\r_mux_stage_reg[1]_1 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [1]),
        .Q(\r_mux_stage_reg[1]_1 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [2]),
        .Q(\r_mux_stage_reg[1]_1 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [3]),
        .Q(\r_mux_stage_reg[1]_1 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [4]),
        .Q(\r_mux_stage_reg[1]_1 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [5]),
        .Q(\r_mux_stage_reg[1]_1 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [6]),
        .Q(\r_mux_stage_reg[1]_1 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_7 [7]),
        .Q(\r_mux_stage_reg[1]_1 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [0]),
        .Q(\r_mux_stage_reg[2]_2 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [1]),
        .Q(\r_mux_stage_reg[2]_2 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [2]),
        .Q(\r_mux_stage_reg[2]_2 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [3]),
        .Q(\r_mux_stage_reg[2]_2 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [4]),
        .Q(\r_mux_stage_reg[2]_2 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [5]),
        .Q(\r_mux_stage_reg[2]_2 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [6]),
        .Q(\r_mux_stage_reg[2]_2 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_8 [7]),
        .Q(\r_mux_stage_reg[2]_2 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [0]),
        .Q(\r_mux_stage_reg[3]_3 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [1]),
        .Q(\r_mux_stage_reg[3]_3 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [2]),
        .Q(\r_mux_stage_reg[3]_3 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [3]),
        .Q(\r_mux_stage_reg[3]_3 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [4]),
        .Q(\r_mux_stage_reg[3]_3 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [5]),
        .Q(\r_mux_stage_reg[3]_3 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [6]),
        .Q(\r_mux_stage_reg[3]_3 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_9 [7]),
        .Q(\r_mux_stage_reg[3]_3 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [0]),
        .Q(\r_mux_stage_reg[4]_4 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [1]),
        .Q(\r_mux_stage_reg[4]_4 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [2]),
        .Q(\r_mux_stage_reg[4]_4 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [3]),
        .Q(\r_mux_stage_reg[4]_4 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [4]),
        .Q(\r_mux_stage_reg[4]_4 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [5]),
        .Q(\r_mux_stage_reg[4]_4 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [6]),
        .Q(\r_mux_stage_reg[4]_4 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_10 [7]),
        .Q(\r_mux_stage_reg[4]_4 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [0]),
        .Q(\r_mux_stage_reg[5]_5 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [1]),
        .Q(\r_mux_stage_reg[5]_5 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [2]),
        .Q(\r_mux_stage_reg[5]_5 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [3]),
        .Q(\r_mux_stage_reg[5]_5 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [4]),
        .Q(\r_mux_stage_reg[5]_5 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [5]),
        .Q(\r_mux_stage_reg[5]_5 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [6]),
        .Q(\r_mux_stage_reg[5]_5 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_11 [7]),
        .Q(\r_mux_stage_reg[5]_5 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [0]),
        .Q(\r_mux_stage_reg[6]_6 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [1]),
        .Q(\r_mux_stage_reg[6]_6 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [2]),
        .Q(\r_mux_stage_reg[6]_6 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [3]),
        .Q(\r_mux_stage_reg[6]_6 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [4]),
        .Q(\r_mux_stage_reg[6]_6 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [5]),
        .Q(\r_mux_stage_reg[6]_6 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [6]),
        .Q(\r_mux_stage_reg[6]_6 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[6][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[6]_12 [7]),
        .Q(\r_mux_stage_reg[6]_6 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][0] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [0]),
        .Q(out[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][1] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [1]),
        .Q(out[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][2] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [2]),
        .Q(out[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][3] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [3]),
        .Q(out[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][4] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [4]),
        .Q(out[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][5] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [5]),
        .Q(out[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][6] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [6]),
        .Q(out[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[7][7] 
       (.C(\r_mux_stage_reg[6][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[7]_13 [7]),
        .Q(out[7]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "packet_generator_shift_out" *) 
module packet_generator_shift_out__parameterized0
   (out,
    D,
    \r_mux_stage_reg[5][7]_0 ,
    \r_mux_stage_reg[5][1]_0 ,
    \r_mux_stage_reg[1][0]_0 ,
    \r_mux_stage_reg[5][7]_1 ,
    \r_mux_stage_reg[4][0]_0 );
  output [7:0]out;
  input [7:0]D;
  input \r_mux_stage_reg[5][7]_0 ;
  input [33:0]\r_mux_stage_reg[5][1]_0 ;
  input \r_mux_stage_reg[1][0]_0 ;
  input [15:0]\r_mux_stage_reg[5][7]_1 ;
  input \r_mux_stage_reg[4][0]_0 ;

  wire [7:0]D;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire [7:0]\r_mux_stage_reg[0]_0 ;
  wire \r_mux_stage_reg[1][0]_0 ;
  wire [7:0]\r_mux_stage_reg[1]_1 ;
  wire [7:0]\r_mux_stage_reg[2]_2 ;
  wire [7:0]\r_mux_stage_reg[3]_3 ;
  wire \r_mux_stage_reg[4][0]_0 ;
  wire [7:0]\r_mux_stage_reg[4]_4 ;
  wire [33:0]\r_mux_stage_reg[5][1]_0 ;
  wire \r_mux_stage_reg[5][7]_0 ;
  wire [15:0]\r_mux_stage_reg[5][7]_1 ;
  wire [7:0]\ri_mux_stage[1]_5 ;
  wire [7:0]\ri_mux_stage[2]_6 ;
  wire [7:0]\ri_mux_stage[3]_7 ;
  wire [7:0]\ri_mux_stage[4]_8 ;
  wire [7:0]\ri_mux_stage[5]_9 ;

  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][0]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [0]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [0]),
        .O(\ri_mux_stage[1]_5 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][1]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [1]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [1]),
        .O(\ri_mux_stage[1]_5 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][2]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [2]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [2]),
        .O(\ri_mux_stage[1]_5 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][3]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [3]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [3]),
        .O(\ri_mux_stage[1]_5 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][4]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [4]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [4]),
        .O(\ri_mux_stage[1]_5 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][5]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [5]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [5]),
        .O(\ri_mux_stage[1]_5 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][6]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [6]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [6]),
        .O(\ri_mux_stage[1]_5 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[1][7]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [7]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[0]_0 [7]),
        .O(\ri_mux_stage[1]_5 [7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][0]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [8]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [0]),
        .O(\ri_mux_stage[2]_6 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][1]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [9]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [1]),
        .O(\ri_mux_stage[2]_6 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][2]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [10]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [2]),
        .O(\ri_mux_stage[2]_6 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][3]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [11]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [3]),
        .O(\ri_mux_stage[2]_6 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][4]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [12]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [4]),
        .O(\ri_mux_stage[2]_6 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][5]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [13]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [5]),
        .O(\ri_mux_stage[2]_6 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][6]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [14]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [6]),
        .O(\ri_mux_stage[2]_6 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[2][7]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [15]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[1]_1 [7]),
        .O(\ri_mux_stage[2]_6 [7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][0]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [16]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [0]),
        .O(\ri_mux_stage[3]_7 [0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][1]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [17]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [1]),
        .O(\ri_mux_stage[3]_7 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][2]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [18]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [2]),
        .O(\ri_mux_stage[3]_7 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][3]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [19]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [3]),
        .O(\ri_mux_stage[3]_7 [3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][4]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [20]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [4]),
        .O(\ri_mux_stage[3]_7 [4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][5]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [21]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [5]),
        .O(\ri_mux_stage[3]_7 [5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][6]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [22]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [6]),
        .O(\ri_mux_stage[3]_7 [6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_mux_stage[3][7]_i_1__0 
       (.I0(\r_mux_stage_reg[5][1]_0 [23]),
        .I1(\r_mux_stage_reg[1][0]_0 ),
        .I2(\r_mux_stage_reg[2]_2 [7]),
        .O(\ri_mux_stage[3]_7 [7]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][0]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [0]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [24]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [0]),
        .O(\ri_mux_stage[4]_8 [0]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][1]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [1]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [25]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [1]),
        .O(\ri_mux_stage[4]_8 [1]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][2]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [2]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [26]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [2]),
        .O(\ri_mux_stage[4]_8 [2]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][3]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [3]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [27]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [3]),
        .O(\ri_mux_stage[4]_8 [3]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][4]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [4]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [28]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [4]),
        .O(\ri_mux_stage[4]_8 [4]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][5]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [5]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [29]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [5]),
        .O(\ri_mux_stage[4]_8 [5]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][6]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [6]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [30]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [6]),
        .O(\ri_mux_stage[4]_8 [6]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[4][7]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [7]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [31]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[3]_3 [7]),
        .O(\ri_mux_stage[4]_8 [7]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[5][0]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [8]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [32]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[4]_4 [0]),
        .O(\ri_mux_stage[5]_9 [0]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \r_mux_stage[5][1]_i_1__0 
       (.I0(\r_mux_stage_reg[5][7]_1 [9]),
        .I1(\r_mux_stage_reg[4][0]_0 ),
        .I2(\r_mux_stage_reg[5][1]_0 [33]),
        .I3(\r_mux_stage_reg[1][0]_0 ),
        .I4(\r_mux_stage_reg[4]_4 [1]),
        .O(\ri_mux_stage[5]_9 [1]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \r_mux_stage[5][2]_i_1__0 
       (.I0(\r_mux_stage_reg[4][0]_0 ),
        .I1(\r_mux_stage_reg[5][7]_1 [10]),
        .I2(\r_mux_stage_reg[1][0]_0 ),
        .I3(\r_mux_stage_reg[4]_4 [2]),
        .O(\ri_mux_stage[5]_9 [2]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \r_mux_stage[5][3]_i_1__0 
       (.I0(\r_mux_stage_reg[4][0]_0 ),
        .I1(\r_mux_stage_reg[5][7]_1 [11]),
        .I2(\r_mux_stage_reg[1][0]_0 ),
        .I3(\r_mux_stage_reg[4]_4 [3]),
        .O(\ri_mux_stage[5]_9 [3]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \r_mux_stage[5][4]_i_1__0 
       (.I0(\r_mux_stage_reg[4][0]_0 ),
        .I1(\r_mux_stage_reg[5][7]_1 [12]),
        .I2(\r_mux_stage_reg[1][0]_0 ),
        .I3(\r_mux_stage_reg[4]_4 [4]),
        .O(\ri_mux_stage[5]_9 [4]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \r_mux_stage[5][5]_i_1__0 
       (.I0(\r_mux_stage_reg[4][0]_0 ),
        .I1(\r_mux_stage_reg[5][7]_1 [13]),
        .I2(\r_mux_stage_reg[1][0]_0 ),
        .I3(\r_mux_stage_reg[4]_4 [5]),
        .O(\ri_mux_stage[5]_9 [5]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \r_mux_stage[5][6]_i_1__0 
       (.I0(\r_mux_stage_reg[4][0]_0 ),
        .I1(\r_mux_stage_reg[5][7]_1 [14]),
        .I2(\r_mux_stage_reg[1][0]_0 ),
        .I3(\r_mux_stage_reg[4]_4 [6]),
        .O(\ri_mux_stage[5]_9 [6]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \r_mux_stage[5][7]_i_1__0 
       (.I0(\r_mux_stage_reg[4][0]_0 ),
        .I1(\r_mux_stage_reg[5][7]_1 [15]),
        .I2(\r_mux_stage_reg[1][0]_0 ),
        .I3(\r_mux_stage_reg[4]_4 [7]),
        .O(\ri_mux_stage[5]_9 [7]));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][0] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[0]),
        .Q(\r_mux_stage_reg[0]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][1] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[1]),
        .Q(\r_mux_stage_reg[0]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][2] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[2]),
        .Q(\r_mux_stage_reg[0]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][3] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[3]),
        .Q(\r_mux_stage_reg[0]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][4] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[4]),
        .Q(\r_mux_stage_reg[0]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][5] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[5]),
        .Q(\r_mux_stage_reg[0]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][6] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[6]),
        .Q(\r_mux_stage_reg[0]_0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[0][7] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(D[7]),
        .Q(\r_mux_stage_reg[0]_0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][0] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [0]),
        .Q(\r_mux_stage_reg[1]_1 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][1] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [1]),
        .Q(\r_mux_stage_reg[1]_1 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][2] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [2]),
        .Q(\r_mux_stage_reg[1]_1 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][3] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [3]),
        .Q(\r_mux_stage_reg[1]_1 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][4] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [4]),
        .Q(\r_mux_stage_reg[1]_1 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][5] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [5]),
        .Q(\r_mux_stage_reg[1]_1 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][6] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [6]),
        .Q(\r_mux_stage_reg[1]_1 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[1][7] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[1]_5 [7]),
        .Q(\r_mux_stage_reg[1]_1 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][0] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [0]),
        .Q(\r_mux_stage_reg[2]_2 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][1] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [1]),
        .Q(\r_mux_stage_reg[2]_2 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][2] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [2]),
        .Q(\r_mux_stage_reg[2]_2 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][3] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [3]),
        .Q(\r_mux_stage_reg[2]_2 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][4] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [4]),
        .Q(\r_mux_stage_reg[2]_2 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][5] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [5]),
        .Q(\r_mux_stage_reg[2]_2 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][6] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [6]),
        .Q(\r_mux_stage_reg[2]_2 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[2][7] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[2]_6 [7]),
        .Q(\r_mux_stage_reg[2]_2 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][0] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [0]),
        .Q(\r_mux_stage_reg[3]_3 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][1] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [1]),
        .Q(\r_mux_stage_reg[3]_3 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][2] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [2]),
        .Q(\r_mux_stage_reg[3]_3 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][3] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [3]),
        .Q(\r_mux_stage_reg[3]_3 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][4] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [4]),
        .Q(\r_mux_stage_reg[3]_3 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][5] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [5]),
        .Q(\r_mux_stage_reg[3]_3 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][6] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [6]),
        .Q(\r_mux_stage_reg[3]_3 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[3][7] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[3]_7 [7]),
        .Q(\r_mux_stage_reg[3]_3 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][0] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [0]),
        .Q(\r_mux_stage_reg[4]_4 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][1] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [1]),
        .Q(\r_mux_stage_reg[4]_4 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][2] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [2]),
        .Q(\r_mux_stage_reg[4]_4 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][3] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [3]),
        .Q(\r_mux_stage_reg[4]_4 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][4] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [4]),
        .Q(\r_mux_stage_reg[4]_4 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][5] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [5]),
        .Q(\r_mux_stage_reg[4]_4 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][6] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [6]),
        .Q(\r_mux_stage_reg[4]_4 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[4][7] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[4]_8 [7]),
        .Q(\r_mux_stage_reg[4]_4 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][0] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [0]),
        .Q(out[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][1] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [1]),
        .Q(out[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][2] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [2]),
        .Q(out[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][3] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [3]),
        .Q(out[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][4] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [4]),
        .Q(out[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][5] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [5]),
        .Q(out[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][6] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [6]),
        .Q(out[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \r_mux_stage_reg[5][7] 
       (.C(\r_mux_stage_reg[5][7]_0 ),
        .CE(1'b1),
        .D(\ri_mux_stage[5]_9 [7]),
        .Q(out[7]),
        .R(1'b0));
endmodule

module pc_interface_handler
   (out,
    o_pc_rd,
    o_pc_wr,
    o_bank_p,
    o_bank_p_wr,
    o_bank_c,
    o_bank_c_wr,
    o_bank_addr,
    \r_rst_reg[1] ,
    r_wr_bank_c_reg_0,
    r_wr_bank_p_reg_0,
    D,
    \r_pc_shift_out_reg[55]_0 ,
    \r_pc_shift_out_reg[55]_1 ,
    \r_state_reg[6]_0 ,
    \r_state_reg[8]_0 );
  output [7:0]out;
  output o_pc_rd;
  output o_pc_wr;
  output [55:0]o_bank_p;
  output o_bank_p_wr;
  output [15:0]o_bank_c;
  output o_bank_c_wr;
  output [2:0]o_bank_addr;
  output \r_rst_reg[1] ;
  input r_wr_bank_c_reg_0;
  input r_wr_bank_p_reg_0;
  input [7:0]D;
  input [15:0]\r_pc_shift_out_reg[55]_0 ;
  input [55:0]\r_pc_shift_out_reg[55]_1 ;
  input \r_state_reg[6]_0 ;
  input \r_state_reg[8]_0 ;

  wire [7:0]D;
  wire [55:8]in23;
  (* RTL_KEEP = "true" *) wire [2:0]o_bank_addr;
  (* RTL_KEEP = "true" *) wire [15:0]o_bank_c;
  (* RTL_KEEP = "true" *) wire o_bank_c_wr;
  (* RTL_KEEP = "true" *) wire [55:0]\^o_bank_p ;
  (* RTL_KEEP = "true" *) wire o_bank_p_wr;
  (* RTL_KEEP = "true" *) wire o_pc_rd;
  (* RTL_KEEP = "true" *) wire o_pc_wr;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_bank_addr[0]_i_1_n_0 ;
  wire \r_bank_addr[1]_i_1_n_0 ;
  wire \r_bank_addr[2]_i_1_n_0 ;
  wire \r_bank_addr[3]_i_2_n_0 ;
  wire \r_bank_addr[3]_i_3_n_0 ;
  wire [3:0]r_byte_cnt;
  wire \r_byte_cnt[0]_i_1_n_0 ;
  wire \r_byte_cnt[1]_i_1_n_0 ;
  wire \r_byte_cnt[2]_i_1_n_0 ;
  wire \r_byte_cnt[3]_i_2_n_0 ;
  wire \r_pc_shift_in[55]_i_2_n_0 ;
  wire \r_pc_shift_in[55]_i_3_n_0 ;
  wire \r_pc_shift_in[55]_i_4_n_0 ;
  wire \r_pc_shift_out[0]_i_1_n_0 ;
  wire \r_pc_shift_out[10]_i_1_n_0 ;
  wire \r_pc_shift_out[11]_i_1_n_0 ;
  wire \r_pc_shift_out[12]_i_1_n_0 ;
  wire \r_pc_shift_out[13]_i_1_n_0 ;
  wire \r_pc_shift_out[14]_i_1_n_0 ;
  wire \r_pc_shift_out[15]_i_1_n_0 ;
  wire \r_pc_shift_out[16]_i_1_n_0 ;
  wire \r_pc_shift_out[17]_i_1_n_0 ;
  wire \r_pc_shift_out[18]_i_1_n_0 ;
  wire \r_pc_shift_out[19]_i_1_n_0 ;
  wire \r_pc_shift_out[1]_i_1_n_0 ;
  wire \r_pc_shift_out[20]_i_1_n_0 ;
  wire \r_pc_shift_out[21]_i_1_n_0 ;
  wire \r_pc_shift_out[22]_i_1_n_0 ;
  wire \r_pc_shift_out[23]_i_1_n_0 ;
  wire \r_pc_shift_out[24]_i_1_n_0 ;
  wire \r_pc_shift_out[25]_i_1_n_0 ;
  wire \r_pc_shift_out[26]_i_1_n_0 ;
  wire \r_pc_shift_out[27]_i_1_n_0 ;
  wire \r_pc_shift_out[28]_i_1_n_0 ;
  wire \r_pc_shift_out[29]_i_1_n_0 ;
  wire \r_pc_shift_out[2]_i_1_n_0 ;
  wire \r_pc_shift_out[30]_i_1_n_0 ;
  wire \r_pc_shift_out[31]_i_1_n_0 ;
  wire \r_pc_shift_out[32]_i_1_n_0 ;
  wire \r_pc_shift_out[33]_i_1_n_0 ;
  wire \r_pc_shift_out[34]_i_1_n_0 ;
  wire \r_pc_shift_out[35]_i_1_n_0 ;
  wire \r_pc_shift_out[36]_i_1_n_0 ;
  wire \r_pc_shift_out[37]_i_1_n_0 ;
  wire \r_pc_shift_out[38]_i_1_n_0 ;
  wire \r_pc_shift_out[39]_i_1_n_0 ;
  wire \r_pc_shift_out[3]_i_1_n_0 ;
  wire \r_pc_shift_out[40]_i_1_n_0 ;
  wire \r_pc_shift_out[41]_i_1_n_0 ;
  wire \r_pc_shift_out[42]_i_1_n_0 ;
  wire \r_pc_shift_out[43]_i_1_n_0 ;
  wire \r_pc_shift_out[44]_i_1_n_0 ;
  wire \r_pc_shift_out[45]_i_1_n_0 ;
  wire \r_pc_shift_out[46]_i_1_n_0 ;
  wire \r_pc_shift_out[47]_i_1_n_0 ;
  wire \r_pc_shift_out[48]_i_1_n_0 ;
  wire \r_pc_shift_out[49]_i_1_n_0 ;
  wire \r_pc_shift_out[4]_i_1_n_0 ;
  wire \r_pc_shift_out[50]_i_1_n_0 ;
  wire \r_pc_shift_out[51]_i_1_n_0 ;
  wire \r_pc_shift_out[52]_i_1_n_0 ;
  wire \r_pc_shift_out[53]_i_1_n_0 ;
  wire \r_pc_shift_out[54]_i_1_n_0 ;
  wire \r_pc_shift_out[55]_i_2_n_0 ;
  wire \r_pc_shift_out[55]_i_3_n_0 ;
  wire \r_pc_shift_out[55]_i_4_n_0 ;
  wire \r_pc_shift_out[5]_i_1_n_0 ;
  wire \r_pc_shift_out[6]_i_1_n_0 ;
  wire \r_pc_shift_out[7]_i_1_n_0 ;
  wire \r_pc_shift_out[8]_i_1_n_0 ;
  wire \r_pc_shift_out[9]_i_1_n_0 ;
  wire [15:0]\r_pc_shift_out_reg[55]_0 ;
  wire [55:0]\r_pc_shift_out_reg[55]_1 ;
  wire \r_rst_reg[1] ;
  wire \r_rw_cmd[0]_i_1_n_0 ;
  wire \r_rw_cmd[1]_i_1_n_0 ;
  wire \r_rw_cmd_reg_n_0_[0] ;
  wire \r_state[0]_i_2__0_n_0 ;
  wire \r_state[0]_i_3__0_n_0 ;
  wire \r_state[0]_i_4__0_n_0 ;
  wire \r_state[10]_i_2_n_0 ;
  wire \r_state[10]_i_3_n_0 ;
  wire \r_state[10]_i_4_n_0 ;
  wire \r_state[10]_i_5_n_0 ;
  wire \r_state[10]_i_6_n_0 ;
  wire \r_state[10]_i_7_n_0 ;
  wire \r_state[10]_i_8_n_0 ;
  wire \r_state[2]_i_2__0_n_0 ;
  wire \r_state[5]_i_2__1_n_0 ;
  wire \r_state[6]_i_2_n_0 ;
  wire \r_state[6]_i_3_n_0 ;
  wire \r_state[7]_i_2_n_0 ;
  wire \r_state[8]_i_2__0_n_0 ;
  (* RTL_KEEP = "true" *) wire [10:0]r_state_reg;
  wire \r_state_reg[6]_0 ;
  wire \r_state_reg[8]_0 ;
  wire r_wr_bank_c_reg_0;
  wire r_wr_bank_p_reg_0;
  wire ri_bank_addr;
  wire ri_byte_cnt;
  wire ri_pc_shift_in;
  wire ri_pc_shift_out;
  wire ri_rw_cmd;
  wire [10:0]ri_state__0;
  wire ri_wr_bank_c;
  wire ri_wr_bank_p;
  wire sel_p_bank;
  wire wr_enable;

  assign o_bank_p[55:16] = \^o_bank_p [55:16];
  assign o_bank_p[15:0] = o_bank_c;
  LUT2 #(
    .INIT(4'hE)) 
    o_pc_rd_inferred_i_1
       (.I0(r_state_reg[1]),
        .I1(r_state_reg[7]),
        .O(o_pc_rd));
  LUT3 #(
    .INIT(8'h8B)) 
    \r_bank_addr[0]_i_1 
       (.I0(o_bank_c[0]),
        .I1(r_state_reg[1]),
        .I2(o_bank_addr[0]),
        .O(\r_bank_addr[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF606)) 
    \r_bank_addr[1]_i_1 
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(r_state_reg[1]),
        .I3(o_bank_c[1]),
        .O(\r_bank_addr[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF6A006A)) 
    \r_bank_addr[2]_i_1 
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_addr[0]),
        .I3(r_state_reg[1]),
        .I4(o_bank_c[2]),
        .O(\r_bank_addr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000228)) 
    \r_bank_addr[3]_i_1 
       (.I0(\r_bank_addr[3]_i_3_n_0 ),
        .I1(r_state_reg[9]),
        .I2(r_state_reg[10]),
        .I3(r_state_reg[1]),
        .I4(o_pc_wr),
        .I5(r_state_reg[7]),
        .O(ri_bank_addr));
  LUT6 #(
    .INIT(64'hFFFF6AAA00006AAA)) 
    \r_bank_addr[3]_i_2 
       (.I0(sel_p_bank),
        .I1(o_bank_addr[2]),
        .I2(o_bank_addr[0]),
        .I3(o_bank_addr[1]),
        .I4(r_state_reg[1]),
        .I5(o_bank_c[3]),
        .O(\r_bank_addr[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_bank_addr[3]_i_3 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[5]),
        .I2(r_state_reg[2]),
        .I3(r_state_reg[6]),
        .I4(r_state_reg[4]),
        .I5(r_state_reg[3]),
        .O(\r_bank_addr[3]_i_3_n_0 ));
  FDCE \r_bank_addr_reg[0] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_bank_addr),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[0]_i_1_n_0 ),
        .Q(o_bank_addr[0]));
  FDCE \r_bank_addr_reg[1] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_bank_addr),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[1]_i_1_n_0 ),
        .Q(o_bank_addr[1]));
  FDCE \r_bank_addr_reg[2] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_bank_addr),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[2]_i_1_n_0 ),
        .Q(o_bank_addr[2]));
  FDCE \r_bank_addr_reg[3] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_bank_addr),
        .CLR(\r_rst_reg[1] ),
        .D(\r_bank_addr[3]_i_2_n_0 ),
        .Q(sel_p_bank));
  LUT4 #(
    .INIT(16'hFF54)) 
    \r_byte_cnt[0]_i_1 
       (.I0(r_byte_cnt[0]),
        .I1(r_state_reg[7]),
        .I2(o_pc_wr),
        .I3(r_state_reg[4]),
        .O(\r_byte_cnt[0]_i_1_n_0 ));
  (* \PinAttr:I3:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hBAAB)) 
    \r_byte_cnt[1]_i_1 
       (.I0(r_state_reg[3]),
        .I1(r_state_reg[4]),
        .I2(r_byte_cnt[0]),
        .I3(r_byte_cnt[1]),
        .O(\r_byte_cnt[1]_i_1_n_0 ));
  (* \PinAttr:I2:HOLD_DETOUR  = "192" *) 
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'hBBBAAAAB)) 
    \r_byte_cnt[2]_i_1 
       (.I0(r_state_reg[3]),
        .I1(r_state_reg[4]),
        .I2(r_byte_cnt[1]),
        .I3(r_byte_cnt[0]),
        .I4(r_byte_cnt[2]),
        .O(\r_byte_cnt[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF8)) 
    \r_byte_cnt[3]_i_1 
       (.I0(r_state_reg[7]),
        .I1(\r_pc_shift_in[55]_i_2_n_0 ),
        .I2(ri_pc_shift_out),
        .O(ri_byte_cnt));
  LUT6 #(
    .INIT(64'hFE01FE01FE010000)) 
    \r_byte_cnt[3]_i_2 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[1]),
        .I3(r_byte_cnt[3]),
        .I4(r_state_reg[7]),
        .I5(o_pc_wr),
        .O(\r_byte_cnt[3]_i_2_n_0 ));
  FDCE \r_byte_cnt_reg[0] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_byte_cnt),
        .CLR(\r_rst_reg[1] ),
        .D(\r_byte_cnt[0]_i_1_n_0 ),
        .Q(r_byte_cnt[0]));
  FDCE \r_byte_cnt_reg[1] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_byte_cnt),
        .CLR(\r_rst_reg[1] ),
        .D(\r_byte_cnt[1]_i_1_n_0 ),
        .Q(r_byte_cnt[1]));
  FDCE \r_byte_cnt_reg[2] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_byte_cnt),
        .CLR(\r_rst_reg[1] ),
        .D(\r_byte_cnt[2]_i_1_n_0 ),
        .Q(r_byte_cnt[2]));
  FDCE \r_byte_cnt_reg[3] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_byte_cnt),
        .CLR(\r_rst_reg[1] ),
        .D(\r_byte_cnt[3]_i_2_n_0 ),
        .Q(r_byte_cnt[3]));
  LUT6 #(
    .INIT(64'h8888888F88888888)) 
    \r_pc_shift_in[55]_i_1 
       (.I0(r_state_reg[7]),
        .I1(\r_pc_shift_in[55]_i_2_n_0 ),
        .I2(r_state_reg[10]),
        .I3(r_state_reg[9]),
        .I4(r_state_reg[1]),
        .I5(\r_pc_shift_in[55]_i_3_n_0 ),
        .O(ri_pc_shift_in));
  LUT5 #(
    .INIT(32'h00010000)) 
    \r_pc_shift_in[55]_i_2 
       (.I0(o_pc_wr),
        .I1(r_state_reg[10]),
        .I2(r_state_reg[9]),
        .I3(r_state_reg[1]),
        .I4(\r_bank_addr[3]_i_3_n_0 ),
        .O(\r_pc_shift_in[55]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \r_pc_shift_in[55]_i_3 
       (.I0(\r_pc_shift_in[55]_i_4_n_0 ),
        .I1(r_state_reg[2]),
        .I2(r_state_reg[6]),
        .I3(\r_state[6]_i_3_n_0 ),
        .I4(r_state_reg[0]),
        .I5(r_state_reg[5]),
        .O(\r_pc_shift_in[55]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_pc_shift_in[55]_i_4 
       (.I0(r_state_reg[7]),
        .I1(o_pc_wr),
        .O(\r_pc_shift_in[55]_i_4_n_0 ));
  FDCE \r_pc_shift_in_reg[0] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[0]),
        .Q(o_bank_c[0]));
  FDCE \r_pc_shift_in_reg[10] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[2]),
        .Q(o_bank_c[10]));
  FDCE \r_pc_shift_in_reg[11] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[3]),
        .Q(o_bank_c[11]));
  FDCE \r_pc_shift_in_reg[12] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[4]),
        .Q(o_bank_c[12]));
  FDCE \r_pc_shift_in_reg[13] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[5]),
        .Q(o_bank_c[13]));
  FDCE \r_pc_shift_in_reg[14] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[6]),
        .Q(o_bank_c[14]));
  FDCE \r_pc_shift_in_reg[15] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[7]),
        .Q(o_bank_c[15]));
  FDCE \r_pc_shift_in_reg[16] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[8]),
        .Q(\^o_bank_p [16]));
  FDCE \r_pc_shift_in_reg[17] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[9]),
        .Q(\^o_bank_p [17]));
  FDCE \r_pc_shift_in_reg[18] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[10]),
        .Q(\^o_bank_p [18]));
  FDCE \r_pc_shift_in_reg[19] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[11]),
        .Q(\^o_bank_p [19]));
  FDCE \r_pc_shift_in_reg[1] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[1]),
        .Q(o_bank_c[1]));
  FDCE \r_pc_shift_in_reg[20] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[12]),
        .Q(\^o_bank_p [20]));
  FDCE \r_pc_shift_in_reg[21] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[13]),
        .Q(\^o_bank_p [21]));
  FDCE \r_pc_shift_in_reg[22] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[14]),
        .Q(\^o_bank_p [22]));
  FDCE \r_pc_shift_in_reg[23] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[15]),
        .Q(\^o_bank_p [23]));
  FDCE \r_pc_shift_in_reg[24] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [16]),
        .Q(\^o_bank_p [24]));
  FDCE \r_pc_shift_in_reg[25] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [17]),
        .Q(\^o_bank_p [25]));
  FDCE \r_pc_shift_in_reg[26] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [18]),
        .Q(\^o_bank_p [26]));
  FDCE \r_pc_shift_in_reg[27] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [19]),
        .Q(\^o_bank_p [27]));
  FDCE \r_pc_shift_in_reg[28] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [20]),
        .Q(\^o_bank_p [28]));
  FDCE \r_pc_shift_in_reg[29] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [21]),
        .Q(\^o_bank_p [29]));
  FDCE \r_pc_shift_in_reg[2] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[2]),
        .Q(o_bank_c[2]));
  FDCE \r_pc_shift_in_reg[30] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [22]),
        .Q(\^o_bank_p [30]));
  FDCE \r_pc_shift_in_reg[31] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [23]),
        .Q(\^o_bank_p [31]));
  FDCE \r_pc_shift_in_reg[32] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [24]),
        .Q(\^o_bank_p [32]));
  FDCE \r_pc_shift_in_reg[33] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [25]),
        .Q(\^o_bank_p [33]));
  FDCE \r_pc_shift_in_reg[34] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [26]),
        .Q(\^o_bank_p [34]));
  FDCE \r_pc_shift_in_reg[35] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [27]),
        .Q(\^o_bank_p [35]));
  FDCE \r_pc_shift_in_reg[36] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [28]),
        .Q(\^o_bank_p [36]));
  FDCE \r_pc_shift_in_reg[37] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [29]),
        .Q(\^o_bank_p [37]));
  FDCE \r_pc_shift_in_reg[38] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [30]),
        .Q(\^o_bank_p [38]));
  FDCE \r_pc_shift_in_reg[39] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [31]),
        .Q(\^o_bank_p [39]));
  FDCE \r_pc_shift_in_reg[3] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[3]),
        .Q(o_bank_c[3]));
  FDCE \r_pc_shift_in_reg[40] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [32]),
        .Q(\^o_bank_p [40]));
  FDCE \r_pc_shift_in_reg[41] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [33]),
        .Q(\^o_bank_p [41]));
  FDCE \r_pc_shift_in_reg[42] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [34]),
        .Q(\^o_bank_p [42]));
  FDCE \r_pc_shift_in_reg[43] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [35]),
        .Q(\^o_bank_p [43]));
  FDCE \r_pc_shift_in_reg[44] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [36]),
        .Q(\^o_bank_p [44]));
  FDCE \r_pc_shift_in_reg[45] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [37]),
        .Q(\^o_bank_p [45]));
  FDCE \r_pc_shift_in_reg[46] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [38]),
        .Q(\^o_bank_p [46]));
  FDCE \r_pc_shift_in_reg[47] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [39]),
        .Q(\^o_bank_p [47]));
  FDCE \r_pc_shift_in_reg[48] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [40]),
        .Q(\^o_bank_p [48]));
  FDCE \r_pc_shift_in_reg[49] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [41]),
        .Q(\^o_bank_p [49]));
  FDCE \r_pc_shift_in_reg[4] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[4]),
        .Q(o_bank_c[4]));
  FDCE \r_pc_shift_in_reg[50] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [42]),
        .Q(\^o_bank_p [50]));
  FDCE \r_pc_shift_in_reg[51] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [43]),
        .Q(\^o_bank_p [51]));
  FDCE \r_pc_shift_in_reg[52] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [44]),
        .Q(\^o_bank_p [52]));
  FDCE \r_pc_shift_in_reg[53] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [45]),
        .Q(\^o_bank_p [53]));
  FDCE \r_pc_shift_in_reg[54] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [46]),
        .Q(\^o_bank_p [54]));
  FDCE \r_pc_shift_in_reg[55] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(\^o_bank_p [47]),
        .Q(\^o_bank_p [55]));
  FDCE \r_pc_shift_in_reg[5] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[5]),
        .Q(o_bank_c[5]));
  FDCE \r_pc_shift_in_reg[6] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[6]),
        .Q(o_bank_c[6]));
  FDCE \r_pc_shift_in_reg[7] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(D[7]),
        .Q(o_bank_c[7]));
  FDCE \r_pc_shift_in_reg[8] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[0]),
        .Q(o_bank_c[8]));
  FDCE \r_pc_shift_in_reg[9] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_in),
        .CLR(\r_rst_reg[1] ),
        .D(o_bank_c[1]),
        .Q(o_bank_c[9]));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[0]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [0]),
        .O(\r_pc_shift_out[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[10]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [10]),
        .I1(in23[10]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[10]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[11]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [11]),
        .I1(in23[11]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[11]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[12]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [12]),
        .I1(in23[12]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[12]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[13]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [13]),
        .I1(in23[13]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[13]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[14]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [14]),
        .I1(in23[14]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[15]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [15]),
        .I1(in23[15]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[15]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[16]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [16]),
        .I1(in23[16]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[16]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[17]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [17]),
        .I1(in23[17]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[17]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[18]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [18]),
        .I1(in23[18]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[18]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[19]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [19]),
        .I1(in23[19]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[19]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[1]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [1]),
        .O(\r_pc_shift_out[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[20]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [20]),
        .I1(in23[20]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[20]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[21]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [21]),
        .I1(in23[21]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[21]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[22]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [22]),
        .I1(in23[22]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[22]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[23]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [23]),
        .I1(in23[23]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[23]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[24]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [24]),
        .I1(in23[24]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[24]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[25]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [25]),
        .I1(in23[25]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[25]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[26]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [26]),
        .I1(in23[26]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[26]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[27]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [27]),
        .I1(in23[27]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[27]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[28]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [28]),
        .I1(in23[28]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[28]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[29]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [29]),
        .I1(in23[29]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[29]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[2]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [2]),
        .O(\r_pc_shift_out[2]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[30]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [30]),
        .I1(in23[30]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[30]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[31]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [31]),
        .I1(in23[31]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[31]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[32]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [32]),
        .I1(in23[32]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[32]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[33]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [33]),
        .I1(in23[33]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[33]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[34]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [34]),
        .I1(in23[34]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[34]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[35]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [35]),
        .I1(in23[35]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[35]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[36]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [36]),
        .I1(in23[36]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[36]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[37]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [37]),
        .I1(in23[37]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[37]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[38]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [38]),
        .I1(in23[38]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[38]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[39]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [39]),
        .I1(in23[39]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[39]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[3]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [3]),
        .O(\r_pc_shift_out[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[40]_i_1 
       (.I0(in23[40]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [0]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [40]),
        .O(\r_pc_shift_out[40]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[41]_i_1 
       (.I0(in23[41]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [1]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [41]),
        .O(\r_pc_shift_out[41]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[42]_i_1 
       (.I0(in23[42]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [2]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [42]),
        .O(\r_pc_shift_out[42]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[43]_i_1 
       (.I0(in23[43]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [3]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [43]),
        .O(\r_pc_shift_out[43]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[44]_i_1 
       (.I0(in23[44]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [4]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [44]),
        .O(\r_pc_shift_out[44]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[45]_i_1 
       (.I0(in23[45]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [5]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [45]),
        .O(\r_pc_shift_out[45]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[46]_i_1 
       (.I0(in23[46]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [6]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [46]),
        .O(\r_pc_shift_out[46]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[47]_i_1 
       (.I0(in23[47]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [7]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [47]),
        .O(\r_pc_shift_out[47]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[48]_i_1 
       (.I0(in23[48]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [8]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [48]),
        .O(\r_pc_shift_out[48]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[49]_i_1 
       (.I0(in23[49]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [9]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [49]),
        .O(\r_pc_shift_out[49]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[4]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [4]),
        .O(\r_pc_shift_out[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[50]_i_1 
       (.I0(in23[50]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [10]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [50]),
        .O(\r_pc_shift_out[50]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[51]_i_1 
       (.I0(in23[51]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [11]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [51]),
        .O(\r_pc_shift_out[51]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[52]_i_1 
       (.I0(in23[52]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [12]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [52]),
        .O(\r_pc_shift_out[52]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[53]_i_1 
       (.I0(in23[53]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [13]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [53]),
        .O(\r_pc_shift_out[53]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[54]_i_1 
       (.I0(in23[54]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [14]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [54]),
        .O(\r_pc_shift_out[54]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000800000880)) 
    \r_pc_shift_out[55]_i_1 
       (.I0(\r_pc_shift_out[55]_i_3_n_0 ),
        .I1(\r_pc_shift_out[55]_i_4_n_0 ),
        .I2(r_state_reg[3]),
        .I3(o_pc_wr),
        .I4(r_state_reg[7]),
        .I5(r_state_reg[4]),
        .O(ri_pc_shift_out));
  LUT5 #(
    .INIT(32'hFFE200E2)) 
    \r_pc_shift_out[55]_i_2 
       (.I0(in23[55]),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_0 [15]),
        .I3(r_state_reg[3]),
        .I4(\r_pc_shift_out_reg[55]_1 [55]),
        .O(\r_pc_shift_out[55]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_pc_shift_out[55]_i_3 
       (.I0(r_state_reg[6]),
        .I1(r_state_reg[2]),
        .I2(r_state_reg[5]),
        .I3(r_state_reg[0]),
        .O(\r_pc_shift_out[55]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_pc_shift_out[55]_i_4 
       (.I0(r_state_reg[10]),
        .I1(r_state_reg[9]),
        .I2(r_state_reg[1]),
        .O(\r_pc_shift_out[55]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[5]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [5]),
        .O(\r_pc_shift_out[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[6]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [6]),
        .O(\r_pc_shift_out[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \r_pc_shift_out[7]_i_1 
       (.I0(o_pc_wr),
        .I1(r_state_reg[4]),
        .I2(\r_pc_shift_out_reg[55]_1 [7]),
        .O(\r_pc_shift_out[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[8]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [8]),
        .I1(in23[8]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[8]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAAC0)) 
    \r_pc_shift_out[9]_i_1 
       (.I0(\r_pc_shift_out_reg[55]_1 [9]),
        .I1(in23[9]),
        .I2(o_pc_wr),
        .I3(r_state_reg[3]),
        .O(\r_pc_shift_out[9]_i_1_n_0 ));
  FDCE \r_pc_shift_out_reg[0] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[0]_i_1_n_0 ),
        .Q(in23[8]));
  FDCE \r_pc_shift_out_reg[10] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[10]_i_1_n_0 ),
        .Q(in23[18]));
  FDCE \r_pc_shift_out_reg[11] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[11]_i_1_n_0 ),
        .Q(in23[19]));
  FDCE \r_pc_shift_out_reg[12] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[12]_i_1_n_0 ),
        .Q(in23[20]));
  FDCE \r_pc_shift_out_reg[13] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[13]_i_1_n_0 ),
        .Q(in23[21]));
  FDCE \r_pc_shift_out_reg[14] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[14]_i_1_n_0 ),
        .Q(in23[22]));
  FDCE \r_pc_shift_out_reg[15] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[15]_i_1_n_0 ),
        .Q(in23[23]));
  FDCE \r_pc_shift_out_reg[16] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[16]_i_1_n_0 ),
        .Q(in23[24]));
  FDCE \r_pc_shift_out_reg[17] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[17]_i_1_n_0 ),
        .Q(in23[25]));
  FDCE \r_pc_shift_out_reg[18] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[18]_i_1_n_0 ),
        .Q(in23[26]));
  FDCE \r_pc_shift_out_reg[19] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[19]_i_1_n_0 ),
        .Q(in23[27]));
  FDCE \r_pc_shift_out_reg[1] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[1]_i_1_n_0 ),
        .Q(in23[9]));
  FDCE \r_pc_shift_out_reg[20] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[20]_i_1_n_0 ),
        .Q(in23[28]));
  FDCE \r_pc_shift_out_reg[21] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[21]_i_1_n_0 ),
        .Q(in23[29]));
  FDCE \r_pc_shift_out_reg[22] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[22]_i_1_n_0 ),
        .Q(in23[30]));
  FDCE \r_pc_shift_out_reg[23] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[23]_i_1_n_0 ),
        .Q(in23[31]));
  FDCE \r_pc_shift_out_reg[24] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[24]_i_1_n_0 ),
        .Q(in23[32]));
  FDCE \r_pc_shift_out_reg[25] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[25]_i_1_n_0 ),
        .Q(in23[33]));
  FDCE \r_pc_shift_out_reg[26] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[26]_i_1_n_0 ),
        .Q(in23[34]));
  FDCE \r_pc_shift_out_reg[27] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[27]_i_1_n_0 ),
        .Q(in23[35]));
  FDCE \r_pc_shift_out_reg[28] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[28]_i_1_n_0 ),
        .Q(in23[36]));
  FDCE \r_pc_shift_out_reg[29] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[29]_i_1_n_0 ),
        .Q(in23[37]));
  FDCE \r_pc_shift_out_reg[2] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[2]_i_1_n_0 ),
        .Q(in23[10]));
  FDCE \r_pc_shift_out_reg[30] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[30]_i_1_n_0 ),
        .Q(in23[38]));
  FDCE \r_pc_shift_out_reg[31] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[31]_i_1_n_0 ),
        .Q(in23[39]));
  FDCE \r_pc_shift_out_reg[32] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[32]_i_1_n_0 ),
        .Q(in23[40]));
  FDCE \r_pc_shift_out_reg[33] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[33]_i_1_n_0 ),
        .Q(in23[41]));
  FDCE \r_pc_shift_out_reg[34] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[34]_i_1_n_0 ),
        .Q(in23[42]));
  FDCE \r_pc_shift_out_reg[35] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[35]_i_1_n_0 ),
        .Q(in23[43]));
  FDCE \r_pc_shift_out_reg[36] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[36]_i_1_n_0 ),
        .Q(in23[44]));
  FDCE \r_pc_shift_out_reg[37] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[37]_i_1_n_0 ),
        .Q(in23[45]));
  FDCE \r_pc_shift_out_reg[38] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[38]_i_1_n_0 ),
        .Q(in23[46]));
  FDCE \r_pc_shift_out_reg[39] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[39]_i_1_n_0 ),
        .Q(in23[47]));
  FDCE \r_pc_shift_out_reg[3] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[3]_i_1_n_0 ),
        .Q(in23[11]));
  FDCE \r_pc_shift_out_reg[40] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[40]_i_1_n_0 ),
        .Q(in23[48]));
  FDCE \r_pc_shift_out_reg[41] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[41]_i_1_n_0 ),
        .Q(in23[49]));
  FDCE \r_pc_shift_out_reg[42] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[42]_i_1_n_0 ),
        .Q(in23[50]));
  FDCE \r_pc_shift_out_reg[43] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[43]_i_1_n_0 ),
        .Q(in23[51]));
  FDCE \r_pc_shift_out_reg[44] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[44]_i_1_n_0 ),
        .Q(in23[52]));
  FDCE \r_pc_shift_out_reg[45] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[45]_i_1_n_0 ),
        .Q(in23[53]));
  FDCE \r_pc_shift_out_reg[46] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[46]_i_1_n_0 ),
        .Q(in23[54]));
  FDCE \r_pc_shift_out_reg[47] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[47]_i_1_n_0 ),
        .Q(in23[55]));
  FDCE \r_pc_shift_out_reg[48] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[48]_i_1_n_0 ),
        .Q(out[0]));
  FDCE \r_pc_shift_out_reg[49] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[49]_i_1_n_0 ),
        .Q(out[1]));
  FDCE \r_pc_shift_out_reg[4] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[4]_i_1_n_0 ),
        .Q(in23[12]));
  FDCE \r_pc_shift_out_reg[50] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[50]_i_1_n_0 ),
        .Q(out[2]));
  FDCE \r_pc_shift_out_reg[51] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[51]_i_1_n_0 ),
        .Q(out[3]));
  FDCE \r_pc_shift_out_reg[52] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[52]_i_1_n_0 ),
        .Q(out[4]));
  FDCE \r_pc_shift_out_reg[53] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[53]_i_1_n_0 ),
        .Q(out[5]));
  FDCE \r_pc_shift_out_reg[54] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[54]_i_1_n_0 ),
        .Q(out[6]));
  FDCE \r_pc_shift_out_reg[55] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[55]_i_2_n_0 ),
        .Q(out[7]));
  FDCE \r_pc_shift_out_reg[5] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[5]_i_1_n_0 ),
        .Q(in23[13]));
  FDCE \r_pc_shift_out_reg[6] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[6]_i_1_n_0 ),
        .Q(in23[14]));
  FDCE \r_pc_shift_out_reg[7] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[7]_i_1_n_0 ),
        .Q(in23[15]));
  FDCE \r_pc_shift_out_reg[8] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[8]_i_1_n_0 ),
        .Q(in23[16]));
  FDCE \r_pc_shift_out_reg[9] 
       (.C(r_wr_bank_c_reg_0),
        .CE(ri_pc_shift_out),
        .CLR(\r_rst_reg[1] ),
        .D(\r_pc_shift_out[9]_i_1_n_0 ),
        .Q(in23[17]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_rw_cmd[0]_i_1 
       (.I0(o_bank_c[4]),
        .I1(ri_rw_cmd),
        .I2(\r_rw_cmd_reg_n_0_[0] ),
        .O(\r_rw_cmd[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_rw_cmd[1]_i_1 
       (.I0(o_bank_c[5]),
        .I1(ri_rw_cmd),
        .I2(wr_enable),
        .O(\r_rw_cmd[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000001000000000)) 
    \r_rw_cmd[1]_i_2 
       (.I0(r_state_reg[7]),
        .I1(o_pc_wr),
        .I2(r_state_reg[1]),
        .I3(r_state_reg[10]),
        .I4(r_state_reg[9]),
        .I5(\r_bank_addr[3]_i_3_n_0 ),
        .O(ri_rw_cmd));
  FDCE \r_rw_cmd_reg[0] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rw_cmd[0]_i_1_n_0 ),
        .Q(\r_rw_cmd_reg_n_0_[0] ));
  FDCE \r_rw_cmd_reg[1] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(\r_rw_cmd[1]_i_1_n_0 ),
        .Q(wr_enable));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFD5D5FFD5)) 
    \r_state[0]_i_1__1 
       (.I0(\r_state[10]_i_3_n_0 ),
        .I1(r_state_reg[0]),
        .I2(\r_state_reg[6]_0 ),
        .I3(\r_state[0]_i_2__0_n_0 ),
        .I4(\r_state[0]_i_3__0_n_0 ),
        .I5(\r_state[0]_i_4__0_n_0 ),
        .O(ri_state__0[0]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[0]_i_2__0 
       (.I0(r_state_reg[9]),
        .I1(r_state_reg[10]),
        .O(\r_state[0]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \r_state[0]_i_3__0 
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .O(\r_state[0]_i_3__0_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFF54545454545454)) 
    \r_state[0]_i_4__0 
       (.I0(\r_rw_cmd_reg_n_0_[0] ),
        .I1(r_state_reg[9]),
        .I2(r_state_reg[10]),
        .I3(\r_state_reg[8]_0 ),
        .I4(r_state_reg[0]),
        .I5(r_state_reg[6]),
        .O(\r_state[0]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'hFF404040)) 
    \r_state[10]_i_1__0 
       (.I0(\r_state[10]_i_2_n_0 ),
        .I1(\r_state[10]_i_3_n_0 ),
        .I2(o_pc_wr),
        .I3(r_state_reg[10]),
        .I4(\r_state[10]_i_4_n_0 ),
        .O(ri_state__0[10]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[10]_i_2 
       (.I0(r_byte_cnt[2]),
        .I1(r_byte_cnt[0]),
        .I2(r_byte_cnt[1]),
        .I3(r_byte_cnt[3]),
        .O(\r_state[10]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h0012)) 
    \r_state[10]_i_3 
       (.I0(\r_state[10]_i_5_n_0 ),
        .I1(\r_state[10]_i_6_n_0 ),
        .I2(\r_state[10]_i_7_n_0 ),
        .I3(\r_state[10]_i_8_n_0 ),
        .O(\r_state[10]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFF8888800000000)) 
    \r_state[10]_i_4 
       (.I0(r_state_reg[6]),
        .I1(\r_state_reg[8]_0 ),
        .I2(r_state_reg[5]),
        .I3(r_state_reg[0]),
        .I4(\r_state_reg[6]_0 ),
        .I5(\r_state[10]_i_3_n_0 ),
        .O(\r_state[10]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00010116)) 
    \r_state[10]_i_5 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[1]),
        .I2(r_state_reg[2]),
        .I3(r_state_reg[3]),
        .I4(r_state_reg[4]),
        .O(\r_state[10]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEE8)) 
    \r_state[10]_i_6 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[1]),
        .I2(r_state_reg[2]),
        .I3(r_state_reg[3]),
        .I4(r_state_reg[4]),
        .O(\r_state[10]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100010116)) 
    \r_state[10]_i_7 
       (.I0(r_state_reg[5]),
        .I1(r_state_reg[6]),
        .I2(r_state_reg[7]),
        .I3(o_pc_wr),
        .I4(r_state_reg[9]),
        .I5(r_state_reg[10]),
        .O(\r_state[10]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEE8)) 
    \r_state[10]_i_8 
       (.I0(r_state_reg[5]),
        .I1(r_state_reg[6]),
        .I2(r_state_reg[7]),
        .I3(o_pc_wr),
        .I4(r_state_reg[9]),
        .I5(r_state_reg[10]),
        .O(\r_state[10]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_state[12]_i_3 
       (.I0(r_wr_bank_p_reg_0),
        .O(\r_rst_reg[1] ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFAFA3030EAAA0000)) 
    \r_state[1]_i_1__1 
       (.I0(\r_state[7]_i_2_n_0 ),
        .I1(\r_state_reg[6]_0 ),
        .I2(\r_state[10]_i_3_n_0 ),
        .I3(r_state_reg[5]),
        .I4(r_state_reg[1]),
        .I5(r_state_reg[0]),
        .O(ri_state__0[1]));
  LUT5 #(
    .INIT(32'hFFF8F8F8)) 
    \r_state[2]_i_1__1 
       (.I0(r_state_reg[1]),
        .I1(\r_state[10]_i_3_n_0 ),
        .I2(\r_state[2]_i_2__0_n_0 ),
        .I3(\r_state[10]_i_4_n_0 ),
        .I4(r_state_reg[2]),
        .O(ri_state__0[2]));
  LUT6 #(
    .INIT(64'h0080808080808080)) 
    \r_state[2]_i_2__0 
       (.I0(\r_state[0]_i_2__0_n_0 ),
        .I1(\r_state[10]_i_3_n_0 ),
        .I2(\r_rw_cmd_reg_n_0_[0] ),
        .I3(o_bank_addr[2]),
        .I4(o_bank_addr[0]),
        .I5(o_bank_addr[1]),
        .O(\r_state[2]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFF808080)) 
    \r_state[3]_i_1__1 
       (.I0(\r_state[10]_i_3_n_0 ),
        .I1(sel_p_bank),
        .I2(r_state_reg[2]),
        .I3(r_state_reg[3]),
        .I4(\r_state[10]_i_4_n_0 ),
        .O(ri_state__0[3]));
  LUT5 #(
    .INIT(32'hFF080808)) 
    \r_state[4]_i_1__1 
       (.I0(\r_state[10]_i_3_n_0 ),
        .I1(r_state_reg[2]),
        .I2(sel_p_bank),
        .I3(r_state_reg[4]),
        .I4(\r_state[10]_i_4_n_0 ),
        .O(ri_state__0[4]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF808080)) 
    \r_state[5]_i_1__1 
       (.I0(\r_state[10]_i_2_n_0 ),
        .I1(\r_state[10]_i_3_n_0 ),
        .I2(r_state_reg[7]),
        .I3(\r_state[7]_i_2_n_0 ),
        .I4(r_state_reg[5]),
        .I5(\r_state[5]_i_2__1_n_0 ),
        .O(ri_state__0[5]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFF8000088880000)) 
    \r_state[5]_i_2__1 
       (.I0(r_state_reg[5]),
        .I1(\r_state_reg[6]_0 ),
        .I2(r_state_reg[3]),
        .I3(r_state_reg[4]),
        .I4(\r_state[10]_i_3_n_0 ),
        .I5(wr_enable),
        .O(\r_state[5]_i_2__1_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFF88800000)) 
    \r_state[6]_i_1__0 
       (.I0(\r_state[10]_i_3_n_0 ),
        .I1(r_state_reg[6]),
        .I2(r_state_reg[5]),
        .I3(r_state_reg[0]),
        .I4(\r_state_reg[6]_0 ),
        .I5(\r_state[6]_i_2_n_0 ),
        .O(ri_state__0[6]));
  LUT6 #(
    .INIT(64'hFFBAAAAABABAAAAA)) 
    \r_state[6]_i_2 
       (.I0(\r_state[7]_i_2_n_0 ),
        .I1(wr_enable),
        .I2(\r_state[6]_i_3_n_0 ),
        .I3(\r_state[10]_i_2_n_0 ),
        .I4(\r_state[10]_i_3_n_0 ),
        .I5(o_pc_wr),
        .O(\r_state[6]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[6]_i_3 
       (.I0(r_state_reg[3]),
        .I1(r_state_reg[4]),
        .O(\r_state[6]_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hF0A0E0A0ECA0ECA0)) 
    \r_state[7]_i_1__0 
       (.I0(\r_state[7]_i_2_n_0 ),
        .I1(r_state_reg[5]),
        .I2(r_state_reg[7]),
        .I3(\r_state[10]_i_3_n_0 ),
        .I4(r_state_reg[0]),
        .I5(\r_state_reg[6]_0 ),
        .O(ri_state__0[7]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \r_state[7]_i_2 
       (.I0(r_state_reg[6]),
        .I1(\r_state[10]_i_3_n_0 ),
        .I2(\r_state_reg[8]_0 ),
        .O(\r_state[7]_i_2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFAAA000022220000)) 
    \r_state[8]_i_1__0 
       (.I0(r_state_reg[6]),
        .I1(\r_state_reg[8]_0 ),
        .I2(\r_state[8]_i_2__0_n_0 ),
        .I3(\r_state_reg[6]_0 ),
        .I4(\r_state[10]_i_3_n_0 ),
        .I5(o_pc_wr),
        .O(ri_state__0[8]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[8]_i_2__0 
       (.I0(r_state_reg[0]),
        .I1(r_state_reg[5]),
        .O(\r_state[8]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFF404040)) 
    \r_state[9]_i_1__0 
       (.I0(\r_state[10]_i_2_n_0 ),
        .I1(\r_state[10]_i_3_n_0 ),
        .I2(r_state_reg[7]),
        .I3(r_state_reg[9]),
        .I4(\r_state[10]_i_4_n_0 ),
        .O(ri_state__0[9]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .D(ri_state__0[0]),
        .PRE(\r_rst_reg[1] ),
        .Q(r_state_reg[0]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[10] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[10]),
        .Q(r_state_reg[10]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[1]),
        .Q(r_state_reg[1]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[2]),
        .Q(r_state_reg[2]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[3]),
        .Q(r_state_reg[3]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[4]),
        .Q(r_state_reg[4]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[5]),
        .Q(r_state_reg[5]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[6]),
        .Q(r_state_reg[6]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[7]),
        .Q(r_state_reg[7]));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[8]),
        .Q(o_pc_wr));
  (* FSM_ENCODED_STATES = "S_READ_BANK:10000000000,S_IDLE:00000000001,S_WAIT_PC_VALID:00000100000,S_SEL_BANK_P:00000001000,S_WRITE_PC:00100000000,S_BANK_SEL:00000000100,S_READ_PC:00010000000,S_CMD_DECODE:00000000010,S_WAIT_PC_READY:00001000000,S_SEL_BANK_CS:00000010000,S_WRITE_BANK:01000000000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_state__0[9]),
        .Q(r_state_reg[9]));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'h00400000)) 
    r_wr_bank_c_i_1
       (.I0(\r_state[10]_i_2_n_0 ),
        .I1(r_state_reg[7]),
        .I2(\r_state[10]_i_3_n_0 ),
        .I3(sel_p_bank),
        .I4(\r_pc_shift_in[55]_i_2_n_0 ),
        .O(ri_wr_bank_c));
  FDCE r_wr_bank_c_reg
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_bank_c),
        .Q(o_bank_c_wr));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'h40000000)) 
    r_wr_bank_p_i_1
       (.I0(\r_state[10]_i_2_n_0 ),
        .I1(r_state_reg[7]),
        .I2(\r_state[10]_i_3_n_0 ),
        .I3(sel_p_bank),
        .I4(\r_pc_shift_in[55]_i_2_n_0 ),
        .O(ri_wr_bank_p));
  FDCE r_wr_bank_p_reg
       (.C(r_wr_bank_c_reg_0),
        .CE(1'b1),
        .CLR(\r_rst_reg[1] ),
        .D(ri_wr_bank_p),
        .Q(o_bank_p_wr));
endmodule

module pc_interface_top
   (out,
    o_pattern,
    o_pattern_addr,
    o_bank_c_wr,
    o_bank_c_data_0,
    o_bank_c_data_1,
    o_bank_c_data_2,
    o_bank_c_data_3,
    o_bank_c_data_7,
    o_pc_tx,
    \r_piso_reg[10] ,
    \r_sipo_reg[0] ,
    o_data_inferred_i_12,
    o_data_inferred_i_12_0,
    \r_pc_shift_out_reg[55] ,
    o_data_inferred_i_16,
    \r_pc_shift_out_reg[55]_0 ,
    o_data_inferred_i_12_1,
    o_data_inferred_i_12_2,
    \r_rst_reg[0] ,
    \r_pc_shift_out_reg[55]_1 );
  output out;
  output [55:0]o_pattern;
  output [2:0]o_pattern_addr;
  output [7:0]o_bank_c_wr;
  output [15:0]o_bank_c_data_0;
  output [15:0]o_bank_c_data_1;
  output [15:0]o_bank_c_data_2;
  output [15:0]o_bank_c_data_3;
  output [15:0]o_bank_c_data_7;
  output o_pc_tx;
  input \r_piso_reg[10] ;
  input \r_sipo_reg[0] ;
  input [4:0]o_data_inferred_i_12;
  input [4:0]o_data_inferred_i_12_0;
  input [15:0]\r_pc_shift_out_reg[55] ;
  input o_data_inferred_i_16;
  input [15:0]\r_pc_shift_out_reg[55]_0 ;
  input [4:0]o_data_inferred_i_12_1;
  input [4:0]o_data_inferred_i_12_2;
  input \r_rst_reg[0] ;
  input [55:0]\r_pc_shift_out_reg[55]_1 ;

  (* RTL_KEEP = "inst_handler " *) wire inst_handler_n_83;
  wire inst_handler_n_87;
  (* RTL_KEEP = "inst_handler " *) wire [2:0]o_bank_addr;
  (* RTL_KEEP = "inst_handler " *) wire [15:0]o_bank_c;
  (* RTL_KEEP = "true" *) wire [15:0]o_bank_c_data_0;
  (* RTL_KEEP = "true" *) wire [15:0]o_bank_c_data_1;
  (* RTL_KEEP = "true" *) wire [15:0]o_bank_c_data_7;
  (* RTL_KEEP = "true" *) wire [7:0]o_bank_c_wr;
  (* RTL_KEEP = "inst_handler " *) wire [55:0]o_bank_p;
  (* RTL_KEEP = "inst_handler " *) wire o_bank_p_wr;
  (* RTL_KEEP = "inst_pc_interface " *) wire [7:0]o_data;
  (* RTL_KEEP = "inst_data_router_bank_s " *) wire [15:0]o_data__0;
  wire [4:0]o_data_inferred_i_12;
  wire [4:0]o_data_inferred_i_12_0;
  wire [4:0]o_data_inferred_i_12_1;
  wire [4:0]o_data_inferred_i_12_2;
  wire o_data_inferred_i_16;
  (* RTL_KEEP = "inst_handler " *) wire [7:0]o_pc_data;
  (* RTL_KEEP = "inst_handler " *) wire o_pc_rd;
  wire o_pc_tx;
  (* RTL_KEEP = "inst_handler " *) wire o_pc_wr;
  (* RTL_KEEP = "inst_local_reset " *) wire o_rst;
  (* RTL_KEEP = "inst_pc_interface " *) wire o_rx_valid;
  (* RTL_KEEP = "inst_pc_interface " *) wire o_tx_rdy;
  wire [15:0]\r_pc_shift_out_reg[55] ;
  wire [15:0]\r_pc_shift_out_reg[55]_0 ;
  wire [55:0]\r_pc_shift_out_reg[55]_1 ;
  wire \r_piso_reg[10] ;
  wire \r_rst_reg[0] ;
  wire \r_sipo_reg[0] ;

  assign o_pattern[55:0] = o_bank_p;
  assign o_pattern_addr[2:0] = o_bank_addr;
  assign out = o_bank_p_wr;
  mux_8 inst_data_router_bank_s
       (.o_data_inferred_i_12_0(o_data_inferred_i_12),
        .o_data_inferred_i_12_1(o_data_inferred_i_12_0),
        .o_data_inferred_i_12_2(o_data_inferred_i_12_1),
        .o_data_inferred_i_12_3(o_data_inferred_i_12_2),
        .o_data_inferred_i_16_0(o_data_inferred_i_16),
        .out(o_data__0),
        .\r_pc_shift_out_reg[40] (o_bank_addr),
        .\r_pc_shift_out_reg[55] (\r_pc_shift_out_reg[55] ),
        .\r_pc_shift_out_reg[55]_0 (\r_pc_shift_out_reg[55]_0 ));
  pc_interface_handler inst_handler
       (.D(o_data),
        .o_bank_addr(o_bank_addr),
        .o_bank_c(o_bank_c),
        .o_bank_c_wr(inst_handler_n_83),
        .o_bank_p(o_bank_p),
        .o_bank_p_wr(o_bank_p_wr),
        .o_pc_rd(o_pc_rd),
        .o_pc_wr(o_pc_wr),
        .out(o_pc_data),
        .\r_pc_shift_out_reg[55]_0 (o_data__0),
        .\r_pc_shift_out_reg[55]_1 (\r_pc_shift_out_reg[55]_1 ),
        .\r_rst_reg[1] (inst_handler_n_87),
        .\r_state_reg[6]_0 (o_rx_valid),
        .\r_state_reg[8]_0 (o_tx_rdy),
        .r_wr_bank_c_reg_0(\r_piso_reg[10] ),
        .r_wr_bank_p_reg_0(o_rst));
  async_reset__parameterized1__hierPathDup__1 inst_local_reset
       (.out(o_rst),
        .\r_rst_reg[0]_0 (\r_piso_reg[10] ),
        .\r_rst_reg[0]_1 (\r_rst_reg[0] ));
  uart_transceiver inst_pc_interface
       (.I9(o_pc_data),
        .o_pc_tx(o_pc_tx),
        .o_rx_valid(o_rx_valid),
        .o_tx_rdy(o_tx_rdy),
        .out(o_data),
        .\r_baud_reg[0] (inst_handler_n_87),
        .\r_piso_reg[10] (\r_piso_reg[10] ),
        .\r_rd_ptr_reg[0] (o_pc_rd),
        .\r_sipo_reg[0] (\r_sipo_reg[0] ),
        .\r_wr_ptr_reg[0] (o_pc_wr));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    o_bank_c_data_0_inferred_i_14
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_c[2]),
        .I3(o_bank_addr[0]),
        .O(o_bank_c_data_0[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    o_bank_c_data_0_inferred_i_15
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_c[1]),
        .I3(o_bank_addr[0]),
        .O(o_bank_c_data_0[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    o_bank_c_data_0_inferred_i_16
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_c[0]),
        .I3(o_bank_addr[0]),
        .O(o_bank_c_data_0[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    o_bank_c_data_1_inferred_i_14
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_c[2]),
        .I3(o_bank_addr[0]),
        .O(o_bank_c_data_1[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    o_bank_c_data_1_inferred_i_15
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_c[1]),
        .I3(o_bank_addr[0]),
        .O(o_bank_c_data_1[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    o_bank_c_data_1_inferred_i_16
       (.I0(o_bank_addr[2]),
        .I1(o_bank_addr[1]),
        .I2(o_bank_c[0]),
        .I3(o_bank_addr[0]),
        .O(o_bank_c_data_1[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_1
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[15]),
        .O(o_bank_c_data_7[15]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_10
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[6]),
        .O(o_bank_c_data_7[6]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_11
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[5]),
        .O(o_bank_c_data_7[5]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_12
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[4]),
        .O(o_bank_c_data_7[4]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_13
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[3]),
        .O(o_bank_c_data_7[3]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_14
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[2]),
        .O(o_bank_c_data_7[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_15
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[1]),
        .O(o_bank_c_data_7[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_16
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[0]),
        .O(o_bank_c_data_7[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_2
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[14]),
        .O(o_bank_c_data_7[14]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_3
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[13]),
        .O(o_bank_c_data_7[13]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_4
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[12]),
        .O(o_bank_c_data_7[12]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_5
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[11]),
        .O(o_bank_c_data_7[11]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_6
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[10]),
        .O(o_bank_c_data_7[10]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_7
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[9]),
        .O(o_bank_c_data_7[9]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_8
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[8]),
        .O(o_bank_c_data_7[8]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_data_7_inferred_i_9
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[0]),
        .I2(o_bank_addr[2]),
        .I3(o_bank_c[7]),
        .O(o_bank_c_data_7[7]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    o_bank_c_wr_inferred_i_1
       (.I0(inst_handler_n_83),
        .I1(o_bank_addr[2]),
        .I2(o_bank_addr[0]),
        .I3(o_bank_addr[1]),
        .O(o_bank_c_wr[7]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    o_bank_c_wr_inferred_i_7
       (.I0(o_bank_addr[1]),
        .I1(o_bank_addr[2]),
        .I2(o_bank_addr[0]),
        .I3(inst_handler_n_83),
        .O(o_bank_c_wr[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    o_bank_c_wr_inferred_i_8
       (.I0(o_bank_addr[0]),
        .I1(o_bank_addr[2]),
        .I2(inst_handler_n_83),
        .I3(o_bank_addr[1]),
        .O(o_bank_c_wr[0]));
endmodule

module physical_iob_clk_div
   (o_clk_600,
    o_clk_200,
    o_clk_120,
    FMC_LA00_CC_P,
    FMC_LA00_CC_N);
  output o_clk_600;
  output o_clk_200;
  output o_clk_120;
  input FMC_LA00_CC_P;
  input FMC_LA00_CC_N;

  wire FMC_LA00_CC_N;
  wire FMC_LA00_CC_P;
  wire ibufds_clk_600_o;
  wire o_clk_120;
  wire o_clk_200;
  wire o_clk_600;

  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFIO inst_bufio
       (.I(ibufds_clk_600_o),
        .O(o_clk_600));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFR #(
    .BUFR_DIVIDE("5"),
    .SIM_DEVICE("7SERIES")) 
    inst_bufr_120
       (.CE(1'b1),
        .CLR(1'b0),
        .I(ibufds_clk_600_o),
        .O(o_clk_120));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFR #(
    .BUFR_DIVIDE("3"),
    .SIM_DEVICE("7SERIES")) 
    inst_bufr_300
       (.CE(1'b1),
        .CLR(1'b0),
        .I(ibufds_clk_600_o),
        .O(o_clk_200));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  (* IBUF_DELAY_VALUE = "0" *) 
  (* IFD_DELAY_VALUE = "AUTO" *) 
  IBUFDS #(
    .IOSTANDARD("DEFAULT")) 
    inst_ibufds_phys_clk
       (.I(FMC_LA00_CC_P),
        .IB(FMC_LA00_CC_N),
        .O(ibufds_clk_600_o));
endmodule

module physical_iob_clk_gen
   (FMC_LA02_P,
    FMC_LA02_N,
    inst_oddr_0);
  output FMC_LA02_P;
  output FMC_LA02_N;
  input inst_oddr_0;

  wire FMC_LA02_N;
  wire FMC_LA02_P;
  wire inst_oddr_0;
  wire oddr_o;
  wire NLW_inst_oddr_R_UNCONNECTED;
  wire NLW_inst_oddr_S_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  OBUFDS inst_obufds
       (.I(oddr_o),
        .O(FMC_LA02_P),
        .OB(FMC_LA02_N));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  (* __SRVAL = "TRUE" *) 
  ODDR #(
    .DDR_CLK_EDGE("OPPOSITE_EDGE"),
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .SRTYPE("SYNC")) 
    inst_oddr
       (.C(inst_oddr_0),
        .CE(1'b1),
        .D1(1'b1),
        .D2(1'b0),
        .Q(oddr_o),
        .R(NLW_inst_oddr_R_UNCONNECTED),
        .S(NLW_inst_oddr_S_UNCONNECTED));
endmodule

module physical_iob_gearbox_6_10
   (out,
    \r_rst_reg[1] ,
    \r_rst_reg[1]_0 ,
    o_clk_200,
    CLK,
    \r_rst_reg[0] ,
    \r_rst_reg[1]_1 ,
    D,
    \r_slipbits_reg[3]_0 );
  output [9:0]out;
  output \r_rst_reg[1] ;
  output \r_rst_reg[1]_0 ;
  input o_clk_200;
  input CLK;
  input \r_rst_reg[0] ;
  input \r_rst_reg[1]_1 ;
  input [5:0]D;
  input [3:0]\r_slipbits_reg[3]_0 ;

  wire CLK;
  wire [5:0]D;
  wire [9:0]data0;
  wire inst_local_reset_wr_n_1;
  wire local_rd_arst_n;
  wire o_clk_200;
  (* RTL_KEEP = "inst_sync_read_enable " *) wire o_sync;
  (* RTL_KEEP = "true" *) wire [9:0]out;
  wire [5:0]p_0_in;
  wire [3:0]p_0_in_0;
  wire [5:0]p_1_in;
  wire [1:0]r_mux_sel;
  wire \r_mux_sel[1]_i_1__0_n_0 ;
  wire \r_rd_addr_a[0]_i_1__0_n_0 ;
  wire \r_rd_addr_a[1]_i_1__0_n_0 ;
  wire \r_rd_addr_a[2]_i_1__0_n_0 ;
  wire \r_rd_addr_a[3]_i_1__0_n_0 ;
  wire [3:0]r_rd_addr_b;
  wire \r_rd_addr_b[0]_i_1__0_n_0 ;
  wire \r_rd_addr_b[1]_i_1__0_n_0 ;
  wire \r_rd_addr_b[2]_i_1__0_n_0 ;
  wire \r_rd_addr_b[3]_i_1__0_n_0 ;
  wire \r_rd_addr_b[3]_i_2__0_n_0 ;
  wire [3:0]r_rd_addr_c;
  wire \r_rd_addr_c[0]_i_1__0_n_0 ;
  wire \r_rd_addr_c[1]_i_1__0_n_0 ;
  wire \r_rd_addr_c[3]_i_1__0_n_0 ;
  wire \r_rd_addr_c[3]_i_2__0_n_0 ;
  wire \r_rd_addr_c[3]_i_3__0_n_0 ;
  wire [9:0]r_rd_data;
  wire \r_rd_data_o[0]_i_2_n_0 ;
  wire \r_rd_data_o[0]_i_3_n_0 ;
  wire \r_rd_data_o[1]_i_2_n_0 ;
  wire \r_rd_data_o[1]_i_3_n_0 ;
  wire \r_rd_data_o[2]_i_2_n_0 ;
  wire \r_rd_data_o[2]_i_3_n_0 ;
  wire \r_rd_data_o[3]_i_2_n_0 ;
  wire \r_rd_data_o[3]_i_3_n_0 ;
  wire \r_rd_data_o[4]_i_2_n_0 ;
  wire \r_rd_data_o[4]_i_3_n_0 ;
  wire \r_rd_data_o[5]_i_2_n_0 ;
  wire \r_rd_data_o[5]_i_3_n_0 ;
  wire \r_rd_data_o[6]_i_2_n_0 ;
  wire \r_rd_data_o[6]_i_3_n_0 ;
  wire \r_rd_data_o[6]_i_4_n_0 ;
  wire \r_rd_data_o[7]_i_2_n_0 ;
  wire \r_rd_data_o[7]_i_3_n_0 ;
  wire \r_rd_data_o[7]_i_4_n_0 ;
  wire \r_rd_data_o[8]_i_2_n_0 ;
  wire \r_rd_data_o[8]_i_3_n_0 ;
  wire \r_rd_data_o[8]_i_4_n_0 ;
  wire \r_rd_data_o[9]_i_2_n_0 ;
  wire \r_rd_data_o[9]_i_3_n_0 ;
  wire \r_rd_data_o[9]_i_4_n_0 ;
  wire r_rd_enable;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire [3:0]r_slipbits;
  wire [3:0]\r_slipbits_reg[3]_0 ;
  wire \r_temp_reg_n_0_[0] ;
  wire \r_temp_reg_n_0_[11] ;
  wire \r_temp_reg_n_0_[12] ;
  wire \r_temp_reg_n_0_[13] ;
  wire \r_temp_reg_n_0_[14] ;
  wire \r_temp_reg_n_0_[15] ;
  wire \r_temp_reg_n_0_[16] ;
  wire \r_temp_reg_n_0_[17] ;
  wire \r_temp_reg_n_0_[18] ;
  wire \r_temp_reg_n_0_[19] ;
  wire [3:0]r_wr_addr;
  wire \r_wr_addr[0]_i_1__0_n_0 ;
  wire [9:0]ri_rd_data;
  wire [5:0]ri_rd_data1;
  wire [9:0]ri_rd_data_o;
  wire ri_rd_enable;
  wire [3:1]ri_wr_addr;
  wire [1:0]NLW_r_ram_reg_r1_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r3_0_15_0_5_DOD_UNCONNECTED;

  async_reset__parameterized1_11 inst_local_reset_rd
       (.CLK(CLK),
        .out(local_rd_arst_n),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  async_reset__parameterized1_12 inst_local_reset_wr
       (.o_clk_200(o_clk_200),
        .\r_rst_reg[1]_0 (\r_rst_reg[1]_0 ),
        .\r_rst_reg[1]_1 (inst_local_reset_wr_n_1),
        .\r_rst_reg[1]_2 (\r_rst_reg[1]_1 ));
  synchronizer__parameterized0__hierPathDup__3 inst_sync_read_enable
       (.CLK(CLK),
        .D(r_rd_enable),
        .out(o_sync),
        .\r_sync_reg[1]_0 (\r_rd_addr_c[3]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h20000280)) 
    \r_mux_sel[1]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[2]),
        .I3(p_0_in_0[1]),
        .I4(p_0_in_0[0]),
        .O(\r_mux_sel[1]_i_1__0_n_0 ));
  FDCE \r_mux_sel_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_c[3]_i_1__0_n_0 ),
        .Q(r_mux_sel[0]));
  FDCE \r_mux_sel_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_mux_sel[1]_i_1__0_n_0 ),
        .Q(r_mux_sel[1]));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "90" *) 
  (* RTL_RAM_NAME = "inst_physical_layer_top/inst_physical_iob_rx/inst_gearbox/r_ram_reg_r1_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "14" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD271 r_ram_reg_r1_0_15_0_5
       (.ADDRA({1'b0,p_0_in_0}),
        .ADDRB({1'b0,p_0_in_0}),
        .ADDRC({1'b0,p_0_in_0}),
        .ADDRD({1'b0,r_wr_addr}),
        .DIA(D[1:0]),
        .DIB(D[3:2]),
        .DIC(D[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(ri_rd_data1[1:0]),
        .DOB(ri_rd_data1[3:2]),
        .DOC(ri_rd_data1[5:4]),
        .DOD(NLW_r_ram_reg_r1_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(o_clk_200),
        .WE(1'b1));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "90" *) 
  (* RTL_RAM_NAME = "inst_physical_layer_top/inst_physical_iob_rx/inst_gearbox/r_ram_reg_r2_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "14" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD272 r_ram_reg_r2_0_15_0_5
       (.ADDRA({1'b0,r_rd_addr_c}),
        .ADDRB({1'b0,r_rd_addr_c}),
        .ADDRC({1'b0,r_rd_addr_c}),
        .ADDRD({1'b0,r_wr_addr}),
        .DIA(D[1:0]),
        .DIB(D[3:2]),
        .DIC(D[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_1_in[1:0]),
        .DOB(p_1_in[3:2]),
        .DOC(p_1_in[5:4]),
        .DOD(NLW_r_ram_reg_r2_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(o_clk_200),
        .WE(1'b1));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "90" *) 
  (* RTL_RAM_NAME = "inst_physical_layer_top/inst_physical_iob_rx/inst_gearbox/r_ram_reg_r3_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "14" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD273 r_ram_reg_r3_0_15_0_5
       (.ADDRA({1'b0,r_rd_addr_b}),
        .ADDRB({1'b0,r_rd_addr_b}),
        .ADDRC({1'b0,r_rd_addr_b}),
        .ADDRD({1'b0,r_wr_addr}),
        .DIA(D[1:0]),
        .DIB(D[3:2]),
        .DIC(D[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_in[1:0]),
        .DOB(p_0_in[3:2]),
        .DOC(p_0_in[5:4]),
        .DOD(NLW_r_ram_reg_r3_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(o_clk_200),
        .WE(1'b1));
  LUT5 #(
    .INIT(32'h20220000)) 
    \r_rd_addr_a[0]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[1]),
        .I4(p_0_in_0[2]),
        .O(\r_rd_addr_a[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h02202002)) 
    \r_rd_addr_a[1]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[3]),
        .O(\r_rd_addr_a[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00280828)) 
    \r_rd_addr_a[2]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[2]),
        .I2(p_0_in_0[1]),
        .I3(p_0_in_0[0]),
        .I4(p_0_in_0[3]),
        .O(\r_rd_addr_a[2]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h02288000)) 
    \r_rd_addr_a[3]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[2]),
        .I3(p_0_in_0[1]),
        .I4(p_0_in_0[3]),
        .O(\r_rd_addr_a[3]_i_1__0_n_0 ));
  FDCE \r_rd_addr_a_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_a[0]_i_1__0_n_0 ),
        .Q(p_0_in_0[0]));
  FDCE \r_rd_addr_a_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_a[1]_i_1__0_n_0 ),
        .Q(p_0_in_0[1]));
  FDCE \r_rd_addr_a_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_a[2]_i_1__0_n_0 ),
        .Q(p_0_in_0[2]));
  FDCE \r_rd_addr_a_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_a[3]_i_1__0_n_0 ),
        .Q(p_0_in_0[3]));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \r_rd_addr_b[0]_i_1__0 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[1]),
        .I3(o_sync),
        .O(\r_rd_addr_b[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00002280)) 
    \r_rd_addr_b[1]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[1]),
        .O(\r_rd_addr_b[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0200)) 
    \r_rd_addr_b[2]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[3]),
        .I3(p_0_in_0[2]),
        .O(\r_rd_addr_b[2]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hBBC6FFFF)) 
    \r_rd_addr_b[3]_i_1__0 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[2]),
        .I2(p_0_in_0[1]),
        .I3(p_0_in_0[0]),
        .I4(o_sync),
        .O(\r_rd_addr_b[3]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000080)) 
    \r_rd_addr_b[3]_i_2__0 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[1]),
        .O(\r_rd_addr_b[3]_i_2__0_n_0 ));
  FDPE \r_rd_addr_b_reg[0] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1__0_n_0 ),
        .D(\r_rd_addr_b[0]_i_1__0_n_0 ),
        .PRE(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .Q(r_rd_addr_b[0]));
  FDCE \r_rd_addr_b_reg[1] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_b[1]_i_1__0_n_0 ),
        .Q(r_rd_addr_b[1]));
  FDCE \r_rd_addr_b_reg[2] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_b[2]_i_1__0_n_0 ),
        .Q(r_rd_addr_b[2]));
  FDCE \r_rd_addr_b_reg[3] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_b[3]_i_2__0_n_0 ),
        .Q(r_rd_addr_b[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_addr_c[0]_i_1__0 
       (.I0(p_0_in_0[0]),
        .O(\r_rd_addr_c[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_rd_addr_c[1]_i_1__0 
       (.I0(p_0_in_0[2]),
        .I1(p_0_in_0[3]),
        .O(\r_rd_addr_c[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h02000082)) 
    \r_rd_addr_c[3]_i_1__0 
       (.I0(o_sync),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[3]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[0]),
        .O(\r_rd_addr_c[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_rd_addr_c[3]_i_2__0 
       (.I0(p_0_in_0[0]),
        .I1(p_0_in_0[3]),
        .O(\r_rd_addr_c[3]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_addr_c[3]_i_3__0 
       (.I0(local_rd_arst_n),
        .O(\r_rd_addr_c[3]_i_3__0_n_0 ));
  FDCE \r_rd_addr_c_reg[0] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_c[0]_i_1__0_n_0 ),
        .Q(r_rd_addr_c[0]));
  FDCE \r_rd_addr_c_reg[1] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_c[1]_i_1__0_n_0 ),
        .Q(r_rd_addr_c[1]));
  FDCE \r_rd_addr_c_reg[2] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(p_0_in_0[3]),
        .Q(r_rd_addr_c[2]));
  FDCE \r_rd_addr_c_reg[3] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1__0_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_rd_addr_c[3]_i_2__0_n_0 ),
        .Q(r_rd_addr_c[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[0]_i_1__0 
       (.I0(p_1_in[2]),
        .I1(r_mux_sel[1]),
        .I2(p_0_in[4]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[0]),
        .O(ri_rd_data[0]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[1]_i_1__0 
       (.I0(p_1_in[3]),
        .I1(r_mux_sel[1]),
        .I2(p_0_in[5]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[1]),
        .O(ri_rd_data[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[2]_i_1__0 
       (.I0(p_1_in[4]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[0]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[2]),
        .O(ri_rd_data[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[3]_i_1__0 
       (.I0(p_1_in[5]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[1]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[3]),
        .O(ri_rd_data[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[4]_i_1__0 
       (.I0(ri_rd_data1[0]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[2]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[4]),
        .O(ri_rd_data[4]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[5]_i_1__0 
       (.I0(ri_rd_data1[1]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[3]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[5]),
        .O(ri_rd_data[5]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[6]_i_1__0 
       (.I0(ri_rd_data1[2]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[4]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[0]),
        .O(ri_rd_data[6]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[7]_i_1__0 
       (.I0(ri_rd_data1[3]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[5]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[1]),
        .O(ri_rd_data[7]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[8]_i_1__0 
       (.I0(ri_rd_data1[4]),
        .I1(r_mux_sel[1]),
        .I2(p_1_in[0]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[2]),
        .O(ri_rd_data[8]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[9]_i_1__0 
       (.I0(ri_rd_data1[5]),
        .I1(r_mux_sel[1]),
        .I2(p_1_in[1]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[3]),
        .O(ri_rd_data[9]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[0]_i_1 
       (.I0(\r_rd_data_o[0]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[4]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[0]_i_3_n_0 ),
        .O(ri_rd_data_o[0]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[0]_i_2 
       (.I0(\r_temp_reg_n_0_[0] ),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(data0[8]),
        .I4(r_slipbits[0]),
        .I5(data0[7]),
        .O(\r_rd_data_o[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[0]_i_3 
       (.I0(data0[2]),
        .I1(data0[1]),
        .I2(r_slipbits[1]),
        .I3(data0[0]),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[0] ),
        .O(\r_rd_data_o[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[1]_i_1 
       (.I0(\r_rd_data_o[1]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[5]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[1]_i_3_n_0 ),
        .O(ri_rd_data_o[1]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[1]_i_2 
       (.I0(data0[0]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(data0[9]),
        .I4(r_slipbits[0]),
        .I5(data0[8]),
        .O(\r_rd_data_o[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[1]_i_3 
       (.I0(data0[3]),
        .I1(data0[2]),
        .I2(r_slipbits[1]),
        .I3(data0[1]),
        .I4(r_slipbits[0]),
        .I5(data0[0]),
        .O(\r_rd_data_o[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[2]_i_1 
       (.I0(\r_rd_data_o[2]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[6]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[2]_i_3_n_0 ),
        .O(ri_rd_data_o[2]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[2]_i_2 
       (.I0(data0[1]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[11] ),
        .I4(r_slipbits[0]),
        .I5(data0[9]),
        .O(\r_rd_data_o[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[2]_i_3 
       (.I0(data0[4]),
        .I1(data0[3]),
        .I2(r_slipbits[1]),
        .I3(data0[2]),
        .I4(r_slipbits[0]),
        .I5(data0[1]),
        .O(\r_rd_data_o[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[3]_i_1 
       (.I0(\r_rd_data_o[3]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[7]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[3]_i_3_n_0 ),
        .O(ri_rd_data_o[3]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[3]_i_2 
       (.I0(data0[2]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[12] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[11] ),
        .O(\r_rd_data_o[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[3]_i_3 
       (.I0(data0[5]),
        .I1(data0[4]),
        .I2(r_slipbits[1]),
        .I3(data0[3]),
        .I4(r_slipbits[0]),
        .I5(data0[2]),
        .O(\r_rd_data_o[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[4]_i_1 
       (.I0(\r_rd_data_o[4]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[8]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[4]_i_3_n_0 ),
        .O(ri_rd_data_o[4]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[4]_i_2 
       (.I0(data0[3]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[13] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[12] ),
        .O(\r_rd_data_o[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[4]_i_3 
       (.I0(data0[6]),
        .I1(data0[5]),
        .I2(r_slipbits[1]),
        .I3(data0[4]),
        .I4(r_slipbits[0]),
        .I5(data0[3]),
        .O(\r_rd_data_o[4]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[5]_i_1 
       (.I0(\r_rd_data_o[5]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[9]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[5]_i_3_n_0 ),
        .O(ri_rd_data_o[5]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[5]_i_2 
       (.I0(data0[4]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[14] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[13] ),
        .O(\r_rd_data_o[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[5]_i_3 
       (.I0(data0[7]),
        .I1(data0[6]),
        .I2(r_slipbits[1]),
        .I3(data0[5]),
        .I4(r_slipbits[0]),
        .I5(data0[4]),
        .O(\r_rd_data_o[5]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[6]_i_1 
       (.I0(\r_rd_data_o[6]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[6]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[6]_i_4_n_0 ),
        .O(ri_rd_data_o[6]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[6]_i_2 
       (.I0(data0[5]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[15] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[14] ),
        .O(\r_rd_data_o[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[6]_i_3 
       (.I0(\r_temp_reg_n_0_[13] ),
        .I1(\r_temp_reg_n_0_[12] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[11] ),
        .I4(r_slipbits[0]),
        .I5(data0[9]),
        .O(\r_rd_data_o[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[6]_i_4 
       (.I0(data0[8]),
        .I1(data0[7]),
        .I2(r_slipbits[1]),
        .I3(data0[6]),
        .I4(r_slipbits[0]),
        .I5(data0[5]),
        .O(\r_rd_data_o[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[7]_i_1 
       (.I0(\r_rd_data_o[7]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[7]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[7]_i_4_n_0 ),
        .O(ri_rd_data_o[7]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[7]_i_2 
       (.I0(data0[6]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[16] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[15] ),
        .O(\r_rd_data_o[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[7]_i_3 
       (.I0(\r_temp_reg_n_0_[14] ),
        .I1(\r_temp_reg_n_0_[13] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[12] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[11] ),
        .O(\r_rd_data_o[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[7]_i_4 
       (.I0(data0[9]),
        .I1(data0[8]),
        .I2(r_slipbits[1]),
        .I3(data0[7]),
        .I4(r_slipbits[0]),
        .I5(data0[6]),
        .O(\r_rd_data_o[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[8]_i_1 
       (.I0(\r_rd_data_o[8]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[8]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[8]_i_4_n_0 ),
        .O(ri_rd_data_o[8]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[8]_i_2 
       (.I0(data0[7]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[17] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[16] ),
        .O(\r_rd_data_o[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[8]_i_3 
       (.I0(\r_temp_reg_n_0_[15] ),
        .I1(\r_temp_reg_n_0_[14] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[13] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[12] ),
        .O(\r_rd_data_o[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[8]_i_4 
       (.I0(\r_temp_reg_n_0_[11] ),
        .I1(data0[9]),
        .I2(r_slipbits[1]),
        .I3(data0[8]),
        .I4(r_slipbits[0]),
        .I5(data0[7]),
        .O(\r_rd_data_o[8]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[9]_i_1 
       (.I0(\r_rd_data_o[9]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[9]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[9]_i_4_n_0 ),
        .O(ri_rd_data_o[9]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[9]_i_2 
       (.I0(data0[8]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[18] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[17] ),
        .O(\r_rd_data_o[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[9]_i_3 
       (.I0(\r_temp_reg_n_0_[16] ),
        .I1(\r_temp_reg_n_0_[15] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[14] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[13] ),
        .O(\r_rd_data_o[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[9]_i_4 
       (.I0(\r_temp_reg_n_0_[12] ),
        .I1(\r_temp_reg_n_0_[11] ),
        .I2(r_slipbits[1]),
        .I3(data0[9]),
        .I4(r_slipbits[0]),
        .I5(data0[8]),
        .O(\r_rd_data_o[9]_i_4_n_0 ));
  FDCE \r_rd_data_o_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[0]),
        .Q(out[0]));
  FDCE \r_rd_data_o_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[1]),
        .Q(out[1]));
  FDCE \r_rd_data_o_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[2]),
        .Q(out[2]));
  FDCE \r_rd_data_o_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[3]),
        .Q(out[3]));
  FDCE \r_rd_data_o_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[4]),
        .Q(out[4]));
  FDCE \r_rd_data_o_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[5]),
        .Q(out[5]));
  FDCE \r_rd_data_o_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[6]),
        .Q(out[6]));
  FDCE \r_rd_data_o_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[7]),
        .Q(out[7]));
  FDCE \r_rd_data_o_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[8]),
        .Q(out[8]));
  FDCE \r_rd_data_o_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data_o[9]),
        .Q(out[9]));
  FDCE \r_rd_data_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[0]),
        .Q(r_rd_data[0]));
  FDCE \r_rd_data_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[1]),
        .Q(r_rd_data[1]));
  FDCE \r_rd_data_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[2]),
        .Q(r_rd_data[2]));
  FDCE \r_rd_data_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[3]),
        .Q(r_rd_data[3]));
  FDCE \r_rd_data_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[4]),
        .Q(r_rd_data[4]));
  FDCE \r_rd_data_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[5]),
        .Q(r_rd_data[5]));
  FDCE \r_rd_data_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[6]),
        .Q(r_rd_data[6]));
  FDCE \r_rd_data_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[7]),
        .Q(r_rd_data[7]));
  FDCE \r_rd_data_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[8]),
        .Q(r_rd_data[8]));
  FDCE \r_rd_data_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(ri_rd_data[9]),
        .Q(r_rd_data[9]));
  FDCE r_rd_enable_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_rd_enable),
        .Q(r_rd_enable));
  FDCE \r_slipbits_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_slipbits_reg[3]_0 [0]),
        .Q(r_slipbits[0]));
  FDCE \r_slipbits_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_slipbits_reg[3]_0 [1]),
        .Q(r_slipbits[1]));
  FDCE \r_slipbits_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_slipbits_reg[3]_0 [2]),
        .Q(r_slipbits[2]));
  FDCE \r_slipbits_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_slipbits_reg[3]_0 [3]),
        .Q(r_slipbits[3]));
  FDCE \r_temp_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(data0[9]),
        .Q(\r_temp_reg_n_0_[0] ));
  FDCE \r_temp_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[0]),
        .Q(data0[9]));
  FDCE \r_temp_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[1]),
        .Q(\r_temp_reg_n_0_[11] ));
  FDCE \r_temp_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[2]),
        .Q(\r_temp_reg_n_0_[12] ));
  FDCE \r_temp_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[3]),
        .Q(\r_temp_reg_n_0_[13] ));
  FDCE \r_temp_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[4]),
        .Q(\r_temp_reg_n_0_[14] ));
  FDCE \r_temp_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[5]),
        .Q(\r_temp_reg_n_0_[15] ));
  FDCE \r_temp_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[6]),
        .Q(\r_temp_reg_n_0_[16] ));
  FDCE \r_temp_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[7]),
        .Q(\r_temp_reg_n_0_[17] ));
  FDCE \r_temp_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[8]),
        .Q(\r_temp_reg_n_0_[18] ));
  FDCE \r_temp_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(r_rd_data[9]),
        .Q(\r_temp_reg_n_0_[19] ));
  FDCE \r_temp_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[11] ),
        .Q(data0[0]));
  FDCE \r_temp_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[12] ),
        .Q(data0[1]));
  FDCE \r_temp_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[13] ),
        .Q(data0[2]));
  FDCE \r_temp_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[14] ),
        .Q(data0[3]));
  FDCE \r_temp_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[15] ),
        .Q(data0[4]));
  FDCE \r_temp_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[16] ),
        .Q(data0[5]));
  FDCE \r_temp_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[17] ),
        .Q(data0[6]));
  FDCE \r_temp_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[18] ),
        .Q(data0[7]));
  FDCE \r_temp_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3__0_n_0 ),
        .D(\r_temp_reg_n_0_[19] ),
        .Q(data0[8]));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT4 #(
    .INIT(16'h007F)) 
    \r_wr_addr[0]_i_1__0 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(\r_wr_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT4 #(
    .INIT(16'h552A)) 
    \r_wr_addr[1]_i_1__0 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(ri_wr_addr[1]));
  LUT4 #(
    .INIT(16'h5A70)) 
    \r_wr_addr[2]_i_1__0 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(ri_wr_addr[2]));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT4 #(
    .INIT(16'h6C4C)) 
    \r_wr_addr[3]_i_1__0 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(ri_wr_addr[3]));
  FDCE \r_wr_addr_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(\r_wr_addr[0]_i_1__0_n_0 ),
        .Q(r_wr_addr[0]));
  FDCE \r_wr_addr_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_wr_addr[1]),
        .Q(r_wr_addr[1]));
  FDCE \r_wr_addr_reg[2] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_wr_addr[2]),
        .Q(r_wr_addr[2]));
  FDCE \r_wr_addr_reg[3] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_wr_addr[3]),
        .Q(r_wr_addr[3]));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    ri_rd_enable__0
       (.I0(r_wr_addr[0]),
        .I1(r_wr_addr[1]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[3]),
        .I4(r_rd_enable),
        .O(ri_rd_enable));
endmodule

(* ORIG_REF_NAME = "physical_iob_gearbox_6_10" *) 
module physical_iob_gearbox_6_10_34
   (out,
    \r_rst_reg[1] ,
    \r_rst_reg[1]_0 ,
    i_clk_200,
    CLK,
    \r_rst_reg[0] ,
    \r_rst_reg[1]_1 ,
    D,
    \r_slipbits_reg[3]_0 );
  output [9:0]out;
  output \r_rst_reg[1] ;
  output \r_rst_reg[1]_0 ;
  input i_clk_200;
  input CLK;
  input \r_rst_reg[0] ;
  input \r_rst_reg[1]_1 ;
  input [5:0]D;
  input [3:0]\r_slipbits_reg[3]_0 ;

  wire CLK;
  wire [5:0]D;
  wire [9:0]data0;
  wire i_clk_200;
  wire inst_local_reset_wr_n_1;
  wire local_rd_arst_n;
  (* RTL_KEEP = "inst_sync_read_enable " *) wire o_sync;
  (* RTL_KEEP = "true" *) wire [9:0]out;
  wire [5:0]p_0_in;
  wire [3:0]p_0_in_0;
  wire [5:0]p_1_in;
  wire [1:0]r_mux_sel;
  wire \r_mux_sel[1]_i_1_n_0 ;
  wire \r_rd_addr_a[0]_i_1_n_0 ;
  wire \r_rd_addr_a[1]_i_1_n_0 ;
  wire \r_rd_addr_a[2]_i_1_n_0 ;
  wire \r_rd_addr_a[3]_i_1_n_0 ;
  wire [3:0]r_rd_addr_b;
  wire \r_rd_addr_b[0]_i_1_n_0 ;
  wire \r_rd_addr_b[1]_i_1_n_0 ;
  wire \r_rd_addr_b[2]_i_1_n_0 ;
  wire \r_rd_addr_b[3]_i_1_n_0 ;
  wire \r_rd_addr_b[3]_i_2_n_0 ;
  wire [3:0]r_rd_addr_c;
  wire \r_rd_addr_c[0]_i_1_n_0 ;
  wire \r_rd_addr_c[1]_i_1_n_0 ;
  wire \r_rd_addr_c[3]_i_1_n_0 ;
  wire \r_rd_addr_c[3]_i_2_n_0 ;
  wire \r_rd_addr_c[3]_i_3_n_0 ;
  wire [9:0]r_rd_data;
  wire \r_rd_data_o[0]_i_2_n_0 ;
  wire \r_rd_data_o[0]_i_3_n_0 ;
  wire \r_rd_data_o[1]_i_2_n_0 ;
  wire \r_rd_data_o[1]_i_3_n_0 ;
  wire \r_rd_data_o[2]_i_2_n_0 ;
  wire \r_rd_data_o[2]_i_3_n_0 ;
  wire \r_rd_data_o[3]_i_2_n_0 ;
  wire \r_rd_data_o[3]_i_3_n_0 ;
  wire \r_rd_data_o[4]_i_2_n_0 ;
  wire \r_rd_data_o[4]_i_3_n_0 ;
  wire \r_rd_data_o[5]_i_2_n_0 ;
  wire \r_rd_data_o[5]_i_3_n_0 ;
  wire \r_rd_data_o[6]_i_2_n_0 ;
  wire \r_rd_data_o[6]_i_3_n_0 ;
  wire \r_rd_data_o[6]_i_4_n_0 ;
  wire \r_rd_data_o[7]_i_2_n_0 ;
  wire \r_rd_data_o[7]_i_3_n_0 ;
  wire \r_rd_data_o[7]_i_4_n_0 ;
  wire \r_rd_data_o[8]_i_2_n_0 ;
  wire \r_rd_data_o[8]_i_3_n_0 ;
  wire \r_rd_data_o[8]_i_4_n_0 ;
  wire \r_rd_data_o[9]_i_2_n_0 ;
  wire \r_rd_data_o[9]_i_3_n_0 ;
  wire \r_rd_data_o[9]_i_4_n_0 ;
  wire r_rd_enable;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire \r_rst_reg[1]_1 ;
  wire [3:0]r_slipbits;
  wire [3:0]\r_slipbits_reg[3]_0 ;
  wire \r_temp_reg_n_0_[0] ;
  wire \r_temp_reg_n_0_[11] ;
  wire \r_temp_reg_n_0_[12] ;
  wire \r_temp_reg_n_0_[13] ;
  wire \r_temp_reg_n_0_[14] ;
  wire \r_temp_reg_n_0_[15] ;
  wire \r_temp_reg_n_0_[16] ;
  wire \r_temp_reg_n_0_[17] ;
  wire \r_temp_reg_n_0_[18] ;
  wire \r_temp_reg_n_0_[19] ;
  wire [3:0]r_wr_addr;
  wire \r_wr_addr[0]_i_1_n_0 ;
  wire [9:0]ri_rd_data;
  wire [5:0]ri_rd_data1;
  wire [9:0]ri_rd_data_o;
  wire ri_rd_enable__0;
  wire [3:1]ri_wr_addr;
  wire [1:0]NLW_r_ram_reg_r1_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r3_0_15_0_5_DOD_UNCONNECTED;

  async_reset__parameterized1_49 inst_local_reset_rd
       (.CLK(CLK),
        .out(local_rd_arst_n),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  async_reset__parameterized1_50 inst_local_reset_wr
       (.i_clk_200(i_clk_200),
        .\r_rst_reg[1]_0 (\r_rst_reg[1]_0 ),
        .\r_rst_reg[1]_1 (inst_local_reset_wr_n_1),
        .\r_rst_reg[1]_2 (\r_rst_reg[1]_1 ));
  synchronizer__parameterized0__hierPathDup__3_51 inst_sync_read_enable
       (.CLK(CLK),
        .D(r_rd_enable),
        .out(o_sync),
        .\r_sync_reg[1]_0 (\r_rd_addr_c[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h20000280)) 
    \r_mux_sel[1]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[2]),
        .I3(p_0_in_0[1]),
        .I4(p_0_in_0[0]),
        .O(\r_mux_sel[1]_i_1_n_0 ));
  FDCE \r_mux_sel_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_c[3]_i_1_n_0 ),
        .Q(r_mux_sel[0]));
  FDCE \r_mux_sel_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_mux_sel[1]_i_1_n_0 ),
        .Q(r_mux_sel[1]));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "90" *) 
  (* RTL_RAM_NAME = "inst_physical_layer_top/inst_physical_iob_rx/inst_gearbox/r_ram_reg_r1_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "14" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD235 r_ram_reg_r1_0_15_0_5
       (.ADDRA({1'b0,p_0_in_0}),
        .ADDRB({1'b0,p_0_in_0}),
        .ADDRC({1'b0,p_0_in_0}),
        .ADDRD({1'b0,r_wr_addr}),
        .DIA(D[1:0]),
        .DIB(D[3:2]),
        .DIC(D[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(ri_rd_data1[1:0]),
        .DOB(ri_rd_data1[3:2]),
        .DOC(ri_rd_data1[5:4]),
        .DOD(NLW_r_ram_reg_r1_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(i_clk_200),
        .WE(1'b1));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "90" *) 
  (* RTL_RAM_NAME = "inst_physical_layer_top/inst_physical_iob_rx/inst_gearbox/r_ram_reg_r2_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "14" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD236 r_ram_reg_r2_0_15_0_5
       (.ADDRA({1'b0,r_rd_addr_c}),
        .ADDRB({1'b0,r_rd_addr_c}),
        .ADDRC({1'b0,r_rd_addr_c}),
        .ADDRD({1'b0,r_wr_addr}),
        .DIA(D[1:0]),
        .DIB(D[3:2]),
        .DIC(D[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_1_in[1:0]),
        .DOB(p_1_in[3:2]),
        .DOC(p_1_in[5:4]),
        .DOD(NLW_r_ram_reg_r2_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(i_clk_200),
        .WE(1'b1));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "90" *) 
  (* RTL_RAM_NAME = "inst_physical_layer_top/inst_physical_iob_rx/inst_gearbox/r_ram_reg_r3_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "14" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD237 r_ram_reg_r3_0_15_0_5
       (.ADDRA({1'b0,r_rd_addr_b}),
        .ADDRB({1'b0,r_rd_addr_b}),
        .ADDRC({1'b0,r_rd_addr_b}),
        .ADDRD({1'b0,r_wr_addr}),
        .DIA(D[1:0]),
        .DIB(D[3:2]),
        .DIC(D[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(p_0_in[1:0]),
        .DOB(p_0_in[3:2]),
        .DOC(p_0_in[5:4]),
        .DOD(NLW_r_ram_reg_r3_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(i_clk_200),
        .WE(1'b1));
  LUT5 #(
    .INIT(32'h20220000)) 
    \r_rd_addr_a[0]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[1]),
        .I4(p_0_in_0[2]),
        .O(\r_rd_addr_a[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02202002)) 
    \r_rd_addr_a[1]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[3]),
        .O(\r_rd_addr_a[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00280828)) 
    \r_rd_addr_a[2]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[2]),
        .I2(p_0_in_0[1]),
        .I3(p_0_in_0[0]),
        .I4(p_0_in_0[3]),
        .O(\r_rd_addr_a[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02288000)) 
    \r_rd_addr_a[3]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[2]),
        .I3(p_0_in_0[1]),
        .I4(p_0_in_0[3]),
        .O(\r_rd_addr_a[3]_i_1_n_0 ));
  FDCE \r_rd_addr_a_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_a[0]_i_1_n_0 ),
        .Q(p_0_in_0[0]));
  FDCE \r_rd_addr_a_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_a[1]_i_1_n_0 ),
        .Q(p_0_in_0[1]));
  FDCE \r_rd_addr_a_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_a[2]_i_1_n_0 ),
        .Q(p_0_in_0[2]));
  FDCE \r_rd_addr_a_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_a[3]_i_1_n_0 ),
        .Q(p_0_in_0[3]));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \r_rd_addr_b[0]_i_1 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[0]),
        .I2(p_0_in_0[1]),
        .I3(o_sync),
        .O(\r_rd_addr_b[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00002280)) 
    \r_rd_addr_b[1]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[1]),
        .O(\r_rd_addr_b[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0200)) 
    \r_rd_addr_b[2]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[3]),
        .I3(p_0_in_0[2]),
        .O(\r_rd_addr_b[2]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hBBC6FFFF)) 
    \r_rd_addr_b[3]_i_1 
       (.I0(p_0_in_0[3]),
        .I1(p_0_in_0[2]),
        .I2(p_0_in_0[1]),
        .I3(p_0_in_0[0]),
        .I4(o_sync),
        .O(\r_rd_addr_b[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000080)) 
    \r_rd_addr_b[3]_i_2 
       (.I0(o_sync),
        .I1(p_0_in_0[3]),
        .I2(p_0_in_0[0]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[1]),
        .O(\r_rd_addr_b[3]_i_2_n_0 ));
  FDPE \r_rd_addr_b_reg[0] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1_n_0 ),
        .D(\r_rd_addr_b[0]_i_1_n_0 ),
        .PRE(\r_rd_addr_c[3]_i_3_n_0 ),
        .Q(r_rd_addr_b[0]));
  FDCE \r_rd_addr_b_reg[1] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_b[1]_i_1_n_0 ),
        .Q(r_rd_addr_b[1]));
  FDCE \r_rd_addr_b_reg[2] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_b[2]_i_1_n_0 ),
        .Q(r_rd_addr_b[2]));
  FDCE \r_rd_addr_b_reg[3] 
       (.C(CLK),
        .CE(\r_rd_addr_b[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_b[3]_i_2_n_0 ),
        .Q(r_rd_addr_b[3]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_addr_c[0]_i_1 
       (.I0(p_0_in_0[0]),
        .O(\r_rd_addr_c[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_rd_addr_c[1]_i_1 
       (.I0(p_0_in_0[2]),
        .I1(p_0_in_0[3]),
        .O(\r_rd_addr_c[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h02000082)) 
    \r_rd_addr_c[3]_i_1 
       (.I0(o_sync),
        .I1(p_0_in_0[1]),
        .I2(p_0_in_0[3]),
        .I3(p_0_in_0[2]),
        .I4(p_0_in_0[0]),
        .O(\r_rd_addr_c[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \r_rd_addr_c[3]_i_2 
       (.I0(p_0_in_0[0]),
        .I1(p_0_in_0[3]),
        .O(\r_rd_addr_c[3]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rd_addr_c[3]_i_3 
       (.I0(local_rd_arst_n),
        .O(\r_rd_addr_c[3]_i_3_n_0 ));
  FDCE \r_rd_addr_c_reg[0] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_c[0]_i_1_n_0 ),
        .Q(r_rd_addr_c[0]));
  FDCE \r_rd_addr_c_reg[1] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_c[1]_i_1_n_0 ),
        .Q(r_rd_addr_c[1]));
  FDCE \r_rd_addr_c_reg[2] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(p_0_in_0[3]),
        .Q(r_rd_addr_c[2]));
  FDCE \r_rd_addr_c_reg[3] 
       (.C(CLK),
        .CE(\r_rd_addr_c[3]_i_1_n_0 ),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_rd_addr_c[3]_i_2_n_0 ),
        .Q(r_rd_addr_c[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[0]_i_1 
       (.I0(p_1_in[2]),
        .I1(r_mux_sel[1]),
        .I2(p_0_in[4]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[0]),
        .O(ri_rd_data[0]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[1]_i_1 
       (.I0(p_1_in[3]),
        .I1(r_mux_sel[1]),
        .I2(p_0_in[5]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[1]),
        .O(ri_rd_data[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[2]_i_1 
       (.I0(p_1_in[4]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[0]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[2]),
        .O(ri_rd_data[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[3]_i_1 
       (.I0(p_1_in[5]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[1]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[3]),
        .O(ri_rd_data[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[4]_i_1 
       (.I0(ri_rd_data1[0]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[2]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[4]),
        .O(ri_rd_data[4]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[5]_i_1 
       (.I0(ri_rd_data1[1]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[3]),
        .I3(r_mux_sel[0]),
        .I4(ri_rd_data1[5]),
        .O(ri_rd_data[5]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[6]_i_1 
       (.I0(ri_rd_data1[2]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[4]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[0]),
        .O(ri_rd_data[6]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[7]_i_1 
       (.I0(ri_rd_data1[3]),
        .I1(r_mux_sel[1]),
        .I2(ri_rd_data1[5]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[1]),
        .O(ri_rd_data[7]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[8]_i_1 
       (.I0(ri_rd_data1[4]),
        .I1(r_mux_sel[1]),
        .I2(p_1_in[0]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[2]),
        .O(ri_rd_data[8]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data[9]_i_1 
       (.I0(ri_rd_data1[5]),
        .I1(r_mux_sel[1]),
        .I2(p_1_in[1]),
        .I3(r_mux_sel[0]),
        .I4(p_0_in[3]),
        .O(ri_rd_data[9]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[0]_i_1 
       (.I0(\r_rd_data_o[0]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[4]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[0]_i_3_n_0 ),
        .O(ri_rd_data_o[0]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[0]_i_2 
       (.I0(\r_temp_reg_n_0_[0] ),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(data0[8]),
        .I4(r_slipbits[0]),
        .I5(data0[7]),
        .O(\r_rd_data_o[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[0]_i_3 
       (.I0(data0[2]),
        .I1(data0[1]),
        .I2(r_slipbits[1]),
        .I3(data0[0]),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[0] ),
        .O(\r_rd_data_o[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[1]_i_1 
       (.I0(\r_rd_data_o[1]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[5]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[1]_i_3_n_0 ),
        .O(ri_rd_data_o[1]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[1]_i_2 
       (.I0(data0[0]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(data0[9]),
        .I4(r_slipbits[0]),
        .I5(data0[8]),
        .O(\r_rd_data_o[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[1]_i_3 
       (.I0(data0[3]),
        .I1(data0[2]),
        .I2(r_slipbits[1]),
        .I3(data0[1]),
        .I4(r_slipbits[0]),
        .I5(data0[0]),
        .O(\r_rd_data_o[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[2]_i_1 
       (.I0(\r_rd_data_o[2]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[6]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[2]_i_3_n_0 ),
        .O(ri_rd_data_o[2]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[2]_i_2 
       (.I0(data0[1]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[11] ),
        .I4(r_slipbits[0]),
        .I5(data0[9]),
        .O(\r_rd_data_o[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[2]_i_3 
       (.I0(data0[4]),
        .I1(data0[3]),
        .I2(r_slipbits[1]),
        .I3(data0[2]),
        .I4(r_slipbits[0]),
        .I5(data0[1]),
        .O(\r_rd_data_o[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[3]_i_1 
       (.I0(\r_rd_data_o[3]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[7]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[3]_i_3_n_0 ),
        .O(ri_rd_data_o[3]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[3]_i_2 
       (.I0(data0[2]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[12] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[11] ),
        .O(\r_rd_data_o[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[3]_i_3 
       (.I0(data0[5]),
        .I1(data0[4]),
        .I2(r_slipbits[1]),
        .I3(data0[3]),
        .I4(r_slipbits[0]),
        .I5(data0[2]),
        .O(\r_rd_data_o[3]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[4]_i_1 
       (.I0(\r_rd_data_o[4]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[8]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[4]_i_3_n_0 ),
        .O(ri_rd_data_o[4]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[4]_i_2 
       (.I0(data0[3]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[13] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[12] ),
        .O(\r_rd_data_o[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[4]_i_3 
       (.I0(data0[6]),
        .I1(data0[5]),
        .I2(r_slipbits[1]),
        .I3(data0[4]),
        .I4(r_slipbits[0]),
        .I5(data0[3]),
        .O(\r_rd_data_o[4]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[5]_i_1 
       (.I0(\r_rd_data_o[5]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[9]_i_4_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[5]_i_3_n_0 ),
        .O(ri_rd_data_o[5]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[5]_i_2 
       (.I0(data0[4]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[14] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[13] ),
        .O(\r_rd_data_o[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[5]_i_3 
       (.I0(data0[7]),
        .I1(data0[6]),
        .I2(r_slipbits[1]),
        .I3(data0[5]),
        .I4(r_slipbits[0]),
        .I5(data0[4]),
        .O(\r_rd_data_o[5]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[6]_i_1 
       (.I0(\r_rd_data_o[6]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[6]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[6]_i_4_n_0 ),
        .O(ri_rd_data_o[6]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[6]_i_2 
       (.I0(data0[5]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[15] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[14] ),
        .O(\r_rd_data_o[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[6]_i_3 
       (.I0(\r_temp_reg_n_0_[13] ),
        .I1(\r_temp_reg_n_0_[12] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[11] ),
        .I4(r_slipbits[0]),
        .I5(data0[9]),
        .O(\r_rd_data_o[6]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[6]_i_4 
       (.I0(data0[8]),
        .I1(data0[7]),
        .I2(r_slipbits[1]),
        .I3(data0[6]),
        .I4(r_slipbits[0]),
        .I5(data0[5]),
        .O(\r_rd_data_o[6]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[7]_i_1 
       (.I0(\r_rd_data_o[7]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[7]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[7]_i_4_n_0 ),
        .O(ri_rd_data_o[7]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[7]_i_2 
       (.I0(data0[6]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[16] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[15] ),
        .O(\r_rd_data_o[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[7]_i_3 
       (.I0(\r_temp_reg_n_0_[14] ),
        .I1(\r_temp_reg_n_0_[13] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[12] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[11] ),
        .O(\r_rd_data_o[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[7]_i_4 
       (.I0(data0[9]),
        .I1(data0[8]),
        .I2(r_slipbits[1]),
        .I3(data0[7]),
        .I4(r_slipbits[0]),
        .I5(data0[6]),
        .O(\r_rd_data_o[7]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[8]_i_1 
       (.I0(\r_rd_data_o[8]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[8]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[8]_i_4_n_0 ),
        .O(ri_rd_data_o[8]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[8]_i_2 
       (.I0(data0[7]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[17] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[16] ),
        .O(\r_rd_data_o[8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[8]_i_3 
       (.I0(\r_temp_reg_n_0_[15] ),
        .I1(\r_temp_reg_n_0_[14] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[13] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[12] ),
        .O(\r_rd_data_o[8]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[8]_i_4 
       (.I0(\r_temp_reg_n_0_[11] ),
        .I1(data0[9]),
        .I2(r_slipbits[1]),
        .I3(data0[8]),
        .I4(r_slipbits[0]),
        .I5(data0[7]),
        .O(\r_rd_data_o[8]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \r_rd_data_o[9]_i_1 
       (.I0(\r_rd_data_o[9]_i_2_n_0 ),
        .I1(r_slipbits[3]),
        .I2(\r_rd_data_o[9]_i_3_n_0 ),
        .I3(r_slipbits[2]),
        .I4(\r_rd_data_o[9]_i_4_n_0 ),
        .O(ri_rd_data_o[9]));
  LUT6 #(
    .INIT(64'hABA8ABABABA8A8A8)) 
    \r_rd_data_o[9]_i_2 
       (.I0(data0[8]),
        .I1(r_slipbits[1]),
        .I2(r_slipbits[2]),
        .I3(\r_temp_reg_n_0_[18] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[17] ),
        .O(\r_rd_data_o[9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[9]_i_3 
       (.I0(\r_temp_reg_n_0_[16] ),
        .I1(\r_temp_reg_n_0_[15] ),
        .I2(r_slipbits[1]),
        .I3(\r_temp_reg_n_0_[14] ),
        .I4(r_slipbits[0]),
        .I5(\r_temp_reg_n_0_[13] ),
        .O(\r_rd_data_o[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \r_rd_data_o[9]_i_4 
       (.I0(\r_temp_reg_n_0_[12] ),
        .I1(\r_temp_reg_n_0_[11] ),
        .I2(r_slipbits[1]),
        .I3(data0[9]),
        .I4(r_slipbits[0]),
        .I5(data0[8]),
        .O(\r_rd_data_o[9]_i_4_n_0 ));
  FDCE \r_rd_data_o_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[0]),
        .Q(out[0]));
  FDCE \r_rd_data_o_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[1]),
        .Q(out[1]));
  FDCE \r_rd_data_o_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[2]),
        .Q(out[2]));
  FDCE \r_rd_data_o_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[3]),
        .Q(out[3]));
  FDCE \r_rd_data_o_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[4]),
        .Q(out[4]));
  FDCE \r_rd_data_o_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[5]),
        .Q(out[5]));
  FDCE \r_rd_data_o_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[6]),
        .Q(out[6]));
  FDCE \r_rd_data_o_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[7]),
        .Q(out[7]));
  FDCE \r_rd_data_o_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[8]),
        .Q(out[8]));
  FDCE \r_rd_data_o_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data_o[9]),
        .Q(out[9]));
  FDCE \r_rd_data_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[0]),
        .Q(r_rd_data[0]));
  FDCE \r_rd_data_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[1]),
        .Q(r_rd_data[1]));
  FDCE \r_rd_data_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[2]),
        .Q(r_rd_data[2]));
  FDCE \r_rd_data_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[3]),
        .Q(r_rd_data[3]));
  FDCE \r_rd_data_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[4]),
        .Q(r_rd_data[4]));
  FDCE \r_rd_data_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[5]),
        .Q(r_rd_data[5]));
  FDCE \r_rd_data_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[6]),
        .Q(r_rd_data[6]));
  FDCE \r_rd_data_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[7]),
        .Q(r_rd_data[7]));
  FDCE \r_rd_data_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[8]),
        .Q(r_rd_data[8]));
  FDCE \r_rd_data_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(ri_rd_data[9]),
        .Q(r_rd_data[9]));
  FDCE r_rd_enable_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_rd_enable__0),
        .Q(r_rd_enable));
  FDCE \r_slipbits_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_slipbits_reg[3]_0 [0]),
        .Q(r_slipbits[0]));
  FDCE \r_slipbits_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_slipbits_reg[3]_0 [1]),
        .Q(r_slipbits[1]));
  FDCE \r_slipbits_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_slipbits_reg[3]_0 [2]),
        .Q(r_slipbits[2]));
  FDCE \r_slipbits_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_slipbits_reg[3]_0 [3]),
        .Q(r_slipbits[3]));
  FDCE \r_temp_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(data0[9]),
        .Q(\r_temp_reg_n_0_[0] ));
  FDCE \r_temp_reg[10] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[0]),
        .Q(data0[9]));
  FDCE \r_temp_reg[11] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[1]),
        .Q(\r_temp_reg_n_0_[11] ));
  FDCE \r_temp_reg[12] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[2]),
        .Q(\r_temp_reg_n_0_[12] ));
  FDCE \r_temp_reg[13] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[3]),
        .Q(\r_temp_reg_n_0_[13] ));
  FDCE \r_temp_reg[14] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[4]),
        .Q(\r_temp_reg_n_0_[14] ));
  FDCE \r_temp_reg[15] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[5]),
        .Q(\r_temp_reg_n_0_[15] ));
  FDCE \r_temp_reg[16] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[6]),
        .Q(\r_temp_reg_n_0_[16] ));
  FDCE \r_temp_reg[17] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[7]),
        .Q(\r_temp_reg_n_0_[17] ));
  FDCE \r_temp_reg[18] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[8]),
        .Q(\r_temp_reg_n_0_[18] ));
  FDCE \r_temp_reg[19] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(r_rd_data[9]),
        .Q(\r_temp_reg_n_0_[19] ));
  FDCE \r_temp_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[11] ),
        .Q(data0[0]));
  FDCE \r_temp_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[12] ),
        .Q(data0[1]));
  FDCE \r_temp_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[13] ),
        .Q(data0[2]));
  FDCE \r_temp_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[14] ),
        .Q(data0[3]));
  FDCE \r_temp_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[15] ),
        .Q(data0[4]));
  FDCE \r_temp_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[16] ),
        .Q(data0[5]));
  FDCE \r_temp_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[17] ),
        .Q(data0[6]));
  FDCE \r_temp_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[18] ),
        .Q(data0[7]));
  FDCE \r_temp_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_rd_addr_c[3]_i_3_n_0 ),
        .D(\r_temp_reg_n_0_[19] ),
        .Q(data0[8]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT4 #(
    .INIT(16'h007F)) 
    \r_wr_addr[0]_i_1 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(\r_wr_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT4 #(
    .INIT(16'h552A)) 
    \r_wr_addr[1]_i_1 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(ri_wr_addr[1]));
  LUT4 #(
    .INIT(16'h5A70)) 
    \r_wr_addr[2]_i_1 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(ri_wr_addr[2]));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT4 #(
    .INIT(16'h6C4C)) 
    \r_wr_addr[3]_i_1 
       (.I0(r_wr_addr[1]),
        .I1(r_wr_addr[3]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[0]),
        .O(ri_wr_addr[3]));
  FDCE \r_wr_addr_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(\r_wr_addr[0]_i_1_n_0 ),
        .Q(r_wr_addr[0]));
  FDCE \r_wr_addr_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_wr_addr[1]),
        .Q(r_wr_addr[1]));
  FDCE \r_wr_addr_reg[2] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_wr_addr[2]),
        .Q(r_wr_addr[2]));
  FDCE \r_wr_addr_reg[3] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_local_reset_wr_n_1),
        .D(ri_wr_addr[3]),
        .Q(r_wr_addr[3]));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'hFFFF0004)) 
    ri_rd_enable
       (.I0(r_wr_addr[0]),
        .I1(r_wr_addr[1]),
        .I2(r_wr_addr[2]),
        .I3(r_wr_addr[3]),
        .I4(r_rd_enable),
        .O(ri_rd_enable__0));
endmodule

module physical_iob_init_tab_cal
   (out,
    o_edge_tabs,
    o_done,
    o_fail,
    r_start_reg_0,
    o_clk_200,
    \r_rst_reg[0] ,
    D);
  output [4:0]out;
  output [4:0]o_edge_tabs;
  output o_done;
  output o_fail;
  input r_start_reg_0;
  input o_clk_200;
  input \r_rst_reg[0] ;
  input [5:0]D;

  wire [5:0]D;
  wire inst_async_reset_n_0;
  wire o_clk_200;
  (* RTL_KEEP = "true" *) wire o_done;
  (* RTL_KEEP = "true" *) wire [4:0]o_edge_tabs;
  (* RTL_KEEP = "true" *) wire o_fail;
  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire p_0_in;
  wire p_0_in0_in;
  wire [3:0]p_0_in__3;
  wire p_1_in;
  wire [0:0]p_1_out;
  wire r_cal_done_i_1__0_n_0;
  wire r_cal_fail_i_1__0_n_0;
  wire r_edge_left;
  wire r_edge_left_i_1__0_n_0;
  wire r_edge_right;
  wire r_edge_right_i_1__0_n_0;
  wire \r_edge_tabs[2]_i_1__0_n_0 ;
  wire \r_edge_tabs[4]_i_1__0_n_0 ;
  wire \r_edge_tabs[4]_i_2__0_n_0 ;
  wire [6:0]r_filter_shift;
  wire \r_filter_shift[0]_i_2__1_n_0 ;
  wire \r_filter_shift[0]_i_3__1_n_0 ;
  wire \r_filter_shift_reg_n_0_[7] ;
  wire [0:0]r_loop_cnt;
  wire \r_loop_cnt[0]_i_1__0_n_0 ;
  wire \r_loop_cnt[0]_i_2__0_n_0 ;
  wire \r_rst_reg[0] ;
  wire r_sample_diff;
  wire \r_sample_shift_reg_n_0_[0] ;
  wire \r_sample_shift_reg_n_0_[10] ;
  wire \r_sample_shift_reg_n_0_[11] ;
  wire \r_sample_shift_reg_n_0_[1] ;
  wire \r_sample_shift_reg_n_0_[2] ;
  wire \r_sample_shift_reg_n_0_[3] ;
  wire \r_sample_shift_reg_n_0_[4] ;
  wire \r_sample_shift_reg_n_0_[5] ;
  wire \r_sample_shift_reg_n_0_[6] ;
  wire \r_sample_shift_reg_n_0_[7] ;
  wire \r_sample_shift_reg_n_0_[8] ;
  wire \r_sample_shift_reg_n_0_[9] ;
  wire [5:0]r_serdes_i;
  wire r_start;
  wire r_start_reg_0;
  wire \r_state[0]_i_2__8_n_0 ;
  wire \r_state[0]_i_3__7_n_0 ;
  wire \r_state[0]_i_4__6_n_0 ;
  wire \r_state[0]_i_5__4_n_0 ;
  wire \r_state[0]_i_6__2_n_0 ;
  wire \r_state[11]_i_2__2_n_0 ;
  wire \r_state[11]_i_3__4_n_0 ;
  wire \r_state[12]_i_2__3_n_0 ;
  wire \r_state[12]_i_3__3_n_0 ;
  wire \r_state[12]_i_4__2_n_0 ;
  wire \r_state[14]_i_10__0_n_0 ;
  wire \r_state[14]_i_11__0_n_0 ;
  wire \r_state[14]_i_1__1_n_0 ;
  wire \r_state[14]_i_4__1_n_0 ;
  wire \r_state[14]_i_5__0_n_0 ;
  wire \r_state[14]_i_6__0_n_0 ;
  wire \r_state[14]_i_7__0_n_0 ;
  wire \r_state[14]_i_8__0_n_0 ;
  wire \r_state[14]_i_9__0_n_0 ;
  wire \r_state[1]_i_2__1_n_0 ;
  wire \r_state[2]_i_2__8_n_0 ;
  wire \r_state[2]_i_3__3_n_0 ;
  wire \r_state[3]_i_2__5_n_0 ;
  wire \r_state[3]_i_3__1_n_0 ;
  wire \r_state[4]_i_2__2_n_0 ;
  wire \r_state[4]_i_3__3_n_0 ;
  wire \r_state[7]_i_2__6_n_0 ;
  wire \r_state[7]_i_3__2_n_0 ;
  wire \r_state[7]_i_4__2_n_0 ;
  wire \r_state[7]_i_5__1_n_0 ;
  wire \r_state[8]_i_1__7_n_0 ;
  wire \r_state[9]_i_2__6_n_0 ;
  wire \r_state[9]_i_3__2_n_0 ;
  wire \r_state_reg_n_0_[0] ;
  wire \r_state_reg_n_0_[10] ;
  wire \r_state_reg_n_0_[11] ;
  wire \r_state_reg_n_0_[12] ;
  wire \r_state_reg_n_0_[14] ;
  wire \r_state_reg_n_0_[2] ;
  wire \r_state_reg_n_0_[3] ;
  wire \r_state_reg_n_0_[4] ;
  wire \r_state_reg_n_0_[5] ;
  wire \r_state_reg_n_0_[7] ;
  wire \r_state_reg_n_0_[8] ;
  wire \r_state_reg_n_0_[9] ;
  wire \r_tab_delay[0]_i_1__0_n_0 ;
  wire \r_tab_delay[1]_i_1__0_n_0 ;
  wire \r_tab_delay[2]_i_2__0_n_0 ;
  wire \r_tab_delay[3]_i_1__0_n_0 ;
  wire \r_tab_delay[4]_i_1__0_n_0 ;
  wire \r_tab_delay[4]_i_2__0_n_0 ;
  wire \r_tab_delay[4]_i_3__0_n_0 ;
  wire \r_tab_delay[4]_i_4__0_n_0 ;
  wire [3:0]r_wait_init_reg;
  wire r_window_valid;
  wire r_window_valid_i_1__0_n_0;
  wire [3:0]ri_edge_tabs;
  wire ri_filter_shift;
  wire ri_sample_diff;
  wire ri_sample_shift;
  wire [14:0]ri_state;
  wire [2:2]ri_tab_delay;
  wire ri_wait_init;

  async_reset__parameterized1_8 inst_async_reset
       (.o_clk_200(o_clk_200),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_async_reset_n_0));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'h54)) 
    r_cal_done_i_1__0
       (.I0(p_1_in),
        .I1(o_done),
        .I2(p_0_in0_in),
        .O(r_cal_done_i_1__0_n_0));
  FDCE r_cal_done_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_cal_done_i_1__0_n_0),
        .Q(o_done));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT3 #(
    .INIT(8'h54)) 
    r_cal_fail_i_1__0
       (.I0(p_1_in),
        .I1(o_fail),
        .I2(\r_state_reg_n_0_[14] ),
        .O(r_cal_fail_i_1__0_n_0));
  FDCE r_cal_fail_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_cal_fail_i_1__0_n_0),
        .Q(o_fail));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT5 #(
    .INIT(32'h44454444)) 
    r_edge_left_i_1__0
       (.I0(p_1_in),
        .I1(r_edge_left),
        .I2(p_1_out),
        .I3(r_sample_diff),
        .I4(r_window_valid),
        .O(r_edge_left_i_1__0_n_0));
  FDCE r_edge_left_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_edge_left_i_1__0_n_0),
        .Q(r_edge_left));
  LUT5 #(
    .INIT(32'h55550004)) 
    r_edge_right_i_1__0
       (.I0(p_1_in),
        .I1(r_edge_left),
        .I2(p_1_out),
        .I3(r_sample_diff),
        .I4(r_edge_right),
        .O(r_edge_right_i_1__0_n_0));
  FDCE r_edge_right_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_edge_right_i_1__0_n_0),
        .Q(r_edge_right));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_edge_tabs[0]_i_1__0 
       (.I0(p_1_in),
        .I1(o_edge_tabs[0]),
        .O(ri_edge_tabs[0]));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_edge_tabs[1]_i_1__0 
       (.I0(o_edge_tabs[1]),
        .I1(o_edge_tabs[0]),
        .I2(p_1_in),
        .O(ri_edge_tabs[1]));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT4 #(
    .INIT(16'h1540)) 
    \r_edge_tabs[2]_i_1__0 
       (.I0(p_1_in),
        .I1(o_edge_tabs[0]),
        .I2(o_edge_tabs[1]),
        .I3(o_edge_tabs[2]),
        .O(\r_edge_tabs[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT5 #(
    .INIT(32'h00007F80)) 
    \r_edge_tabs[3]_i_1__0 
       (.I0(o_edge_tabs[1]),
        .I1(o_edge_tabs[0]),
        .I2(o_edge_tabs[2]),
        .I3(o_edge_tabs[3]),
        .I4(p_1_in),
        .O(ri_edge_tabs[3]));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \r_edge_tabs[4]_i_1__0 
       (.I0(p_1_in),
        .I1(p_0_in),
        .I2(r_edge_left),
        .I3(r_edge_right),
        .O(\r_edge_tabs[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h1555555540000000)) 
    \r_edge_tabs[4]_i_2__0 
       (.I0(p_1_in),
        .I1(o_edge_tabs[3]),
        .I2(o_edge_tabs[2]),
        .I3(o_edge_tabs[0]),
        .I4(o_edge_tabs[1]),
        .I5(o_edge_tabs[4]),
        .O(\r_edge_tabs[4]_i_2__0_n_0 ));
  FDCE \r_edge_tabs_reg[0] 
       (.C(o_clk_200),
        .CE(\r_edge_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_edge_tabs[0]),
        .Q(o_edge_tabs[0]));
  FDCE \r_edge_tabs_reg[1] 
       (.C(o_clk_200),
        .CE(\r_edge_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_edge_tabs[1]),
        .Q(o_edge_tabs[1]));
  FDCE \r_edge_tabs_reg[2] 
       (.C(o_clk_200),
        .CE(\r_edge_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_edge_tabs[2]_i_1__0_n_0 ),
        .Q(o_edge_tabs[2]));
  FDCE \r_edge_tabs_reg[3] 
       (.C(o_clk_200),
        .CE(\r_edge_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_edge_tabs[3]),
        .Q(o_edge_tabs[3]));
  FDCE \r_edge_tabs_reg[4] 
       (.C(o_clk_200),
        .CE(\r_edge_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_edge_tabs[4]_i_2__0_n_0 ),
        .Q(o_edge_tabs[4]));
  LUT6 #(
    .INIT(64'h0000000000009009)) 
    \r_filter_shift[0]_i_1__1 
       (.I0(\r_sample_shift_reg_n_0_[7] ),
        .I1(\r_sample_shift_reg_n_0_[1] ),
        .I2(\r_sample_shift_reg_n_0_[6] ),
        .I3(\r_sample_shift_reg_n_0_[0] ),
        .I4(\r_filter_shift[0]_i_2__1_n_0 ),
        .I5(\r_filter_shift[0]_i_3__1_n_0 ),
        .O(p_1_out));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \r_filter_shift[0]_i_2__1 
       (.I0(\r_sample_shift_reg_n_0_[2] ),
        .I1(\r_sample_shift_reg_n_0_[8] ),
        .I2(\r_sample_shift_reg_n_0_[3] ),
        .I3(\r_sample_shift_reg_n_0_[9] ),
        .O(\r_filter_shift[0]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \r_filter_shift[0]_i_3__1 
       (.I0(\r_sample_shift_reg_n_0_[4] ),
        .I1(\r_sample_shift_reg_n_0_[10] ),
        .I2(\r_sample_shift_reg_n_0_[5] ),
        .I3(\r_sample_shift_reg_n_0_[11] ),
        .O(\r_filter_shift[0]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_filter_shift[7]_i_1__0 
       (.I0(\r_state[3]_i_2__5_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_state[3]_i_3__1_n_0 ),
        .O(ri_filter_shift));
  FDCE \r_filter_shift_reg[0] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(p_1_out),
        .Q(r_filter_shift[0]));
  FDCE \r_filter_shift_reg[1] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[0]),
        .Q(r_filter_shift[1]));
  FDCE \r_filter_shift_reg[2] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[1]),
        .Q(r_filter_shift[2]));
  FDCE \r_filter_shift_reg[3] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[2]),
        .Q(r_filter_shift[3]));
  FDCE \r_filter_shift_reg[4] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[3]),
        .Q(r_filter_shift[4]));
  FDCE \r_filter_shift_reg[5] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[4]),
        .Q(r_filter_shift[5]));
  FDCE \r_filter_shift_reg[6] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[5]),
        .Q(r_filter_shift[6]));
  FDCE \r_filter_shift_reg[7] 
       (.C(o_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[6]),
        .Q(\r_filter_shift_reg_n_0_[7] ));
  LUT6 #(
    .INIT(64'hFDFFFFFF02000000)) 
    \r_loop_cnt[0]_i_1__0 
       (.I0(\r_loop_cnt[0]_i_2__0_n_0 ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(\r_state[11]_i_3__4_n_0 ),
        .I5(r_loop_cnt),
        .O(\r_loop_cnt[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_loop_cnt[0]_i_2__0 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(p_0_in),
        .O(\r_loop_cnt[0]_i_2__0_n_0 ));
  FDCE \r_loop_cnt_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_loop_cnt[0]_i_1__0_n_0 ),
        .Q(r_loop_cnt));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_sample_diff_i_1__0
       (.I0(p_1_out),
        .O(ri_sample_diff));
  FDCE r_sample_diff_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_sample_diff),
        .Q(r_sample_diff));
  FDCE \r_sample_shift_reg[0] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[0]),
        .Q(\r_sample_shift_reg_n_0_[0] ));
  FDCE \r_sample_shift_reg[10] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[4] ),
        .Q(\r_sample_shift_reg_n_0_[10] ));
  FDCE \r_sample_shift_reg[11] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[5] ),
        .Q(\r_sample_shift_reg_n_0_[11] ));
  FDCE \r_sample_shift_reg[1] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[1]),
        .Q(\r_sample_shift_reg_n_0_[1] ));
  FDCE \r_sample_shift_reg[2] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[2]),
        .Q(\r_sample_shift_reg_n_0_[2] ));
  FDCE \r_sample_shift_reg[3] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[3]),
        .Q(\r_sample_shift_reg_n_0_[3] ));
  FDCE \r_sample_shift_reg[4] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[4]),
        .Q(\r_sample_shift_reg_n_0_[4] ));
  FDCE \r_sample_shift_reg[5] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[5]),
        .Q(\r_sample_shift_reg_n_0_[5] ));
  FDCE \r_sample_shift_reg[6] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[0] ),
        .Q(\r_sample_shift_reg_n_0_[6] ));
  FDCE \r_sample_shift_reg[7] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[1] ),
        .Q(\r_sample_shift_reg_n_0_[7] ));
  FDCE \r_sample_shift_reg[8] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[2] ),
        .Q(\r_sample_shift_reg_n_0_[8] ));
  FDCE \r_sample_shift_reg[9] 
       (.C(o_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[3] ),
        .Q(\r_sample_shift_reg_n_0_[9] ));
  FDCE \r_serdes_i_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[0]),
        .Q(r_serdes_i[0]));
  FDCE \r_serdes_i_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[1]),
        .Q(r_serdes_i[1]));
  FDCE \r_serdes_i_reg[2] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[2]),
        .Q(r_serdes_i[2]));
  FDCE \r_serdes_i_reg[3] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[3]),
        .Q(r_serdes_i[3]));
  FDCE \r_serdes_i_reg[4] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[4]),
        .Q(r_serdes_i[4]));
  FDCE \r_serdes_i_reg[5] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[5]),
        .Q(r_serdes_i[5]));
  FDCE r_start_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_start_reg_0),
        .Q(r_start));
  LUT6 #(
    .INIT(64'hFFFFFFFF55555554)) 
    \r_state[0]_i_1__9 
       (.I0(\r_state[0]_i_2__8_n_0 ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_state[0]_i_3__7_n_0 ),
        .I5(\r_state[0]_i_4__6_n_0 ),
        .O(ri_state[0]));
  LUT6 #(
    .INIT(64'h0000000000010111)) 
    \r_state[0]_i_2__8 
       (.I0(\r_state[0]_i_5__4_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(p_1_in),
        .I5(\r_state[4]_i_3__3_n_0 ),
        .O(\r_state[0]_i_2__8_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFCC0)) 
    \r_state[0]_i_3__7 
       (.I0(\r_state[0]_i_6__2_n_0 ),
        .I1(\r_state_reg_n_0_[4] ),
        .I2(p_0_in),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(\r_state[0]_i_5__4_n_0 ),
        .O(\r_state[0]_i_3__7_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA9AAAAAAAA)) 
    \r_state[0]_i_4__6 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[11] ),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state[14]_i_5__0_n_0 ),
        .O(\r_state[0]_i_4__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[0]_i_5__4 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state_reg_n_0_[11] ),
        .I3(\r_state[12]_i_4__2_n_0 ),
        .I4(\r_state_reg_n_0_[9] ),
        .I5(\r_state_reg_n_0_[10] ),
        .O(\r_state[0]_i_5__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEEC)) 
    \r_state[0]_i_6__2 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(\r_state[12]_i_4__2_n_0 ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[11] ),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state_reg_n_0_[9] ),
        .O(\r_state[0]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \r_state[10]_i_1__3 
       (.I0(\r_state[12]_i_2__3_n_0 ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state[14]_i_6__0_n_0 ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(\r_state[12]_i_4__2_n_0 ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(ri_state[10]));
  LUT6 #(
    .INIT(64'h0000013C00000000)) 
    \r_state[11]_i_1__3 
       (.I0(\r_state[14]_i_9__0_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(p_0_in),
        .I4(\r_state[11]_i_2__2_n_0 ),
        .I5(\r_state[11]_i_3__4_n_0 ),
        .O(ri_state[11]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \r_state[11]_i_2__2 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[4] ),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(r_loop_cnt),
        .O(\r_state[11]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[11]_i_3__4 
       (.I0(\r_state[1]_i_2__1_n_0 ),
        .I1(\r_state_reg_n_0_[3] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(p_1_in),
        .I4(\r_state_reg_n_0_[0] ),
        .O(\r_state[11]_i_3__4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \r_state[12]_i_1__3 
       (.I0(\r_state[12]_i_2__3_n_0 ),
        .I1(\r_state[12]_i_3__3_n_0 ),
        .I2(\r_state_reg_n_0_[11] ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(\r_state[12]_i_4__2_n_0 ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(ri_state[12]));
  LUT5 #(
    .INIT(32'h00000004)) 
    \r_state[12]_i_2__3 
       (.I0(\r_state_reg_n_0_[4] ),
        .I1(\r_loop_cnt[0]_i_2__0_n_0 ),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[3] ),
        .O(\r_state[12]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_3__3 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state_reg_n_0_[10] ),
        .O(\r_state[12]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_4__2 
       (.I0(\r_state_reg_n_0_[14] ),
        .I1(p_0_in0_in),
        .O(\r_state[12]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \r_state[13]_i_1__2 
       (.I0(r_edge_right),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(p_0_in),
        .I4(\r_state_reg_n_0_[7] ),
        .I5(\r_state[14]_i_7__0_n_0 ),
        .O(ri_state[13]));
  LUT3 #(
    .INIT(8'h80)) 
    \r_state[14]_i_10__0 
       (.I0(r_wait_init_reg[2]),
        .I1(r_wait_init_reg[1]),
        .I2(r_wait_init_reg[0]),
        .O(\r_state[14]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[14]_i_11__0 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[5] ),
        .O(\r_state[14]_i_11__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFBFFFFFFFF)) 
    \r_state[14]_i_1__1 
       (.I0(\r_state[14]_i_4__1_n_0 ),
        .I1(\r_state[14]_i_5__0_n_0 ),
        .I2(\r_state_reg_n_0_[14] ),
        .I3(p_0_in0_in),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state[14]_i_6__0_n_0 ),
        .O(\r_state[14]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    \r_state[14]_i_2__1 
       (.I0(\r_state[14]_i_7__0_n_0 ),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(p_0_in),
        .I5(\r_state[14]_i_9__0_n_0 ),
        .O(ri_state[14]));
  LUT6 #(
    .INIT(64'hF08FFF8FF08FF08F)) 
    \r_state[14]_i_4__1 
       (.I0(r_wait_init_reg[3]),
        .I1(\r_state[14]_i_10__0_n_0 ),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(r_start),
        .I5(r_start_reg_0),
        .O(\r_state[14]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[14]_i_5__0 
       (.I0(\r_state[14]_i_11__0_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(p_0_in),
        .O(\r_state[14]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[14]_i_6__0 
       (.I0(\r_state_reg_n_0_[10] ),
        .I1(\r_state_reg_n_0_[11] ),
        .O(\r_state[14]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \r_state[14]_i_7__0 
       (.I0(\r_state[14]_i_6__0_n_0 ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state[12]_i_4__2_n_0 ),
        .I3(p_1_in),
        .I4(\r_state_reg_n_0_[9] ),
        .I5(\r_state_reg_n_0_[8] ),
        .O(\r_state[14]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[14]_i_8__0 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(\r_state_reg_n_0_[4] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state_reg_n_0_[2] ),
        .O(\r_state[14]_i_8__0_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_state[14]_i_9__0 
       (.I0(out[3]),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(out[4]),
        .O(\r_state[14]_i_9__0_n_0 ));
  LUT5 #(
    .INIT(32'h00080000)) 
    \r_state[1]_i_1__9 
       (.I0(\r_state[12]_i_2__3_n_0 ),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[9] ),
        .I4(\r_state[1]_i_2__1_n_0 ),
        .O(ri_state[1]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[1]_i_2__1 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(\r_state_reg_n_0_[11] ),
        .I2(p_0_in0_in),
        .I3(\r_state_reg_n_0_[14] ),
        .O(\r_state[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0202020202020222)) 
    \r_state[2]_i_1__9 
       (.I0(\r_state[2]_i_2__8_n_0 ),
        .I1(\r_state[2]_i_3__3_n_0 ),
        .I2(p_1_in),
        .I3(p_0_in),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(\r_state_reg_n_0_[10] ),
        .O(ri_state[2]));
  LUT6 #(
    .INIT(64'hAAAAABBAAAABABBA)) 
    \r_state[2]_i_2__8 
       (.I0(p_1_in),
        .I1(r_loop_cnt),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(p_0_in),
        .I5(\r_state[14]_i_9__0_n_0 ),
        .O(\r_state[2]_i_2__8_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \r_state[2]_i_3__3 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state[14]_i_8__0_n_0 ),
        .I4(\r_state[1]_i_2__1_n_0 ),
        .O(\r_state[2]_i_3__3_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_state[3]_i_1__9 
       (.I0(\r_state[3]_i_2__5_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(p_1_in),
        .I4(\r_state[3]_i_3__1_n_0 ),
        .O(ri_sample_shift));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[3]_i_2__5 
       (.I0(\r_loop_cnt[0]_i_2__0_n_0 ),
        .I1(\r_state_reg_n_0_[11] ),
        .I2(\r_state_reg_n_0_[12] ),
        .I3(\r_state_reg_n_0_[9] ),
        .I4(\r_state_reg_n_0_[10] ),
        .O(\r_state[3]_i_2__5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[3]_i_3__1 
       (.I0(p_0_in0_in),
        .I1(\r_state_reg_n_0_[14] ),
        .I2(\r_state_reg_n_0_[0] ),
        .I3(\r_state_reg_n_0_[4] ),
        .O(\r_state[3]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000028)) 
    \r_state[4]_i_1__7 
       (.I0(\r_state[14]_i_6__0_n_0 ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state[12]_i_4__2_n_0 ),
        .I4(\r_state[4]_i_2__2_n_0 ),
        .I5(\r_state[4]_i_3__3_n_0 ),
        .O(ri_state[4]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[4]_i_2__2 
       (.I0(p_1_in),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[7] ),
        .I5(\r_state_reg_n_0_[0] ),
        .O(\r_state[4]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[4]_i_3__3 
       (.I0(p_0_in),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[4] ),
        .O(\r_state[4]_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \r_state[5]_i_1__11 
       (.I0(\r_filter_shift_reg_n_0_[7] ),
        .I1(r_filter_shift[5]),
        .I2(r_filter_shift[2]),
        .I3(r_filter_shift[0]),
        .I4(\r_state[7]_i_2__6_n_0 ),
        .I5(\r_state[7]_i_3__2_n_0 ),
        .O(ri_state[5]));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_state[6]_i_1__8 
       (.I0(\r_state[9]_i_2__6_n_0 ),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(p_0_in),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[14]_i_7__0_n_0 ),
        .O(ri_state[6]));
  LUT6 #(
    .INIT(64'h00000000FFFF7FFF)) 
    \r_state[7]_i_1__9 
       (.I0(\r_filter_shift_reg_n_0_[7] ),
        .I1(r_filter_shift[5]),
        .I2(r_filter_shift[2]),
        .I3(r_filter_shift[0]),
        .I4(\r_state[7]_i_2__6_n_0 ),
        .I5(\r_state[7]_i_3__2_n_0 ),
        .O(ri_state[7]));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \r_state[7]_i_2__6 
       (.I0(r_filter_shift[4]),
        .I1(r_filter_shift[6]),
        .I2(r_filter_shift[1]),
        .I3(r_filter_shift[3]),
        .O(\r_state[7]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFBFFFFF)) 
    \r_state[7]_i_3__2 
       (.I0(\r_state[14]_i_7__0_n_0 ),
        .I1(\r_state[7]_i_4__2_n_0 ),
        .I2(\r_state[7]_i_5__1_n_0 ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(\r_state_reg_n_0_[4] ),
        .I5(\r_state_reg_n_0_[7] ),
        .O(\r_state[7]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[7]_i_4__2 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(p_0_in),
        .O(\r_state[7]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[7]_i_5__1 
       (.I0(\r_state_reg_n_0_[2] ),
        .I1(\r_state_reg_n_0_[3] ),
        .O(\r_state[7]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_state[8]_i_1__7 
       (.I0(r_edge_right),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(p_0_in),
        .I4(\r_state_reg_n_0_[7] ),
        .I5(\r_state[14]_i_7__0_n_0 ),
        .O(\r_state[8]_i_1__7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \r_state[9]_i_1__7 
       (.I0(\r_state[9]_i_2__6_n_0 ),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(p_0_in),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[14]_i_7__0_n_0 ),
        .O(ri_state[9]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_2__6 
       (.I0(r_window_valid),
        .I1(\r_state[9]_i_3__2_n_0 ),
        .O(\r_state[9]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969668)) 
    \r_state[9]_i_3__2 
       (.I0(\r_sample_shift_reg_n_0_[3] ),
        .I1(\r_sample_shift_reg_n_0_[2] ),
        .I2(\r_sample_shift_reg_n_0_[1] ),
        .I3(\r_sample_shift_reg_n_0_[0] ),
        .I4(\r_sample_shift_reg_n_0_[4] ),
        .I5(\r_sample_shift_reg_n_0_[5] ),
        .O(\r_state[9]_i_3__2_n_0 ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .D(ri_state[0]),
        .PRE(inst_async_reset_n_0),
        .Q(\r_state_reg_n_0_[0] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[10] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[10]),
        .Q(\r_state_reg_n_0_[10] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[11]),
        .Q(\r_state_reg_n_0_[11] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[12]),
        .Q(\r_state_reg_n_0_[12] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[13]),
        .Q(p_0_in0_in));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[14] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[14]),
        .Q(\r_state_reg_n_0_[14] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[1]),
        .Q(p_1_in));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[2]),
        .Q(\r_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_sample_shift),
        .Q(\r_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[4]),
        .Q(\r_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[5]),
        .Q(\r_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[6]),
        .Q(p_0_in));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[7]),
        .Q(\r_state_reg_n_0_[7] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_state[8]_i_1__7_n_0 ),
        .Q(\r_state_reg_n_0_[8] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(o_clk_200),
        .CE(\r_state[14]_i_1__1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[9]),
        .Q(\r_state_reg_n_0_[9] ));
  LUT4 #(
    .INIT(16'hD02C)) 
    \r_tab_delay[0]_i_1__0 
       (.I0(o_edge_tabs[1]),
        .I1(p_0_in),
        .I2(p_0_in0_in),
        .I3(out[0]),
        .O(\r_tab_delay[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h656A656A60906060)) 
    \r_tab_delay[1]_i_1__0 
       (.I0(out[1]),
        .I1(o_edge_tabs[2]),
        .I2(p_0_in0_in),
        .I3(out[0]),
        .I4(o_edge_tabs[1]),
        .I5(p_0_in),
        .O(\r_tab_delay[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h695A6900)) 
    \r_tab_delay[2]_i_1__0 
       (.I0(out[2]),
        .I1(o_edge_tabs[3]),
        .I2(\r_tab_delay[2]_i_2__0_n_0 ),
        .I3(p_0_in0_in),
        .I4(p_0_in),
        .O(ri_tab_delay));
  LUT6 #(
    .INIT(64'hFCFFC4CC44444044)) 
    \r_tab_delay[2]_i_2__0 
       (.I0(o_edge_tabs[2]),
        .I1(p_0_in0_in),
        .I2(p_0_in),
        .I3(o_edge_tabs[1]),
        .I4(out[0]),
        .I5(out[1]),
        .O(\r_tab_delay[2]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h3C22C388)) 
    \r_tab_delay[3]_i_1__0 
       (.I0(p_0_in),
        .I1(out[3]),
        .I2(o_edge_tabs[4]),
        .I3(p_0_in0_in),
        .I4(\r_tab_delay[4]_i_4__0_n_0 ),
        .O(\r_tab_delay[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000400040400)) 
    \r_tab_delay[4]_i_1__0 
       (.I0(\r_tab_delay[4]_i_3__0_n_0 ),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(\r_state_reg_n_0_[14] ),
        .I3(p_0_in),
        .I4(p_0_in0_in),
        .I5(p_1_in),
        .O(\r_tab_delay[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hC2C22CE02CE02C2C)) 
    \r_tab_delay[4]_i_2__0 
       (.I0(p_0_in),
        .I1(p_0_in0_in),
        .I2(out[4]),
        .I3(o_edge_tabs[4]),
        .I4(\r_tab_delay[4]_i_4__0_n_0 ),
        .I5(out[3]),
        .O(\r_tab_delay[4]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \r_tab_delay[4]_i_3__0 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state_reg_n_0_[9] ),
        .I4(\r_state[14]_i_6__0_n_0 ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(\r_tab_delay[4]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h88E8)) 
    \r_tab_delay[4]_i_4__0 
       (.I0(out[2]),
        .I1(\r_tab_delay[2]_i_2__0_n_0 ),
        .I2(p_0_in0_in),
        .I3(o_edge_tabs[3]),
        .O(\r_tab_delay[4]_i_4__0_n_0 ));
  FDCE \r_tab_delay_reg[0] 
       (.C(o_clk_200),
        .CE(\r_tab_delay[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[0]_i_1__0_n_0 ),
        .Q(out[0]));
  FDCE \r_tab_delay_reg[1] 
       (.C(o_clk_200),
        .CE(\r_tab_delay[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[1]_i_1__0_n_0 ),
        .Q(out[1]));
  FDCE \r_tab_delay_reg[2] 
       (.C(o_clk_200),
        .CE(\r_tab_delay[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_tab_delay),
        .Q(out[2]));
  FDCE \r_tab_delay_reg[3] 
       (.C(o_clk_200),
        .CE(\r_tab_delay[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[3]_i_1__0_n_0 ),
        .Q(out[3]));
  FDCE \r_tab_delay_reg[4] 
       (.C(o_clk_200),
        .CE(\r_tab_delay[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[4]_i_2__0_n_0 ),
        .Q(out[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_wait_init[0]_i_1__0 
       (.I0(r_wait_init_reg[0]),
        .O(p_0_in__3[0]));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_wait_init[1]_i_1__0 
       (.I0(r_wait_init_reg[0]),
        .I1(r_wait_init_reg[1]),
        .O(p_0_in__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_wait_init[2]_i_1__0 
       (.I0(r_wait_init_reg[2]),
        .I1(r_wait_init_reg[1]),
        .I2(r_wait_init_reg[0]),
        .O(p_0_in__3[2]));
  LUT6 #(
    .INIT(64'h0008000000000000)) 
    \r_wait_init[3]_i_1__0 
       (.I0(\r_state[1]_i_2__1_n_0 ),
        .I1(\r_state[14]_i_8__0_n_0 ),
        .I2(\r_state_reg_n_0_[9] ),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(p_1_in),
        .I5(\r_loop_cnt[0]_i_2__0_n_0 ),
        .O(ri_wait_init));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_wait_init[3]_i_2__0 
       (.I0(r_wait_init_reg[3]),
        .I1(r_wait_init_reg[0]),
        .I2(r_wait_init_reg[1]),
        .I3(r_wait_init_reg[2]),
        .O(p_0_in__3[3]));
  FDCE \r_wait_init_reg[0] 
       (.C(o_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[0]),
        .Q(r_wait_init_reg[0]));
  FDCE \r_wait_init_reg[1] 
       (.C(o_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[1]),
        .Q(r_wait_init_reg[1]));
  FDCE \r_wait_init_reg[2] 
       (.C(o_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[2]),
        .Q(r_wait_init_reg[2]));
  FDCE \r_wait_init_reg[3] 
       (.C(o_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[3]),
        .Q(r_wait_init_reg[3]));
  LUT3 #(
    .INIT(8'h54)) 
    r_window_valid_i_1__0
       (.I0(p_1_in),
        .I1(r_window_valid),
        .I2(p_0_in),
        .O(r_window_valid_i_1__0_n_0));
  FDCE r_window_valid_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_window_valid_i_1__0_n_0),
        .Q(r_window_valid));
endmodule

(* ORIG_REF_NAME = "physical_iob_init_tab_cal" *) 
module physical_iob_init_tab_cal_41
   (out,
    o_edge_tabs,
    o_done,
    o_fail,
    r_start_reg_0,
    i_clk_200,
    \r_rst_reg[0] ,
    D);
  output [4:0]out;
  output [4:0]o_edge_tabs;
  output o_done;
  output o_fail;
  input r_start_reg_0;
  input i_clk_200;
  input \r_rst_reg[0] ;
  input [5:0]D;

  wire [5:0]D;
  wire i_clk_200;
  wire inst_async_reset_n_0;
  (* RTL_KEEP = "true" *) wire o_done;
  (* RTL_KEEP = "true" *) wire [4:0]o_edge_tabs;
  (* RTL_KEEP = "true" *) wire o_fail;
  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire p_0_in;
  wire p_0_in0_in;
  wire [3:0]p_0_in__3;
  wire p_1_in;
  wire [0:0]p_1_out;
  wire r_cal_done_i_1_n_0;
  wire r_cal_fail_i_1_n_0;
  wire r_edge_left;
  wire r_edge_left_i_1_n_0;
  wire r_edge_right;
  wire r_edge_right_i_1_n_0;
  wire \r_edge_tabs[2]_i_1_n_0 ;
  wire \r_edge_tabs[4]_i_1_n_0 ;
  wire \r_edge_tabs[4]_i_2_n_0 ;
  wire [6:0]r_filter_shift;
  wire \r_filter_shift[0]_i_2_n_0 ;
  wire \r_filter_shift[0]_i_3_n_0 ;
  wire \r_filter_shift_reg_n_0_[7] ;
  wire [0:0]r_loop_cnt;
  wire \r_loop_cnt[0]_i_1_n_0 ;
  wire \r_loop_cnt[0]_i_2_n_0 ;
  wire \r_rst_reg[0] ;
  wire r_sample_diff;
  wire \r_sample_shift_reg_n_0_[0] ;
  wire \r_sample_shift_reg_n_0_[10] ;
  wire \r_sample_shift_reg_n_0_[11] ;
  wire \r_sample_shift_reg_n_0_[1] ;
  wire \r_sample_shift_reg_n_0_[2] ;
  wire \r_sample_shift_reg_n_0_[3] ;
  wire \r_sample_shift_reg_n_0_[4] ;
  wire \r_sample_shift_reg_n_0_[5] ;
  wire \r_sample_shift_reg_n_0_[6] ;
  wire \r_sample_shift_reg_n_0_[7] ;
  wire \r_sample_shift_reg_n_0_[8] ;
  wire \r_sample_shift_reg_n_0_[9] ;
  wire [5:0]r_serdes_i;
  wire r_start;
  wire r_start_reg_0;
  wire \r_state[0]_i_2__4_n_0 ;
  wire \r_state[0]_i_3__3_n_0 ;
  wire \r_state[0]_i_4__3_n_0 ;
  wire \r_state[0]_i_5__1_n_0 ;
  wire \r_state[0]_i_6_n_0 ;
  wire \r_state[11]_i_2__0_n_0 ;
  wire \r_state[11]_i_3__3_n_0 ;
  wire \r_state[12]_i_2__0_n_0 ;
  wire \r_state[12]_i_3__0_n_0 ;
  wire \r_state[12]_i_4__0_n_0 ;
  wire \r_state[14]_i_10_n_0 ;
  wire \r_state[14]_i_11_n_0 ;
  wire \r_state[14]_i_1_n_0 ;
  wire \r_state[14]_i_4_n_0 ;
  wire \r_state[14]_i_5_n_0 ;
  wire \r_state[14]_i_6_n_0 ;
  wire \r_state[14]_i_7_n_0 ;
  wire \r_state[14]_i_8_n_0 ;
  wire \r_state[14]_i_9_n_0 ;
  wire \r_state[1]_i_2__0_n_0 ;
  wire \r_state[2]_i_2__4_n_0 ;
  wire \r_state[2]_i_3__2_n_0 ;
  wire \r_state[3]_i_2__2_n_0 ;
  wire \r_state[3]_i_3__0_n_0 ;
  wire \r_state[4]_i_2__0_n_0 ;
  wire \r_state[4]_i_3__2_n_0 ;
  wire \r_state[7]_i_2__2_n_0 ;
  wire \r_state[7]_i_3_n_0 ;
  wire \r_state[7]_i_4_n_0 ;
  wire \r_state[7]_i_5_n_0 ;
  wire \r_state[8]_i_1__6_n_0 ;
  wire \r_state[9]_i_2__5_n_0 ;
  wire \r_state[9]_i_3__0_n_0 ;
  wire \r_state_reg_n_0_[0] ;
  wire \r_state_reg_n_0_[10] ;
  wire \r_state_reg_n_0_[11] ;
  wire \r_state_reg_n_0_[12] ;
  wire \r_state_reg_n_0_[14] ;
  wire \r_state_reg_n_0_[2] ;
  wire \r_state_reg_n_0_[3] ;
  wire \r_state_reg_n_0_[4] ;
  wire \r_state_reg_n_0_[5] ;
  wire \r_state_reg_n_0_[7] ;
  wire \r_state_reg_n_0_[8] ;
  wire \r_state_reg_n_0_[9] ;
  wire \r_tab_delay[0]_i_1_n_0 ;
  wire \r_tab_delay[1]_i_1_n_0 ;
  wire \r_tab_delay[2]_i_2_n_0 ;
  wire \r_tab_delay[3]_i_1_n_0 ;
  wire \r_tab_delay[4]_i_1_n_0 ;
  wire \r_tab_delay[4]_i_2_n_0 ;
  wire \r_tab_delay[4]_i_3_n_0 ;
  wire \r_tab_delay[4]_i_4_n_0 ;
  wire [3:0]r_wait_init_reg;
  wire r_window_valid;
  wire r_window_valid_i_1_n_0;
  wire [3:0]ri_edge_tabs;
  wire ri_filter_shift;
  wire ri_sample_diff;
  wire ri_sample_shift;
  wire [14:0]ri_state;
  wire [2:2]ri_tab_delay;
  wire ri_wait_init;

  async_reset__parameterized1_46 inst_async_reset
       (.i_clk_200(i_clk_200),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_async_reset_n_0));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'h54)) 
    r_cal_done_i_1
       (.I0(p_1_in),
        .I1(o_done),
        .I2(p_0_in0_in),
        .O(r_cal_done_i_1_n_0));
  FDCE r_cal_done_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_cal_done_i_1_n_0),
        .Q(o_done));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'h54)) 
    r_cal_fail_i_1
       (.I0(p_1_in),
        .I1(o_fail),
        .I2(\r_state_reg_n_0_[14] ),
        .O(r_cal_fail_i_1_n_0));
  FDCE r_cal_fail_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_cal_fail_i_1_n_0),
        .Q(o_fail));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT5 #(
    .INIT(32'h44454444)) 
    r_edge_left_i_1
       (.I0(p_1_in),
        .I1(r_edge_left),
        .I2(p_1_out),
        .I3(r_sample_diff),
        .I4(r_window_valid),
        .O(r_edge_left_i_1_n_0));
  FDCE r_edge_left_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_edge_left_i_1_n_0),
        .Q(r_edge_left));
  LUT5 #(
    .INIT(32'h55550004)) 
    r_edge_right_i_1
       (.I0(p_1_in),
        .I1(r_edge_left),
        .I2(p_1_out),
        .I3(r_sample_diff),
        .I4(r_edge_right),
        .O(r_edge_right_i_1_n_0));
  FDCE r_edge_right_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_edge_right_i_1_n_0),
        .Q(r_edge_right));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \r_edge_tabs[0]_i_1 
       (.I0(p_1_in),
        .I1(o_edge_tabs[0]),
        .O(ri_edge_tabs[0]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'h06)) 
    \r_edge_tabs[1]_i_1 
       (.I0(o_edge_tabs[1]),
        .I1(o_edge_tabs[0]),
        .I2(p_1_in),
        .O(ri_edge_tabs[1]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'h1540)) 
    \r_edge_tabs[2]_i_1 
       (.I0(p_1_in),
        .I1(o_edge_tabs[0]),
        .I2(o_edge_tabs[1]),
        .I3(o_edge_tabs[2]),
        .O(\r_edge_tabs[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT5 #(
    .INIT(32'h00007F80)) 
    \r_edge_tabs[3]_i_1 
       (.I0(o_edge_tabs[1]),
        .I1(o_edge_tabs[0]),
        .I2(o_edge_tabs[2]),
        .I3(o_edge_tabs[3]),
        .I4(p_1_in),
        .O(ri_edge_tabs[3]));
  LUT4 #(
    .INIT(16'hAAEA)) 
    \r_edge_tabs[4]_i_1 
       (.I0(p_1_in),
        .I1(p_0_in),
        .I2(r_edge_left),
        .I3(r_edge_right),
        .O(\r_edge_tabs[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1555555540000000)) 
    \r_edge_tabs[4]_i_2 
       (.I0(p_1_in),
        .I1(o_edge_tabs[3]),
        .I2(o_edge_tabs[2]),
        .I3(o_edge_tabs[0]),
        .I4(o_edge_tabs[1]),
        .I5(o_edge_tabs[4]),
        .O(\r_edge_tabs[4]_i_2_n_0 ));
  FDCE \r_edge_tabs_reg[0] 
       (.C(i_clk_200),
        .CE(\r_edge_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_edge_tabs[0]),
        .Q(o_edge_tabs[0]));
  FDCE \r_edge_tabs_reg[1] 
       (.C(i_clk_200),
        .CE(\r_edge_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_edge_tabs[1]),
        .Q(o_edge_tabs[1]));
  FDCE \r_edge_tabs_reg[2] 
       (.C(i_clk_200),
        .CE(\r_edge_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_edge_tabs[2]_i_1_n_0 ),
        .Q(o_edge_tabs[2]));
  FDCE \r_edge_tabs_reg[3] 
       (.C(i_clk_200),
        .CE(\r_edge_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_edge_tabs[3]),
        .Q(o_edge_tabs[3]));
  FDCE \r_edge_tabs_reg[4] 
       (.C(i_clk_200),
        .CE(\r_edge_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_edge_tabs[4]_i_2_n_0 ),
        .Q(o_edge_tabs[4]));
  LUT6 #(
    .INIT(64'h0000000000009009)) 
    \r_filter_shift[0]_i_1 
       (.I0(\r_sample_shift_reg_n_0_[7] ),
        .I1(\r_sample_shift_reg_n_0_[1] ),
        .I2(\r_sample_shift_reg_n_0_[6] ),
        .I3(\r_sample_shift_reg_n_0_[0] ),
        .I4(\r_filter_shift[0]_i_2_n_0 ),
        .I5(\r_filter_shift[0]_i_3_n_0 ),
        .O(p_1_out));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \r_filter_shift[0]_i_2 
       (.I0(\r_sample_shift_reg_n_0_[2] ),
        .I1(\r_sample_shift_reg_n_0_[8] ),
        .I2(\r_sample_shift_reg_n_0_[3] ),
        .I3(\r_sample_shift_reg_n_0_[9] ),
        .O(\r_filter_shift[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \r_filter_shift[0]_i_3 
       (.I0(\r_sample_shift_reg_n_0_[4] ),
        .I1(\r_sample_shift_reg_n_0_[10] ),
        .I2(\r_sample_shift_reg_n_0_[5] ),
        .I3(\r_sample_shift_reg_n_0_[11] ),
        .O(\r_filter_shift[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_filter_shift[7]_i_1 
       (.I0(\r_state[3]_i_2__2_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_state[3]_i_3__0_n_0 ),
        .O(ri_filter_shift));
  FDCE \r_filter_shift_reg[0] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(p_1_out),
        .Q(r_filter_shift[0]));
  FDCE \r_filter_shift_reg[1] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[0]),
        .Q(r_filter_shift[1]));
  FDCE \r_filter_shift_reg[2] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[1]),
        .Q(r_filter_shift[2]));
  FDCE \r_filter_shift_reg[3] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[2]),
        .Q(r_filter_shift[3]));
  FDCE \r_filter_shift_reg[4] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[3]),
        .Q(r_filter_shift[4]));
  FDCE \r_filter_shift_reg[5] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[4]),
        .Q(r_filter_shift[5]));
  FDCE \r_filter_shift_reg[6] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[5]),
        .Q(r_filter_shift[6]));
  FDCE \r_filter_shift_reg[7] 
       (.C(i_clk_200),
        .CE(ri_filter_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[6]),
        .Q(\r_filter_shift_reg_n_0_[7] ));
  LUT6 #(
    .INIT(64'hFDFFFFFF02000000)) 
    \r_loop_cnt[0]_i_1 
       (.I0(\r_loop_cnt[0]_i_2_n_0 ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(\r_state[11]_i_3__3_n_0 ),
        .I5(r_loop_cnt),
        .O(\r_loop_cnt[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_loop_cnt[0]_i_2 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(p_0_in),
        .O(\r_loop_cnt[0]_i_2_n_0 ));
  FDCE \r_loop_cnt_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_loop_cnt[0]_i_1_n_0 ),
        .Q(r_loop_cnt));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT1 #(
    .INIT(2'h1)) 
    r_sample_diff_i_1
       (.I0(p_1_out),
        .O(ri_sample_diff));
  FDCE r_sample_diff_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_sample_diff),
        .Q(r_sample_diff));
  FDCE \r_sample_shift_reg[0] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[0]),
        .Q(\r_sample_shift_reg_n_0_[0] ));
  FDCE \r_sample_shift_reg[10] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[4] ),
        .Q(\r_sample_shift_reg_n_0_[10] ));
  FDCE \r_sample_shift_reg[11] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[5] ),
        .Q(\r_sample_shift_reg_n_0_[11] ));
  FDCE \r_sample_shift_reg[1] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[1]),
        .Q(\r_sample_shift_reg_n_0_[1] ));
  FDCE \r_sample_shift_reg[2] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[2]),
        .Q(\r_sample_shift_reg_n_0_[2] ));
  FDCE \r_sample_shift_reg[3] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[3]),
        .Q(\r_sample_shift_reg_n_0_[3] ));
  FDCE \r_sample_shift_reg[4] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[4]),
        .Q(\r_sample_shift_reg_n_0_[4] ));
  FDCE \r_sample_shift_reg[5] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(r_serdes_i[5]),
        .Q(\r_sample_shift_reg_n_0_[5] ));
  FDCE \r_sample_shift_reg[6] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[0] ),
        .Q(\r_sample_shift_reg_n_0_[6] ));
  FDCE \r_sample_shift_reg[7] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[1] ),
        .Q(\r_sample_shift_reg_n_0_[7] ));
  FDCE \r_sample_shift_reg[8] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[2] ),
        .Q(\r_sample_shift_reg_n_0_[8] ));
  FDCE \r_sample_shift_reg[9] 
       (.C(i_clk_200),
        .CE(ri_sample_shift),
        .CLR(inst_async_reset_n_0),
        .D(\r_sample_shift_reg_n_0_[3] ),
        .Q(\r_sample_shift_reg_n_0_[9] ));
  FDCE \r_serdes_i_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[0]),
        .Q(r_serdes_i[0]));
  FDCE \r_serdes_i_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[1]),
        .Q(r_serdes_i[1]));
  FDCE \r_serdes_i_reg[2] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[2]),
        .Q(r_serdes_i[2]));
  FDCE \r_serdes_i_reg[3] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[3]),
        .Q(r_serdes_i[3]));
  FDCE \r_serdes_i_reg[4] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[4]),
        .Q(r_serdes_i[4]));
  FDCE \r_serdes_i_reg[5] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[5]),
        .Q(r_serdes_i[5]));
  FDCE r_start_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_start_reg_0),
        .Q(r_start));
  LUT6 #(
    .INIT(64'hFFFFFFFF55555554)) 
    \r_state[0]_i_1__5 
       (.I0(\r_state[0]_i_2__4_n_0 ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_state[0]_i_3__3_n_0 ),
        .I5(\r_state[0]_i_4__3_n_0 ),
        .O(ri_state[0]));
  LUT6 #(
    .INIT(64'h0000000000010111)) 
    \r_state[0]_i_2__4 
       (.I0(\r_state[0]_i_5__1_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(p_1_in),
        .I5(\r_state[4]_i_3__2_n_0 ),
        .O(\r_state[0]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFCC0)) 
    \r_state[0]_i_3__3 
       (.I0(\r_state[0]_i_6_n_0 ),
        .I1(\r_state_reg_n_0_[4] ),
        .I2(p_0_in),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(\r_state[0]_i_5__1_n_0 ),
        .O(\r_state[0]_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAA9AAAAAAAA)) 
    \r_state[0]_i_4__3 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[11] ),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state[14]_i_5_n_0 ),
        .O(\r_state[0]_i_4__3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[0]_i_5__1 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state_reg_n_0_[11] ),
        .I3(\r_state[12]_i_4__0_n_0 ),
        .I4(\r_state_reg_n_0_[9] ),
        .I5(\r_state_reg_n_0_[10] ),
        .O(\r_state[0]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEEC)) 
    \r_state[0]_i_6 
       (.I0(\r_state_reg_n_0_[7] ),
        .I1(\r_state[12]_i_4__0_n_0 ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[11] ),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state_reg_n_0_[9] ),
        .O(\r_state[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \r_state[10]_i_1__1 
       (.I0(\r_state[12]_i_2__0_n_0 ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state[14]_i_6_n_0 ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(\r_state[12]_i_4__0_n_0 ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(ri_state[10]));
  LUT6 #(
    .INIT(64'h0000013C00000000)) 
    \r_state[11]_i_1__0 
       (.I0(\r_state[14]_i_9_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(p_0_in),
        .I4(\r_state[11]_i_2__0_n_0 ),
        .I5(\r_state[11]_i_3__3_n_0 ),
        .O(ri_state[11]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \r_state[11]_i_2__0 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[4] ),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(r_loop_cnt),
        .O(\r_state[11]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[11]_i_3__3 
       (.I0(\r_state[1]_i_2__0_n_0 ),
        .I1(\r_state_reg_n_0_[3] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(p_1_in),
        .I4(\r_state_reg_n_0_[0] ),
        .O(\r_state[11]_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000020)) 
    \r_state[12]_i_1__0 
       (.I0(\r_state[12]_i_2__0_n_0 ),
        .I1(\r_state[12]_i_3__0_n_0 ),
        .I2(\r_state_reg_n_0_[11] ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(\r_state[12]_i_4__0_n_0 ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(ri_state[12]));
  LUT5 #(
    .INIT(32'h00000004)) 
    \r_state[12]_i_2__0 
       (.I0(\r_state_reg_n_0_[4] ),
        .I1(\r_loop_cnt[0]_i_2_n_0 ),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[3] ),
        .O(\r_state[12]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_3__0 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state_reg_n_0_[10] ),
        .O(\r_state[12]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_4__0 
       (.I0(\r_state_reg_n_0_[14] ),
        .I1(p_0_in0_in),
        .O(\r_state[12]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \r_state[13]_i_1 
       (.I0(r_edge_right),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(p_0_in),
        .I4(\r_state_reg_n_0_[7] ),
        .I5(\r_state[14]_i_7_n_0 ),
        .O(ri_state[13]));
  LUT6 #(
    .INIT(64'hFFFFFFFBFFFFFFFF)) 
    \r_state[14]_i_1 
       (.I0(\r_state[14]_i_4_n_0 ),
        .I1(\r_state[14]_i_5_n_0 ),
        .I2(\r_state_reg_n_0_[14] ),
        .I3(p_0_in0_in),
        .I4(\r_state_reg_n_0_[12] ),
        .I5(\r_state[14]_i_6_n_0 ),
        .O(\r_state[14]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \r_state[14]_i_10 
       (.I0(r_wait_init_reg[2]),
        .I1(r_wait_init_reg[1]),
        .I2(r_wait_init_reg[0]),
        .O(\r_state[14]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[14]_i_11 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[5] ),
        .O(\r_state[14]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    \r_state[14]_i_2 
       (.I0(\r_state[14]_i_7_n_0 ),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(p_0_in),
        .I5(\r_state[14]_i_9_n_0 ),
        .O(ri_state[14]));
  LUT6 #(
    .INIT(64'hF08FFF8FF08FF08F)) 
    \r_state[14]_i_4 
       (.I0(r_wait_init_reg[3]),
        .I1(\r_state[14]_i_10_n_0 ),
        .I2(p_1_in),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(r_start),
        .I5(r_start_reg_0),
        .O(\r_state[14]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[14]_i_5 
       (.I0(\r_state[14]_i_11_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state_reg_n_0_[4] ),
        .I4(p_0_in),
        .O(\r_state[14]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[14]_i_6 
       (.I0(\r_state_reg_n_0_[10] ),
        .I1(\r_state_reg_n_0_[11] ),
        .O(\r_state[14]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \r_state[14]_i_7 
       (.I0(\r_state[14]_i_6_n_0 ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state[12]_i_4__0_n_0 ),
        .I3(p_1_in),
        .I4(\r_state_reg_n_0_[9] ),
        .I5(\r_state_reg_n_0_[8] ),
        .O(\r_state[14]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[14]_i_8 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(\r_state_reg_n_0_[4] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state_reg_n_0_[2] ),
        .O(\r_state[14]_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_state[14]_i_9 
       (.I0(out[3]),
        .I1(out[0]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(out[4]),
        .O(\r_state[14]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'h00080000)) 
    \r_state[1]_i_1__5 
       (.I0(\r_state[12]_i_2__0_n_0 ),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(\r_state_reg_n_0_[10] ),
        .I3(\r_state_reg_n_0_[9] ),
        .I4(\r_state[1]_i_2__0_n_0 ),
        .O(ri_state[1]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[1]_i_2__0 
       (.I0(\r_state_reg_n_0_[12] ),
        .I1(\r_state_reg_n_0_[11] ),
        .I2(p_0_in0_in),
        .I3(\r_state_reg_n_0_[14] ),
        .O(\r_state[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0202020202020222)) 
    \r_state[2]_i_1__5 
       (.I0(\r_state[2]_i_2__4_n_0 ),
        .I1(\r_state[2]_i_3__2_n_0 ),
        .I2(p_1_in),
        .I3(p_0_in),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(\r_state_reg_n_0_[10] ),
        .O(ri_state[2]));
  LUT6 #(
    .INIT(64'hAAAAABBAAAABABBA)) 
    \r_state[2]_i_2__4 
       (.I0(p_1_in),
        .I1(r_loop_cnt),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(p_0_in),
        .I5(\r_state[14]_i_9_n_0 ),
        .O(\r_state[2]_i_2__4_n_0 ));
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    \r_state[2]_i_3__2 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state[14]_i_8_n_0 ),
        .I4(\r_state[1]_i_2__0_n_0 ),
        .O(\r_state[2]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_state[3]_i_1__5 
       (.I0(\r_state[3]_i_2__2_n_0 ),
        .I1(\r_state_reg_n_0_[2] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(p_1_in),
        .I4(\r_state[3]_i_3__0_n_0 ),
        .O(ri_sample_shift));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[3]_i_2__2 
       (.I0(\r_loop_cnt[0]_i_2_n_0 ),
        .I1(\r_state_reg_n_0_[11] ),
        .I2(\r_state_reg_n_0_[12] ),
        .I3(\r_state_reg_n_0_[9] ),
        .I4(\r_state_reg_n_0_[10] ),
        .O(\r_state[3]_i_2__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[3]_i_3__0 
       (.I0(p_0_in0_in),
        .I1(\r_state_reg_n_0_[14] ),
        .I2(\r_state_reg_n_0_[0] ),
        .I3(\r_state_reg_n_0_[4] ),
        .O(\r_state[3]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000028)) 
    \r_state[4]_i_1__4 
       (.I0(\r_state[14]_i_6_n_0 ),
        .I1(\r_state_reg_n_0_[12] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state[12]_i_4__0_n_0 ),
        .I4(\r_state[4]_i_2__0_n_0 ),
        .I5(\r_state[4]_i_3__2_n_0 ),
        .O(ri_state[4]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[4]_i_2__0 
       (.I0(p_1_in),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[7] ),
        .I5(\r_state_reg_n_0_[0] ),
        .O(\r_state[4]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[4]_i_3__2 
       (.I0(p_0_in),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[4] ),
        .O(\r_state[4]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \r_state[5]_i_1__9 
       (.I0(\r_filter_shift_reg_n_0_[7] ),
        .I1(r_filter_shift[5]),
        .I2(r_filter_shift[2]),
        .I3(r_filter_shift[0]),
        .I4(\r_state[7]_i_2__2_n_0 ),
        .I5(\r_state[7]_i_3_n_0 ),
        .O(ri_state[5]));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_state[6]_i_1__4 
       (.I0(\r_state[9]_i_2__5_n_0 ),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(p_0_in),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[14]_i_7_n_0 ),
        .O(ri_state[6]));
  LUT6 #(
    .INIT(64'h00000000FFFF7FFF)) 
    \r_state[7]_i_1__8 
       (.I0(\r_filter_shift_reg_n_0_[7] ),
        .I1(r_filter_shift[5]),
        .I2(r_filter_shift[2]),
        .I3(r_filter_shift[0]),
        .I4(\r_state[7]_i_2__2_n_0 ),
        .I5(\r_state[7]_i_3_n_0 ),
        .O(ri_state[7]));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \r_state[7]_i_2__2 
       (.I0(r_filter_shift[4]),
        .I1(r_filter_shift[6]),
        .I2(r_filter_shift[1]),
        .I3(r_filter_shift[3]),
        .O(\r_state[7]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFBFFFFF)) 
    \r_state[7]_i_3 
       (.I0(\r_state[14]_i_7_n_0 ),
        .I1(\r_state[7]_i_4_n_0 ),
        .I2(\r_state[7]_i_5_n_0 ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(\r_state_reg_n_0_[4] ),
        .I5(\r_state_reg_n_0_[7] ),
        .O(\r_state[7]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[7]_i_4 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(p_0_in),
        .O(\r_state[7]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[7]_i_5 
       (.I0(\r_state_reg_n_0_[2] ),
        .I1(\r_state_reg_n_0_[3] ),
        .O(\r_state[7]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040000)) 
    \r_state[8]_i_1__6 
       (.I0(r_edge_right),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(p_0_in),
        .I4(\r_state_reg_n_0_[7] ),
        .I5(\r_state[14]_i_7_n_0 ),
        .O(\r_state[8]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000080000)) 
    \r_state[9]_i_1__3 
       (.I0(\r_state[9]_i_2__5_n_0 ),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(p_0_in),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(\r_state_reg_n_0_[5] ),
        .I5(\r_state[14]_i_7_n_0 ),
        .O(ri_state[9]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_2__5 
       (.I0(r_window_valid),
        .I1(\r_state[9]_i_3__0_n_0 ),
        .O(\r_state[9]_i_2__5_n_0 ));
  LUT6 #(
    .INIT(64'h9669699669969668)) 
    \r_state[9]_i_3__0 
       (.I0(\r_sample_shift_reg_n_0_[3] ),
        .I1(\r_sample_shift_reg_n_0_[2] ),
        .I2(\r_sample_shift_reg_n_0_[1] ),
        .I3(\r_sample_shift_reg_n_0_[0] ),
        .I4(\r_sample_shift_reg_n_0_[4] ),
        .I5(\r_sample_shift_reg_n_0_[5] ),
        .O(\r_state[9]_i_3__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .D(ri_state[0]),
        .PRE(inst_async_reset_n_0),
        .Q(\r_state_reg_n_0_[0] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[10] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[10]),
        .Q(\r_state_reg_n_0_[10] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[11]),
        .Q(\r_state_reg_n_0_[11] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[12]),
        .Q(\r_state_reg_n_0_[12] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[13]),
        .Q(p_0_in0_in));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[14] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[14]),
        .Q(\r_state_reg_n_0_[14] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[1]),
        .Q(p_1_in));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[2]),
        .Q(\r_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_sample_shift),
        .Q(\r_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[4]),
        .Q(\r_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[5]),
        .Q(\r_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[6]),
        .Q(p_0_in));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[7]),
        .Q(\r_state_reg_n_0_[7] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_state[8]_i_1__6_n_0 ),
        .Q(\r_state_reg_n_0_[8] ));
  (* FSM_ENCODED_STATES = "S_SAMPLE_S2:000000000001000,S_CAL_DONE:010000000000000,S_SAMPLE_S7:000000100000000,S_SAMPLE_S11:001000000000000,S_SAMPLE_S1:000000000000100,S_SAMPLE_S6:000000010000000,S_CAL_INIT:000000000000010,S_SAMPLE_S10:000100000000000,S_SAMPLE_S5:000000001000000,S_SAMPLE_S3:000000000010000,S_SAMPLE_S8:000001000000000,S_CAL_FAIL:100000000000000,S_IDLE:000000000000001,S_SAMPLE_S9:000010000000000,S_SAMPLE_S4:000000000100000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(i_clk_200),
        .CE(\r_state[14]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_state[9]),
        .Q(\r_state_reg_n_0_[9] ));
  LUT4 #(
    .INIT(16'hD02C)) 
    \r_tab_delay[0]_i_1 
       (.I0(o_edge_tabs[1]),
        .I1(p_0_in),
        .I2(p_0_in0_in),
        .I3(out[0]),
        .O(\r_tab_delay[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h656A656A60906060)) 
    \r_tab_delay[1]_i_1 
       (.I0(out[1]),
        .I1(o_edge_tabs[2]),
        .I2(p_0_in0_in),
        .I3(out[0]),
        .I4(o_edge_tabs[1]),
        .I5(p_0_in),
        .O(\r_tab_delay[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h695A6900)) 
    \r_tab_delay[2]_i_1 
       (.I0(out[2]),
        .I1(o_edge_tabs[3]),
        .I2(\r_tab_delay[2]_i_2_n_0 ),
        .I3(p_0_in0_in),
        .I4(p_0_in),
        .O(ri_tab_delay));
  LUT6 #(
    .INIT(64'hFCFFC4CC44444044)) 
    \r_tab_delay[2]_i_2 
       (.I0(o_edge_tabs[2]),
        .I1(p_0_in0_in),
        .I2(p_0_in),
        .I3(o_edge_tabs[1]),
        .I4(out[0]),
        .I5(out[1]),
        .O(\r_tab_delay[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h3C22C388)) 
    \r_tab_delay[3]_i_1 
       (.I0(p_0_in),
        .I1(out[3]),
        .I2(o_edge_tabs[4]),
        .I3(p_0_in0_in),
        .I4(\r_tab_delay[4]_i_4_n_0 ),
        .O(\r_tab_delay[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000400040400)) 
    \r_tab_delay[4]_i_1 
       (.I0(\r_tab_delay[4]_i_3_n_0 ),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(\r_state_reg_n_0_[14] ),
        .I3(p_0_in),
        .I4(p_0_in0_in),
        .I5(p_1_in),
        .O(\r_tab_delay[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hC2C22CE02CE02C2C)) 
    \r_tab_delay[4]_i_2 
       (.I0(p_0_in),
        .I1(p_0_in0_in),
        .I2(out[4]),
        .I3(o_edge_tabs[4]),
        .I4(\r_tab_delay[4]_i_4_n_0 ),
        .I5(out[3]),
        .O(\r_tab_delay[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \r_tab_delay[4]_i_3 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state_reg_n_0_[9] ),
        .I4(\r_state[14]_i_6_n_0 ),
        .I5(\r_state_reg_n_0_[12] ),
        .O(\r_tab_delay[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h88E8)) 
    \r_tab_delay[4]_i_4 
       (.I0(out[2]),
        .I1(\r_tab_delay[2]_i_2_n_0 ),
        .I2(p_0_in0_in),
        .I3(o_edge_tabs[3]),
        .O(\r_tab_delay[4]_i_4_n_0 ));
  FDCE \r_tab_delay_reg[0] 
       (.C(i_clk_200),
        .CE(\r_tab_delay[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[0]_i_1_n_0 ),
        .Q(out[0]));
  FDCE \r_tab_delay_reg[1] 
       (.C(i_clk_200),
        .CE(\r_tab_delay[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[1]_i_1_n_0 ),
        .Q(out[1]));
  FDCE \r_tab_delay_reg[2] 
       (.C(i_clk_200),
        .CE(\r_tab_delay[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_tab_delay),
        .Q(out[2]));
  FDCE \r_tab_delay_reg[3] 
       (.C(i_clk_200),
        .CE(\r_tab_delay[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[3]_i_1_n_0 ),
        .Q(out[3]));
  FDCE \r_tab_delay_reg[4] 
       (.C(i_clk_200),
        .CE(\r_tab_delay[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(\r_tab_delay[4]_i_2_n_0 ),
        .Q(out[4]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_wait_init[0]_i_1 
       (.I0(r_wait_init_reg[0]),
        .O(p_0_in__3[0]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_wait_init[1]_i_1 
       (.I0(r_wait_init_reg[0]),
        .I1(r_wait_init_reg[1]),
        .O(p_0_in__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_wait_init[2]_i_1 
       (.I0(r_wait_init_reg[2]),
        .I1(r_wait_init_reg[1]),
        .I2(r_wait_init_reg[0]),
        .O(p_0_in__3[2]));
  LUT6 #(
    .INIT(64'h0008000000000000)) 
    \r_wait_init[3]_i_1 
       (.I0(\r_state[1]_i_2__0_n_0 ),
        .I1(\r_state[14]_i_8_n_0 ),
        .I2(\r_state_reg_n_0_[9] ),
        .I3(\r_state_reg_n_0_[10] ),
        .I4(p_1_in),
        .I5(\r_loop_cnt[0]_i_2_n_0 ),
        .O(ri_wait_init));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_wait_init[3]_i_2 
       (.I0(r_wait_init_reg[3]),
        .I1(r_wait_init_reg[0]),
        .I2(r_wait_init_reg[1]),
        .I3(r_wait_init_reg[2]),
        .O(p_0_in__3[3]));
  FDCE \r_wait_init_reg[0] 
       (.C(i_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[0]),
        .Q(r_wait_init_reg[0]));
  FDCE \r_wait_init_reg[1] 
       (.C(i_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[1]),
        .Q(r_wait_init_reg[1]));
  FDCE \r_wait_init_reg[2] 
       (.C(i_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[2]),
        .Q(r_wait_init_reg[2]));
  FDCE \r_wait_init_reg[3] 
       (.C(i_clk_200),
        .CE(ri_wait_init),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__3[3]),
        .Q(r_wait_init_reg[3]));
  LUT3 #(
    .INIT(8'h54)) 
    r_window_valid_i_1
       (.I0(p_1_in),
        .I1(r_window_valid),
        .I2(p_0_in),
        .O(r_window_valid_i_1_n_0));
  FDCE r_window_valid_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_window_valid_i_1_n_0),
        .Q(r_window_valid));
endmodule

module physical_iob_iserdes
   (out,
    o_clk_600,
    CLKB0,
    o_clk_200,
    ibufds_rx_o_n,
    Q,
    \r_rst_reg[1] );
  output [5:0]out;
  input o_clk_600;
  input CLKB0;
  input o_clk_200;
  input ibufds_rx_o_n;
  input [4:0]Q;
  input \r_rst_reg[1] ;

  wire CLKB0;
  wire [4:0]Q;
  wire ibufds_rx_o_n;
  wire local_reset_200;
  wire o_clk_200;
  wire o_clk_600;
  (* RTL_KEEP = "true" *) wire [5:0]out;
  wire \r_rst_reg[1] ;
  wire rx_delay_o_1;
  wire [4:0]NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED;
  wire NLW_inst_iserdese2_O_UNCONNECTED;
  wire NLW_inst_iserdese2_OFB_UNCONNECTED;
  wire NLW_inst_iserdese2_Q7_UNCONNECTED;
  wire NLW_inst_iserdese2_Q8_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SIM_DELAY_D = "0" *) 
  IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.000000),
    .SIGNAL_PATTERN("DATA"),
    .SIM_DELAY_D(815)) 
    inst_idelaye2
       (.C(o_clk_200),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(Q),
        .CNTVALUEOUT(NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED[4:0]),
        .DATAIN(1'b0),
        .DATAOUT(rx_delay_o_1),
        .IDATAIN(ibufds_rx_o_n),
        .INC(1'b0),
        .LD(1'b1),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(6),
    .DYN_CLKDIV_INV_EN("FALSE"),
    .DYN_CLK_INV_EN("FALSE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .INIT_Q3(1'b0),
    .INIT_Q4(1'b0),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD"),
    .IS_CLKB_INVERTED(1'b1),
    .IS_CLKDIVP_INVERTED(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_OCLKB_INVERTED(1'b0),
    .IS_OCLK_INVERTED(1'b0),
    .NUM_CE(2),
    .OFB_USED("FALSE"),
    .SERDES_MODE("MASTER"),
    .SRVAL_Q1(1'b0),
    .SRVAL_Q2(1'b0),
    .SRVAL_Q3(1'b0),
    .SRVAL_Q4(1'b0)) 
    inst_iserdese2
       (.BITSLIP(1'b0),
        .CE1(1'b1),
        .CE2(1'b1),
        .CLK(o_clk_600),
        .CLKB(CLKB0),
        .CLKDIV(o_clk_200),
        .CLKDIVP(1'b0),
        .D(1'b0),
        .DDLY(rx_delay_o_1),
        .DYNCLKDIVSEL(1'b0),
        .DYNCLKSEL(1'b0),
        .O(NLW_inst_iserdese2_O_UNCONNECTED),
        .OCLK(1'b0),
        .OCLKB(1'b0),
        .OFB(NLW_inst_iserdese2_OFB_UNCONNECTED),
        .Q1(out[5]),
        .Q2(out[4]),
        .Q3(out[3]),
        .Q4(out[2]),
        .Q5(out[1]),
        .Q6(out[0]),
        .Q7(NLW_inst_iserdese2_Q7_UNCONNECTED),
        .Q8(NLW_inst_iserdese2_Q8_UNCONNECTED),
        .RST(local_reset_200),
        .SHIFTIN1(1'b0),
        .SHIFTIN2(1'b0),
        .SHIFTOUT1(NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED),
        .SHIFTOUT2(NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED));
  async_reset__parameterized2_9 inst_local_reset_200
       (.o_clk_200(o_clk_200),
        .out(local_reset_200),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
endmodule

(* ORIG_REF_NAME = "physical_iob_iserdes" *) 
module physical_iob_iserdes_36
   (out,
    inst_iserdese2_0,
    CLKB0,
    i_clk_200,
    ibufds_rx_o_n,
    Q,
    \r_rst_reg[1] );
  output [5:0]out;
  input inst_iserdese2_0;
  input CLKB0;
  input i_clk_200;
  input ibufds_rx_o_n;
  input [4:0]Q;
  input \r_rst_reg[1] ;

  wire CLKB0;
  wire [4:0]Q;
  wire i_clk_200;
  wire ibufds_rx_o_n;
  wire inst_iserdese2_0;
  wire local_reset_200;
  (* RTL_KEEP = "true" *) wire [5:0]out;
  wire \r_rst_reg[1] ;
  wire rx_delay_o_1;
  wire [4:0]NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED;
  wire NLW_inst_iserdese2_O_UNCONNECTED;
  wire NLW_inst_iserdese2_OFB_UNCONNECTED;
  wire NLW_inst_iserdese2_Q7_UNCONNECTED;
  wire NLW_inst_iserdese2_Q8_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SIM_DELAY_D = "0" *) 
  IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.000000),
    .SIGNAL_PATTERN("DATA"),
    .SIM_DELAY_D(815)) 
    inst_idelaye2
       (.C(i_clk_200),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(Q),
        .CNTVALUEOUT(NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED[4:0]),
        .DATAIN(1'b0),
        .DATAOUT(rx_delay_o_1),
        .IDATAIN(ibufds_rx_o_n),
        .INC(1'b0),
        .LD(1'b1),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(6),
    .DYN_CLKDIV_INV_EN("FALSE"),
    .DYN_CLK_INV_EN("FALSE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .INIT_Q3(1'b0),
    .INIT_Q4(1'b0),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD"),
    .IS_CLKB_INVERTED(1'b1),
    .IS_CLKDIVP_INVERTED(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_OCLKB_INVERTED(1'b0),
    .IS_OCLK_INVERTED(1'b0),
    .NUM_CE(2),
    .OFB_USED("FALSE"),
    .SERDES_MODE("MASTER"),
    .SRVAL_Q1(1'b0),
    .SRVAL_Q2(1'b0),
    .SRVAL_Q3(1'b0),
    .SRVAL_Q4(1'b0)) 
    inst_iserdese2
       (.BITSLIP(1'b0),
        .CE1(1'b1),
        .CE2(1'b1),
        .CLK(inst_iserdese2_0),
        .CLKB(CLKB0),
        .CLKDIV(i_clk_200),
        .CLKDIVP(1'b0),
        .D(1'b0),
        .DDLY(rx_delay_o_1),
        .DYNCLKDIVSEL(1'b0),
        .DYNCLKSEL(1'b0),
        .O(NLW_inst_iserdese2_O_UNCONNECTED),
        .OCLK(1'b0),
        .OCLKB(1'b0),
        .OFB(NLW_inst_iserdese2_OFB_UNCONNECTED),
        .Q1(out[5]),
        .Q2(out[4]),
        .Q3(out[3]),
        .Q4(out[2]),
        .Q5(out[1]),
        .Q6(out[0]),
        .Q7(NLW_inst_iserdese2_Q7_UNCONNECTED),
        .Q8(NLW_inst_iserdese2_Q8_UNCONNECTED),
        .RST(local_reset_200),
        .SHIFTIN1(1'b0),
        .SHIFTIN2(1'b0),
        .SHIFTOUT1(NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED),
        .SHIFTOUT2(NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED));
  async_reset__parameterized2_47 inst_local_reset_200
       (.i_clk_200(i_clk_200),
        .out(local_reset_200),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
endmodule

(* ORIG_REF_NAME = "physical_iob_iserdes" *) 
module physical_iob_iserdes__hierPathDup__1
   (out,
    o_clk_600,
    CLKB0,
    o_clk_200,
    ibufds_rx_o_p,
    Q,
    \r_rst_reg[1] );
  output [5:0]out;
  input o_clk_600;
  input CLKB0;
  input o_clk_200;
  input ibufds_rx_o_p;
  input [4:0]Q;
  input \r_rst_reg[1] ;

  wire CLKB0;
  wire [4:0]Q;
  wire ibufds_rx_o_p;
  wire local_reset_200;
  wire o_clk_200;
  wire o_clk_600;
  (* RTL_KEEP = "true" *) wire [5:0]out;
  wire \r_rst_reg[1] ;
  wire rx_delay_o_1;
  wire [4:0]NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED;
  wire NLW_inst_iserdese2_O_UNCONNECTED;
  wire NLW_inst_iserdese2_OFB_UNCONNECTED;
  wire NLW_inst_iserdese2_Q7_UNCONNECTED;
  wire NLW_inst_iserdese2_Q8_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SIM_DELAY_D = "0" *) 
  IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.000000),
    .SIGNAL_PATTERN("DATA"),
    .SIM_DELAY_D(815)) 
    inst_idelaye2
       (.C(o_clk_200),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(Q),
        .CNTVALUEOUT(NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED[4:0]),
        .DATAIN(1'b0),
        .DATAOUT(rx_delay_o_1),
        .IDATAIN(ibufds_rx_o_p),
        .INC(1'b0),
        .LD(1'b1),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(6),
    .DYN_CLKDIV_INV_EN("FALSE"),
    .DYN_CLK_INV_EN("FALSE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .INIT_Q3(1'b0),
    .INIT_Q4(1'b0),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD"),
    .IS_CLKB_INVERTED(1'b1),
    .IS_CLKDIVP_INVERTED(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_OCLKB_INVERTED(1'b0),
    .IS_OCLK_INVERTED(1'b0),
    .NUM_CE(2),
    .OFB_USED("FALSE"),
    .SERDES_MODE("MASTER"),
    .SRVAL_Q1(1'b0),
    .SRVAL_Q2(1'b0),
    .SRVAL_Q3(1'b0),
    .SRVAL_Q4(1'b0)) 
    inst_iserdese2
       (.BITSLIP(1'b0),
        .CE1(1'b1),
        .CE2(1'b1),
        .CLK(o_clk_600),
        .CLKB(CLKB0),
        .CLKDIV(o_clk_200),
        .CLKDIVP(1'b0),
        .D(1'b0),
        .DDLY(rx_delay_o_1),
        .DYNCLKDIVSEL(1'b0),
        .DYNCLKSEL(1'b0),
        .O(NLW_inst_iserdese2_O_UNCONNECTED),
        .OCLK(1'b0),
        .OCLKB(1'b0),
        .OFB(NLW_inst_iserdese2_OFB_UNCONNECTED),
        .Q1(out[5]),
        .Q2(out[4]),
        .Q3(out[3]),
        .Q4(out[2]),
        .Q5(out[1]),
        .Q6(out[0]),
        .Q7(NLW_inst_iserdese2_Q7_UNCONNECTED),
        .Q8(NLW_inst_iserdese2_Q8_UNCONNECTED),
        .RST(local_reset_200),
        .SHIFTIN1(1'b0),
        .SHIFTIN2(1'b0),
        .SHIFTOUT1(NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED),
        .SHIFTOUT2(NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED));
  async_reset__parameterized2_10 inst_local_reset_200
       (.o_clk_200(o_clk_200),
        .out(local_reset_200),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
endmodule

(* ORIG_REF_NAME = "physical_iob_iserdes" *) 
module physical_iob_iserdes__hierPathDup__1_35
   (out,
    inst_iserdese2_0,
    CLKB0,
    i_clk_200,
    ibufds_rx_o_p,
    Q,
    \r_rst_reg[1] );
  output [5:0]out;
  input inst_iserdese2_0;
  input CLKB0;
  input i_clk_200;
  input ibufds_rx_o_p;
  input [4:0]Q;
  input \r_rst_reg[1] ;

  wire CLKB0;
  wire [4:0]Q;
  wire i_clk_200;
  wire ibufds_rx_o_p;
  wire inst_iserdese2_0;
  wire local_reset_200;
  (* RTL_KEEP = "true" *) wire [5:0]out;
  wire \r_rst_reg[1] ;
  wire rx_delay_o_1;
  wire [4:0]NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED;
  wire NLW_inst_iserdese2_O_UNCONNECTED;
  wire NLW_inst_iserdese2_OFB_UNCONNECTED;
  wire NLW_inst_iserdese2_Q7_UNCONNECTED;
  wire NLW_inst_iserdese2_Q8_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED;
  wire NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SIM_DELAY_D = "0" *) 
  IDELAYE2 #(
    .CINVCTRL_SEL("FALSE"),
    .DELAY_SRC("IDATAIN"),
    .HIGH_PERFORMANCE_MODE("TRUE"),
    .IDELAY_TYPE("VAR_LOAD"),
    .IDELAY_VALUE(0),
    .IS_C_INVERTED(1'b0),
    .IS_DATAIN_INVERTED(1'b0),
    .IS_IDATAIN_INVERTED(1'b0),
    .PIPE_SEL("FALSE"),
    .REFCLK_FREQUENCY(300.000000),
    .SIGNAL_PATTERN("DATA"),
    .SIM_DELAY_D(815)) 
    inst_idelaye2
       (.C(i_clk_200),
        .CE(1'b0),
        .CINVCTRL(1'b0),
        .CNTVALUEIN(Q),
        .CNTVALUEOUT(NLW_inst_idelaye2_CNTVALUEOUT_UNCONNECTED[4:0]),
        .DATAIN(1'b0),
        .DATAOUT(rx_delay_o_1),
        .IDATAIN(ibufds_rx_o_p),
        .INC(1'b0),
        .LD(1'b1),
        .LDPIPEEN(1'b0),
        .REGRST(1'b0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* OPT_MODIFIED = "MLO" *) 
  ISERDESE2 #(
    .DATA_RATE("DDR"),
    .DATA_WIDTH(6),
    .DYN_CLKDIV_INV_EN("FALSE"),
    .DYN_CLK_INV_EN("FALSE"),
    .INIT_Q1(1'b0),
    .INIT_Q2(1'b0),
    .INIT_Q3(1'b0),
    .INIT_Q4(1'b0),
    .INTERFACE_TYPE("NETWORKING"),
    .IOBDELAY("IFD"),
    .IS_CLKB_INVERTED(1'b1),
    .IS_CLKDIVP_INVERTED(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_OCLKB_INVERTED(1'b0),
    .IS_OCLK_INVERTED(1'b0),
    .NUM_CE(2),
    .OFB_USED("FALSE"),
    .SERDES_MODE("MASTER"),
    .SRVAL_Q1(1'b0),
    .SRVAL_Q2(1'b0),
    .SRVAL_Q3(1'b0),
    .SRVAL_Q4(1'b0)) 
    inst_iserdese2
       (.BITSLIP(1'b0),
        .CE1(1'b1),
        .CE2(1'b1),
        .CLK(inst_iserdese2_0),
        .CLKB(CLKB0),
        .CLKDIV(i_clk_200),
        .CLKDIVP(1'b0),
        .D(1'b0),
        .DDLY(rx_delay_o_1),
        .DYNCLKDIVSEL(1'b0),
        .DYNCLKSEL(1'b0),
        .O(NLW_inst_iserdese2_O_UNCONNECTED),
        .OCLK(1'b0),
        .OCLKB(1'b0),
        .OFB(NLW_inst_iserdese2_OFB_UNCONNECTED),
        .Q1(out[5]),
        .Q2(out[4]),
        .Q3(out[3]),
        .Q4(out[2]),
        .Q5(out[1]),
        .Q6(out[0]),
        .Q7(NLW_inst_iserdese2_Q7_UNCONNECTED),
        .Q8(NLW_inst_iserdese2_Q8_UNCONNECTED),
        .RST(local_reset_200),
        .SHIFTIN1(1'b0),
        .SHIFTIN2(1'b0),
        .SHIFTOUT1(NLW_inst_iserdese2_SHIFTOUT1_UNCONNECTED),
        .SHIFTOUT2(NLW_inst_iserdese2_SHIFTOUT2_UNCONNECTED));
  async_reset__parameterized2_48 inst_local_reset_200
       (.i_clk_200(i_clk_200),
        .out(local_reset_200),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
endmodule

module physical_iob_oserdes
   (FMC_LA08_P,
    FMC_LA08_N,
    o_clk_600,
    CLK,
    out,
    \r_rst_reg[0] );
  output FMC_LA08_P;
  output FMC_LA08_N;
  input o_clk_600;
  input CLK;
  input [9:0]out;
  input \r_rst_reg[0] ;

  wire CLK;
  wire FMC_LA08_N;
  wire FMC_LA08_P;
  wire local_reset_120;
  wire o_clk_600;
  wire oserdese_master_o;
  wire oserdese_slave_shift_out_o_0;
  wire oserdese_slave_shift_out_o_1;
  wire [9:0]out;
  wire \r_rst_reg[0] ;
  wire NLW_inst_oserdese2_master_OFB_UNCONNECTED;
  wire NLW_inst_oserdese2_master_SHIFTOUT1_UNCONNECTED;
  wire NLW_inst_oserdese2_master_SHIFTOUT2_UNCONNECTED;
  wire NLW_inst_oserdese2_master_TBYTEOUT_UNCONNECTED;
  wire NLW_inst_oserdese2_master_TFB_UNCONNECTED;
  wire NLW_inst_oserdese2_master_TQ_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_OFB_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_OQ_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_TBYTEOUT_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_TFB_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_TQ_UNCONNECTED;

  async_reset__parameterized2 inst_local_reset_120
       (.CLK(CLK),
        .out(local_reset_120),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("SDR"),
    .DATA_WIDTH(10),
    .INIT_OQ(1'b0),
    .INIT_TQ(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .IS_D3_INVERTED(1'b0),
    .IS_D4_INVERTED(1'b0),
    .IS_D5_INVERTED(1'b0),
    .IS_D6_INVERTED(1'b0),
    .IS_D7_INVERTED(1'b0),
    .IS_D8_INVERTED(1'b0),
    .IS_T1_INVERTED(1'b0),
    .IS_T2_INVERTED(1'b0),
    .IS_T3_INVERTED(1'b0),
    .IS_T4_INVERTED(1'b0),
    .SERDES_MODE("MASTER"),
    .SRVAL_OQ(1'b0),
    .SRVAL_TQ(1'b0),
    .TBYTE_CTL("FALSE"),
    .TBYTE_SRC("FALSE"),
    .TRISTATE_WIDTH(1)) 
    inst_oserdese2_master
       (.CLK(o_clk_600),
        .CLKDIV(CLK),
        .D1(out[0]),
        .D2(out[1]),
        .D3(out[2]),
        .D4(out[3]),
        .D5(out[4]),
        .D6(out[5]),
        .D7(out[6]),
        .D8(out[7]),
        .OCE(1'b1),
        .OFB(NLW_inst_oserdese2_master_OFB_UNCONNECTED),
        .OQ(oserdese_master_o),
        .RST(local_reset_120),
        .SHIFTIN1(oserdese_slave_shift_out_o_0),
        .SHIFTIN2(oserdese_slave_shift_out_o_1),
        .SHIFTOUT1(NLW_inst_oserdese2_master_SHIFTOUT1_UNCONNECTED),
        .SHIFTOUT2(NLW_inst_oserdese2_master_SHIFTOUT2_UNCONNECTED),
        .T1(1'b0),
        .T2(1'b0),
        .T3(1'b0),
        .T4(1'b0),
        .TBYTEIN(1'b0),
        .TBYTEOUT(NLW_inst_oserdese2_master_TBYTEOUT_UNCONNECTED),
        .TCE(1'b0),
        .TFB(NLW_inst_oserdese2_master_TFB_UNCONNECTED),
        .TQ(NLW_inst_oserdese2_master_TQ_UNCONNECTED));
  (* BOX_TYPE = "PRIMITIVE" *) 
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("SDR"),
    .DATA_WIDTH(10),
    .INIT_OQ(1'b0),
    .INIT_TQ(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .IS_D3_INVERTED(1'b0),
    .IS_D4_INVERTED(1'b0),
    .IS_D5_INVERTED(1'b0),
    .IS_D6_INVERTED(1'b0),
    .IS_D7_INVERTED(1'b0),
    .IS_D8_INVERTED(1'b0),
    .IS_T1_INVERTED(1'b0),
    .IS_T2_INVERTED(1'b0),
    .IS_T3_INVERTED(1'b0),
    .IS_T4_INVERTED(1'b0),
    .SERDES_MODE("SLAVE"),
    .SRVAL_OQ(1'b0),
    .SRVAL_TQ(1'b0),
    .TBYTE_CTL("FALSE"),
    .TBYTE_SRC("FALSE"),
    .TRISTATE_WIDTH(1)) 
    inst_oserdese2_slave
       (.CLK(o_clk_600),
        .CLKDIV(CLK),
        .D1(1'b0),
        .D2(1'b0),
        .D3(out[8]),
        .D4(out[9]),
        .D5(1'b0),
        .D6(1'b0),
        .D7(1'b0),
        .D8(1'b0),
        .OCE(1'b1),
        .OFB(NLW_inst_oserdese2_slave_OFB_UNCONNECTED),
        .OQ(NLW_inst_oserdese2_slave_OQ_UNCONNECTED),
        .RST(local_reset_120),
        .SHIFTIN1(1'b0),
        .SHIFTIN2(1'b0),
        .SHIFTOUT1(oserdese_slave_shift_out_o_0),
        .SHIFTOUT2(oserdese_slave_shift_out_o_1),
        .T1(1'b0),
        .T2(1'b0),
        .T3(1'b0),
        .T4(1'b0),
        .TBYTEIN(1'b0),
        .TBYTEOUT(NLW_inst_oserdese2_slave_TBYTEOUT_UNCONNECTED),
        .TCE(1'b0),
        .TFB(NLW_inst_oserdese2_slave_TFB_UNCONNECTED),
        .TQ(NLW_inst_oserdese2_slave_TQ_UNCONNECTED));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  OBUFDS inst_tx_obufds
       (.I(oserdese_master_o),
        .O(FMC_LA08_P),
        .OB(FMC_LA08_N));
endmodule

(* ORIG_REF_NAME = "physical_iob_oserdes" *) 
module physical_iob_oserdes_31
   (FMC_LA04_P,
    FMC_LA04_N,
    inst_oserdese2_master_0,
    CLK,
    out,
    \r_rst_reg[0] );
  output FMC_LA04_P;
  output FMC_LA04_N;
  input inst_oserdese2_master_0;
  input CLK;
  input [9:0]out;
  input \r_rst_reg[0] ;

  wire CLK;
  wire FMC_LA04_N;
  wire FMC_LA04_P;
  wire inst_oserdese2_master_0;
  wire local_reset_120;
  wire oserdese_master_o;
  wire oserdese_slave_shift_out_o_0;
  wire oserdese_slave_shift_out_o_1;
  wire [9:0]out;
  wire \r_rst_reg[0] ;
  wire NLW_inst_oserdese2_master_OFB_UNCONNECTED;
  wire NLW_inst_oserdese2_master_SHIFTOUT1_UNCONNECTED;
  wire NLW_inst_oserdese2_master_SHIFTOUT2_UNCONNECTED;
  wire NLW_inst_oserdese2_master_TBYTEOUT_UNCONNECTED;
  wire NLW_inst_oserdese2_master_TFB_UNCONNECTED;
  wire NLW_inst_oserdese2_master_TQ_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_OFB_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_OQ_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_TBYTEOUT_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_TFB_UNCONNECTED;
  wire NLW_inst_oserdese2_slave_TQ_UNCONNECTED;

  async_reset__parameterized2_32 inst_local_reset_120
       (.CLK(CLK),
        .out(local_reset_120),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ));
  (* BOX_TYPE = "PRIMITIVE" *) 
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("SDR"),
    .DATA_WIDTH(10),
    .INIT_OQ(1'b0),
    .INIT_TQ(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .IS_D3_INVERTED(1'b0),
    .IS_D4_INVERTED(1'b0),
    .IS_D5_INVERTED(1'b0),
    .IS_D6_INVERTED(1'b0),
    .IS_D7_INVERTED(1'b0),
    .IS_D8_INVERTED(1'b0),
    .IS_T1_INVERTED(1'b0),
    .IS_T2_INVERTED(1'b0),
    .IS_T3_INVERTED(1'b0),
    .IS_T4_INVERTED(1'b0),
    .SERDES_MODE("MASTER"),
    .SRVAL_OQ(1'b0),
    .SRVAL_TQ(1'b0),
    .TBYTE_CTL("FALSE"),
    .TBYTE_SRC("FALSE"),
    .TRISTATE_WIDTH(1)) 
    inst_oserdese2_master
       (.CLK(inst_oserdese2_master_0),
        .CLKDIV(CLK),
        .D1(out[0]),
        .D2(out[1]),
        .D3(out[2]),
        .D4(out[3]),
        .D5(out[4]),
        .D6(out[5]),
        .D7(out[6]),
        .D8(out[7]),
        .OCE(1'b1),
        .OFB(NLW_inst_oserdese2_master_OFB_UNCONNECTED),
        .OQ(oserdese_master_o),
        .RST(local_reset_120),
        .SHIFTIN1(oserdese_slave_shift_out_o_0),
        .SHIFTIN2(oserdese_slave_shift_out_o_1),
        .SHIFTOUT1(NLW_inst_oserdese2_master_SHIFTOUT1_UNCONNECTED),
        .SHIFTOUT2(NLW_inst_oserdese2_master_SHIFTOUT2_UNCONNECTED),
        .T1(1'b0),
        .T2(1'b0),
        .T3(1'b0),
        .T4(1'b0),
        .TBYTEIN(1'b0),
        .TBYTEOUT(NLW_inst_oserdese2_master_TBYTEOUT_UNCONNECTED),
        .TCE(1'b0),
        .TFB(NLW_inst_oserdese2_master_TFB_UNCONNECTED),
        .TQ(NLW_inst_oserdese2_master_TQ_UNCONNECTED));
  (* BOX_TYPE = "PRIMITIVE" *) 
  OSERDESE2 #(
    .DATA_RATE_OQ("DDR"),
    .DATA_RATE_TQ("SDR"),
    .DATA_WIDTH(10),
    .INIT_OQ(1'b0),
    .INIT_TQ(1'b0),
    .IS_CLKDIV_INVERTED(1'b0),
    .IS_CLK_INVERTED(1'b0),
    .IS_D1_INVERTED(1'b0),
    .IS_D2_INVERTED(1'b0),
    .IS_D3_INVERTED(1'b0),
    .IS_D4_INVERTED(1'b0),
    .IS_D5_INVERTED(1'b0),
    .IS_D6_INVERTED(1'b0),
    .IS_D7_INVERTED(1'b0),
    .IS_D8_INVERTED(1'b0),
    .IS_T1_INVERTED(1'b0),
    .IS_T2_INVERTED(1'b0),
    .IS_T3_INVERTED(1'b0),
    .IS_T4_INVERTED(1'b0),
    .SERDES_MODE("SLAVE"),
    .SRVAL_OQ(1'b0),
    .SRVAL_TQ(1'b0),
    .TBYTE_CTL("FALSE"),
    .TBYTE_SRC("FALSE"),
    .TRISTATE_WIDTH(1)) 
    inst_oserdese2_slave
       (.CLK(inst_oserdese2_master_0),
        .CLKDIV(CLK),
        .D1(1'b0),
        .D2(1'b0),
        .D3(out[8]),
        .D4(out[9]),
        .D5(1'b0),
        .D6(1'b0),
        .D7(1'b0),
        .D8(1'b0),
        .OCE(1'b1),
        .OFB(NLW_inst_oserdese2_slave_OFB_UNCONNECTED),
        .OQ(NLW_inst_oserdese2_slave_OQ_UNCONNECTED),
        .RST(local_reset_120),
        .SHIFTIN1(1'b0),
        .SHIFTIN2(1'b0),
        .SHIFTOUT1(oserdese_slave_shift_out_o_0),
        .SHIFTOUT2(oserdese_slave_shift_out_o_1),
        .T1(1'b0),
        .T2(1'b0),
        .T3(1'b0),
        .T4(1'b0),
        .TBYTEIN(1'b0),
        .TBYTEOUT(NLW_inst_oserdese2_slave_TBYTEOUT_UNCONNECTED),
        .TCE(1'b0),
        .TFB(NLW_inst_oserdese2_slave_TFB_UNCONNECTED),
        .TQ(NLW_inst_oserdese2_slave_TQ_UNCONNECTED));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* CAPACITANCE = "DONT_CARE" *) 
  OBUFDS inst_tx_obufds
       (.I(oserdese_master_o),
        .O(FMC_LA04_P),
        .OB(FMC_LA04_N));
endmodule

module physical_iob_tab_monitor
   (out,
    o_monitor_delay_tabs,
    o_delay_tabs_update,
    o_run,
    r_enable_monitor_reg_0,
    o_clk_200,
    \r_monitor_delay_tabs_reg[4]_0 ,
    \r_rst_reg[1] ,
    D,
    \r_serdes_monitor_i_reg[5]_0 ,
    \r_serdes_master_i_reg[5]_0 );
  output [4:0]out;
  output [4:0]o_monitor_delay_tabs;
  output o_delay_tabs_update;
  output o_run;
  input r_enable_monitor_reg_0;
  input o_clk_200;
  input [4:0]\r_monitor_delay_tabs_reg[4]_0 ;
  input \r_rst_reg[1] ;
  input [4:0]D;
  input [5:0]\r_serdes_monitor_i_reg[5]_0 ;
  input [5:0]\r_serdes_master_i_reg[5]_0 ;

  wire [4:0]D;
  wire enable_monitor;
  wire inst_async_reset_n_0;
  wire o_clk_200;
  (* RTL_KEEP = "true" *) wire o_delay_tabs_update;
  (* RTL_KEEP = "true" *) wire [4:0]o_monitor_delay_tabs;
  (* RTL_KEEP = "true" *) wire o_run;
  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire p_0_in1_in;
  wire [3:0]p_0_in__4;
  wire [4:0]r_edge_window_tabs;
  wire r_enable_monitor_reg_0;
  wire \r_master_delay_tabs[3]_i_2__0_n_0 ;
  wire \r_master_delay_tabs[4]_i_1__0_n_0 ;
  wire \r_master_delay_tabs[4]_i_3__0_n_0 ;
  wire \r_master_delay_tabs[4]_i_4__0_n_0 ;
  wire \r_master_delay_tabs[4]_i_5__0_n_0 ;
  wire \r_monitor_delay_tabs[0]_i_2__0_n_0 ;
  wire \r_monitor_delay_tabs[1]_i_2__0_n_0 ;
  wire \r_monitor_delay_tabs[1]_i_3__0_n_0 ;
  wire \r_monitor_delay_tabs[2]_i_2__0_n_0 ;
  wire \r_monitor_delay_tabs[2]_i_3__0_n_0 ;
  wire \r_monitor_delay_tabs[2]_i_4__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_1__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_3__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_4__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_5__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_6__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_7__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_8__0_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_9__0_n_0 ;
  wire [4:0]\r_monitor_delay_tabs_reg[4]_0 ;
  wire \r_rst_reg[1] ;
  wire [5:0]r_serdes_master_i;
  wire [5:0]\r_serdes_master_i_reg[5]_0 ;
  wire [5:0]r_serdes_monitor_i;
  wire \r_serdes_monitor_i[0]_i_1_n_0 ;
  wire \r_serdes_monitor_i[1]_i_1_n_0 ;
  wire \r_serdes_monitor_i[2]_i_1_n_0 ;
  wire \r_serdes_monitor_i[3]_i_1_n_0 ;
  wire \r_serdes_monitor_i[4]_i_1_n_0 ;
  wire \r_serdes_monitor_i[5]_i_1_n_0 ;
  wire [5:0]\r_serdes_monitor_i_reg[5]_0 ;
  wire [9:0]r_state;
  wire \r_state[0]__0_i_2__1_n_0 ;
  wire \r_state[0]__0_i_3__1_n_0 ;
  wire \r_state[0]__0_i_4__1_n_0 ;
  wire \r_state[0]__0_i_5__1_n_0 ;
  wire \r_state[0]__0_i_6__1_n_0 ;
  wire \r_state[0]__0_i_7__1_n_0 ;
  wire \r_state[0]_i_2__7_n_0 ;
  wire \r_state[0]_i_3__6_n_0 ;
  wire \r_state[0]_i_4__5_n_0 ;
  wire \r_state[0]_i_5__3_n_0 ;
  wire \r_state[2]__0_i_2__1_n_0 ;
  wire \r_state[2]_i_2__7_n_0 ;
  wire \r_state[3]__0_i_2__0_n_0 ;
  wire \r_state[3]__0_i_3__0_n_0 ;
  wire \r_state[3]__0_i_4__0_n_0 ;
  wire \r_state[3]_i_2__4_n_0 ;
  wire \r_state[5]__0_i_2__0_n_0 ;
  wire \r_state[5]__0_i_3__0_n_0 ;
  wire \r_state[5]_i_2__6_n_0 ;
  wire \r_state[6]__0_i_2__1_n_0 ;
  wire \r_state[6]_i_2__4_n_0 ;
  wire \r_state[6]_i_3__2_n_0 ;
  wire \r_state[7]__0_i_2__1_n_0 ;
  wire \r_state[7]__0_i_3__1_n_0 ;
  wire \r_state[7]_i_2__5_n_0 ;
  wire \r_state[7]_i_3__5_n_0 ;
  wire \r_state[9]__0_i_2__1_n_0 ;
  wire \r_state[9]__0_i_3__1_n_0 ;
  wire \r_state[9]_i_10__1_n_0 ;
  wire \r_state[9]_i_11__1_n_0 ;
  wire \r_state[9]_i_12__0_n_0 ;
  wire \r_state[9]_i_13__0_n_0 ;
  wire \r_state[9]_i_4__1_n_0 ;
  wire \r_state[9]_i_5__1_n_0 ;
  wire \r_state[9]_i_6__1_n_0 ;
  wire \r_state[9]_i_7__1_n_0 ;
  wire \r_state[9]_i_8__1_n_0 ;
  wire \r_state[9]_i_9__1_n_0 ;
  wire \r_state_reg[0]__0_n_0 ;
  wire \r_state_reg[2]__0_n_0 ;
  wire \r_state_reg[3]__0_n_0 ;
  wire \r_state_reg[4]__0_n_0 ;
  wire \r_state_reg[5]__0_n_0 ;
  wire \r_state_reg[6]__0_n_0 ;
  wire \r_state_reg[7]__0_n_0 ;
  wire \r_state_reg[8]__0_n_0 ;
  wire \r_state_reg[9]__0_n_0 ;
  wire \r_state_reg_n_0_[8] ;
  wire [3:0]r_wait_time_reg;
  wire ri_delay_tabs_update;
  wire [4:0]ri_master_delay_tabs;
  wire [4:0]ri_monitor_delay_tabs;
  wire ri_monitoring_run;
  wire ri_state;
  wire [9:0]ri_state__0;
  wire [9:0]ri_state__1;
  wire ri_wait_time;

  async_reset__parameterized1_7 inst_async_reset
       (.o_clk_200(o_clk_200),
        .\r_rst_reg[1]_0 (inst_async_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  LUT3 #(
    .INIT(8'hFE)) 
    r_delay_tabs_update_i_1__0
       (.I0(\r_state_reg[8]__0_n_0 ),
        .I1(p_0_in1_in),
        .I2(\r_state_reg[4]__0_n_0 ),
        .O(ri_delay_tabs_update));
  FDCE r_delay_tabs_update_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_delay_tabs_update),
        .Q(o_delay_tabs_update));
  FDCE \r_edge_window_tabs_reg[0] 
       (.C(o_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[0]),
        .Q(r_edge_window_tabs[0]));
  FDCE \r_edge_window_tabs_reg[1] 
       (.C(o_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[1]),
        .Q(r_edge_window_tabs[1]));
  FDCE \r_edge_window_tabs_reg[2] 
       (.C(o_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[2]),
        .Q(r_edge_window_tabs[2]));
  FDCE \r_edge_window_tabs_reg[3] 
       (.C(o_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[3]),
        .Q(r_edge_window_tabs[3]));
  FDCE \r_edge_window_tabs_reg[4] 
       (.C(o_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[4]),
        .Q(r_edge_window_tabs[4]));
  FDCE r_enable_monitor_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_enable_monitor_reg_0),
        .Q(enable_monitor));
  LUT3 #(
    .INIT(8'h8B)) 
    \r_master_delay_tabs[0]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [0]),
        .I1(r_state[0]),
        .I2(out[0]),
        .O(ri_master_delay_tabs[0]));
  LUT5 #(
    .INIT(32'hB88B8BB8)) 
    \r_master_delay_tabs[1]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [1]),
        .I1(r_state[0]),
        .I2(out[0]),
        .I3(out[1]),
        .I4(\r_state_reg_n_0_[8] ),
        .O(ri_master_delay_tabs[1]));
  LUT6 #(
    .INIT(64'hBB8BB8BB88B88B88)) 
    \r_master_delay_tabs[2]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [2]),
        .I1(r_state[0]),
        .I2(out[0]),
        .I3(\r_state_reg_n_0_[8] ),
        .I4(out[1]),
        .I5(out[2]),
        .O(ri_master_delay_tabs[2]));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay_tabs[3]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [3]),
        .I1(r_state[0]),
        .I2(\r_master_delay_tabs[3]_i_2__0_n_0 ),
        .O(ri_master_delay_tabs[3]));
  LUT5 #(
    .INIT(32'h9AAAAAA6)) 
    \r_master_delay_tabs[3]_i_2__0 
       (.I0(out[3]),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(out[0]),
        .I3(out[2]),
        .I4(out[1]),
        .O(\r_master_delay_tabs[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000111)) 
    \r_master_delay_tabs[4]_i_1__0 
       (.I0(r_state[5]),
        .I1(r_state[9]),
        .I2(r_state[0]),
        .I3(\r_state_reg_n_0_[8] ),
        .I4(\r_master_delay_tabs[4]_i_3__0_n_0 ),
        .I5(\r_master_delay_tabs[4]_i_4__0_n_0 ),
        .O(\r_master_delay_tabs[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair416" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay_tabs[4]_i_2__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [4]),
        .I1(r_state[0]),
        .I2(\r_master_delay_tabs[4]_i_5__0_n_0 ),
        .O(ri_master_delay_tabs[4]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_master_delay_tabs[4]_i_3__0 
       (.I0(r_state[6]),
        .I1(r_state[7]),
        .O(\r_master_delay_tabs[4]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFA9)) 
    \r_master_delay_tabs[4]_i_4__0 
       (.I0(r_state[4]),
        .I1(r_state[0]),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(r_state[2]),
        .I4(r_state[3]),
        .I5(r_state[1]),
        .O(\r_master_delay_tabs[4]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAA9AAAA)) 
    \r_master_delay_tabs[4]_i_5__0 
       (.I0(out[4]),
        .I1(out[3]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(out[0]),
        .O(\r_master_delay_tabs[4]_i_5__0_n_0 ));
  FDCE \r_master_delay_tabs_reg[0] 
       (.C(o_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[0]),
        .Q(out[0]));
  FDCE \r_master_delay_tabs_reg[1] 
       (.C(o_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[1]),
        .Q(out[1]));
  FDCE \r_master_delay_tabs_reg[2] 
       (.C(o_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[2]),
        .Q(out[2]));
  FDCE \r_master_delay_tabs_reg[3] 
       (.C(o_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[3]),
        .Q(out[3]));
  FDCE \r_master_delay_tabs_reg[4] 
       (.C(o_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[4]),
        .Q(out[4]));
  LUT6 #(
    .INIT(64'h8BB88BB88BB8B88B)) 
    \r_monitor_delay_tabs[0]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [0]),
        .I1(r_state[0]),
        .I2(o_monitor_delay_tabs[0]),
        .I3(\r_monitor_delay_tabs[0]_i_2__0_n_0 ),
        .I4(r_state[5]),
        .I5(r_state[4]),
        .O(ri_monitor_delay_tabs[0]));
  LUT6 #(
    .INIT(64'h5F5C5C5F5F5C5C5C)) 
    \r_monitor_delay_tabs[0]_i_2__0 
       (.I0(r_edge_window_tabs[1]),
        .I1(r_state[4]),
        .I2(r_state[1]),
        .I3(r_edge_window_tabs[0]),
        .I4(r_state[5]),
        .I5(r_state[9]),
        .O(\r_monitor_delay_tabs[0]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hB88B8BB88BB8B88B)) 
    \r_monitor_delay_tabs[1]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [1]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[1]_i_2__0_n_0 ),
        .I3(o_monitor_delay_tabs[1]),
        .I4(\r_monitor_delay_tabs[1]_i_3__0_n_0 ),
        .I5(\r_state_reg_n_0_[8] ),
        .O(ri_monitor_delay_tabs[1]));
  LUT4 #(
    .INIT(16'hF110)) 
    \r_monitor_delay_tabs[1]_i_2__0 
       (.I0(r_state[4]),
        .I1(r_state[5]),
        .I2(\r_monitor_delay_tabs[0]_i_2__0_n_0 ),
        .I3(o_monitor_delay_tabs[0]),
        .O(\r_monitor_delay_tabs[1]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h8BB88BBB)) 
    \r_monitor_delay_tabs[1]_i_3__0 
       (.I0(r_edge_window_tabs[2]),
        .I1(r_state[1]),
        .I2(r_edge_window_tabs[1]),
        .I3(r_state[5]),
        .I4(r_state[9]),
        .O(\r_monitor_delay_tabs[1]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'hB88B8BB8)) 
    \r_monitor_delay_tabs[2]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [2]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[2]_i_2__0_n_0 ),
        .I3(\r_monitor_delay_tabs[2]_i_3__0_n_0 ),
        .I4(\r_monitor_delay_tabs[2]_i_4__0_n_0 ),
        .O(ri_monitor_delay_tabs[2]));
  LUT6 #(
    .INIT(64'hFFFFFF96FF969696)) 
    \r_monitor_delay_tabs[2]_i_2__0 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(\r_monitor_delay_tabs[1]_i_3__0_n_0 ),
        .I2(o_monitor_delay_tabs[1]),
        .I3(o_monitor_delay_tabs[0]),
        .I4(\r_monitor_delay_tabs[0]_i_2__0_n_0 ),
        .I5(\r_state[9]_i_7__1_n_0 ),
        .O(\r_monitor_delay_tabs[2]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hD4)) 
    \r_monitor_delay_tabs[2]_i_3__0 
       (.I0(o_monitor_delay_tabs[1]),
        .I1(\r_monitor_delay_tabs[1]_i_3__0_n_0 ),
        .I2(\r_state_reg_n_0_[8] ),
        .O(\r_monitor_delay_tabs[2]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h99AAAA9A55666656)) 
    \r_monitor_delay_tabs[2]_i_4__0 
       (.I0(o_monitor_delay_tabs[2]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[2]),
        .I5(r_edge_window_tabs[3]),
        .O(\r_monitor_delay_tabs[2]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h8BB8B88B)) 
    \r_monitor_delay_tabs[3]_i_1__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [3]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[4]_i_6__0_n_0 ),
        .I3(\r_monitor_delay_tabs[4]_i_5__0_n_0 ),
        .I4(\r_monitor_delay_tabs[4]_i_7__0_n_0 ),
        .O(ri_monitor_delay_tabs[3]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    \r_monitor_delay_tabs[4]_i_1__0 
       (.I0(\r_monitor_delay_tabs[4]_i_3__0_n_0 ),
        .I1(\r_monitor_delay_tabs[4]_i_4__0_n_0 ),
        .I2(r_state[7]),
        .I3(r_state[2]),
        .I4(r_state[6]),
        .I5(r_state[3]),
        .O(\r_monitor_delay_tabs[4]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hBBB8B888888B8BBB)) 
    \r_monitor_delay_tabs[4]_i_2__0 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [4]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[4]_i_5__0_n_0 ),
        .I3(\r_monitor_delay_tabs[4]_i_6__0_n_0 ),
        .I4(\r_monitor_delay_tabs[4]_i_7__0_n_0 ),
        .I5(\r_monitor_delay_tabs[4]_i_8__0_n_0 ),
        .O(ri_monitor_delay_tabs[4]));
  LUT6 #(
    .INIT(64'h0000100010000000)) 
    \r_monitor_delay_tabs[4]_i_3__0 
       (.I0(r_state[9]),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state[9]_i_7__1_n_0 ),
        .I3(\r_state[6]_i_3__2_n_0 ),
        .I4(r_state[0]),
        .I5(r_state[1]),
        .O(\r_monitor_delay_tabs[4]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEE9)) 
    \r_monitor_delay_tabs[4]_i_4__0 
       (.I0(r_state[9]),
        .I1(r_state[4]),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(r_state[5]),
        .I4(r_state[1]),
        .I5(r_state[0]),
        .O(\r_monitor_delay_tabs[4]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h99AAAA9A55666656)) 
    \r_monitor_delay_tabs[4]_i_5__0 
       (.I0(o_monitor_delay_tabs[3]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[3]),
        .I5(r_edge_window_tabs[4]),
        .O(\r_monitor_delay_tabs[4]_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'h80A8EAFE)) 
    \r_monitor_delay_tabs[4]_i_6__0 
       (.I0(\r_monitor_delay_tabs[2]_i_4__0_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_monitor_delay_tabs[1]_i_3__0_n_0 ),
        .I3(o_monitor_delay_tabs[1]),
        .I4(\r_monitor_delay_tabs[2]_i_2__0_n_0 ),
        .O(\r_monitor_delay_tabs[4]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h4455554500111101)) 
    \r_monitor_delay_tabs[4]_i_7__0 
       (.I0(o_monitor_delay_tabs[2]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[2]),
        .I5(r_edge_window_tabs[3]),
        .O(\r_monitor_delay_tabs[4]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h55555AA6AAAAA559)) 
    \r_monitor_delay_tabs[4]_i_8__0 
       (.I0(\r_monitor_delay_tabs[4]_i_9__0_n_0 ),
        .I1(r_state[9]),
        .I2(r_state[5]),
        .I3(r_edge_window_tabs[4]),
        .I4(r_state[1]),
        .I5(o_monitor_delay_tabs[4]),
        .O(\r_monitor_delay_tabs[4]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'hBBAAAABAFFEEEEFE)) 
    \r_monitor_delay_tabs[4]_i_9__0 
       (.I0(o_monitor_delay_tabs[3]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[3]),
        .I5(r_edge_window_tabs[4]),
        .O(\r_monitor_delay_tabs[4]_i_9__0_n_0 ));
  FDCE \r_monitor_delay_tabs_reg[0] 
       (.C(o_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[0]),
        .Q(o_monitor_delay_tabs[0]));
  FDCE \r_monitor_delay_tabs_reg[1] 
       (.C(o_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[1]),
        .Q(o_monitor_delay_tabs[1]));
  FDCE \r_monitor_delay_tabs_reg[2] 
       (.C(o_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[2]),
        .Q(o_monitor_delay_tabs[2]));
  FDCE \r_monitor_delay_tabs_reg[3] 
       (.C(o_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[3]),
        .Q(o_monitor_delay_tabs[3]));
  FDCE \r_monitor_delay_tabs_reg[4] 
       (.C(o_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[4]),
        .Q(o_monitor_delay_tabs[4]));
  LUT3 #(
    .INIT(8'h0E)) 
    r_monitoring_run_i_1__0
       (.I0(o_run),
        .I1(p_0_in1_in),
        .I2(\r_state_reg[0]__0_n_0 ),
        .O(ri_monitoring_run));
  FDCE r_monitoring_run_reg
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitoring_run),
        .Q(o_run));
  FDCE \r_serdes_master_i_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [0]),
        .Q(r_serdes_master_i[0]));
  FDCE \r_serdes_master_i_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [1]),
        .Q(r_serdes_master_i[1]));
  FDCE \r_serdes_master_i_reg[2] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [2]),
        .Q(r_serdes_master_i[2]));
  FDCE \r_serdes_master_i_reg[3] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [3]),
        .Q(r_serdes_master_i[3]));
  FDCE \r_serdes_master_i_reg[4] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [4]),
        .Q(r_serdes_master_i[4]));
  FDCE \r_serdes_master_i_reg[5] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [5]),
        .Q(r_serdes_master_i[5]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[0]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [0]),
        .O(\r_serdes_monitor_i[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[1]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [1]),
        .O(\r_serdes_monitor_i[1]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[2]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [2]),
        .O(\r_serdes_monitor_i[2]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[3]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [3]),
        .O(\r_serdes_monitor_i[3]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[4]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [4]),
        .O(\r_serdes_monitor_i[4]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[5]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [5]),
        .O(\r_serdes_monitor_i[5]_i_1_n_0 ));
  FDCE \r_serdes_monitor_i_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[0]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[0]));
  FDCE \r_serdes_monitor_i_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[1]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[1]));
  FDCE \r_serdes_monitor_i_reg[2] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[2]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[2]));
  FDCE \r_serdes_monitor_i_reg[3] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[3]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[3]));
  FDCE \r_serdes_monitor_i_reg[4] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[4]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[4]));
  FDCE \r_serdes_monitor_i_reg[5] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[5]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[5]));
  LUT6 #(
    .INIT(64'hFD00FFFFFFFFFD00)) 
    \r_state[0]__0_i_1__1 
       (.I0(\r_state[0]__0_i_2__1_n_0 ),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(p_0_in1_in),
        .I3(\r_state[0]__0_i_3__1_n_0 ),
        .I4(\r_state[0]__0_i_4__1_n_0 ),
        .I5(\r_state_reg[0]__0_n_0 ),
        .O(ri_state__1[0]));
  LUT6 #(
    .INIT(64'h00000000020202FF)) 
    \r_state[0]__0_i_2__1 
       (.I0(\r_state[0]__0_i_5__1_n_0 ),
        .I1(\r_state_reg[9]__0_n_0 ),
        .I2(\r_state[3]__0_i_4__0_n_0 ),
        .I3(\r_state[0]__0_i_6__1_n_0 ),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[0]__0_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEFE)) 
    \r_state[0]__0_i_3__1 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state[3]__0_i_4__0_n_0 ),
        .I2(\r_state[0]__0_i_7__1_n_0 ),
        .I3(p_0_in1_in),
        .I4(\r_state_reg[2]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[0]__0_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[0]__0_i_4__1 
       (.I0(\r_state[7]__0_i_2__1_n_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[6]__0_n_0 ),
        .I5(\r_state_reg[7]__0_n_0 ),
        .O(\r_state[0]__0_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[0]__0_i_5__1 
       (.I0(\r_state_reg[8]__0_n_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[0]__0_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFEEFFEEEF8A)) 
    \r_state[0]__0_i_6__1 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[8]__0_n_0 ),
        .I2(enable_monitor),
        .I3(\r_state_reg[9]__0_n_0 ),
        .I4(\r_state_reg[6]__0_n_0 ),
        .I5(\r_state_reg[7]__0_n_0 ),
        .O(\r_state[0]__0_i_6__1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]__0_i_7__1 
       (.I0(\r_state_reg[9]__0_n_0 ),
        .I1(\r_state_reg[8]__0_n_0 ),
        .I2(\r_state_reg[4]__0_n_0 ),
        .O(\r_state[0]__0_i_7__1_n_0 ));
  LUT6 #(
    .INIT(64'hFF0000FFFFFF0F0E)) 
    \r_state[0]_i_1__8 
       (.I0(\r_state[0]_i_2__7_n_0 ),
        .I1(r_state[2]),
        .I2(\r_state[0]_i_3__6_n_0 ),
        .I3(r_state[1]),
        .I4(r_state[0]),
        .I5(\r_state[0]_i_4__5_n_0 ),
        .O(ri_state__0[0]));
  LUT6 #(
    .INIT(64'hF0F0D0D0F0F0D000)) 
    \r_state[0]_i_2__7 
       (.I0(\r_state[7]_i_3__5_n_0 ),
        .I1(r_state[6]),
        .I2(\r_state[3]_i_2__4_n_0 ),
        .I3(\r_state[0]_i_5__3_n_0 ),
        .I4(r_state[3]),
        .I5(r_state[4]),
        .O(\r_state[0]_i_2__7_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[0]_i_3__6 
       (.I0(r_state[3]),
        .I1(r_state[1]),
        .I2(\r_state[3]_i_2__4_n_0 ),
        .O(\r_state[0]_i_3__6_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[0]_i_4__5 
       (.I0(\r_state[6]_i_3__2_n_0 ),
        .I1(r_state[5]),
        .I2(r_state[4]),
        .I3(\r_state_reg_n_0_[8] ),
        .I4(r_state[9]),
        .O(\r_state[0]_i_4__5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFFFCFDD0)) 
    \r_state[0]_i_5__3 
       (.I0(enable_monitor),
        .I1(r_state[6]),
        .I2(r_state[5]),
        .I3(r_state[9]),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(r_state[7]),
        .O(\r_state[0]_i_5__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \r_state[1]__0_i_1__1 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state[3]__0_i_4__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state_reg[3]__0_n_0 ),
        .I5(\r_state[7]__0_i_2__1_n_0 ),
        .O(ri_state__1[1]));
  LUT5 #(
    .INIT(32'h00000004)) 
    \r_state[1]_i_1__8 
       (.I0(\r_state[3]_i_2__4_n_0 ),
        .I1(r_state[0]),
        .I2(r_state[2]),
        .I3(r_state[3]),
        .I4(r_state[1]),
        .O(ri_state__0[1]));
  LUT6 #(
    .INIT(64'h0000000000001614)) 
    \r_state[2]__0_i_1__1 
       (.I0(\r_state_reg[9]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(p_0_in1_in),
        .I3(enable_monitor),
        .I4(\r_state[7]__0_i_3__1_n_0 ),
        .I5(\r_state[2]__0_i_2__1_n_0 ),
        .O(ri_state__1[2]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[2]__0_i_2__1 
       (.I0(\r_state_reg[6]__0_n_0 ),
        .I1(\r_state_reg[7]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[8]__0_n_0 ),
        .O(\r_state[2]__0_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h16140000)) 
    \r_state[2]_i_1__8 
       (.I0(r_state[9]),
        .I1(r_state[1]),
        .I2(r_state[4]),
        .I3(enable_monitor),
        .I4(\r_state[2]_i_2__7_n_0 ),
        .O(ri_state__0[2]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[2]_i_2__7 
       (.I0(r_state[3]),
        .I1(r_state[5]),
        .I2(r_state[6]),
        .I3(r_state[2]),
        .I4(r_state[7]),
        .I5(\r_state[9]_i_13__0_n_0 ),
        .O(\r_state[2]_i_2__7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \r_state[3]__0_i_1__1 
       (.I0(\r_state[3]__0_i_2__0_n_0 ),
        .I1(\r_state[3]__0_i_3__0_n_0 ),
        .I2(\r_state[3]__0_i_4__0_n_0 ),
        .I3(\r_state_reg[4]__0_n_0 ),
        .I4(\r_state_reg[2]__0_n_0 ),
        .I5(\r_state_reg[0]__0_n_0 ),
        .O(ri_state__1[3]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[3]__0_i_2__0 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[8]__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[3]__0_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[3]__0_i_3__0 
       (.I0(p_0_in1_in),
        .I1(\r_state_reg[9]__0_n_0 ),
        .O(\r_state[3]__0_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[3]__0_i_4__0 
       (.I0(\r_state_reg[7]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[3]__0_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[3]_i_1__8 
       (.I0(\r_state[3]_i_2__4_n_0 ),
        .I1(r_state[1]),
        .I2(r_state[3]),
        .I3(r_state[2]),
        .I4(r_state[0]),
        .O(ri_state__0[3]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[3]_i_2__4 
       (.I0(r_state[7]),
        .I1(r_state[6]),
        .I2(r_state[5]),
        .I3(r_state[4]),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(r_state[9]),
        .O(\r_state[3]_i_2__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT4 #(
    .INIT(16'h000D)) 
    \r_state[4]__0_i_1__2 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[5]__0_i_2__0_n_0 ),
        .O(ri_state__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT4 #(
    .INIT(16'h000D)) 
    \r_state[4]_i_1__11 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(r_state[2]),
        .I3(\r_state[5]_i_2__6_n_0 ),
        .O(ri_state__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[5]__0_i_1__2 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[5]__0_i_2__0_n_0 ),
        .O(ri_state__1[5]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEF)) 
    \r_state[5]__0_i_2__0 
       (.I0(\r_state[5]__0_i_3__0_n_0 ),
        .I1(\r_state[3]__0_i_3__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(\r_state_reg[0]__0_n_0 ),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[8]__0_n_0 ),
        .O(\r_state[5]__0_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[5]__0_i_3__0 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[7]__0_n_0 ),
        .O(\r_state[5]__0_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[5]_i_1__10 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(r_state[2]),
        .I3(\r_state[5]_i_2__6_n_0 ),
        .O(ri_state__0[5]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \r_state[5]_i_2__6 
       (.I0(\r_state[6]_i_2__4_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(r_state[5]),
        .I3(r_state[3]),
        .I4(r_state[6]),
        .I5(r_state[7]),
        .O(\r_state[5]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000002020200)) 
    \r_state[6]__0_i_1__1 
       (.I0(\r_state[6]__0_i_2__1_n_0 ),
        .I1(p_0_in1_in),
        .I2(\r_state_reg[4]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[8]__0_n_0 ),
        .I5(\r_state[7]__0_i_3__1_n_0 ),
        .O(ri_state__1[6]));
  LUT6 #(
    .INIT(64'h0000010001010101)) 
    \r_state[6]__0_i_2__1 
       (.I0(\r_state_reg[7]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[9]__0_n_0 ),
        .I3(enable_monitor),
        .I4(\r_state_reg[8]__0_n_0 ),
        .I5(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[6]__0_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'h04004040)) 
    \r_state[6]_i_1__7 
       (.I0(\r_state[6]_i_2__4_n_0 ),
        .I1(\r_state[6]_i_3__2_n_0 ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(enable_monitor),
        .I4(r_state[5]),
        .O(ri_state__0[6]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[6]_i_2__4 
       (.I0(r_state[0]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[4]),
        .O(\r_state[6]_i_2__4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[6]_i_3__2 
       (.I0(r_state[7]),
        .I1(r_state[2]),
        .I2(r_state[6]),
        .I3(r_state[3]),
        .O(\r_state[6]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_state[7]__0_i_1__1 
       (.I0(\r_state[7]__0_i_2__1_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[7]__0_n_0 ),
        .I4(\r_state[7]__0_i_3__1_n_0 ),
        .O(ri_state__1[7]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[7]__0_i_2__1 
       (.I0(p_0_in1_in),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[8]__0_n_0 ),
        .I3(\r_state_reg[9]__0_n_0 ),
        .O(\r_state[7]__0_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[7]__0_i_3__1 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[7]__0_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \r_state[7]_i_1__5 
       (.I0(\r_state[7]_i_2__5_n_0 ),
        .I1(r_state[4]),
        .I2(r_state[3]),
        .I3(\r_state[7]_i_3__5_n_0 ),
        .I4(r_state[6]),
        .I5(r_state[2]),
        .O(ri_state__0[7]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[7]_i_2__5 
       (.I0(r_state[1]),
        .I1(r_state[0]),
        .O(\r_state[7]_i_2__5_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[7]_i_3__5 
       (.I0(r_state[5]),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(r_state[9]),
        .I3(r_state[7]),
        .O(\r_state[7]_i_3__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT4 #(
    .INIT(16'h00D0)) 
    \r_state[8]__0_i_1__2 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(\r_state[9]__0_i_2__1_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .O(ri_state__1[8]));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT4 #(
    .INIT(16'h00D0)) 
    \r_state[8]_i_1__9 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(\r_state[9]_i_10__1_n_0 ),
        .I3(r_state[2]),
        .O(ri_state__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[9]__0_i_1__2 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[9]__0_i_2__1_n_0 ),
        .O(ri_state__1[9]));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[9]__0_i_2__1 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[7]__0_n_0 ),
        .I3(\r_state[9]__0_i_3__1_n_0 ),
        .O(\r_state[9]__0_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[9]__0_i_3__1 
       (.I0(\r_state_reg[3]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[8]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(p_0_in1_in),
        .I5(\r_state_reg[9]__0_n_0 ),
        .O(\r_state[9]__0_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \r_state[9]_i_10__1 
       (.I0(\r_state[9]_i_12__0_n_0 ),
        .I1(r_state[4]),
        .I2(r_state[1]),
        .I3(r_state[7]),
        .I4(r_state[9]),
        .I5(\r_state[9]_i_13__0_n_0 ),
        .O(\r_state[9]_i_10__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_11__1 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(r_state[9]),
        .O(\r_state[9]_i_11__1_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[9]_i_12__0 
       (.I0(r_state[6]),
        .I1(r_state[5]),
        .I2(r_state[3]),
        .O(\r_state[9]_i_12__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_13__0 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(r_state[0]),
        .O(\r_state[9]_i_13__0_n_0 ));
  LUT6 #(
    .INIT(64'hFEECFFFFFFFFFFFF)) 
    \r_state[9]_i_1__6 
       (.I0(\r_state[9]_i_4__1_n_0 ),
        .I1(\r_state[9]_i_5__1_n_0 ),
        .I2(r_state[2]),
        .I3(r_state[6]),
        .I4(\r_state[9]_i_6__1_n_0 ),
        .I5(\r_state[9]_i_7__1_n_0 ),
        .O(ri_state));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[9]_i_2__8 
       (.I0(\r_state[9]_i_8__1_n_0 ),
        .I1(\r_state[9]_i_9__1_n_0 ),
        .I2(r_state[2]),
        .I3(\r_state[9]_i_10__1_n_0 ),
        .O(ri_state__0[9]));
  LUT5 #(
    .INIT(32'hEAAAAAAA)) 
    \r_state[9]_i_4__1 
       (.I0(r_state[0]),
        .I1(r_wait_time_reg[2]),
        .I2(r_wait_time_reg[1]),
        .I3(r_wait_time_reg[0]),
        .I4(r_wait_time_reg[3]),
        .O(\r_state[9]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEFFEF)) 
    \r_state[9]_i_5__1 
       (.I0(\r_state[9]_i_11__1_n_0 ),
        .I1(r_state[7]),
        .I2(r_state[0]),
        .I3(enable_monitor),
        .I4(r_state[2]),
        .I5(r_state[6]),
        .O(\r_state[9]_i_5__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_6__1 
       (.I0(r_state[1]),
        .I1(r_state[3]),
        .O(\r_state[9]_i_6__1_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_7__1 
       (.I0(r_state[5]),
        .I1(r_state[4]),
        .O(\r_state[9]_i_7__1_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \r_state[9]_i_8__1 
       (.I0(r_serdes_master_i[5]),
        .I1(r_serdes_monitor_i[5]),
        .I2(r_serdes_master_i[4]),
        .I3(r_serdes_monitor_i[4]),
        .I4(r_serdes_monitor_i[3]),
        .I5(r_serdes_master_i[3]),
        .O(\r_state[9]_i_8__1_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_state[9]_i_9__1 
       (.I0(r_serdes_monitor_i[0]),
        .I1(r_serdes_master_i[0]),
        .I2(r_serdes_master_i[1]),
        .I3(r_serdes_monitor_i[1]),
        .I4(r_serdes_master_i[2]),
        .I5(r_serdes_monitor_i[2]),
        .O(\r_state[9]_i_9__1_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(o_clk_200),
        .CE(ri_state),
        .D(ri_state__0[0]),
        .PRE(inst_async_reset_n_0),
        .Q(r_state[0]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .D(ri_state__1[0]),
        .PRE(inst_async_reset_n_0),
        .Q(\r_state_reg[0]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[1]),
        .Q(r_state[1]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[1]),
        .Q(p_0_in1_in));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[2]),
        .Q(r_state[2]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[2]),
        .Q(\r_state_reg[2]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[3]),
        .Q(r_state[3]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[3]),
        .Q(\r_state_reg[3]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[4]),
        .Q(r_state[4]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[4]),
        .Q(\r_state_reg[4]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[5]),
        .Q(r_state[5]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[5]),
        .Q(\r_state_reg[5]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[6]),
        .Q(r_state[6]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[6]),
        .Q(\r_state_reg[6]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[7]),
        .Q(r_state[7]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[7]),
        .Q(\r_state_reg[7]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[8]),
        .Q(\r_state_reg_n_0_[8] ));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[8]),
        .Q(\r_state_reg[8]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[9]),
        .Q(r_state[9]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9]__0 
       (.C(o_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[9]),
        .Q(\r_state_reg[9]__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_wait_time[0]_i_1__0 
       (.I0(r_wait_time_reg[0]),
        .O(p_0_in__4[0]));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_wait_time[1]_i_1__0 
       (.I0(r_wait_time_reg[0]),
        .I1(r_wait_time_reg[1]),
        .O(p_0_in__4[1]));
  (* SOFT_HLUTNM = "soft_lutpair418" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_wait_time[2]_i_1__0 
       (.I0(r_wait_time_reg[2]),
        .I1(r_wait_time_reg[1]),
        .I2(r_wait_time_reg[0]),
        .O(p_0_in__4[2]));
  LUT6 #(
    .INIT(64'h0000010001000000)) 
    \r_wait_time[3]_i_1__0 
       (.I0(\r_state[7]_i_2__5_n_0 ),
        .I1(r_state[4]),
        .I2(r_state[3]),
        .I3(\r_state[7]_i_3__5_n_0 ),
        .I4(r_state[6]),
        .I5(r_state[2]),
        .O(ri_wait_time));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_wait_time[3]_i_2__0 
       (.I0(r_wait_time_reg[3]),
        .I1(r_wait_time_reg[0]),
        .I2(r_wait_time_reg[1]),
        .I3(r_wait_time_reg[2]),
        .O(p_0_in__4[3]));
  FDCE \r_wait_time_reg[0] 
       (.C(o_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[0]),
        .Q(r_wait_time_reg[0]));
  FDCE \r_wait_time_reg[1] 
       (.C(o_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[1]),
        .Q(r_wait_time_reg[1]));
  FDCE \r_wait_time_reg[2] 
       (.C(o_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[2]),
        .Q(r_wait_time_reg[2]));
  FDCE \r_wait_time_reg[3] 
       (.C(o_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[3]),
        .Q(r_wait_time_reg[3]));
endmodule

(* ORIG_REF_NAME = "physical_iob_tab_monitor" *) 
module physical_iob_tab_monitor_42
   (out,
    o_monitor_delay_tabs,
    o_delay_tabs_update,
    o_run,
    r_enable_monitor_reg_0,
    i_clk_200,
    \r_monitor_delay_tabs_reg[4]_0 ,
    \r_rst_reg[1] ,
    D,
    \r_serdes_monitor_i_reg[5]_0 ,
    \r_serdes_master_i_reg[5]_0 );
  output [4:0]out;
  output [4:0]o_monitor_delay_tabs;
  output o_delay_tabs_update;
  output o_run;
  input r_enable_monitor_reg_0;
  input i_clk_200;
  input [4:0]\r_monitor_delay_tabs_reg[4]_0 ;
  input \r_rst_reg[1] ;
  input [4:0]D;
  input [5:0]\r_serdes_monitor_i_reg[5]_0 ;
  input [5:0]\r_serdes_master_i_reg[5]_0 ;

  wire [4:0]D;
  wire enable_monitor;
  wire i_clk_200;
  wire inst_async_reset_n_0;
  (* RTL_KEEP = "true" *) wire o_delay_tabs_update;
  (* RTL_KEEP = "true" *) wire [4:0]o_monitor_delay_tabs;
  (* RTL_KEEP = "true" *) wire o_run;
  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire p_0_in1_in;
  wire [3:0]p_0_in__4;
  wire [4:0]r_edge_window_tabs;
  wire r_enable_monitor_reg_0;
  wire \r_master_delay_tabs[3]_i_2_n_0 ;
  wire \r_master_delay_tabs[4]_i_1_n_0 ;
  wire \r_master_delay_tabs[4]_i_3_n_0 ;
  wire \r_master_delay_tabs[4]_i_4_n_0 ;
  wire \r_master_delay_tabs[4]_i_5_n_0 ;
  wire \r_monitor_delay_tabs[0]_i_2_n_0 ;
  wire \r_monitor_delay_tabs[1]_i_2_n_0 ;
  wire \r_monitor_delay_tabs[1]_i_3_n_0 ;
  wire \r_monitor_delay_tabs[2]_i_2_n_0 ;
  wire \r_monitor_delay_tabs[2]_i_3_n_0 ;
  wire \r_monitor_delay_tabs[2]_i_4_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_1_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_3_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_4_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_5_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_6_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_7_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_8_n_0 ;
  wire \r_monitor_delay_tabs[4]_i_9_n_0 ;
  wire [4:0]\r_monitor_delay_tabs_reg[4]_0 ;
  wire \r_rst_reg[1] ;
  wire [5:0]r_serdes_master_i;
  wire [5:0]\r_serdes_master_i_reg[5]_0 ;
  wire [5:0]r_serdes_monitor_i;
  wire \r_serdes_monitor_i[0]_i_1_n_0 ;
  wire \r_serdes_monitor_i[1]_i_1_n_0 ;
  wire \r_serdes_monitor_i[2]_i_1_n_0 ;
  wire \r_serdes_monitor_i[3]_i_1_n_0 ;
  wire \r_serdes_monitor_i[4]_i_1_n_0 ;
  wire \r_serdes_monitor_i[5]_i_1_n_0 ;
  wire [5:0]\r_serdes_monitor_i_reg[5]_0 ;
  wire [9:0]r_state;
  wire \r_state[0]__0_i_2_n_0 ;
  wire \r_state[0]__0_i_3_n_0 ;
  wire \r_state[0]__0_i_4_n_0 ;
  wire \r_state[0]__0_i_5_n_0 ;
  wire \r_state[0]__0_i_6_n_0 ;
  wire \r_state[0]__0_i_7_n_0 ;
  wire \r_state[0]_i_2__3_n_0 ;
  wire \r_state[0]_i_3__2_n_0 ;
  wire \r_state[0]_i_4__2_n_0 ;
  wire \r_state[0]_i_5__0_n_0 ;
  wire \r_state[2]__0_i_2_n_0 ;
  wire \r_state[2]_i_2__3_n_0 ;
  wire \r_state[3]__0_i_2_n_0 ;
  wire \r_state[3]__0_i_3_n_0 ;
  wire \r_state[3]__0_i_4_n_0 ;
  wire \r_state[3]_i_2__1_n_0 ;
  wire \r_state[5]__0_i_2_n_0 ;
  wire \r_state[5]__0_i_3_n_0 ;
  wire \r_state[5]_i_2__4_n_0 ;
  wire \r_state[6]__0_i_2_n_0 ;
  wire \r_state[6]_i_2__1_n_0 ;
  wire \r_state[6]_i_3__0_n_0 ;
  wire \r_state[7]__0_i_2_n_0 ;
  wire \r_state[7]__0_i_3_n_0 ;
  wire \r_state[7]_i_2__1_n_0 ;
  wire \r_state[7]_i_3__4_n_0 ;
  wire \r_state[9]__0_i_2_n_0 ;
  wire \r_state[9]__0_i_3_n_0 ;
  wire \r_state[9]_i_10__0_n_0 ;
  wire \r_state[9]_i_11__0_n_0 ;
  wire \r_state[9]_i_12_n_0 ;
  wire \r_state[9]_i_13_n_0 ;
  wire \r_state[9]_i_4__0_n_0 ;
  wire \r_state[9]_i_5__0_n_0 ;
  wire \r_state[9]_i_6__0_n_0 ;
  wire \r_state[9]_i_7__0_n_0 ;
  wire \r_state[9]_i_8__0_n_0 ;
  wire \r_state[9]_i_9__0_n_0 ;
  wire \r_state_reg[0]__0_n_0 ;
  wire \r_state_reg[2]__0_n_0 ;
  wire \r_state_reg[3]__0_n_0 ;
  wire \r_state_reg[4]__0_n_0 ;
  wire \r_state_reg[5]__0_n_0 ;
  wire \r_state_reg[6]__0_n_0 ;
  wire \r_state_reg[7]__0_n_0 ;
  wire \r_state_reg[8]__0_n_0 ;
  wire \r_state_reg[9]__0_n_0 ;
  wire \r_state_reg_n_0_[8] ;
  wire [3:0]r_wait_time_reg;
  wire ri_delay_tabs_update;
  wire [4:0]ri_master_delay_tabs;
  wire [4:0]ri_monitor_delay_tabs;
  wire ri_monitoring_run;
  wire ri_state;
  wire [9:0]ri_state__0;
  wire [9:0]ri_state__1;
  wire ri_wait_time;

  async_reset__parameterized1_45 inst_async_reset
       (.i_clk_200(i_clk_200),
        .\r_rst_reg[1]_0 (inst_async_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  LUT3 #(
    .INIT(8'hFE)) 
    r_delay_tabs_update_i_1
       (.I0(\r_state_reg[8]__0_n_0 ),
        .I1(p_0_in1_in),
        .I2(\r_state_reg[4]__0_n_0 ),
        .O(ri_delay_tabs_update));
  FDCE r_delay_tabs_update_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_delay_tabs_update),
        .Q(o_delay_tabs_update));
  FDCE \r_edge_window_tabs_reg[0] 
       (.C(i_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[0]),
        .Q(r_edge_window_tabs[0]));
  FDCE \r_edge_window_tabs_reg[1] 
       (.C(i_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[1]),
        .Q(r_edge_window_tabs[1]));
  FDCE \r_edge_window_tabs_reg[2] 
       (.C(i_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[2]),
        .Q(r_edge_window_tabs[2]));
  FDCE \r_edge_window_tabs_reg[3] 
       (.C(i_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[3]),
        .Q(r_edge_window_tabs[3]));
  FDCE \r_edge_window_tabs_reg[4] 
       (.C(i_clk_200),
        .CE(ri_state__0[1]),
        .CLR(inst_async_reset_n_0),
        .D(D[4]),
        .Q(r_edge_window_tabs[4]));
  FDCE r_enable_monitor_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_enable_monitor_reg_0),
        .Q(enable_monitor));
  LUT3 #(
    .INIT(8'h8B)) 
    \r_master_delay_tabs[0]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [0]),
        .I1(r_state[0]),
        .I2(out[0]),
        .O(ri_master_delay_tabs[0]));
  LUT5 #(
    .INIT(32'hB88B8BB8)) 
    \r_master_delay_tabs[1]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [1]),
        .I1(r_state[0]),
        .I2(out[0]),
        .I3(out[1]),
        .I4(\r_state_reg_n_0_[8] ),
        .O(ri_master_delay_tabs[1]));
  LUT6 #(
    .INIT(64'hBB8BB8BB88B88B88)) 
    \r_master_delay_tabs[2]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [2]),
        .I1(r_state[0]),
        .I2(out[0]),
        .I3(\r_state_reg_n_0_[8] ),
        .I4(out[1]),
        .I5(out[2]),
        .O(ri_master_delay_tabs[2]));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay_tabs[3]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [3]),
        .I1(r_state[0]),
        .I2(\r_master_delay_tabs[3]_i_2_n_0 ),
        .O(ri_master_delay_tabs[3]));
  LUT5 #(
    .INIT(32'h9AAAAAA6)) 
    \r_master_delay_tabs[3]_i_2 
       (.I0(out[3]),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(out[0]),
        .I3(out[2]),
        .I4(out[1]),
        .O(\r_master_delay_tabs[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000111)) 
    \r_master_delay_tabs[4]_i_1 
       (.I0(r_state[5]),
        .I1(r_state[9]),
        .I2(r_state[0]),
        .I3(\r_state_reg_n_0_[8] ),
        .I4(\r_master_delay_tabs[4]_i_3_n_0 ),
        .I5(\r_master_delay_tabs[4]_i_4_n_0 ),
        .O(\r_master_delay_tabs[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay_tabs[4]_i_2 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [4]),
        .I1(r_state[0]),
        .I2(\r_master_delay_tabs[4]_i_5_n_0 ),
        .O(ri_master_delay_tabs[4]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_master_delay_tabs[4]_i_3 
       (.I0(r_state[6]),
        .I1(r_state[7]),
        .O(\r_master_delay_tabs[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFA9)) 
    \r_master_delay_tabs[4]_i_4 
       (.I0(r_state[4]),
        .I1(r_state[0]),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(r_state[2]),
        .I4(r_state[3]),
        .I5(r_state[1]),
        .O(\r_master_delay_tabs[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAAAA6AAAAAA9AAAA)) 
    \r_master_delay_tabs[4]_i_5 
       (.I0(out[4]),
        .I1(out[3]),
        .I2(out[1]),
        .I3(out[2]),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(out[0]),
        .O(\r_master_delay_tabs[4]_i_5_n_0 ));
  FDCE \r_master_delay_tabs_reg[0] 
       (.C(i_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[0]),
        .Q(out[0]));
  FDCE \r_master_delay_tabs_reg[1] 
       (.C(i_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[1]),
        .Q(out[1]));
  FDCE \r_master_delay_tabs_reg[2] 
       (.C(i_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[2]),
        .Q(out[2]));
  FDCE \r_master_delay_tabs_reg[3] 
       (.C(i_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[3]),
        .Q(out[3]));
  FDCE \r_master_delay_tabs_reg[4] 
       (.C(i_clk_200),
        .CE(\r_master_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_master_delay_tabs[4]),
        .Q(out[4]));
  LUT6 #(
    .INIT(64'h8BB88BB88BB8B88B)) 
    \r_monitor_delay_tabs[0]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [0]),
        .I1(r_state[0]),
        .I2(o_monitor_delay_tabs[0]),
        .I3(\r_monitor_delay_tabs[0]_i_2_n_0 ),
        .I4(r_state[5]),
        .I5(r_state[4]),
        .O(ri_monitor_delay_tabs[0]));
  LUT6 #(
    .INIT(64'h5F5C5C5F5F5C5C5C)) 
    \r_monitor_delay_tabs[0]_i_2 
       (.I0(r_edge_window_tabs[1]),
        .I1(r_state[4]),
        .I2(r_state[1]),
        .I3(r_edge_window_tabs[0]),
        .I4(r_state[5]),
        .I5(r_state[9]),
        .O(\r_monitor_delay_tabs[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB88B8BB88BB8B88B)) 
    \r_monitor_delay_tabs[1]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [1]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[1]_i_2_n_0 ),
        .I3(o_monitor_delay_tabs[1]),
        .I4(\r_monitor_delay_tabs[1]_i_3_n_0 ),
        .I5(\r_state_reg_n_0_[8] ),
        .O(ri_monitor_delay_tabs[1]));
  LUT4 #(
    .INIT(16'hF110)) 
    \r_monitor_delay_tabs[1]_i_2 
       (.I0(r_state[4]),
        .I1(r_state[5]),
        .I2(\r_monitor_delay_tabs[0]_i_2_n_0 ),
        .I3(o_monitor_delay_tabs[0]),
        .O(\r_monitor_delay_tabs[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h8BB88BBB)) 
    \r_monitor_delay_tabs[1]_i_3 
       (.I0(r_edge_window_tabs[2]),
        .I1(r_state[1]),
        .I2(r_edge_window_tabs[1]),
        .I3(r_state[5]),
        .I4(r_state[9]),
        .O(\r_monitor_delay_tabs[1]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hB88B8BB8)) 
    \r_monitor_delay_tabs[2]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [2]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[2]_i_2_n_0 ),
        .I3(\r_monitor_delay_tabs[2]_i_3_n_0 ),
        .I4(\r_monitor_delay_tabs[2]_i_4_n_0 ),
        .O(ri_monitor_delay_tabs[2]));
  LUT6 #(
    .INIT(64'hFFFFFF96FF969696)) 
    \r_monitor_delay_tabs[2]_i_2 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(\r_monitor_delay_tabs[1]_i_3_n_0 ),
        .I2(o_monitor_delay_tabs[1]),
        .I3(o_monitor_delay_tabs[0]),
        .I4(\r_monitor_delay_tabs[0]_i_2_n_0 ),
        .I5(\r_state[9]_i_7__0_n_0 ),
        .O(\r_monitor_delay_tabs[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hD4)) 
    \r_monitor_delay_tabs[2]_i_3 
       (.I0(o_monitor_delay_tabs[1]),
        .I1(\r_monitor_delay_tabs[1]_i_3_n_0 ),
        .I2(\r_state_reg_n_0_[8] ),
        .O(\r_monitor_delay_tabs[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h99AAAA9A55666656)) 
    \r_monitor_delay_tabs[2]_i_4 
       (.I0(o_monitor_delay_tabs[2]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[2]),
        .I5(r_edge_window_tabs[3]),
        .O(\r_monitor_delay_tabs[2]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h8BB8B88B)) 
    \r_monitor_delay_tabs[3]_i_1 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [3]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[4]_i_6_n_0 ),
        .I3(\r_monitor_delay_tabs[4]_i_5_n_0 ),
        .I4(\r_monitor_delay_tabs[4]_i_7_n_0 ),
        .O(ri_monitor_delay_tabs[3]));
  LUT6 #(
    .INIT(64'hAAAAAAAAAAAAAAAB)) 
    \r_monitor_delay_tabs[4]_i_1 
       (.I0(\r_monitor_delay_tabs[4]_i_3_n_0 ),
        .I1(\r_monitor_delay_tabs[4]_i_4_n_0 ),
        .I2(r_state[7]),
        .I3(r_state[2]),
        .I4(r_state[6]),
        .I5(r_state[3]),
        .O(\r_monitor_delay_tabs[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hBBB8B888888B8BBB)) 
    \r_monitor_delay_tabs[4]_i_2 
       (.I0(\r_monitor_delay_tabs_reg[4]_0 [4]),
        .I1(r_state[0]),
        .I2(\r_monitor_delay_tabs[4]_i_5_n_0 ),
        .I3(\r_monitor_delay_tabs[4]_i_6_n_0 ),
        .I4(\r_monitor_delay_tabs[4]_i_7_n_0 ),
        .I5(\r_monitor_delay_tabs[4]_i_8_n_0 ),
        .O(ri_monitor_delay_tabs[4]));
  LUT6 #(
    .INIT(64'h0000100010000000)) 
    \r_monitor_delay_tabs[4]_i_3 
       (.I0(r_state[9]),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state[9]_i_7__0_n_0 ),
        .I3(\r_state[6]_i_3__0_n_0 ),
        .I4(r_state[0]),
        .I5(r_state[1]),
        .O(\r_monitor_delay_tabs[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEE9)) 
    \r_monitor_delay_tabs[4]_i_4 
       (.I0(r_state[9]),
        .I1(r_state[4]),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(r_state[5]),
        .I4(r_state[1]),
        .I5(r_state[0]),
        .O(\r_monitor_delay_tabs[4]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h99AAAA9A55666656)) 
    \r_monitor_delay_tabs[4]_i_5 
       (.I0(o_monitor_delay_tabs[3]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[3]),
        .I5(r_edge_window_tabs[4]),
        .O(\r_monitor_delay_tabs[4]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h80A8EAFE)) 
    \r_monitor_delay_tabs[4]_i_6 
       (.I0(\r_monitor_delay_tabs[2]_i_4_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_monitor_delay_tabs[1]_i_3_n_0 ),
        .I3(o_monitor_delay_tabs[1]),
        .I4(\r_monitor_delay_tabs[2]_i_2_n_0 ),
        .O(\r_monitor_delay_tabs[4]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h4455554500111101)) 
    \r_monitor_delay_tabs[4]_i_7 
       (.I0(o_monitor_delay_tabs[2]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[2]),
        .I5(r_edge_window_tabs[3]),
        .O(\r_monitor_delay_tabs[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h55555AA6AAAAA559)) 
    \r_monitor_delay_tabs[4]_i_8 
       (.I0(\r_monitor_delay_tabs[4]_i_9_n_0 ),
        .I1(r_state[9]),
        .I2(r_state[5]),
        .I3(r_edge_window_tabs[4]),
        .I4(r_state[1]),
        .I5(o_monitor_delay_tabs[4]),
        .O(\r_monitor_delay_tabs[4]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'hBBAAAABAFFEEEEFE)) 
    \r_monitor_delay_tabs[4]_i_9 
       (.I0(o_monitor_delay_tabs[3]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[5]),
        .I4(r_edge_window_tabs[3]),
        .I5(r_edge_window_tabs[4]),
        .O(\r_monitor_delay_tabs[4]_i_9_n_0 ));
  FDCE \r_monitor_delay_tabs_reg[0] 
       (.C(i_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[0]),
        .Q(o_monitor_delay_tabs[0]));
  FDCE \r_monitor_delay_tabs_reg[1] 
       (.C(i_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[1]),
        .Q(o_monitor_delay_tabs[1]));
  FDCE \r_monitor_delay_tabs_reg[2] 
       (.C(i_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[2]),
        .Q(o_monitor_delay_tabs[2]));
  FDCE \r_monitor_delay_tabs_reg[3] 
       (.C(i_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[3]),
        .Q(o_monitor_delay_tabs[3]));
  FDCE \r_monitor_delay_tabs_reg[4] 
       (.C(i_clk_200),
        .CE(\r_monitor_delay_tabs[4]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitor_delay_tabs[4]),
        .Q(o_monitor_delay_tabs[4]));
  LUT3 #(
    .INIT(8'h0E)) 
    r_monitoring_run_i_1
       (.I0(o_run),
        .I1(p_0_in1_in),
        .I2(\r_state_reg[0]__0_n_0 ),
        .O(ri_monitoring_run));
  FDCE r_monitoring_run_reg
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_monitoring_run),
        .Q(o_run));
  FDCE \r_serdes_master_i_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [0]),
        .Q(r_serdes_master_i[0]));
  FDCE \r_serdes_master_i_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [1]),
        .Q(r_serdes_master_i[1]));
  FDCE \r_serdes_master_i_reg[2] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [2]),
        .Q(r_serdes_master_i[2]));
  FDCE \r_serdes_master_i_reg[3] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [3]),
        .Q(r_serdes_master_i[3]));
  FDCE \r_serdes_master_i_reg[4] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [4]),
        .Q(r_serdes_master_i[4]));
  FDCE \r_serdes_master_i_reg[5] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_master_i_reg[5]_0 [5]),
        .Q(r_serdes_master_i[5]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[0]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [0]),
        .O(\r_serdes_monitor_i[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[1]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [1]),
        .O(\r_serdes_monitor_i[1]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[2]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [2]),
        .O(\r_serdes_monitor_i[2]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[3]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [3]),
        .O(\r_serdes_monitor_i[3]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[4]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [4]),
        .O(\r_serdes_monitor_i[4]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_serdes_monitor_i[5]_i_1 
       (.I0(\r_serdes_monitor_i_reg[5]_0 [5]),
        .O(\r_serdes_monitor_i[5]_i_1_n_0 ));
  FDCE \r_serdes_monitor_i_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[0]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[0]));
  FDCE \r_serdes_monitor_i_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[1]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[1]));
  FDCE \r_serdes_monitor_i_reg[2] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[2]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[2]));
  FDCE \r_serdes_monitor_i_reg[3] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[3]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[3]));
  FDCE \r_serdes_monitor_i_reg[4] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[4]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[4]));
  FDCE \r_serdes_monitor_i_reg[5] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_serdes_monitor_i[5]_i_1_n_0 ),
        .Q(r_serdes_monitor_i[5]));
  LUT6 #(
    .INIT(64'hFD00FFFFFFFFFD00)) 
    \r_state[0]__0_i_1 
       (.I0(\r_state[0]__0_i_2_n_0 ),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(p_0_in1_in),
        .I3(\r_state[0]__0_i_3_n_0 ),
        .I4(\r_state[0]__0_i_4_n_0 ),
        .I5(\r_state_reg[0]__0_n_0 ),
        .O(ri_state__1[0]));
  LUT6 #(
    .INIT(64'h00000000020202FF)) 
    \r_state[0]__0_i_2 
       (.I0(\r_state[0]__0_i_5_n_0 ),
        .I1(\r_state_reg[9]__0_n_0 ),
        .I2(\r_state[3]__0_i_4_n_0 ),
        .I3(\r_state[0]__0_i_6_n_0 ),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[0]__0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEFE)) 
    \r_state[0]__0_i_3 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state[3]__0_i_4_n_0 ),
        .I2(\r_state[0]__0_i_7_n_0 ),
        .I3(p_0_in1_in),
        .I4(\r_state_reg[2]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[0]__0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[0]__0_i_4 
       (.I0(\r_state[7]__0_i_2_n_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[6]__0_n_0 ),
        .I5(\r_state_reg[7]__0_n_0 ),
        .O(\r_state[0]__0_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[0]__0_i_5 
       (.I0(\r_state_reg[8]__0_n_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[0]__0_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFEEFFEEEF8A)) 
    \r_state[0]__0_i_6 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[8]__0_n_0 ),
        .I2(enable_monitor),
        .I3(\r_state_reg[9]__0_n_0 ),
        .I4(\r_state_reg[6]__0_n_0 ),
        .I5(\r_state_reg[7]__0_n_0 ),
        .O(\r_state[0]__0_i_6_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]__0_i_7 
       (.I0(\r_state_reg[9]__0_n_0 ),
        .I1(\r_state_reg[8]__0_n_0 ),
        .I2(\r_state_reg[4]__0_n_0 ),
        .O(\r_state[0]__0_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFF0000FFFFFF0F0E)) 
    \r_state[0]_i_1__4 
       (.I0(\r_state[0]_i_2__3_n_0 ),
        .I1(r_state[2]),
        .I2(\r_state[0]_i_3__2_n_0 ),
        .I3(r_state[1]),
        .I4(r_state[0]),
        .I5(\r_state[0]_i_4__2_n_0 ),
        .O(ri_state__0[0]));
  LUT6 #(
    .INIT(64'hF0F0D0D0F0F0D000)) 
    \r_state[0]_i_2__3 
       (.I0(\r_state[7]_i_3__4_n_0 ),
        .I1(r_state[6]),
        .I2(\r_state[3]_i_2__1_n_0 ),
        .I3(\r_state[0]_i_5__0_n_0 ),
        .I4(r_state[3]),
        .I5(r_state[4]),
        .O(\r_state[0]_i_2__3_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[0]_i_3__2 
       (.I0(r_state[3]),
        .I1(r_state[1]),
        .I2(\r_state[3]_i_2__1_n_0 ),
        .O(\r_state[0]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[0]_i_4__2 
       (.I0(\r_state[6]_i_3__0_n_0 ),
        .I1(r_state[5]),
        .I2(r_state[4]),
        .I3(\r_state_reg_n_0_[8] ),
        .I4(r_state[9]),
        .O(\r_state[0]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFFFCFDD0)) 
    \r_state[0]_i_5__0 
       (.I0(enable_monitor),
        .I1(r_state[6]),
        .I2(r_state[5]),
        .I3(r_state[9]),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(r_state[7]),
        .O(\r_state[0]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \r_state[1]__0_i_1 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state[3]__0_i_4_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state_reg[3]__0_n_0 ),
        .I5(\r_state[7]__0_i_2_n_0 ),
        .O(ri_state__1[1]));
  LUT5 #(
    .INIT(32'h00000004)) 
    \r_state[1]_i_1__4 
       (.I0(\r_state[3]_i_2__1_n_0 ),
        .I1(r_state[0]),
        .I2(r_state[2]),
        .I3(r_state[3]),
        .I4(r_state[1]),
        .O(ri_state__0[1]));
  LUT6 #(
    .INIT(64'h0000000000001614)) 
    \r_state[2]__0_i_1 
       (.I0(\r_state_reg[9]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(p_0_in1_in),
        .I3(enable_monitor),
        .I4(\r_state[7]__0_i_3_n_0 ),
        .I5(\r_state[2]__0_i_2_n_0 ),
        .O(ri_state__1[2]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[2]__0_i_2 
       (.I0(\r_state_reg[6]__0_n_0 ),
        .I1(\r_state_reg[7]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[8]__0_n_0 ),
        .O(\r_state[2]__0_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h16140000)) 
    \r_state[2]_i_1__4 
       (.I0(r_state[9]),
        .I1(r_state[1]),
        .I2(r_state[4]),
        .I3(enable_monitor),
        .I4(\r_state[2]_i_2__3_n_0 ),
        .O(ri_state__0[2]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[2]_i_2__3 
       (.I0(r_state[3]),
        .I1(r_state[5]),
        .I2(r_state[6]),
        .I3(r_state[2]),
        .I4(r_state[7]),
        .I5(\r_state[9]_i_13_n_0 ),
        .O(\r_state[2]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000020000)) 
    \r_state[3]__0_i_1 
       (.I0(\r_state[3]__0_i_2_n_0 ),
        .I1(\r_state[3]__0_i_3_n_0 ),
        .I2(\r_state[3]__0_i_4_n_0 ),
        .I3(\r_state_reg[4]__0_n_0 ),
        .I4(\r_state_reg[2]__0_n_0 ),
        .I5(\r_state_reg[0]__0_n_0 ),
        .O(ri_state__1[3]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[3]__0_i_2 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[8]__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[3]__0_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[3]__0_i_3 
       (.I0(p_0_in1_in),
        .I1(\r_state_reg[9]__0_n_0 ),
        .O(\r_state[3]__0_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[3]__0_i_4 
       (.I0(\r_state_reg[7]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[3]__0_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[3]_i_1__4 
       (.I0(\r_state[3]_i_2__1_n_0 ),
        .I1(r_state[1]),
        .I2(r_state[3]),
        .I3(r_state[2]),
        .I4(r_state[0]),
        .O(ri_state__0[3]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[3]_i_2__1 
       (.I0(r_state[7]),
        .I1(r_state[6]),
        .I2(r_state[5]),
        .I3(r_state[4]),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(r_state[9]),
        .O(\r_state[3]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h000D)) 
    \r_state[4]__0_i_1__1 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[5]__0_i_2_n_0 ),
        .O(ri_state__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'h000D)) 
    \r_state[4]_i_1__10 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(r_state[2]),
        .I3(\r_state[5]_i_2__4_n_0 ),
        .O(ri_state__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[5]__0_i_1__1 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[5]__0_i_2_n_0 ),
        .O(ri_state__1[5]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEF)) 
    \r_state[5]__0_i_2 
       (.I0(\r_state[5]__0_i_3_n_0 ),
        .I1(\r_state[3]__0_i_3_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(\r_state_reg[0]__0_n_0 ),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[8]__0_n_0 ),
        .O(\r_state[5]__0_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[5]__0_i_3 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[7]__0_n_0 ),
        .O(\r_state[5]__0_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[5]_i_1__8 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(r_state[2]),
        .I3(\r_state[5]_i_2__4_n_0 ),
        .O(ri_state__0[5]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \r_state[5]_i_2__4 
       (.I0(\r_state[6]_i_2__1_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(r_state[5]),
        .I3(r_state[3]),
        .I4(r_state[6]),
        .I5(r_state[7]),
        .O(\r_state[5]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000002020200)) 
    \r_state[6]__0_i_1 
       (.I0(\r_state[6]__0_i_2_n_0 ),
        .I1(p_0_in1_in),
        .I2(\r_state_reg[4]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[8]__0_n_0 ),
        .I5(\r_state[7]__0_i_3_n_0 ),
        .O(ri_state__1[6]));
  LUT6 #(
    .INIT(64'h0000010001010101)) 
    \r_state[6]__0_i_2 
       (.I0(\r_state_reg[7]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[9]__0_n_0 ),
        .I3(enable_monitor),
        .I4(\r_state_reg[8]__0_n_0 ),
        .I5(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[6]__0_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h04004040)) 
    \r_state[6]_i_1__3 
       (.I0(\r_state[6]_i_2__1_n_0 ),
        .I1(\r_state[6]_i_3__0_n_0 ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(enable_monitor),
        .I4(r_state[5]),
        .O(ri_state__0[6]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[6]_i_2__1 
       (.I0(r_state[0]),
        .I1(r_state[1]),
        .I2(r_state[9]),
        .I3(r_state[4]),
        .O(\r_state[6]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[6]_i_3__0 
       (.I0(r_state[7]),
        .I1(r_state[2]),
        .I2(r_state[6]),
        .I3(r_state[3]),
        .O(\r_state[6]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_state[7]__0_i_1 
       (.I0(\r_state[7]__0_i_2_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[7]__0_n_0 ),
        .I4(\r_state[7]__0_i_3_n_0 ),
        .O(ri_state__1[7]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[7]__0_i_2 
       (.I0(p_0_in1_in),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[8]__0_n_0 ),
        .I3(\r_state_reg[9]__0_n_0 ),
        .O(\r_state[7]__0_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[7]__0_i_3 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[7]__0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \r_state[7]_i_1__2 
       (.I0(\r_state[7]_i_2__1_n_0 ),
        .I1(r_state[4]),
        .I2(r_state[3]),
        .I3(\r_state[7]_i_3__4_n_0 ),
        .I4(r_state[6]),
        .I5(r_state[2]),
        .O(ri_state__0[7]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[7]_i_2__1 
       (.I0(r_state[1]),
        .I1(r_state[0]),
        .O(\r_state[7]_i_2__1_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[7]_i_3__4 
       (.I0(r_state[5]),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(r_state[9]),
        .I3(r_state[7]),
        .O(\r_state[7]_i_3__4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'h00D0)) 
    \r_state[8]__0_i_1__1 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(\r_state[9]__0_i_2_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .O(ri_state__1[8]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT4 #(
    .INIT(16'h00D0)) 
    \r_state[8]_i_1__8 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(\r_state[9]_i_10__0_n_0 ),
        .I3(r_state[2]),
        .O(ri_state__0[8]));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[9]__0_i_1__1 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[9]__0_i_2_n_0 ),
        .O(ri_state__1[9]));
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[9]__0_i_2 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[7]__0_n_0 ),
        .I3(\r_state[9]__0_i_3_n_0 ),
        .O(\r_state[9]__0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[9]__0_i_3 
       (.I0(\r_state_reg[3]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[8]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(p_0_in1_in),
        .I5(\r_state_reg[9]__0_n_0 ),
        .O(\r_state[9]__0_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    \r_state[9]_i_10__0 
       (.I0(\r_state[9]_i_12_n_0 ),
        .I1(r_state[4]),
        .I2(r_state[1]),
        .I3(r_state[7]),
        .I4(r_state[9]),
        .I5(\r_state[9]_i_13_n_0 ),
        .O(\r_state[9]_i_10__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_11__0 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(r_state[9]),
        .O(\r_state[9]_i_11__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[9]_i_12 
       (.I0(r_state[6]),
        .I1(r_state[5]),
        .I2(r_state[3]),
        .O(\r_state[9]_i_12_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_13 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(r_state[0]),
        .O(\r_state[9]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'hFEECFFFFFFFFFFFF)) 
    \r_state[9]_i_1__2 
       (.I0(\r_state[9]_i_4__0_n_0 ),
        .I1(\r_state[9]_i_5__0_n_0 ),
        .I2(r_state[2]),
        .I3(r_state[6]),
        .I4(\r_state[9]_i_6__0_n_0 ),
        .I5(\r_state[9]_i_7__0_n_0 ),
        .O(ri_state));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[9]_i_2__7 
       (.I0(\r_state[9]_i_8__0_n_0 ),
        .I1(\r_state[9]_i_9__0_n_0 ),
        .I2(r_state[2]),
        .I3(\r_state[9]_i_10__0_n_0 ),
        .O(ri_state__0[9]));
  LUT5 #(
    .INIT(32'hEAAAAAAA)) 
    \r_state[9]_i_4__0 
       (.I0(r_state[0]),
        .I1(r_wait_time_reg[2]),
        .I2(r_wait_time_reg[1]),
        .I3(r_wait_time_reg[0]),
        .I4(r_wait_time_reg[3]),
        .O(\r_state[9]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEFFEF)) 
    \r_state[9]_i_5__0 
       (.I0(\r_state[9]_i_11__0_n_0 ),
        .I1(r_state[7]),
        .I2(r_state[0]),
        .I3(enable_monitor),
        .I4(r_state[2]),
        .I5(r_state[6]),
        .O(\r_state[9]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_6__0 
       (.I0(r_state[1]),
        .I1(r_state[3]),
        .O(\r_state[9]_i_6__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_7__0 
       (.I0(r_state[5]),
        .I1(r_state[4]),
        .O(\r_state[9]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \r_state[9]_i_8__0 
       (.I0(r_serdes_master_i[5]),
        .I1(r_serdes_monitor_i[5]),
        .I2(r_serdes_master_i[4]),
        .I3(r_serdes_monitor_i[4]),
        .I4(r_serdes_monitor_i[3]),
        .I5(r_serdes_master_i[3]),
        .O(\r_state[9]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFF6FF6)) 
    \r_state[9]_i_9__0 
       (.I0(r_serdes_monitor_i[0]),
        .I1(r_serdes_master_i[0]),
        .I2(r_serdes_master_i[1]),
        .I3(r_serdes_monitor_i[1]),
        .I4(r_serdes_master_i[2]),
        .I5(r_serdes_monitor_i[2]),
        .O(\r_state[9]_i_9__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(i_clk_200),
        .CE(ri_state),
        .D(ri_state__0[0]),
        .PRE(inst_async_reset_n_0),
        .Q(r_state[0]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .D(ri_state__1[0]),
        .PRE(inst_async_reset_n_0),
        .Q(\r_state_reg[0]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[1]),
        .Q(r_state[1]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[1]),
        .Q(p_0_in1_in));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[2]),
        .Q(r_state[2]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[2]),
        .Q(\r_state_reg[2]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[3]),
        .Q(r_state[3]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[3]),
        .Q(\r_state_reg[3]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[4]),
        .Q(r_state[4]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[4]),
        .Q(\r_state_reg[4]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[5]),
        .Q(r_state[5]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[5]),
        .Q(\r_state_reg[5]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[6]),
        .Q(r_state[6]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[6]),
        .Q(\r_state_reg[6]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[7]),
        .Q(r_state[7]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[7]),
        .Q(\r_state_reg[7]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[8]),
        .Q(\r_state_reg_n_0_[8] ));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[8]),
        .Q(\r_state_reg[8]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_FLAG_RIGHT:0100000000,S_COMPARE_1:0000001000,S_COMPARE_2:0010000000,S_WAIT_1:0000000100,S_WAIT_2:0001000000,S_INIT:0000000010,S_FLAG_LEFT:0000010000,S_DEC_WINDOW:1000000000,S_INC_WINDOW:0000100000,S_IDLE:0000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__0[9]),
        .Q(r_state[9]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9]__0 
       (.C(i_clk_200),
        .CE(ri_state),
        .CLR(inst_async_reset_n_0),
        .D(ri_state__1[9]),
        .Q(\r_state_reg[9]__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_wait_time[0]_i_1 
       (.I0(r_wait_time_reg[0]),
        .O(p_0_in__4[0]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_wait_time[1]_i_1 
       (.I0(r_wait_time_reg[0]),
        .I1(r_wait_time_reg[1]),
        .O(p_0_in__4[1]));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \r_wait_time[2]_i_1 
       (.I0(r_wait_time_reg[2]),
        .I1(r_wait_time_reg[1]),
        .I2(r_wait_time_reg[0]),
        .O(p_0_in__4[2]));
  LUT6 #(
    .INIT(64'h0000010001000000)) 
    \r_wait_time[3]_i_1 
       (.I0(\r_state[7]_i_2__1_n_0 ),
        .I1(r_state[4]),
        .I2(r_state[3]),
        .I3(\r_state[7]_i_3__4_n_0 ),
        .I4(r_state[6]),
        .I5(r_state[2]),
        .O(ri_wait_time));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \r_wait_time[3]_i_2 
       (.I0(r_wait_time_reg[3]),
        .I1(r_wait_time_reg[0]),
        .I2(r_wait_time_reg[1]),
        .I3(r_wait_time_reg[2]),
        .O(p_0_in__4[3]));
  FDCE \r_wait_time_reg[0] 
       (.C(i_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[0]),
        .Q(r_wait_time_reg[0]));
  FDCE \r_wait_time_reg[1] 
       (.C(i_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[1]),
        .Q(r_wait_time_reg[1]));
  FDCE \r_wait_time_reg[2] 
       (.C(i_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[2]),
        .Q(r_wait_time_reg[2]));
  FDCE \r_wait_time_reg[3] 
       (.C(i_clk_200),
        .CE(ri_wait_time),
        .CLR(inst_async_reset_n_0),
        .D(p_0_in__4[3]),
        .Q(r_wait_time_reg[3]));
endmodule

module physical_iob_word_aligner
   (out,
    o_done,
    o_fail,
    r_start_reg_0,
    CLK,
    \r_rst_reg[0] ,
    D);
  output [3:0]out;
  output o_done;
  output o_fail;
  input r_start_reg_0;
  input CLK;
  input \r_rst_reg[0] ;
  input [9:0]D;

  wire CLK;
  wire [9:0]D;
  wire inst_async_reset_n_0;
  (* RTL_KEEP = "true" *) wire o_done;
  (* RTL_KEEP = "true" *) wire o_fail;
  (* RTL_KEEP = "true" *) wire [3:0]out;
  wire \r_bitslip_wait[0]_i_1__0_n_0 ;
  wire [5:0]r_bitslip_wait_reg;
  wire [9:0]r_data_i;
  wire r_done_i_2__0_n_0;
  wire r_enable_reg_n_0;
  wire r_fail_i_2__0_n_0;
  wire r_fail_i_3__0_n_0;
  wire [6:0]r_filter_shift;
  wire \r_filter_shift[0]_i_2__2_n_0 ;
  wire \r_filter_shift[0]_i_3__2_n_0 ;
  wire \r_filter_shift[0]_i_4__0_n_0 ;
  wire \r_filter_shift[0]_i_5__0_n_0 ;
  wire \r_filter_shift_reg_n_0_[7] ;
  wire \r_rst_reg[0] ;
  wire \r_slipbits[3]_i_1__0_n_0 ;
  wire r_start;
  wire r_start_reg_0;
  wire [5:1]ri_bitslip_wait;
  wire ri_done;
  wire ri_enable;
  wire ri_fail;
  wire [0:0]ri_filter_shift;
  wire [3:0]ri_slipbits;

  async_reset__parameterized1_6 inst_async_reset
       (.CLK(CLK),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_async_reset_n_0));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_bitslip_wait[0]_i_1__0 
       (.I0(r_enable_reg_n_0),
        .I1(r_bitslip_wait_reg[0]),
        .O(\r_bitslip_wait[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h28)) 
    \r_bitslip_wait[1]_i_1__0 
       (.I0(r_enable_reg_n_0),
        .I1(r_bitslip_wait_reg[0]),
        .I2(r_bitslip_wait_reg[1]),
        .O(ri_bitslip_wait[1]));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \r_bitslip_wait[2]_i_1__0 
       (.I0(r_bitslip_wait_reg[0]),
        .I1(r_bitslip_wait_reg[1]),
        .I2(r_enable_reg_n_0),
        .I3(r_bitslip_wait_reg[2]),
        .O(ri_bitslip_wait[2]));
  (* SOFT_HLUTNM = "soft_lutpair421" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \r_bitslip_wait[3]_i_1__0 
       (.I0(r_bitslip_wait_reg[1]),
        .I1(r_bitslip_wait_reg[0]),
        .I2(r_bitslip_wait_reg[2]),
        .I3(r_enable_reg_n_0),
        .I4(r_bitslip_wait_reg[3]),
        .O(ri_bitslip_wait[3]));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \r_bitslip_wait[4]_i_1__0 
       (.I0(r_bitslip_wait_reg[2]),
        .I1(r_bitslip_wait_reg[0]),
        .I2(r_bitslip_wait_reg[1]),
        .I3(r_bitslip_wait_reg[3]),
        .I4(r_enable_reg_n_0),
        .I5(r_bitslip_wait_reg[4]),
        .O(ri_bitslip_wait[4]));
  (* SOFT_HLUTNM = "soft_lutpair422" *) 
  LUT3 #(
    .INIT(8'h84)) 
    \r_bitslip_wait[5]_i_1__0 
       (.I0(r_fail_i_3__0_n_0),
        .I1(r_enable_reg_n_0),
        .I2(r_bitslip_wait_reg[5]),
        .O(ri_bitslip_wait[5]));
  FDCE \r_bitslip_wait_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_bitslip_wait[0]_i_1__0_n_0 ),
        .Q(r_bitslip_wait_reg[0]));
  FDCE \r_bitslip_wait_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[1]),
        .Q(r_bitslip_wait_reg[1]));
  FDCE \r_bitslip_wait_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[2]),
        .Q(r_bitslip_wait_reg[2]));
  FDCE \r_bitslip_wait_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[3]),
        .Q(r_bitslip_wait_reg[3]));
  FDCE \r_bitslip_wait_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[4]),
        .Q(r_bitslip_wait_reg[4]));
  FDCE \r_bitslip_wait_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[5]),
        .Q(r_bitslip_wait_reg[5]));
  FDCE \r_data_i_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[0]),
        .Q(r_data_i[0]));
  FDCE \r_data_i_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[1]),
        .Q(r_data_i[1]));
  FDCE \r_data_i_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[2]),
        .Q(r_data_i[2]));
  FDCE \r_data_i_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[3]),
        .Q(r_data_i[3]));
  FDCE \r_data_i_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[4]),
        .Q(r_data_i[4]));
  FDCE \r_data_i_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[5]),
        .Q(r_data_i[5]));
  FDCE \r_data_i_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[6]),
        .Q(r_data_i[6]));
  FDCE \r_data_i_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[7]),
        .Q(r_data_i[7]));
  FDCE \r_data_i_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[8]),
        .Q(r_data_i[8]));
  FDCE \r_data_i_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[9]),
        .Q(r_data_i[9]));
  LUT6 #(
    .INIT(64'hEAAAEAAA0000EAAA)) 
    r_done_i_1__0
       (.I0(o_done),
        .I1(r_done_i_2__0_n_0),
        .I2(r_filter_shift[1]),
        .I3(r_filter_shift[0]),
        .I4(r_start_reg_0),
        .I5(r_start),
        .O(ri_done));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    r_done_i_2__0
       (.I0(r_filter_shift[4]),
        .I1(r_filter_shift[5]),
        .I2(r_filter_shift[2]),
        .I3(r_filter_shift[3]),
        .I4(\r_filter_shift_reg_n_0_[7] ),
        .I5(r_filter_shift[6]),
        .O(r_done_i_2__0_n_0));
  FDCE r_done_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_done),
        .Q(o_done));
  LUT5 #(
    .INIT(32'h11110100)) 
    r_enable_i_1__0
       (.I0(o_fail),
        .I1(o_done),
        .I2(r_start),
        .I3(r_start_reg_0),
        .I4(r_enable_reg_n_0),
        .O(ri_enable));
  FDCE r_enable_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_enable),
        .Q(r_enable_reg_n_0));
  LUT5 #(
    .INIT(32'h8A8ACF8A)) 
    r_fail_i_1__0
       (.I0(o_fail),
        .I1(r_start),
        .I2(r_start_reg_0),
        .I3(r_fail_i_2__0_n_0),
        .I4(r_fail_i_3__0_n_0),
        .O(ri_fail));
  LUT5 #(
    .INIT(32'h02000000)) 
    r_fail_i_2__0
       (.I0(out[0]),
        .I1(out[1]),
        .I2(out[2]),
        .I3(r_bitslip_wait_reg[5]),
        .I4(out[3]),
        .O(r_fail_i_2__0_n_0));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    r_fail_i_3__0
       (.I0(r_bitslip_wait_reg[3]),
        .I1(r_bitslip_wait_reg[1]),
        .I2(r_bitslip_wait_reg[0]),
        .I3(r_bitslip_wait_reg[2]),
        .I4(r_bitslip_wait_reg[4]),
        .O(r_fail_i_3__0_n_0));
  FDCE r_fail_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_fail),
        .Q(o_fail));
  LUT4 #(
    .INIT(16'hF888)) 
    \r_filter_shift[0]_i_1__2 
       (.I0(\r_filter_shift[0]_i_2__2_n_0 ),
        .I1(\r_filter_shift[0]_i_3__2_n_0 ),
        .I2(\r_filter_shift[0]_i_4__0_n_0 ),
        .I3(\r_filter_shift[0]_i_5__0_n_0 ),
        .O(ri_filter_shift));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \r_filter_shift[0]_i_2__2 
       (.I0(r_data_i[8]),
        .I1(r_data_i[7]),
        .I2(r_data_i[5]),
        .I3(r_data_i[6]),
        .I4(r_enable_reg_n_0),
        .I5(r_data_i[9]),
        .O(\r_filter_shift[0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'h04000000)) 
    \r_filter_shift[0]_i_3__2 
       (.I0(r_data_i[0]),
        .I1(r_data_i[2]),
        .I2(r_data_i[1]),
        .I3(r_data_i[4]),
        .I4(r_data_i[3]),
        .O(\r_filter_shift[0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \r_filter_shift[0]_i_4__0 
       (.I0(r_data_i[7]),
        .I1(r_data_i[8]),
        .I2(r_data_i[6]),
        .I3(r_data_i[5]),
        .I4(r_data_i[9]),
        .I5(r_enable_reg_n_0),
        .O(\r_filter_shift[0]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_filter_shift[0]_i_5__0 
       (.I0(r_data_i[0]),
        .I1(r_data_i[1]),
        .I2(r_data_i[2]),
        .I3(r_data_i[4]),
        .I4(r_data_i[3]),
        .O(\r_filter_shift[0]_i_5__0_n_0 ));
  FDCE \r_filter_shift_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_filter_shift),
        .Q(r_filter_shift[0]));
  FDCE \r_filter_shift_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[0]),
        .Q(r_filter_shift[1]));
  FDCE \r_filter_shift_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[1]),
        .Q(r_filter_shift[2]));
  FDCE \r_filter_shift_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[2]),
        .Q(r_filter_shift[3]));
  FDCE \r_filter_shift_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[3]),
        .Q(r_filter_shift[4]));
  FDCE \r_filter_shift_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[4]),
        .Q(r_filter_shift[5]));
  FDCE \r_filter_shift_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[5]),
        .Q(r_filter_shift[6]));
  FDCE \r_filter_shift_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[6]),
        .Q(\r_filter_shift_reg_n_0_[7] ));
  LUT3 #(
    .INIT(8'h0D)) 
    \r_slipbits[0]_i_1__0 
       (.I0(r_start_reg_0),
        .I1(r_start),
        .I2(out[0]),
        .O(ri_slipbits[0]));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT4 #(
    .INIT(16'h0BB0)) 
    \r_slipbits[1]_i_1__0 
       (.I0(r_start),
        .I1(r_start_reg_0),
        .I2(out[0]),
        .I3(out[1]),
        .O(ri_slipbits[1]));
  (* SOFT_HLUTNM = "soft_lutpair420" *) 
  LUT5 #(
    .INIT(32'h77078808)) 
    \r_slipbits[2]_i_1__0 
       (.I0(out[0]),
        .I1(out[1]),
        .I2(r_start_reg_0),
        .I3(r_start),
        .I4(out[2]),
        .O(ri_slipbits[2]));
  LUT4 #(
    .INIT(16'h44F4)) 
    \r_slipbits[3]_i_1__0 
       (.I0(r_fail_i_3__0_n_0),
        .I1(r_bitslip_wait_reg[5]),
        .I2(r_start_reg_0),
        .I3(r_start),
        .O(\r_slipbits[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F007F80800080)) 
    \r_slipbits[3]_i_2__0 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[2]),
        .I3(r_start_reg_0),
        .I4(r_start),
        .I5(out[3]),
        .O(ri_slipbits[3]));
  FDCE \r_slipbits_reg[0] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[0]),
        .Q(out[0]));
  FDCE \r_slipbits_reg[1] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[1]),
        .Q(out[1]));
  FDCE \r_slipbits_reg[2] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[2]),
        .Q(out[2]));
  FDCE \r_slipbits_reg[3] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1__0_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[3]),
        .Q(out[3]));
  FDCE r_start_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_start_reg_0),
        .Q(r_start));
endmodule

(* ORIG_REF_NAME = "physical_iob_word_aligner" *) 
module physical_iob_word_aligner_43
   (out,
    o_done,
    o_fail,
    r_start_reg_0,
    CLK,
    \r_rst_reg[0] ,
    D);
  output [3:0]out;
  output o_done;
  output o_fail;
  input r_start_reg_0;
  input CLK;
  input \r_rst_reg[0] ;
  input [9:0]D;

  wire CLK;
  wire [9:0]D;
  wire inst_async_reset_n_0;
  (* RTL_KEEP = "true" *) wire o_done;
  (* RTL_KEEP = "true" *) wire o_fail;
  (* RTL_KEEP = "true" *) wire [3:0]out;
  wire \r_bitslip_wait[0]_i_1_n_0 ;
  wire [5:0]r_bitslip_wait_reg;
  wire [9:0]r_data_i;
  wire r_done_i_2_n_0;
  wire r_enable_reg_n_0;
  wire r_fail_i_2_n_0;
  wire r_fail_i_3_n_0;
  wire [6:0]r_filter_shift;
  wire \r_filter_shift[0]_i_2__0_n_0 ;
  wire \r_filter_shift[0]_i_3__0_n_0 ;
  wire \r_filter_shift[0]_i_4_n_0 ;
  wire \r_filter_shift[0]_i_5_n_0 ;
  wire \r_filter_shift_reg_n_0_[7] ;
  wire \r_rst_reg[0] ;
  wire \r_slipbits[3]_i_1_n_0 ;
  wire r_start;
  wire r_start_reg_0;
  wire [5:1]ri_bitslip_wait;
  wire ri_done;
  wire ri_enable;
  wire ri_fail;
  wire [0:0]ri_filter_shift;
  wire [3:0]ri_slipbits;

  async_reset__parameterized1_44 inst_async_reset
       (.CLK(CLK),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_async_reset_n_0));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_bitslip_wait[0]_i_1 
       (.I0(r_enable_reg_n_0),
        .I1(r_bitslip_wait_reg[0]),
        .O(\r_bitslip_wait[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h28)) 
    \r_bitslip_wait[1]_i_1 
       (.I0(r_enable_reg_n_0),
        .I1(r_bitslip_wait_reg[0]),
        .I2(r_bitslip_wait_reg[1]),
        .O(ri_bitslip_wait[1]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'h7080)) 
    \r_bitslip_wait[2]_i_1 
       (.I0(r_bitslip_wait_reg[0]),
        .I1(r_bitslip_wait_reg[1]),
        .I2(r_enable_reg_n_0),
        .I3(r_bitslip_wait_reg[2]),
        .O(ri_bitslip_wait[2]));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT5 #(
    .INIT(32'h7F008000)) 
    \r_bitslip_wait[3]_i_1 
       (.I0(r_bitslip_wait_reg[1]),
        .I1(r_bitslip_wait_reg[0]),
        .I2(r_bitslip_wait_reg[2]),
        .I3(r_enable_reg_n_0),
        .I4(r_bitslip_wait_reg[3]),
        .O(ri_bitslip_wait[3]));
  LUT6 #(
    .INIT(64'h7FFF000080000000)) 
    \r_bitslip_wait[4]_i_1 
       (.I0(r_bitslip_wait_reg[2]),
        .I1(r_bitslip_wait_reg[0]),
        .I2(r_bitslip_wait_reg[1]),
        .I3(r_bitslip_wait_reg[3]),
        .I4(r_enable_reg_n_0),
        .I5(r_bitslip_wait_reg[4]),
        .O(ri_bitslip_wait[4]));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT3 #(
    .INIT(8'h84)) 
    \r_bitslip_wait[5]_i_1 
       (.I0(r_fail_i_3_n_0),
        .I1(r_enable_reg_n_0),
        .I2(r_bitslip_wait_reg[5]),
        .O(ri_bitslip_wait[5]));
  FDCE \r_bitslip_wait_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(\r_bitslip_wait[0]_i_1_n_0 ),
        .Q(r_bitslip_wait_reg[0]));
  FDCE \r_bitslip_wait_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[1]),
        .Q(r_bitslip_wait_reg[1]));
  FDCE \r_bitslip_wait_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[2]),
        .Q(r_bitslip_wait_reg[2]));
  FDCE \r_bitslip_wait_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[3]),
        .Q(r_bitslip_wait_reg[3]));
  FDCE \r_bitslip_wait_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[4]),
        .Q(r_bitslip_wait_reg[4]));
  FDCE \r_bitslip_wait_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_bitslip_wait[5]),
        .Q(r_bitslip_wait_reg[5]));
  FDCE \r_data_i_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[0]),
        .Q(r_data_i[0]));
  FDCE \r_data_i_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[1]),
        .Q(r_data_i[1]));
  FDCE \r_data_i_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[2]),
        .Q(r_data_i[2]));
  FDCE \r_data_i_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[3]),
        .Q(r_data_i[3]));
  FDCE \r_data_i_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[4]),
        .Q(r_data_i[4]));
  FDCE \r_data_i_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[5]),
        .Q(r_data_i[5]));
  FDCE \r_data_i_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[6]),
        .Q(r_data_i[6]));
  FDCE \r_data_i_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[7]),
        .Q(r_data_i[7]));
  FDCE \r_data_i_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[8]),
        .Q(r_data_i[8]));
  FDCE \r_data_i_reg[9] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(D[9]),
        .Q(r_data_i[9]));
  LUT6 #(
    .INIT(64'hEAAAEAAA0000EAAA)) 
    r_done_i_1
       (.I0(o_done),
        .I1(r_done_i_2_n_0),
        .I2(r_filter_shift[1]),
        .I3(r_filter_shift[0]),
        .I4(r_start_reg_0),
        .I5(r_start),
        .O(ri_done));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    r_done_i_2
       (.I0(r_filter_shift[4]),
        .I1(r_filter_shift[5]),
        .I2(r_filter_shift[2]),
        .I3(r_filter_shift[3]),
        .I4(\r_filter_shift_reg_n_0_[7] ),
        .I5(r_filter_shift[6]),
        .O(r_done_i_2_n_0));
  FDCE r_done_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_done),
        .Q(o_done));
  LUT5 #(
    .INIT(32'h11110100)) 
    r_enable_i_1
       (.I0(o_fail),
        .I1(o_done),
        .I2(r_start),
        .I3(r_start_reg_0),
        .I4(r_enable_reg_n_0),
        .O(ri_enable));
  FDCE r_enable_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_enable),
        .Q(r_enable_reg_n_0));
  LUT5 #(
    .INIT(32'h8A8ACF8A)) 
    r_fail_i_1
       (.I0(o_fail),
        .I1(r_start),
        .I2(r_start_reg_0),
        .I3(r_fail_i_2_n_0),
        .I4(r_fail_i_3_n_0),
        .O(ri_fail));
  LUT5 #(
    .INIT(32'h02000000)) 
    r_fail_i_2
       (.I0(out[0]),
        .I1(out[1]),
        .I2(out[2]),
        .I3(r_bitslip_wait_reg[5]),
        .I4(out[3]),
        .O(r_fail_i_2_n_0));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    r_fail_i_3
       (.I0(r_bitslip_wait_reg[3]),
        .I1(r_bitslip_wait_reg[1]),
        .I2(r_bitslip_wait_reg[0]),
        .I3(r_bitslip_wait_reg[2]),
        .I4(r_bitslip_wait_reg[4]),
        .O(r_fail_i_3_n_0));
  FDCE r_fail_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_fail),
        .Q(o_fail));
  LUT4 #(
    .INIT(16'hF888)) 
    \r_filter_shift[0]_i_1__0 
       (.I0(\r_filter_shift[0]_i_2__0_n_0 ),
        .I1(\r_filter_shift[0]_i_3__0_n_0 ),
        .I2(\r_filter_shift[0]_i_4_n_0 ),
        .I3(\r_filter_shift[0]_i_5_n_0 ),
        .O(ri_filter_shift));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \r_filter_shift[0]_i_2__0 
       (.I0(r_data_i[8]),
        .I1(r_data_i[7]),
        .I2(r_data_i[5]),
        .I3(r_data_i[6]),
        .I4(r_enable_reg_n_0),
        .I5(r_data_i[9]),
        .O(\r_filter_shift[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h04000000)) 
    \r_filter_shift[0]_i_3__0 
       (.I0(r_data_i[0]),
        .I1(r_data_i[2]),
        .I2(r_data_i[1]),
        .I3(r_data_i[4]),
        .I4(r_data_i[3]),
        .O(\r_filter_shift[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \r_filter_shift[0]_i_4 
       (.I0(r_data_i[7]),
        .I1(r_data_i[8]),
        .I2(r_data_i[6]),
        .I3(r_data_i[5]),
        .I4(r_data_i[9]),
        .I5(r_enable_reg_n_0),
        .O(\r_filter_shift[0]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_filter_shift[0]_i_5 
       (.I0(r_data_i[0]),
        .I1(r_data_i[1]),
        .I2(r_data_i[2]),
        .I3(r_data_i[4]),
        .I4(r_data_i[3]),
        .O(\r_filter_shift[0]_i_5_n_0 ));
  FDCE \r_filter_shift_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(ri_filter_shift),
        .Q(r_filter_shift[0]));
  FDCE \r_filter_shift_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[0]),
        .Q(r_filter_shift[1]));
  FDCE \r_filter_shift_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[1]),
        .Q(r_filter_shift[2]));
  FDCE \r_filter_shift_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[2]),
        .Q(r_filter_shift[3]));
  FDCE \r_filter_shift_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[3]),
        .Q(r_filter_shift[4]));
  FDCE \r_filter_shift_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[4]),
        .Q(r_filter_shift[5]));
  FDCE \r_filter_shift_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[5]),
        .Q(r_filter_shift[6]));
  FDCE \r_filter_shift_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_filter_shift[6]),
        .Q(\r_filter_shift_reg_n_0_[7] ));
  LUT3 #(
    .INIT(8'h0D)) 
    \r_slipbits[0]_i_1 
       (.I0(r_start_reg_0),
        .I1(r_start),
        .I2(out[0]),
        .O(ri_slipbits[0]));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'h0BB0)) 
    \r_slipbits[1]_i_1 
       (.I0(r_start),
        .I1(r_start_reg_0),
        .I2(out[0]),
        .I3(out[1]),
        .O(ri_slipbits[1]));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT5 #(
    .INIT(32'h77078808)) 
    \r_slipbits[2]_i_1 
       (.I0(out[0]),
        .I1(out[1]),
        .I2(r_start_reg_0),
        .I3(r_start),
        .I4(out[2]),
        .O(ri_slipbits[2]));
  LUT4 #(
    .INIT(16'h44F4)) 
    \r_slipbits[3]_i_1 
       (.I0(r_fail_i_3_n_0),
        .I1(r_bitslip_wait_reg[5]),
        .I2(r_start_reg_0),
        .I3(r_start),
        .O(\r_slipbits[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7F7F007F80800080)) 
    \r_slipbits[3]_i_2 
       (.I0(out[1]),
        .I1(out[0]),
        .I2(out[2]),
        .I3(r_start_reg_0),
        .I4(r_start),
        .I5(out[3]),
        .O(ri_slipbits[3]));
  FDCE \r_slipbits_reg[0] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[0]),
        .Q(out[0]));
  FDCE \r_slipbits_reg[1] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[1]),
        .Q(out[1]));
  FDCE \r_slipbits_reg[2] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[2]),
        .Q(out[2]));
  FDCE \r_slipbits_reg[3] 
       (.C(CLK),
        .CE(\r_slipbits[3]_i_1_n_0 ),
        .CLR(inst_async_reset_n_0),
        .D(ri_slipbits[3]),
        .Q(out[3]));
  FDCE r_start_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_async_reset_n_0),
        .D(r_start_reg_0),
        .Q(r_start));
endmodule

module receiver_packet_checker_top
   (out,
    I117,
    I118,
    \r_tlp_temp_wr_addr_reg[3] ,
    p_3_in,
    o_tlp,
    o_tlp_valid,
    o_dllp,
    o_dllp_valid,
    in0,
    in00,
    r_empty_reg,
    \r_proc_state_reg[0] ,
    \r_rd_ptr_reg[0] ,
    \r_rst_reg[1] ,
    D);
  output [4:0]out;
  output [3:0]I117;
  output I118;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [33:0]p_3_in;
  output [33:0]o_tlp;
  output o_tlp_valid;
  output [15:0]o_dllp;
  output o_dllp_valid;
  output in0;
  input [33:0]in00;
  input r_empty_reg;
  input \r_proc_state_reg[0] ;
  input \r_rd_ptr_reg[0] ;
  input \r_rst_reg[1] ;
  input [8:0]D;

  wire [8:0]D;
  (* RTL_KEEP = "true" *) wire [33:0]in00;
  wire inst_local_reset_n_0;
  (* RTL_KEEP = "inst_crc_8 " *) wire [7:0]o_crc;
  (* RTL_KEEP = "inst_controller " *) wire o_crc_init;
  (* RTL_KEEP = "inst_tr_result_buffer " *) wire [12:0]o_data;
  (* RTL_KEEP = "true" *) wire o_dllp_valid;
  (* RTL_KEEP = "inst_tr_result_buffer " *) wire o_empty;
  (* RTL_KEEP = "inst_id_result_buffer " *) wire o_empty__0;
  (* RTL_KEEP = "inst_frame_shift_in " *) wire [41:0]o_frame;
  (* RTL_KEEP = "inst_controller " *) wire [4:0]o_id_result;
  (* RTL_KEEP = "inst_controller " *) wire o_id_result_wr;
  (* RTL_KEEP = "inst_controller " *) wire [3:0]o_tlp_temp_rd_addr;
  (* RTL_KEEP = "inst_controller " *) wire o_tlp_temp_wr;
  (* RTL_KEEP = "inst_controller " *) wire [3:0]o_tlp_temp_wr_addr;
  (* RTL_KEEP = "true" *) wire o_tlp_valid;
  (* RTL_KEEP = "inst_controller " *) wire [4:0]o_tr_result;
  (* RTL_KEEP = "inst_controller " *) wire o_tr_result_rd;
  (* RTL_KEEP = "inst_controller " *) wire o_tr_result_wr;
  wire [4:0]out;
  wire r_empty_reg;
  wire r_k_skp_n;
  wire r_k_skp_n_i_2_n_0;
  wire r_k_start_dllp;
  wire r_k_start_tlp;
  wire r_k_stop;
  wire r_k_stop_i_2_n_0;
  wire [8:0]r_phys_a;
  wire [8:0]r_phys_b;
  wire [7:0]r_phys_c;
  wire \r_proc_state_reg[0] ;
  wire \r_rd_ptr_reg[0] ;
  wire \r_rst_reg[1] ;
  wire ri_k_skp_n;
  wire ri_k_start_dllp;
  wire ri_k_start_tlp;
  wire ri_k_stop;
  wire [63:0]NLW_inst_frame_shift_in_out_UNCONNECTED;

  assign I117[3:0] = o_tlp_temp_rd_addr;
  assign I118 = o_tlp_temp_wr;
  assign in0 = o_empty__0;
  assign o_dllp[15:6] = o_frame[23:14];
  assign o_tlp[33:0] = in00;
  assign p_3_in[33:0] = o_frame[41:8];
  assign \r_tlp_temp_wr_addr_reg[3] [3:0] = o_tlp_temp_wr_addr;
  packet_checker_controller inst_controller
       (.Q(o_dllp_valid),
        .o_id_result(o_id_result),
        .o_id_result_wr(o_id_result_wr),
        .o_tlp_temp_rd_addr(o_tlp_temp_rd_addr),
        .o_tlp_temp_wr(o_tlp_temp_wr),
        .o_tlp_temp_wr_addr(o_tlp_temp_wr_addr),
        .o_tlp_valid(o_tlp_valid),
        .o_tr_result(o_tr_result),
        .o_tr_result_rd(o_tr_result_rd),
        .o_tr_result_wr(o_tr_result_wr),
        .out(o_crc_init),
        .r_k_skp_n(r_k_skp_n),
        .r_k_start_dllp(r_k_start_dllp),
        .r_k_start_tlp(r_k_start_tlp),
        .r_k_stop(r_k_stop),
        .\r_proc_state_reg[0]_0 (\r_proc_state_reg[0] ),
        .\r_proc_state_reg[0]_1 (o_empty),
        .r_proc_valid_tr_reg_0(o_data),
        .\r_rst_reg[1] (r_empty_reg),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_tr_state[7]_i_3_0 (o_crc),
        .\r_tr_state[7]_i_3_1 (r_phys_c));
  crc_8__hierPathDup__2 inst_crc_8
       (.E(r_k_skp_n),
        .Q(r_phys_c),
        .out(o_crc),
        .\r_crc_reg[0]_0 (inst_local_reset_n_0),
        .\r_crc_reg[2]_0 (o_crc_init),
        .\r_crc_reg[7]_0 (r_empty_reg));
  packet_checker_input_shift inst_frame_shift_in
       (.E(r_k_skp_n),
        .Q(r_phys_c),
        .out({NLW_inst_frame_shift_in_out_UNCONNECTED[63:42],o_frame[41:8],NLW_inst_frame_shift_in_out_UNCONNECTED[7:0]}),
        .\r_stage_reg[6][7]_0 (r_empty_reg));
  sync_fifo__parameterized2__hierPathDup__1 inst_id_result_buffer
       (.o_empty(o_empty__0),
        .out(out),
        .\r_dllp_tx_reg[1] (o_id_result),
        .r_empty_reg_0(r_empty_reg),
        .r_full_reg_0(inst_local_reset_n_0),
        .\r_rd_ptr_reg[0]_0 (\r_rd_ptr_reg[0] ),
        .\r_wr_ptr_reg[1]_0 (o_id_result_wr));
  async_reset__parameterized1_55 inst_local_reset
       (.\r_rst_reg[0]_0 (r_empty_reg),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  sync_fifo__parameterized1__hierPathDup__1 inst_tr_result_buffer
       (.o_empty(o_empty),
        .out(o_data),
        .p_3_in(o_frame[15:8]),
        .r_empty_reg_0(r_empty_reg),
        .r_empty_reg_1(inst_local_reset_n_0),
        .r_proc_valid_tr_reg(o_tr_result),
        .\r_rd_ptr_reg[0]_0 (o_tr_result_rd),
        .\r_wr_ptr_reg[1]_0 (o_tr_result_wr));
  LUT6 #(
    .INIT(64'hFEFFFFFFFFFFFFFF)) 
    r_k_skp_n_i_1
       (.I0(r_k_skp_n_i_2_n_0),
        .I1(r_phys_b[0]),
        .I2(r_phys_b[7]),
        .I3(r_phys_b[8]),
        .I4(r_phys_b[6]),
        .I5(r_phys_b[5]),
        .O(ri_k_skp_n));
  LUT4 #(
    .INIT(16'hDFFF)) 
    r_k_skp_n_i_2
       (.I0(r_phys_b[2]),
        .I1(r_phys_b[1]),
        .I2(r_phys_b[4]),
        .I3(r_phys_b[3]),
        .O(r_k_skp_n_i_2_n_0));
  FDPE r_k_skp_n_reg
       (.C(r_empty_reg),
        .CE(1'b1),
        .D(ri_k_skp_n),
        .PRE(inst_local_reset_n_0),
        .Q(r_k_skp_n));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    r_k_start_dllp_i_1
       (.I0(r_k_skp_n_i_2_n_0),
        .I1(r_phys_b[0]),
        .I2(r_phys_b[7]),
        .I3(r_phys_b[8]),
        .I4(r_phys_b[6]),
        .I5(r_phys_b[5]),
        .O(ri_k_start_dllp));
  FDCE r_k_start_dllp_reg
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_k_start_dllp),
        .Q(r_k_start_dllp));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    r_k_start_tlp_i_1
       (.I0(r_k_skp_n_i_2_n_0),
        .I1(r_phys_b[0]),
        .I2(r_phys_b[7]),
        .I3(r_phys_b[8]),
        .I4(r_phys_b[6]),
        .I5(r_phys_b[5]),
        .O(ri_k_start_tlp));
  FDCE r_k_start_tlp_reg
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_k_start_tlp),
        .Q(r_k_start_tlp));
  LUT5 #(
    .INIT(32'h00000001)) 
    r_k_stop_i_1
       (.I0(r_phys_a[0]),
        .I1(r_phys_a[1]),
        .I2(r_phys_a[5]),
        .I3(r_phys_a[7]),
        .I4(r_k_stop_i_2_n_0),
        .O(ri_k_stop));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    r_k_stop_i_2
       (.I0(r_phys_a[8]),
        .I1(r_phys_a[6]),
        .I2(r_phys_a[2]),
        .I3(r_phys_a[3]),
        .I4(r_phys_a[4]),
        .O(r_k_stop_i_2_n_0));
  FDCE r_k_stop_reg
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_k_stop),
        .Q(r_k_stop));
  FDCE \r_phys_a_reg[0] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[0]),
        .Q(r_phys_a[0]));
  FDCE \r_phys_a_reg[1] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[1]),
        .Q(r_phys_a[1]));
  FDCE \r_phys_a_reg[2] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[2]),
        .Q(r_phys_a[2]));
  (* \PinAttr:D:HOLD_DETOUR  = "207" *) 
  FDCE \r_phys_a_reg[3] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[3]),
        .Q(r_phys_a[3]));
  FDCE \r_phys_a_reg[4] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[4]),
        .Q(r_phys_a[4]));
  FDCE \r_phys_a_reg[5] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[5]),
        .Q(r_phys_a[5]));
  FDCE \r_phys_a_reg[6] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[6]),
        .Q(r_phys_a[6]));
  FDCE \r_phys_a_reg[7] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[7]),
        .Q(r_phys_a[7]));
  FDCE \r_phys_a_reg[8] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[8]),
        .Q(r_phys_a[8]));
  FDCE \r_phys_b_reg[0] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[0]),
        .Q(r_phys_b[0]));
  FDCE \r_phys_b_reg[1] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[1]),
        .Q(r_phys_b[1]));
  FDCE \r_phys_b_reg[2] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[2]),
        .Q(r_phys_b[2]));
  FDCE \r_phys_b_reg[3] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[3]),
        .Q(r_phys_b[3]));
  FDCE \r_phys_b_reg[4] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[4]),
        .Q(r_phys_b[4]));
  FDCE \r_phys_b_reg[5] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[5]),
        .Q(r_phys_b[5]));
  FDCE \r_phys_b_reg[6] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[6]),
        .Q(r_phys_b[6]));
  FDCE \r_phys_b_reg[7] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[7]),
        .Q(r_phys_b[7]));
  FDCE \r_phys_b_reg[8] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[8]),
        .Q(r_phys_b[8]));
  FDCE \r_phys_c_reg[0] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[0]),
        .Q(r_phys_c[0]));
  FDCE \r_phys_c_reg[1] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[1]),
        .Q(r_phys_c[1]));
  FDCE \r_phys_c_reg[2] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[2]),
        .Q(r_phys_c[2]));
  FDCE \r_phys_c_reg[3] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[3]),
        .Q(r_phys_c[3]));
  FDCE \r_phys_c_reg[4] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[4]),
        .Q(r_phys_c[4]));
  FDCE \r_phys_c_reg[5] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[5]),
        .Q(r_phys_c[5]));
  FDCE \r_phys_c_reg[6] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[6]),
        .Q(r_phys_c[6]));
  FDCE \r_phys_c_reg[7] 
       (.C(r_empty_reg),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[7]),
        .Q(r_phys_c[7]));
endmodule

(* ORIG_REF_NAME = "receiver_packet_checker_top" *) 
module receiver_packet_checker_top__parameterized0
   (out,
    \r_tlp_temp_rd_addr_reg[3] ,
    \r_tr_state_reg[6] ,
    \r_tlp_temp_wr_addr_reg[3] ,
    \r_stage_reg[7][7] ,
    o_tlp,
    o_tlp_valid,
    o_dllp,
    o_dllp_valid,
    o_status_id_valid,
    in0,
    \r_rd_ptr_reg[4] ,
    \r_rd_ptr_reg[0] ,
    \r_proc_state_reg[0] ,
    \r_rst_reg[1] ,
    D);
  output [4:0]out;
  output [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  output \r_tr_state_reg[6] ;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [55:0]\r_stage_reg[7][7] ;
  output [55:0]o_tlp;
  output o_tlp_valid;
  output [15:0]o_dllp;
  output o_dllp_valid;
  output o_status_id_valid;
  input [55:0]in0;
  input \r_rd_ptr_reg[4] ;
  input \r_rd_ptr_reg[0] ;
  input \r_proc_state_reg[0] ;
  input \r_rst_reg[1] ;
  input [8:0]D;

  wire [8:0]D;
  (* RTL_KEEP = "true" *) wire [55:0]in0;
  wire inst_local_reset_n_0;
  (* RTL_KEEP = "inst_crc_8 " *) wire [7:0]o_crc;
  (* RTL_KEEP = "inst_controller " *) wire o_crc_init;
  (* RTL_KEEP = "inst_tr_result_buffer " *) wire [12:0]o_data;
  (* RTL_KEEP = "true" *) wire o_dllp_valid;
  (* RTL_KEEP = "inst_tr_result_buffer " *) wire o_empty;
  (* RTL_KEEP = "inst_id_result_buffer " *) wire o_empty__0;
  (* RTL_KEEP = "inst_frame_shift_in " *) wire [63:0]o_frame;
  (* RTL_KEEP = "inst_controller " *) wire [4:0]o_id_result;
  (* RTL_KEEP = "inst_controller " *) wire o_id_result_wr;
  (* RTL_KEEP = "inst_controller " *) wire [3:0]o_tlp_temp_rd_addr;
  (* RTL_KEEP = "inst_controller " *) wire o_tlp_temp_wr;
  (* RTL_KEEP = "inst_controller " *) wire [3:0]o_tlp_temp_wr_addr;
  (* RTL_KEEP = "true" *) wire o_tlp_valid;
  (* RTL_KEEP = "inst_controller " *) wire [4:0]o_tr_result;
  (* RTL_KEEP = "inst_controller " *) wire o_tr_result_rd;
  (* RTL_KEEP = "inst_controller " *) wire o_tr_result_wr;
  wire [4:0]out;
  wire r_k_skp_n;
  wire r_k_skp_n_i_2__0_n_0;
  wire r_k_start_dllp;
  wire r_k_start_tlp;
  wire r_k_stop;
  wire r_k_stop_i_2_n_0;
  wire [8:0]r_phys_a;
  wire [8:0]r_phys_b;
  wire [7:0]r_phys_c;
  wire \r_proc_state_reg[0] ;
  wire \r_rd_ptr_reg[0] ;
  wire \r_rd_ptr_reg[4] ;
  wire \r_rst_reg[1] ;
  wire ri_k_skp_n;
  wire ri_k_start_dllp;
  wire ri_k_start_tlp;
  wire ri_k_stop;
  wire [79:0]NLW_inst_frame_shift_in_out_UNCONNECTED;

  assign o_dllp[15:6] = o_frame[23:14];
  assign o_status_id_valid = o_empty__0;
  assign o_tlp[55:0] = in0;
  assign \r_stage_reg[7][7] [55:0] = o_frame[63:8];
  assign \r_tlp_temp_rd_addr_reg[3] [3:0] = o_tlp_temp_rd_addr;
  assign \r_tlp_temp_wr_addr_reg[3] [3:0] = o_tlp_temp_wr_addr;
  assign \r_tr_state_reg[6]  = o_tlp_temp_wr;
  packet_checker_controller__parameterized0 inst_controller
       (.Q(o_dllp_valid),
        .o_id_result(o_id_result),
        .o_id_result_wr(o_id_result_wr),
        .o_tlp_temp_rd_addr(o_tlp_temp_rd_addr),
        .o_tlp_temp_wr(o_tlp_temp_wr),
        .o_tlp_temp_wr_addr(o_tlp_temp_wr_addr),
        .o_tlp_valid(o_tlp_valid),
        .o_tr_result(o_tr_result),
        .o_tr_result_rd(o_tr_result_rd),
        .o_tr_result_wr(o_tr_result_wr),
        .out(o_crc_init),
        .r_k_skp_n(r_k_skp_n),
        .r_k_start_dllp(r_k_start_dllp),
        .r_k_start_tlp(r_k_start_tlp),
        .r_k_stop(r_k_stop),
        .\r_proc_state_reg[0]_0 (o_empty),
        .\r_proc_state_reg[0]_1 (\r_proc_state_reg[0] ),
        .r_proc_valid_tr_reg_0(o_data),
        .\r_rst_reg[0] (\r_rd_ptr_reg[4] ),
        .\r_rst_reg[1] (inst_local_reset_n_0),
        .\r_tr_state[7]_i_4__0_0 (r_phys_c),
        .\r_tr_state[7]_i_4__0_1 (o_crc));
  crc_8 inst_crc_8
       (.E(r_k_skp_n),
        .Q(r_phys_c),
        .out(o_crc),
        .\r_crc_reg[0]_0 (\r_rd_ptr_reg[4] ),
        .\r_crc_reg[0]_1 (inst_local_reset_n_0),
        .\r_crc_reg[2]_0 (o_crc_init));
  packet_checker_input_shift__parameterized0 inst_frame_shift_in
       (.E(r_k_skp_n),
        .Q(r_phys_c),
        .out({NLW_inst_frame_shift_in_out_UNCONNECTED[79:64],o_frame[63:8],NLW_inst_frame_shift_in_out_UNCONNECTED[7:0]}),
        .\r_stage_reg[9][7]_0 (\r_rd_ptr_reg[4] ));
  sync_fifo__parameterized2 inst_id_result_buffer
       (.o_empty(o_empty__0),
        .out(out),
        .\r_dllp_tx_reg[1] (o_id_result),
        .r_empty_reg_0(inst_local_reset_n_0),
        .\r_rd_ptr_reg[0]_0 (\r_rd_ptr_reg[0] ),
        .\r_rd_ptr_reg[4]_0 (\r_rd_ptr_reg[4] ),
        .\r_wr_ptr_reg[1]_0 (o_id_result_wr));
  async_reset__parameterized1_16 inst_local_reset
       (.\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rd_ptr_reg[4] ),
        .\r_rst_reg[1]_2 (\r_rst_reg[1] ));
  sync_fifo__parameterized1 inst_tr_result_buffer
       (.o_empty(o_empty),
        .out(o_data),
        .r_full_reg_0(inst_local_reset_n_0),
        .\r_proc_frame_num_header_reg[3] (o_frame[15:8]),
        .r_proc_valid_tr_reg(o_tr_result),
        .\r_rd_ptr_reg[0]_0 (o_tr_result_rd),
        .\r_rd_ptr_reg[4]_0 (\r_rd_ptr_reg[4] ),
        .\r_wr_ptr_reg[1]_0 (o_tr_result_wr));
  LUT6 #(
    .INIT(64'hFEFFFFFFFFFFFFFF)) 
    r_k_skp_n_i_1__0
       (.I0(r_k_skp_n_i_2__0_n_0),
        .I1(r_phys_b[0]),
        .I2(r_phys_b[7]),
        .I3(r_phys_b[8]),
        .I4(r_phys_b[6]),
        .I5(r_phys_b[5]),
        .O(ri_k_skp_n));
  LUT4 #(
    .INIT(16'hDFFF)) 
    r_k_skp_n_i_2__0
       (.I0(r_phys_b[2]),
        .I1(r_phys_b[1]),
        .I2(r_phys_b[4]),
        .I3(r_phys_b[3]),
        .O(r_k_skp_n_i_2__0_n_0));
  FDPE r_k_skp_n_reg
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .D(ri_k_skp_n),
        .PRE(inst_local_reset_n_0),
        .Q(r_k_skp_n));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    r_k_start_dllp_i_1__0
       (.I0(r_k_skp_n_i_2__0_n_0),
        .I1(r_phys_b[0]),
        .I2(r_phys_b[7]),
        .I3(r_phys_b[8]),
        .I4(r_phys_b[6]),
        .I5(r_phys_b[5]),
        .O(ri_k_start_dllp));
  FDCE r_k_start_dllp_reg
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_k_start_dllp),
        .Q(r_k_start_dllp));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    r_k_start_tlp_i_1__0
       (.I0(r_k_skp_n_i_2__0_n_0),
        .I1(r_phys_b[0]),
        .I2(r_phys_b[7]),
        .I3(r_phys_b[8]),
        .I4(r_phys_b[6]),
        .I5(r_phys_b[5]),
        .O(ri_k_start_tlp));
  FDCE r_k_start_tlp_reg
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_k_start_tlp),
        .Q(r_k_start_tlp));
  LUT5 #(
    .INIT(32'h00000001)) 
    r_k_stop_i_1
       (.I0(r_phys_a[0]),
        .I1(r_phys_a[1]),
        .I2(r_phys_a[5]),
        .I3(r_phys_a[7]),
        .I4(r_k_stop_i_2_n_0),
        .O(ri_k_stop));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    r_k_stop_i_2
       (.I0(r_phys_a[8]),
        .I1(r_phys_a[6]),
        .I2(r_phys_a[2]),
        .I3(r_phys_a[3]),
        .I4(r_phys_a[4]),
        .O(r_k_stop_i_2_n_0));
  FDCE r_k_stop_reg
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_k_stop),
        .Q(r_k_stop));
  FDCE \r_phys_a_reg[0] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[0]),
        .Q(r_phys_a[0]));
  FDCE \r_phys_a_reg[1] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[1]),
        .Q(r_phys_a[1]));
  FDCE \r_phys_a_reg[2] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[2]),
        .Q(r_phys_a[2]));
  FDCE \r_phys_a_reg[3] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[3]),
        .Q(r_phys_a[3]));
  FDCE \r_phys_a_reg[4] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[4]),
        .Q(r_phys_a[4]));
  FDCE \r_phys_a_reg[5] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[5]),
        .Q(r_phys_a[5]));
  FDCE \r_phys_a_reg[6] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[6]),
        .Q(r_phys_a[6]));
  FDCE \r_phys_a_reg[7] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[7]),
        .Q(r_phys_a[7]));
  FDCE \r_phys_a_reg[8] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(D[8]),
        .Q(r_phys_a[8]));
  FDCE \r_phys_b_reg[0] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[0]),
        .Q(r_phys_b[0]));
  FDCE \r_phys_b_reg[1] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[1]),
        .Q(r_phys_b[1]));
  FDCE \r_phys_b_reg[2] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[2]),
        .Q(r_phys_b[2]));
  FDCE \r_phys_b_reg[3] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[3]),
        .Q(r_phys_b[3]));
  FDCE \r_phys_b_reg[4] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[4]),
        .Q(r_phys_b[4]));
  FDCE \r_phys_b_reg[5] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[5]),
        .Q(r_phys_b[5]));
  FDCE \r_phys_b_reg[6] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[6]),
        .Q(r_phys_b[6]));
  FDCE \r_phys_b_reg[7] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[7]),
        .Q(r_phys_b[7]));
  FDCE \r_phys_b_reg[8] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_a[8]),
        .Q(r_phys_b[8]));
  FDCE \r_phys_c_reg[0] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[0]),
        .Q(r_phys_c[0]));
  FDCE \r_phys_c_reg[1] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[1]),
        .Q(r_phys_c[1]));
  FDCE \r_phys_c_reg[2] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[2]),
        .Q(r_phys_c[2]));
  FDCE \r_phys_c_reg[3] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[3]),
        .Q(r_phys_c[3]));
  FDCE \r_phys_c_reg[4] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[4]),
        .Q(r_phys_c[4]));
  FDCE \r_phys_c_reg[5] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[5]),
        .Q(r_phys_c[5]));
  FDCE \r_phys_c_reg[6] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[6]),
        .Q(r_phys_c[6]));
  FDCE \r_phys_c_reg[7] 
       (.C(\r_rd_ptr_reg[4] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_phys_b[7]),
        .Q(r_phys_c[7]));
endmodule

module receiver_packet_interface_top
   (inst_bufg_clk_120,
    I117,
    I118,
    \r_tlp_temp_wr_addr_reg[3] ,
    p_3_in,
    out,
    o_dllp,
    o_dllp_valid,
    o_status_id,
    o_status_id_valid,
    r_empty_reg,
    in00,
    \r_rst_reg[1] ,
    \r_rst_reg[0] ,
    \r_rd_ptr_reg[3] ,
    \r_rd_ptr_reg[0] ,
    \r_rd_ptr_bin_reg[3] ,
    \r_rst_reg[0]_0 ,
    D,
    lopt);
  output [33:0]inst_bufg_clk_120;
  output [3:0]I117;
  output I118;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [33:0]p_3_in;
  output out;
  output [15:0]o_dllp;
  output o_dllp_valid;
  output [4:0]o_status_id;
  output o_status_id_valid;
  output r_empty_reg;
  input [33:0]in00;
  input \r_rst_reg[1] ;
  input \r_rst_reg[0] ;
  input \r_rd_ptr_reg[3] ;
  input \r_rd_ptr_reg[0] ;
  input \r_rd_ptr_bin_reg[3] ;
  input \r_rst_reg[0]_0 ;
  input [8:0]D;
  output lopt;

  wire [8:0]D;
  wire [3:0]I117;
  wire I118;
  wire [33:0]in00;
  wire inst_async_fifo_tlp_n_36;
  wire [33:0]inst_bufg_clk_120;
  (* RTL_KEEP = "true" *) wire [15:0]o_dllp;
  (* RTL_KEEP = "inst_packet_checker " *) wire [15:0]o_dllp_orig;
  (* RTL_KEEP = "inst_packet_checker " *) wire o_dllp_valid_orig;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_empty;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire o_empty__0;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_full;
  (* RTL_KEEP = "inst_sys_reset_120 " *) wire o_rst;
  (* RTL_KEEP = "inst_tlp_reset " *) wire o_rst__0;
  (* RTL_KEEP = "true" *) wire [4:0]o_status_id;
  (* RTL_KEEP = "true" *) wire o_status_id_valid;
  (* RTL_KEEP = "inst_packet_checker " *) wire [33:0]o_tlp_orig;
  (* RTL_KEEP = "inst_packet_checker " *) wire o_tlp_valid_orig;
  (* RTL_KEEP = "true" *) wire out;
  wire [33:0]p_3_in;
  wire \r_rd_ptr_bin_reg[3] ;
  wire \r_rd_ptr_reg[0] ;
  wire \r_rd_ptr_reg[3] ;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1] ;
  wire [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  wire [5:0]NLW_inst_packet_checker_o_dllp_UNCONNECTED;
  wire NLW_inst_sync_fifo_dllp_o_full_UNCONNECTED;
  wire [5:0]NLW_inst_sync_fifo_dllp_I100_UNCONNECTED;
  wire [14:0]NLW_inst_sync_fifo_dllp_out_UNCONNECTED;

  assign lopt = o_full;
  assign o_dllp_valid = o_empty__0;
  assign r_empty_reg = o_empty;
  async_fifo__parameterized0__hierPathDup__1 inst_async_fifo_tlp
       (.I95(o_tlp_orig),
        .inst_bufg_clk_120(inst_bufg_clk_120),
        .o_empty(o_empty),
        .out(o_full),
        .r_full_reg_0(o_rst),
        .\r_rd_ptr_bin_reg[0]_0 (o_rst__0),
        .\r_rd_ptr_bin_reg[3]_0 (\r_rd_ptr_bin_reg[3] ),
        .\r_rd_ptr_diff_reg[4]_0 (\r_rst_reg[1] ),
        .\r_rst_reg[1] (inst_async_fifo_tlp_n_36),
        .\r_wr_ptr_bin_reg[0]_0 (\r_rst_reg[0] ),
        .\r_wr_ptr_gray_reg[2]_0 (o_tlp_valid_orig));
  receiver_packet_checker_top inst_packet_checker
       (.D(D),
        .I117(I117),
        .I118(I118),
        .in0(o_status_id_valid),
        .in00(in00),
        .o_dllp({o_dllp_orig[15:6],NLW_inst_packet_checker_o_dllp_UNCONNECTED[5:0]}),
        .o_dllp_valid(o_dllp_valid_orig),
        .o_tlp(o_tlp_orig),
        .o_tlp_valid(o_tlp_valid_orig),
        .out(o_status_id),
        .p_3_in(p_3_in),
        .r_empty_reg(\r_rst_reg[0] ),
        .\r_proc_state_reg[0] (o_full),
        .\r_rd_ptr_reg[0] (\r_rd_ptr_reg[0] ),
        .\r_rst_reg[1] (inst_async_fifo_tlp_n_36),
        .\r_tlp_temp_wr_addr_reg[3] (\r_tlp_temp_wr_addr_reg[3] ));
  sync_fifo__parameterized0__hierPathDup__2 inst_sync_fifo_dllp
       (.I100({o_dllp_orig[15:6],NLW_inst_sync_fifo_dllp_I100_UNCONNECTED[5:0]}),
        .o_empty(o_empty__0),
        .o_full(NLW_inst_sync_fifo_dllp_o_full_UNCONNECTED),
        .out({o_dllp[15],NLW_inst_sync_fifo_dllp_out_UNCONNECTED[14:9],o_dllp[8],NLW_inst_sync_fifo_dllp_out_UNCONNECTED[7:0]}),
        .r_full_reg_0(inst_async_fifo_tlp_n_36),
        .\r_rd_ptr_reg[3]_0 (\r_rd_ptr_reg[3] ),
        .\r_wr_ptr_reg[1]_0 (o_dllp_valid_orig),
        .\r_wr_ptr_reg[4]_0 (\r_rst_reg[0] ));
  async_reset__parameterized1__hierPathDup__6 inst_sys_reset_120
       (.out(o_rst),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[0]_1 (\r_rst_reg[0]_0 ));
  async_reset__parameterized1__hierPathDup__7 inst_tlp_reset
       (.out(o_rst__0),
        .\r_rst_reg[0]_0 (\r_rst_reg[0]_0 ),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  LUT1 #(
    .INIT(2'h1)) 
    o_tlp_rdy_inferred_i_1
       (.I0(o_full),
        .O(out));
endmodule

(* ORIG_REF_NAME = "receiver_packet_interface_top" *) 
module receiver_packet_interface_top__parameterized0
   (inst_bufg_clk_120,
    \r_tlp_temp_rd_addr_reg[3] ,
    \r_tr_state_reg[6] ,
    \r_tlp_temp_wr_addr_reg[3] ,
    \r_stage_reg[7][7] ,
    out,
    o_dllp,
    o_dllp_valid,
    o_status_id,
    o_status_id_valid,
    r_empty_reg,
    in0,
    \r_rst_reg[0] ,
    \r_rst_reg[1] ,
    \r_rd_ptr_bin_reg[3] ,
    \r_rd_ptr_reg[3] ,
    \r_rd_ptr_reg[0] ,
    \r_rst_reg[0]_0 ,
    D,
    lopt);
  output [55:0]inst_bufg_clk_120;
  output [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  output \r_tr_state_reg[6] ;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [55:0]\r_stage_reg[7][7] ;
  output out;
  output [15:0]o_dllp;
  output o_dllp_valid;
  output [4:0]o_status_id;
  output o_status_id_valid;
  output r_empty_reg;
  input [55:0]in0;
  input \r_rst_reg[0] ;
  input \r_rst_reg[1] ;
  input \r_rd_ptr_bin_reg[3] ;
  input \r_rd_ptr_reg[3] ;
  input \r_rd_ptr_reg[0] ;
  input \r_rst_reg[0]_0 ;
  input [8:0]D;
  output lopt;

  wire [8:0]D;
  wire [55:0]in0;
  wire inst_async_fifo_tlp_n_58;
  wire [55:0]inst_bufg_clk_120;
  (* RTL_KEEP = "true" *) wire [15:0]o_dllp;
  (* RTL_KEEP = "inst_packet_checker " *) wire [15:0]o_dllp_orig;
  (* RTL_KEEP = "inst_packet_checker " *) wire o_dllp_valid_orig;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_empty;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire o_empty__0;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_full;
  (* RTL_KEEP = "inst_sys_reset_120 " *) wire o_rst;
  (* RTL_KEEP = "inst_tlp_reset " *) wire o_rst__0;
  (* RTL_KEEP = "true" *) wire [4:0]o_status_id;
  (* RTL_KEEP = "true" *) wire o_status_id_valid;
  (* RTL_KEEP = "inst_packet_checker " *) wire [55:0]o_tlp_orig;
  (* RTL_KEEP = "inst_packet_checker " *) wire o_tlp_valid_orig;
  (* RTL_KEEP = "true" *) wire out;
  wire \r_rd_ptr_bin_reg[3] ;
  wire \r_rd_ptr_reg[0] ;
  wire \r_rd_ptr_reg[3] ;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[0]_0 ;
  wire \r_rst_reg[1] ;
  wire [55:0]\r_stage_reg[7][7] ;
  wire [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  wire [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  wire \r_tr_state_reg[6] ;
  wire [5:0]NLW_inst_packet_checker_o_dllp_UNCONNECTED;
  wire NLW_inst_sync_fifo_dllp_o_full_UNCONNECTED;
  wire [5:0]NLW_inst_sync_fifo_dllp_I262_UNCONNECTED;
  wire [14:0]NLW_inst_sync_fifo_dllp_out_UNCONNECTED;

  assign lopt = o_full;
  assign o_dllp_valid = o_empty__0;
  assign r_empty_reg = o_empty;
  async_fifo inst_async_fifo_tlp
       (.inst_bufg_clk_120(inst_bufg_clk_120),
        .o_empty(o_empty),
        .out(o_full),
        .r_almost_empty_reg_0(\r_rst_reg[0] ),
        .r_almost_full_reg_0(o_rst),
        .\r_rd_ptr_bin_reg[0]_0 (o_rst__0),
        .\r_rd_ptr_bin_reg[3]_0 (\r_rd_ptr_bin_reg[3] ),
        .\r_rst_reg[1] (inst_async_fifo_tlp_n_58),
        .\r_temp_reg[33] (o_tlp_orig),
        .\r_wr_ptr_diff_reg[4]_0 (\r_rst_reg[1] ),
        .\r_wr_ptr_gray_reg[2]_0 (o_tlp_valid_orig));
  receiver_packet_checker_top__parameterized0 inst_packet_checker
       (.D(D),
        .in0(in0),
        .o_dllp({o_dllp_orig[15:6],NLW_inst_packet_checker_o_dllp_UNCONNECTED[5:0]}),
        .o_dllp_valid(o_dllp_valid_orig),
        .o_status_id_valid(o_status_id_valid),
        .o_tlp(o_tlp_orig),
        .o_tlp_valid(o_tlp_valid_orig),
        .out(o_status_id),
        .\r_proc_state_reg[0] (o_full),
        .\r_rd_ptr_reg[0] (\r_rd_ptr_reg[0] ),
        .\r_rd_ptr_reg[4] (\r_rst_reg[1] ),
        .\r_rst_reg[1] (inst_async_fifo_tlp_n_58),
        .\r_stage_reg[7][7] (\r_stage_reg[7][7] ),
        .\r_tlp_temp_rd_addr_reg[3] (\r_tlp_temp_rd_addr_reg[3] ),
        .\r_tlp_temp_wr_addr_reg[3] (\r_tlp_temp_wr_addr_reg[3] ),
        .\r_tr_state_reg[6] (\r_tr_state_reg[6] ));
  sync_fifo__parameterized0 inst_sync_fifo_dllp
       (.I262({o_dllp_orig[15:6],NLW_inst_sync_fifo_dllp_I262_UNCONNECTED[5:0]}),
        .o_empty(o_empty__0),
        .o_full(NLW_inst_sync_fifo_dllp_o_full_UNCONNECTED),
        .out({o_dllp[15],NLW_inst_sync_fifo_dllp_out_UNCONNECTED[14:9],o_dllp[8],NLW_inst_sync_fifo_dllp_out_UNCONNECTED[7:0]}),
        .r_full_reg_0(\r_rst_reg[1] ),
        .r_full_reg_1(inst_async_fifo_tlp_n_58),
        .\r_rd_ptr_reg[3]_0 (\r_rd_ptr_reg[3] ),
        .\r_wr_ptr_reg[1]_0 (o_dllp_valid_orig));
  async_reset__parameterized1__hierPathDup__13 inst_sys_reset_120
       (.out(o_rst),
        .\r_rst_reg[0]_0 (\r_rst_reg[0]_0 ),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  async_reset__parameterized1__hierPathDup__14 inst_tlp_reset
       (.out(o_rst__0),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[0]_1 (\r_rst_reg[0]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    o_tlp_rdy_inferred_i_1__1
       (.I0(o_full),
        .O(out));
endmodule

module receiver_physical_iob_top
   (out,
    D,
    o_mon_delay_tabs,
    o_mon_delay_tabs_wr,
    in0,
    o_cal_fail,
    \r_rst_reg[1] ,
    o_packet_byte,
    o_clk_600,
    CLKB0,
    o_clk_200,
    FMC_LA03_P,
    FMC_LA03_N,
    r_start_reg,
    CLK,
    \r_rst_reg[0] ,
    \r_rst_reg[1]_0 );
  output out;
  output [4:0]D;
  output [4:0]o_mon_delay_tabs;
  output o_mon_delay_tabs_wr;
  output in0;
  output o_cal_fail;
  output \r_rst_reg[1] ;
  output [7:0]o_packet_byte;
  input o_clk_600;
  input CLKB0;
  input o_clk_200;
  input FMC_LA03_P;
  input FMC_LA03_N;
  input r_start_reg;
  input CLK;
  input \r_rst_reg[0] ;
  input \r_rst_reg[1]_0 ;

  wire CLK;
  wire CLKB0;
  wire FMC_LA03_N;
  wire FMC_LA03_P;
  wire ibufds_rx_o_n;
  wire ibufds_rx_o_p;
  wire in0;
  wire inst_gearbox_n_11;
  wire inst_phys_120_reset_n_0;
  wire inst_phys_200_reset_n_0;
  wire o_cal_fail;
  wire o_clk_200;
  wire o_clk_600;
  (* RTL_KEEP = "inst_iserdes_master " *) wire [5:0]o_data;
  (* RTL_KEEP = "inst_iserdes_monitor " *) wire [5:0]o_data__0;
  (* RTL_KEEP = "inst_tab_cal " *) wire [4:0]o_delay_tabs;
  (* RTL_KEEP = "inst_tab_monitor " *) wire o_delay_tabs_update;
  (* RTL_KEEP = "inst_tab_cal " *) wire o_done;
  (* RTL_KEEP = "inst_word_aligner " *) wire o_done__0;
  (* RTL_KEEP = "inst_tab_cal " *) wire [4:0]o_edge_tabs;
  (* RTL_KEEP = "inst_tab_cal " *) wire o_fail;
  (* RTL_KEEP = "inst_word_aligner " *) wire o_fail__0;
  (* RTL_KEEP = "inst_tab_monitor " *) wire [4:0]o_master_delay_tabs;
  (* RTL_KEEP = "inst_tab_monitor " *) wire [4:0]o_monitor_delay_tabs;
  wire [7:0]o_packet_byte;
  (* RTL_KEEP = "inst_gearbox " *) wire [9:0]o_rd_data;
  (* RTL_KEEP = "inst_tab_monitor " *) wire o_run;
  (* RTL_KEEP = "inst_word_aligner " *) wire [3:0]o_slipbits;
  (* RTL_KEEP = "inst_sync_aligning_start " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_tab_cal_fail " *) wire o_sync__0;
  wire [4:0]r_master_delay;
  wire [4:0]r_monitor_delay;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire r_start_reg;
  wire [4:0]ri_master_delay;

  assign D[4:0] = o_edge_tabs;
  assign o_mon_delay_tabs[4:0] = o_master_delay_tabs;
  assign o_mon_delay_tabs_wr = o_delay_tabs_update;
  assign out = o_done__0;
  decoder_8b10b inst_8b10b_dec
       (.CLK(CLK),
        .D(o_rd_data),
        .\dout_i_reg[7]_0 (o_packet_byte),
        .in0(in0));
  physical_iob_gearbox_6_10 inst_gearbox
       (.CLK(CLK),
        .D(o_data),
        .o_clk_200(o_clk_200),
        .out(o_rd_data),
        .\r_rst_reg[0] (\r_rst_reg[0] ),
        .\r_rst_reg[1] (\r_rst_reg[1] ),
        .\r_rst_reg[1]_0 (inst_gearbox_n_11),
        .\r_rst_reg[1]_1 (\r_rst_reg[1]_0 ),
        .\r_slipbits_reg[3]_0 (o_slipbits));
  (* BOX_TYPE = "PRIMITIVE" *) 
  IBUFDS_DIFF_OUT_HD274 inst_ibufds_rx
       (.I(FMC_LA03_P),
        .IB(FMC_LA03_N),
        .O(ibufds_rx_o_p),
        .OB(ibufds_rx_o_n));
  physical_iob_iserdes__hierPathDup__1 inst_iserdes_master
       (.CLKB0(CLKB0),
        .Q(r_master_delay),
        .ibufds_rx_o_p(ibufds_rx_o_p),
        .o_clk_200(o_clk_200),
        .o_clk_600(o_clk_600),
        .out(o_data),
        .\r_rst_reg[1] (inst_phys_200_reset_n_0));
  physical_iob_iserdes inst_iserdes_monitor
       (.CLKB0(CLKB0),
        .Q(r_monitor_delay),
        .ibufds_rx_o_n(ibufds_rx_o_n),
        .o_clk_200(o_clk_200),
        .o_clk_600(o_clk_600),
        .out(o_data__0),
        .\r_rst_reg[1] (inst_phys_200_reset_n_0));
  async_reset__parameterized1_4 inst_phys_120_reset
       (.CLK(CLK),
        .\r_rst_reg[1]_0 (inst_phys_120_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  async_reset__parameterized1_5 inst_phys_200_reset
       (.o_clk_200(o_clk_200),
        .\r_rst_reg[1]_0 (inst_phys_200_reset_n_0),
        .\r_rst_reg[1]_1 (inst_gearbox_n_11));
  synchronizer__parameterized0__hierPathDup__4 inst_sync_aligning_start
       (.CLK(CLK),
        .D(o_done),
        .out(o_sync),
        .\r_sync_reg[0]_0 (inst_phys_120_reset_n_0));
  synchronizer__parameterized0__hierPathDup__5 inst_sync_tab_cal_fail
       (.CLK(CLK),
        .D(o_fail),
        .out(o_sync__0),
        .\r_sync_reg[0]_0 (inst_phys_120_reset_n_0));
  physical_iob_init_tab_cal inst_tab_cal
       (.D(o_data),
        .o_clk_200(o_clk_200),
        .o_done(o_done),
        .o_edge_tabs(o_edge_tabs),
        .o_fail(o_fail),
        .out(o_delay_tabs),
        .\r_rst_reg[0] (inst_phys_200_reset_n_0),
        .r_start_reg_0(r_start_reg));
  physical_iob_tab_monitor inst_tab_monitor
       (.D(o_edge_tabs),
        .o_clk_200(o_clk_200),
        .o_delay_tabs_update(o_delay_tabs_update),
        .o_monitor_delay_tabs(o_monitor_delay_tabs),
        .o_run(o_run),
        .out(o_master_delay_tabs),
        .r_enable_monitor_reg_0(o_done),
        .\r_monitor_delay_tabs_reg[4]_0 (o_delay_tabs),
        .\r_rst_reg[1] (inst_phys_200_reset_n_0),
        .\r_serdes_master_i_reg[5]_0 (o_data),
        .\r_serdes_monitor_i_reg[5]_0 (o_data__0));
  physical_iob_word_aligner inst_word_aligner
       (.CLK(CLK),
        .D(o_rd_data),
        .o_done(o_done__0),
        .o_fail(o_fail__0),
        .out(o_slipbits),
        .\r_rst_reg[0] (inst_phys_120_reset_n_0),
        .r_start_reg_0(o_sync));
  LUT2 #(
    .INIT(4'hE)) 
    o_cal_fail_inferred_i_1__0
       (.I0(o_sync__0),
        .I1(o_fail__0),
        .O(o_cal_fail));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[0]_i_1__0 
       (.I0(o_master_delay_tabs[0]),
        .I1(o_run),
        .I2(o_delay_tabs[0]),
        .O(ri_master_delay[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[1]_i_1__0 
       (.I0(o_master_delay_tabs[1]),
        .I1(o_run),
        .I2(o_delay_tabs[1]),
        .O(ri_master_delay[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[2]_i_1__0 
       (.I0(o_master_delay_tabs[2]),
        .I1(o_run),
        .I2(o_delay_tabs[2]),
        .O(ri_master_delay[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[3]_i_1__0 
       (.I0(o_master_delay_tabs[3]),
        .I1(o_run),
        .I2(o_delay_tabs[3]),
        .O(ri_master_delay[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[4]_i_1__0 
       (.I0(o_master_delay_tabs[4]),
        .I1(o_run),
        .I2(o_delay_tabs[4]),
        .O(ri_master_delay[4]));
  FDCE \r_master_delay_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[0]),
        .Q(r_master_delay[0]));
  FDCE \r_master_delay_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[1]),
        .Q(r_master_delay[1]));
  FDCE \r_master_delay_reg[2] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[2]),
        .Q(r_master_delay[2]));
  FDCE \r_master_delay_reg[3] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[3]),
        .Q(r_master_delay[3]));
  FDCE \r_master_delay_reg[4] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[4]),
        .Q(r_master_delay[4]));
  FDCE \r_monitor_delay_reg[0] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[0]),
        .Q(r_monitor_delay[0]));
  FDCE \r_monitor_delay_reg[1] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[1]),
        .Q(r_monitor_delay[1]));
  FDCE \r_monitor_delay_reg[2] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[2]),
        .Q(r_monitor_delay[2]));
  FDCE \r_monitor_delay_reg[3] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[3]),
        .Q(r_monitor_delay[3]));
  FDCE \r_monitor_delay_reg[4] 
       (.C(o_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[4]),
        .Q(r_monitor_delay[4]));
endmodule

(* ORIG_REF_NAME = "receiver_physical_iob_top" *) 
module receiver_physical_iob_top_27
   (out,
    D,
    o_mon_delay_tabs,
    o_mon_delay_tabs_wr,
    in0,
    o_cal_fail,
    \r_rst_reg[1] ,
    o_packet_byte,
    inst_iserdese2,
    CLKB0,
    i_clk_200,
    FMC_LA07_P,
    FMC_LA07_N,
    r_start_reg,
    CLK,
    \r_rst_reg[0] ,
    \r_rst_reg[1]_0 );
  output out;
  output [4:0]D;
  output [4:0]o_mon_delay_tabs;
  output o_mon_delay_tabs_wr;
  output in0;
  output o_cal_fail;
  output \r_rst_reg[1] ;
  output [7:0]o_packet_byte;
  input inst_iserdese2;
  input CLKB0;
  input i_clk_200;
  input FMC_LA07_P;
  input FMC_LA07_N;
  input r_start_reg;
  input CLK;
  input \r_rst_reg[0] ;
  input \r_rst_reg[1]_0 ;

  wire CLK;
  wire CLKB0;
  wire FMC_LA07_N;
  wire FMC_LA07_P;
  wire i_clk_200;
  wire ibufds_rx_o_n;
  wire ibufds_rx_o_p;
  wire in0;
  wire inst_gearbox_n_11;
  wire inst_iserdese2;
  wire inst_phys_120_reset_n_0;
  wire inst_phys_200_reset_n_0;
  wire o_cal_fail;
  (* RTL_KEEP = "inst_iserdes_master " *) wire [5:0]o_data;
  (* RTL_KEEP = "inst_iserdes_monitor " *) wire [5:0]o_data__0;
  (* RTL_KEEP = "inst_tab_cal " *) wire [4:0]o_delay_tabs;
  (* RTL_KEEP = "inst_tab_monitor " *) wire o_delay_tabs_update;
  (* RTL_KEEP = "inst_tab_cal " *) wire o_done;
  (* RTL_KEEP = "inst_word_aligner " *) wire o_done__0;
  (* RTL_KEEP = "inst_tab_cal " *) wire [4:0]o_edge_tabs;
  (* RTL_KEEP = "inst_tab_cal " *) wire o_fail;
  (* RTL_KEEP = "inst_word_aligner " *) wire o_fail__0;
  (* RTL_KEEP = "inst_tab_monitor " *) wire [4:0]o_master_delay_tabs;
  (* RTL_KEEP = "inst_tab_monitor " *) wire [4:0]o_monitor_delay_tabs;
  wire [7:0]o_packet_byte;
  (* RTL_KEEP = "inst_gearbox " *) wire [9:0]o_rd_data;
  (* RTL_KEEP = "inst_tab_monitor " *) wire o_run;
  (* RTL_KEEP = "inst_word_aligner " *) wire [3:0]o_slipbits;
  (* RTL_KEEP = "inst_sync_aligning_start " *) wire o_sync;
  (* RTL_KEEP = "inst_sync_tab_cal_fail " *) wire o_sync__0;
  wire [4:0]r_master_delay;
  wire [4:0]r_monitor_delay;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire r_start_reg;
  wire [4:0]ri_master_delay;

  assign D[4:0] = o_edge_tabs;
  assign o_mon_delay_tabs[4:0] = o_master_delay_tabs;
  assign o_mon_delay_tabs_wr = o_delay_tabs_update;
  assign out = o_done__0;
  decoder_8b10b_33 inst_8b10b_dec
       (.CLK(CLK),
        .D(o_rd_data),
        .\dout_i_reg[7]_0 (o_packet_byte),
        .in0(in0));
  physical_iob_gearbox_6_10_34 inst_gearbox
       (.CLK(CLK),
        .D(o_data),
        .i_clk_200(i_clk_200),
        .out(o_rd_data),
        .\r_rst_reg[0] (\r_rst_reg[0] ),
        .\r_rst_reg[1] (\r_rst_reg[1] ),
        .\r_rst_reg[1]_0 (inst_gearbox_n_11),
        .\r_rst_reg[1]_1 (\r_rst_reg[1]_0 ),
        .\r_slipbits_reg[3]_0 (o_slipbits));
  (* BOX_TYPE = "PRIMITIVE" *) 
  IBUFDS_DIFF_OUT_UNIQ_BASE_ inst_ibufds_rx
       (.I(FMC_LA07_P),
        .IB(FMC_LA07_N),
        .O(ibufds_rx_o_p),
        .OB(ibufds_rx_o_n));
  physical_iob_iserdes__hierPathDup__1_35 inst_iserdes_master
       (.CLKB0(CLKB0),
        .Q(r_master_delay),
        .i_clk_200(i_clk_200),
        .ibufds_rx_o_p(ibufds_rx_o_p),
        .inst_iserdese2_0(inst_iserdese2),
        .out(o_data),
        .\r_rst_reg[1] (inst_phys_200_reset_n_0));
  physical_iob_iserdes_36 inst_iserdes_monitor
       (.CLKB0(CLKB0),
        .Q(r_monitor_delay),
        .i_clk_200(i_clk_200),
        .ibufds_rx_o_n(ibufds_rx_o_n),
        .inst_iserdese2_0(inst_iserdese2),
        .out(o_data__0),
        .\r_rst_reg[1] (inst_phys_200_reset_n_0));
  async_reset__parameterized1_37 inst_phys_120_reset
       (.CLK(CLK),
        .\r_rst_reg[1]_0 (inst_phys_120_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  async_reset__parameterized1_38 inst_phys_200_reset
       (.i_clk_200(i_clk_200),
        .\r_rst_reg[1]_0 (inst_phys_200_reset_n_0),
        .\r_rst_reg[1]_1 (inst_gearbox_n_11));
  synchronizer__parameterized0__hierPathDup__4_39 inst_sync_aligning_start
       (.CLK(CLK),
        .D(o_done),
        .out(o_sync),
        .\r_sync_reg[0]_0 (inst_phys_120_reset_n_0));
  synchronizer__parameterized0__hierPathDup__5_40 inst_sync_tab_cal_fail
       (.CLK(CLK),
        .D(o_fail),
        .out(o_sync__0),
        .\r_sync_reg[0]_0 (inst_phys_120_reset_n_0));
  physical_iob_init_tab_cal_41 inst_tab_cal
       (.D(o_data),
        .i_clk_200(i_clk_200),
        .o_done(o_done),
        .o_edge_tabs(o_edge_tabs),
        .o_fail(o_fail),
        .out(o_delay_tabs),
        .\r_rst_reg[0] (inst_phys_200_reset_n_0),
        .r_start_reg_0(r_start_reg));
  physical_iob_tab_monitor_42 inst_tab_monitor
       (.D(o_edge_tabs),
        .i_clk_200(i_clk_200),
        .o_delay_tabs_update(o_delay_tabs_update),
        .o_monitor_delay_tabs(o_monitor_delay_tabs),
        .o_run(o_run),
        .out(o_master_delay_tabs),
        .r_enable_monitor_reg_0(o_done),
        .\r_monitor_delay_tabs_reg[4]_0 (o_delay_tabs),
        .\r_rst_reg[1] (inst_phys_200_reset_n_0),
        .\r_serdes_master_i_reg[5]_0 (o_data),
        .\r_serdes_monitor_i_reg[5]_0 (o_data__0));
  physical_iob_word_aligner_43 inst_word_aligner
       (.CLK(CLK),
        .D(o_rd_data),
        .o_done(o_done__0),
        .o_fail(o_fail__0),
        .out(o_slipbits),
        .\r_rst_reg[0] (inst_phys_120_reset_n_0),
        .r_start_reg_0(o_sync));
  LUT2 #(
    .INIT(4'hE)) 
    o_cal_fail_inferred_i_1
       (.I0(o_sync__0),
        .I1(o_fail__0),
        .O(o_cal_fail));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[0]_i_1 
       (.I0(o_master_delay_tabs[0]),
        .I1(o_run),
        .I2(o_delay_tabs[0]),
        .O(ri_master_delay[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[1]_i_1 
       (.I0(o_master_delay_tabs[1]),
        .I1(o_run),
        .I2(o_delay_tabs[1]),
        .O(ri_master_delay[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[2]_i_1 
       (.I0(o_master_delay_tabs[2]),
        .I1(o_run),
        .I2(o_delay_tabs[2]),
        .O(ri_master_delay[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[3]_i_1 
       (.I0(o_master_delay_tabs[3]),
        .I1(o_run),
        .I2(o_delay_tabs[3]),
        .O(ri_master_delay[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \r_master_delay[4]_i_1 
       (.I0(o_master_delay_tabs[4]),
        .I1(o_run),
        .I2(o_delay_tabs[4]),
        .O(ri_master_delay[4]));
  FDCE \r_master_delay_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[0]),
        .Q(r_master_delay[0]));
  FDCE \r_master_delay_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[1]),
        .Q(r_master_delay[1]));
  FDCE \r_master_delay_reg[2] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[2]),
        .Q(r_master_delay[2]));
  FDCE \r_master_delay_reg[3] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[3]),
        .Q(r_master_delay[3]));
  FDCE \r_master_delay_reg[4] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(ri_master_delay[4]),
        .Q(r_master_delay[4]));
  FDCE \r_monitor_delay_reg[0] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[0]),
        .Q(r_monitor_delay[0]));
  FDCE \r_monitor_delay_reg[1] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[1]),
        .Q(r_monitor_delay[1]));
  FDCE \r_monitor_delay_reg[2] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[2]),
        .Q(r_monitor_delay[2]));
  FDCE \r_monitor_delay_reg[3] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[3]),
        .Q(r_monitor_delay[3]));
  FDCE \r_monitor_delay_reg[4] 
       (.C(i_clk_200),
        .CE(1'b1),
        .CLR(inst_phys_200_reset_n_0),
        .D(o_monitor_delay_tabs[4]),
        .Q(r_monitor_delay[4]));
endmodule

module register
   (out,
    E,
    D,
    \r_data_reg[2]_0 ,
    \r_data_reg[0]_0 );
  output [2:0]out;
  input [0:0]E;
  input [2:0]D;
  input \r_data_reg[2]_0 ;
  input \r_data_reg[0]_0 ;

  wire [2:0]D;
  wire [0:0]E;
  (* RTL_KEEP = "true" *) wire [2:0]out;
  wire \r_data_reg[0]_0 ;
  wire \r_data_reg[2]_0 ;

  FDCE \r_data_reg[0] 
       (.C(\r_data_reg[2]_0 ),
        .CE(E),
        .CLR(\r_data_reg[0]_0 ),
        .D(D[0]),
        .Q(out[0]));
  FDCE \r_data_reg[1] 
       (.C(\r_data_reg[2]_0 ),
        .CE(E),
        .CLR(\r_data_reg[0]_0 ),
        .D(D[1]),
        .Q(out[1]));
  FDCE \r_data_reg[2] 
       (.C(\r_data_reg[2]_0 ),
        .CE(E),
        .CLR(\r_data_reg[0]_0 ),
        .D(D[2]),
        .Q(out[2]));
endmodule

(* ORIG_REF_NAME = "register" *) 
module register__parameterized1__hierPathDup__1
   (out,
    \r_data_reg[4]_0 ,
    \r_data_reg[4]_1 ,
    \r_data_reg[0]_0 );
  output [4:0]out;
  input [4:0]\r_data_reg[4]_0 ;
  input \r_data_reg[4]_1 ;
  input \r_data_reg[0]_0 ;

  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire \r_data_reg[0]_0 ;
  wire [4:0]\r_data_reg[4]_0 ;
  wire \r_data_reg[4]_1 ;

  FDCE \r_data_reg[0] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [0]),
        .Q(out[0]));
  FDCE \r_data_reg[1] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [1]),
        .Q(out[1]));
  FDCE \r_data_reg[2] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [2]),
        .Q(out[2]));
  FDCE \r_data_reg[3] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [3]),
        .Q(out[3]));
  FDCE \r_data_reg[4] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [4]),
        .Q(out[4]));
endmodule

(* ORIG_REF_NAME = "register" *) 
module register__parameterized1__hierPathDup__2
   (out,
    \r_data_reg[4]_0 ,
    \r_data_reg[0]_0 ,
    \r_data_reg[0]_1 );
  output [4:0]out;
  input [4:0]\r_data_reg[4]_0 ;
  input \r_data_reg[0]_0 ;
  input \r_data_reg[0]_1 ;

  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire \r_data_reg[0]_0 ;
  wire \r_data_reg[0]_1 ;
  wire [4:0]\r_data_reg[4]_0 ;

  FDCE \r_data_reg[0] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [0]),
        .Q(out[0]));
  FDCE \r_data_reg[1] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [1]),
        .Q(out[1]));
  FDCE \r_data_reg[2] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [2]),
        .Q(out[2]));
  FDCE \r_data_reg[3] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [3]),
        .Q(out[3]));
  FDCE \r_data_reg[4] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [4]),
        .Q(out[4]));
endmodule

(* ORIG_REF_NAME = "register" *) 
module register__parameterized1__hierPathDup__3
   (out,
    \r_data_reg[4]_0 ,
    \r_data_reg[4]_1 ,
    \r_data_reg[0]_0 );
  output [4:0]out;
  input [4:0]\r_data_reg[4]_0 ;
  input \r_data_reg[4]_1 ;
  input \r_data_reg[0]_0 ;

  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire \r_data_reg[0]_0 ;
  wire [4:0]\r_data_reg[4]_0 ;
  wire \r_data_reg[4]_1 ;

  FDCE \r_data_reg[0] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [0]),
        .Q(out[0]));
  FDCE \r_data_reg[1] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [1]),
        .Q(out[1]));
  FDCE \r_data_reg[2] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [2]),
        .Q(out[2]));
  FDCE \r_data_reg[3] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [3]),
        .Q(out[3]));
  FDCE \r_data_reg[4] 
       (.C(\r_data_reg[4]_1 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_0 ),
        .D(\r_data_reg[4]_0 [4]),
        .Q(out[4]));
endmodule

(* ORIG_REF_NAME = "register" *) 
module register__parameterized1__hierPathDup__4
   (out,
    \r_data_reg[4]_0 ,
    \r_data_reg[0]_0 ,
    \r_data_reg[0]_1 );
  output [4:0]out;
  input [4:0]\r_data_reg[4]_0 ;
  input \r_data_reg[0]_0 ;
  input \r_data_reg[0]_1 ;

  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire \r_data_reg[0]_0 ;
  wire \r_data_reg[0]_1 ;
  wire [4:0]\r_data_reg[4]_0 ;

  FDCE \r_data_reg[0] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [0]),
        .Q(out[0]));
  FDCE \r_data_reg[1] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [1]),
        .Q(out[1]));
  FDCE \r_data_reg[2] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [2]),
        .Q(out[2]));
  FDCE \r_data_reg[3] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [3]),
        .Q(out[3]));
  FDCE \r_data_reg[4] 
       (.C(\r_data_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_data_reg[0]_1 ),
        .D(\r_data_reg[4]_0 [4]),
        .Q(out[4]));
endmodule

(* ORIG_REF_NAME = "register" *) 
module register__parameterized2
   (out,
    \r_rst_reg[1] ,
    \r_data_reg[0]_0 ,
    E,
    D,
    \r_data_reg[0]_1 );
  output [15:0]out;
  output \r_rst_reg[1] ;
  input \r_data_reg[0]_0 ;
  input [0:0]E;
  input [15:0]D;
  input \r_data_reg[0]_1 ;

  wire [15:0]D;
  wire [0:0]E;
  (* RTL_KEEP = "true" *) wire [15:0]out;
  wire \r_data_reg[0]_0 ;
  wire \r_data_reg[0]_1 ;
  wire \r_rst_reg[1] ;

  FDCE \r_data_reg[0] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[0]),
        .Q(out[0]));
  FDCE \r_data_reg[10] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[10]),
        .Q(out[10]));
  FDCE \r_data_reg[11] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[11]),
        .Q(out[11]));
  FDCE \r_data_reg[12] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[12]),
        .Q(out[12]));
  FDCE \r_data_reg[13] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[13]),
        .Q(out[13]));
  FDCE \r_data_reg[14] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[14]),
        .Q(out[14]));
  FDCE \r_data_reg[15] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[15]),
        .Q(out[15]));
  FDCE \r_data_reg[1] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[1]),
        .Q(out[1]));
  FDCE \r_data_reg[2] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[2]),
        .Q(out[2]));
  FDCE \r_data_reg[3] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[3]),
        .Q(out[3]));
  FDCE \r_data_reg[4] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[4]),
        .Q(out[4]));
  FDCE \r_data_reg[5] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[5]),
        .Q(out[5]));
  FDCE \r_data_reg[6] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[6]),
        .Q(out[6]));
  FDCE \r_data_reg[7] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[7]),
        .Q(out[7]));
  FDCE \r_data_reg[8] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[8]),
        .Q(out[8]));
  FDCE \r_data_reg[9] 
       (.C(\r_data_reg[0]_1 ),
        .CE(E),
        .CLR(\r_rst_reg[1] ),
        .D(D[9]),
        .Q(out[9]));
  LUT1 #(
    .INIT(2'h1)) 
    \r_rst[1]_i_1 
       (.I0(\r_data_reg[0]_0 ),
        .O(\r_rst_reg[1] ));
endmodule

module simple_filter
   (out,
    r_filter_o_reg_0,
    D);
  output out;
  input r_filter_o_reg_0;
  input [0:0]D;

  wire [0:0]D;
  (* RTL_KEEP = "true" *) wire out;
  wire r_filter_o_reg_0;
  wire [5:0]r_filter_shift;
  wire ri_filter_o__0;

  FDRE r_filter_o_reg
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(ri_filter_o__0),
        .Q(out),
        .R(1'b0));
  FDRE \r_filter_shift_reg[0] 
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(D),
        .Q(r_filter_shift[0]),
        .R(1'b0));
  FDRE \r_filter_shift_reg[1] 
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(r_filter_shift[0]),
        .Q(r_filter_shift[1]),
        .R(1'b0));
  FDRE \r_filter_shift_reg[2] 
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(r_filter_shift[1]),
        .Q(r_filter_shift[2]),
        .R(1'b0));
  FDRE \r_filter_shift_reg[3] 
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(r_filter_shift[2]),
        .Q(r_filter_shift[3]),
        .R(1'b0));
  FDRE \r_filter_shift_reg[4] 
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(r_filter_shift[3]),
        .Q(r_filter_shift[4]),
        .R(1'b0));
  FDRE \r_filter_shift_reg[5] 
       (.C(r_filter_o_reg_0),
        .CE(1'b1),
        .D(r_filter_shift[4]),
        .Q(r_filter_shift[5]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    ri_filter_o
       (.I0(r_filter_shift[1]),
        .I1(r_filter_shift[0]),
        .I2(r_filter_shift[4]),
        .I3(r_filter_shift[5]),
        .I4(r_filter_shift[2]),
        .I5(r_filter_shift[3]),
        .O(ri_filter_o__0));
endmodule

(* ORIG_REF_NAME = "sr_ff" *) 
module sr_ff_65
   (out,
    r_q_reg_0,
    r_q_reg_1,
    r_q_reg_2,
    r_q_reg_3);
  output out;
  input r_q_reg_0;
  input r_q_reg_1;
  input r_q_reg_2;
  input r_q_reg_3;

  (* RTL_KEEP = "true" *) wire out;
  wire r_q_reg_0;
  wire r_q_reg_1;
  wire r_q_reg_2;
  wire r_q_reg_3;
  wire ri_q;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h32)) 
    r_q_i_1__2
       (.I0(r_q_reg_2),
        .I1(r_q_reg_3),
        .I2(out),
        .O(ri_q));
  FDCE r_q_reg
       (.C(r_q_reg_0),
        .CE(1'b1),
        .CLR(r_q_reg_1),
        .D(ri_q),
        .Q(out));
endmodule

(* ORIG_REF_NAME = "sr_ff" *) 
module sr_ff__hierPathDup__1
   (out,
    r_q_reg_0,
    r_q_reg_1,
    r_q_reg_2,
    r_q_reg_3,
    r_q_reg_4,
    r_q_reg_5);
  output out;
  input r_q_reg_0;
  input r_q_reg_1;
  input [0:0]r_q_reg_2;
  input [0:0]r_q_reg_3;
  input r_q_reg_4;
  input r_q_reg_5;

  (* RTL_KEEP = "true" *) wire out;
  wire r_q_reg_0;
  wire r_q_reg_1;
  wire [0:0]r_q_reg_2;
  wire [0:0]r_q_reg_3;
  wire r_q_reg_4;
  wire r_q_reg_5;
  wire ri_q;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00EA0000)) 
    r_q_i_1__4
       (.I0(out),
        .I1(r_q_reg_2),
        .I2(r_q_reg_3),
        .I3(r_q_reg_4),
        .I4(r_q_reg_5),
        .O(ri_q));
  FDCE r_q_reg
       (.C(r_q_reg_0),
        .CE(1'b1),
        .CLR(r_q_reg_1),
        .D(ri_q),
        .Q(out));
endmodule

(* ORIG_REF_NAME = "sr_ff" *) 
module sr_ff__hierPathDup__2
   (out,
    r_q_reg_0,
    r_q_reg_1,
    r_q_reg_2,
    r_q_reg_3,
    r_q_reg_4);
  output out;
  input r_q_reg_0;
  input r_q_reg_1;
  input [1:0]r_q_reg_2;
  input r_q_reg_3;
  input [0:0]r_q_reg_4;

  (* RTL_KEEP = "true" *) wire out;
  wire r_q_reg_0;
  wire r_q_reg_1;
  wire [1:0]r_q_reg_2;
  wire r_q_reg_3;
  wire [0:0]r_q_reg_4;
  wire ri_q;

  LUT5 #(
    .INIT(32'h000E0A0A)) 
    r_q_i_1__3
       (.I0(out),
        .I1(r_q_reg_2[0]),
        .I2(r_q_reg_3),
        .I3(r_q_reg_2[1]),
        .I4(r_q_reg_4),
        .O(ri_q));
  FDCE r_q_reg
       (.C(r_q_reg_0),
        .CE(1'b1),
        .CLR(r_q_reg_1),
        .D(ri_q),
        .Q(out));
endmodule

(* ORIG_REF_NAME = "sr_ff" *) 
module sr_ff__hierPathDup__3
   (out,
    r_q_reg_0,
    r_q_reg_1,
    r_q_reg_2,
    r_q_reg_3);
  output out;
  input r_q_reg_0;
  input r_q_reg_1;
  input r_q_reg_2;
  input r_q_reg_3;

  (* RTL_KEEP = "true" *) wire out;
  wire r_q_i_1__5_n_0;
  wire r_q_reg_0;
  wire r_q_reg_1;
  wire r_q_reg_2;
  wire r_q_reg_3;

  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h0E)) 
    r_q_i_1__5
       (.I0(out),
        .I1(r_q_reg_2),
        .I2(r_q_reg_3),
        .O(r_q_i_1__5_n_0));
  FDCE r_q_reg
       (.C(r_q_reg_0),
        .CE(1'b1),
        .CLR(r_q_reg_1),
        .D(r_q_i_1__5_n_0),
        .Q(out));
endmodule

module sync_dual_port_ram
   (Q,
    \r_addr_b_reg[2]_0 ,
    o_data_b,
    out,
    o_trx_a_data_i_inferred_i_1,
    o_trx_a_data_i_inferred_i_1_0,
    \r_addr_a_reg[2]_0 ,
    D);
  output [2:0]Q;
  output [2:0]\r_addr_b_reg[2]_0 ;
  output [55:0]o_data_b;
  input out;
  input [55:0]o_trx_a_data_i_inferred_i_1;
  input o_trx_a_data_i_inferred_i_1_0;
  input [2:0]\r_addr_a_reg[2]_0 ;
  input [2:0]D;

  wire [2:0]D;
  wire [2:0]Q;
  (* RTL_KEEP = "true" *) wire [55:0]o_data_b;
  wire [55:0]o_trx_a_data_i_inferred_i_1;
  wire o_trx_a_data_i_inferred_i_1_0;
  wire out;
  wire [2:0]\r_addr_a_reg[2]_0 ;
  wire [2:0]\r_addr_b_reg[2]_0 ;
  wire [1:0]NLW_r_ram_reg_r2_0_7_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_30_35_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_36_41_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_42_47_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_48_53_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_r2_0_7_54_55_SPO_UNCONNECTED;
  wire NLW_r_ram_reg_r2_0_7_54_55__0_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_6_11_DOD_UNCONNECTED;

  FDRE \r_addr_a_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(\r_addr_a_reg[2]_0 [0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE \r_addr_a_reg[1] 
       (.C(out),
        .CE(1'b1),
        .D(\r_addr_a_reg[2]_0 [1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE \r_addr_a_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(\r_addr_a_reg[2]_0 [2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE \r_addr_b_reg[0] 
       (.C(out),
        .CE(1'b1),
        .D(D[0]),
        .Q(\r_addr_b_reg[2]_0 [0]),
        .R(1'b0));
  FDRE \r_addr_b_reg[1] 
       (.C(out),
        .CE(1'b1),
        .D(D[1]),
        .Q(\r_addr_b_reg[2]_0 [1]),
        .R(1'b0));
  FDRE \r_addr_b_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(D[2]),
        .Q(\r_addr_b_reg[2]_0 [2]),
        .R(1'b0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD192 r_ram_reg_r2_0_7_0_5
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[1:0]),
        .DIB(o_trx_a_data_i_inferred_i_1[3:2]),
        .DIC(o_trx_a_data_i_inferred_i_1[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[1:0]),
        .DOB(o_data_b[3:2]),
        .DOC(o_data_b[5:4]),
        .DOD(NLW_r_ram_reg_r2_0_7_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD193 r_ram_reg_r2_0_7_12_17
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[13:12]),
        .DIB(o_trx_a_data_i_inferred_i_1[15:14]),
        .DIC(o_trx_a_data_i_inferred_i_1[17:16]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[13:12]),
        .DOB(o_data_b[15:14]),
        .DOC(o_data_b[17:16]),
        .DOD(NLW_r_ram_reg_r2_0_7_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD194 r_ram_reg_r2_0_7_18_23
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[19:18]),
        .DIB(o_trx_a_data_i_inferred_i_1[21:20]),
        .DIC(o_trx_a_data_i_inferred_i_1[23:22]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[19:18]),
        .DOB(o_data_b[21:20]),
        .DOC(o_data_b[23:22]),
        .DOD(NLW_r_ram_reg_r2_0_7_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD195 r_ram_reg_r2_0_7_24_29
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[25:24]),
        .DIB(o_trx_a_data_i_inferred_i_1[27:26]),
        .DIC(o_trx_a_data_i_inferred_i_1[29:28]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[25:24]),
        .DOB(o_data_b[27:26]),
        .DOC(o_data_b[29:28]),
        .DOD(NLW_r_ram_reg_r2_0_7_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_30_35" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "35" *) 
  RAM32M_HD196 r_ram_reg_r2_0_7_30_35
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[31:30]),
        .DIB(o_trx_a_data_i_inferred_i_1[33:32]),
        .DIC(o_trx_a_data_i_inferred_i_1[35:34]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[31:30]),
        .DOB(o_data_b[33:32]),
        .DOC(o_data_b[35:34]),
        .DOD(NLW_r_ram_reg_r2_0_7_30_35_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_36_41" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "36" *) 
  (* ram_slice_end = "41" *) 
  RAM32M_HD197 r_ram_reg_r2_0_7_36_41
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[37:36]),
        .DIB(o_trx_a_data_i_inferred_i_1[39:38]),
        .DIC(o_trx_a_data_i_inferred_i_1[41:40]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[37:36]),
        .DOB(o_data_b[39:38]),
        .DOC(o_data_b[41:40]),
        .DOD(NLW_r_ram_reg_r2_0_7_36_41_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_42_47" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "47" *) 
  RAM32M_HD198 r_ram_reg_r2_0_7_42_47
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[43:42]),
        .DIB(o_trx_a_data_i_inferred_i_1[45:44]),
        .DIC(o_trx_a_data_i_inferred_i_1[47:46]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[43:42]),
        .DOB(o_data_b[45:44]),
        .DOC(o_data_b[47:46]),
        .DOD(NLW_r_ram_reg_r2_0_7_42_47_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_48_53" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "48" *) 
  (* ram_slice_end = "53" *) 
  RAM32M_HD199 r_ram_reg_r2_0_7_48_53
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[49:48]),
        .DIB(o_trx_a_data_i_inferred_i_1[51:50]),
        .DIC(o_trx_a_data_i_inferred_i_1[53:52]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[49:48]),
        .DOB(o_data_b[51:50]),
        .DOC(o_data_b[53:52]),
        .DOD(NLW_r_ram_reg_r2_0_7_48_53_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_test_core/inst_bank_p/r_ram_reg_r2_0_7_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD200 r_ram_reg_r2_0_7_54_55
       (.A0(\r_addr_a_reg[2]_0 [0]),
        .A1(\r_addr_a_reg[2]_0 [1]),
        .A2(\r_addr_a_reg[2]_0 [2]),
        .A3(1'b0),
        .A4(1'b0),
        .D(o_trx_a_data_i_inferred_i_1[54]),
        .DPO(o_data_b[54]),
        .DPRA0(\r_addr_b_reg[2]_0 [0]),
        .DPRA1(\r_addr_b_reg[2]_0 [1]),
        .DPRA2(\r_addr_b_reg[2]_0 [2]),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_r2_0_7_54_55_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_test_core/inst_bank_p/r_ram_reg_r2_0_7_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD201 r_ram_reg_r2_0_7_54_55__0
       (.A0(\r_addr_a_reg[2]_0 [0]),
        .A1(\r_addr_a_reg[2]_0 [1]),
        .A2(\r_addr_a_reg[2]_0 [2]),
        .A3(1'b0),
        .A4(1'b0),
        .D(o_trx_a_data_i_inferred_i_1[55]),
        .DPO(o_data_b[55]),
        .DPRA0(\r_addr_b_reg[2]_0 [0]),
        .DPRA1(\r_addr_b_reg[2]_0 [1]),
        .DPRA2(\r_addr_b_reg[2]_0 [2]),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_r2_0_7_54_55__0_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_p/r_ram_reg_r2_0_7_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD202 r_ram_reg_r2_0_7_6_11
       (.ADDRA({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRB({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRC({1'b0,1'b0,\r_addr_b_reg[2]_0 }),
        .ADDRD({1'b0,1'b0,\r_addr_a_reg[2]_0 }),
        .DIA(o_trx_a_data_i_inferred_i_1[7:6]),
        .DIB(o_trx_a_data_i_inferred_i_1[9:8]),
        .DIC(o_trx_a_data_i_inferred_i_1[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[7:6]),
        .DOB(o_data_b[9:8]),
        .DOC(o_data_b[11:10]),
        .DOD(NLW_r_ram_reg_r2_0_7_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(o_trx_a_data_i_inferred_i_1_0));
endmodule

(* ORIG_REF_NAME = "sync_dual_port_ram" *) 
module sync_dual_port_ram__hierPathDup__1
   (o_data_a,
    o_data_b,
    out,
    \r_pc_shift_out_reg[55] ,
    \r_pc_shift_out_reg[1] ,
    \r_pc_shift_out_reg[1]_0 ,
    Q,
    \r_pc_shift_out_reg[49] );
  output [55:0]o_data_a;
  output [55:0]o_data_b;
  input out;
  input [55:0]\r_pc_shift_out_reg[55] ;
  input \r_pc_shift_out_reg[1] ;
  input [2:0]\r_pc_shift_out_reg[1]_0 ;
  input [2:0]Q;
  input [2:0]\r_pc_shift_out_reg[49] ;

  wire [2:0]Q;
  (* RTL_KEEP = "true" *) wire [55:0]o_data_a;
  (* RTL_KEEP = "true" *) wire [55:0]o_data_b;
  wire out;
  wire \r_pc_shift_out_reg[1] ;
  wire [2:0]\r_pc_shift_out_reg[1]_0 ;
  wire [2:0]\r_pc_shift_out_reg[49] ;
  wire [55:0]\r_pc_shift_out_reg[55] ;
  wire [1:0]NLW_r_ram_reg_r1_0_7_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_30_35_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_36_41_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_42_47_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_48_53_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_r1_0_7_54_55_SPO_UNCONNECTED;
  wire NLW_r_ram_reg_r1_0_7_54_55__0_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r1_0_7_6_11_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_12_17_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_18_23_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_24_29_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_30_35_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_36_41_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_42_47_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_48_53_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_r2_0_7_54_55_SPO_UNCONNECTED;
  wire NLW_r_ram_reg_r2_0_7_54_55__0_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_r2_0_7_6_11_DOD_UNCONNECTED;

  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD159 r_ram_reg_r1_0_7_0_5
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [1:0]),
        .DIB(\r_pc_shift_out_reg[55] [3:2]),
        .DIC(\r_pc_shift_out_reg[55] [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[1:0]),
        .DOB(o_data_a[3:2]),
        .DOC(o_data_a[5:4]),
        .DOD(NLW_r_ram_reg_r1_0_7_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD160 r_ram_reg_r1_0_7_12_17
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [13:12]),
        .DIB(\r_pc_shift_out_reg[55] [15:14]),
        .DIC(\r_pc_shift_out_reg[55] [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[13:12]),
        .DOB(o_data_a[15:14]),
        .DOC(o_data_a[17:16]),
        .DOD(NLW_r_ram_reg_r1_0_7_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD161 r_ram_reg_r1_0_7_18_23
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [19:18]),
        .DIB(\r_pc_shift_out_reg[55] [21:20]),
        .DIC(\r_pc_shift_out_reg[55] [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[19:18]),
        .DOB(o_data_a[21:20]),
        .DOC(o_data_a[23:22]),
        .DOD(NLW_r_ram_reg_r1_0_7_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD162 r_ram_reg_r1_0_7_24_29
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [25:24]),
        .DIB(\r_pc_shift_out_reg[55] [27:26]),
        .DIC(\r_pc_shift_out_reg[55] [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[25:24]),
        .DOB(o_data_a[27:26]),
        .DOC(o_data_a[29:28]),
        .DOD(NLW_r_ram_reg_r1_0_7_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_30_35" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "35" *) 
  RAM32M_HD163 r_ram_reg_r1_0_7_30_35
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [31:30]),
        .DIB(\r_pc_shift_out_reg[55] [33:32]),
        .DIC(\r_pc_shift_out_reg[55] [35:34]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[31:30]),
        .DOB(o_data_a[33:32]),
        .DOC(o_data_a[35:34]),
        .DOD(NLW_r_ram_reg_r1_0_7_30_35_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_36_41" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "36" *) 
  (* ram_slice_end = "41" *) 
  RAM32M_HD164 r_ram_reg_r1_0_7_36_41
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [37:36]),
        .DIB(\r_pc_shift_out_reg[55] [39:38]),
        .DIC(\r_pc_shift_out_reg[55] [41:40]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[37:36]),
        .DOB(o_data_a[39:38]),
        .DOC(o_data_a[41:40]),
        .DOD(NLW_r_ram_reg_r1_0_7_36_41_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_42_47" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "47" *) 
  RAM32M_HD165 r_ram_reg_r1_0_7_42_47
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [43:42]),
        .DIB(\r_pc_shift_out_reg[55] [45:44]),
        .DIC(\r_pc_shift_out_reg[55] [47:46]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[43:42]),
        .DOB(o_data_a[45:44]),
        .DOC(o_data_a[47:46]),
        .DOD(NLW_r_ram_reg_r1_0_7_42_47_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_48_53" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "48" *) 
  (* ram_slice_end = "53" *) 
  RAM32M_HD166 r_ram_reg_r1_0_7_48_53
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [49:48]),
        .DIB(\r_pc_shift_out_reg[55] [51:50]),
        .DIC(\r_pc_shift_out_reg[55] [53:52]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[49:48]),
        .DOB(o_data_a[51:50]),
        .DOC(o_data_a[53:52]),
        .DOD(NLW_r_ram_reg_r1_0_7_48_53_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_test_core/inst_bank_l/r_ram_reg_r1_0_7_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD167 r_ram_reg_r1_0_7_54_55
       (.A0(\r_pc_shift_out_reg[1]_0 [0]),
        .A1(\r_pc_shift_out_reg[1]_0 [1]),
        .A2(\r_pc_shift_out_reg[1]_0 [2]),
        .A3(1'b0),
        .A4(1'b0),
        .D(\r_pc_shift_out_reg[55] [54]),
        .DPO(o_data_a[54]),
        .DPRA0(Q[0]),
        .DPRA1(Q[1]),
        .DPRA2(Q[2]),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_r1_0_7_54_55_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_test_core/inst_bank_l/r_ram_reg_r1_0_7_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD168 r_ram_reg_r1_0_7_54_55__0
       (.A0(\r_pc_shift_out_reg[1]_0 [0]),
        .A1(\r_pc_shift_out_reg[1]_0 [1]),
        .A2(\r_pc_shift_out_reg[1]_0 [2]),
        .A3(1'b0),
        .A4(1'b0),
        .D(\r_pc_shift_out_reg[55] [55]),
        .DPO(o_data_a[55]),
        .DPRA0(Q[0]),
        .DPRA1(Q[1]),
        .DPRA2(Q[2]),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_r1_0_7_54_55__0_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r1_0_7_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD169 r_ram_reg_r1_0_7_6_11
       (.ADDRA({1'b0,1'b0,Q}),
        .ADDRB({1'b0,1'b0,Q}),
        .ADDRC({1'b0,1'b0,Q}),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [7:6]),
        .DIB(\r_pc_shift_out_reg[55] [9:8]),
        .DIC(\r_pc_shift_out_reg[55] [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_a[7:6]),
        .DOB(o_data_a[9:8]),
        .DOC(o_data_a[11:10]),
        .DOD(NLW_r_ram_reg_r1_0_7_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD170 r_ram_reg_r2_0_7_0_5
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [1:0]),
        .DIB(\r_pc_shift_out_reg[55] [3:2]),
        .DIC(\r_pc_shift_out_reg[55] [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[1:0]),
        .DOB(o_data_b[3:2]),
        .DOC(o_data_b[5:4]),
        .DOD(NLW_r_ram_reg_r2_0_7_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD171 r_ram_reg_r2_0_7_12_17
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [13:12]),
        .DIB(\r_pc_shift_out_reg[55] [15:14]),
        .DIC(\r_pc_shift_out_reg[55] [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[13:12]),
        .DOB(o_data_b[15:14]),
        .DOC(o_data_b[17:16]),
        .DOD(NLW_r_ram_reg_r2_0_7_12_17_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD172 r_ram_reg_r2_0_7_18_23
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [19:18]),
        .DIB(\r_pc_shift_out_reg[55] [21:20]),
        .DIC(\r_pc_shift_out_reg[55] [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[19:18]),
        .DOB(o_data_b[21:20]),
        .DOC(o_data_b[23:22]),
        .DOD(NLW_r_ram_reg_r2_0_7_18_23_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD173 r_ram_reg_r2_0_7_24_29
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [25:24]),
        .DIB(\r_pc_shift_out_reg[55] [27:26]),
        .DIC(\r_pc_shift_out_reg[55] [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[25:24]),
        .DOB(o_data_b[27:26]),
        .DOC(o_data_b[29:28]),
        .DOD(NLW_r_ram_reg_r2_0_7_24_29_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_30_35" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "35" *) 
  RAM32M_HD174 r_ram_reg_r2_0_7_30_35
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [31:30]),
        .DIB(\r_pc_shift_out_reg[55] [33:32]),
        .DIC(\r_pc_shift_out_reg[55] [35:34]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[31:30]),
        .DOB(o_data_b[33:32]),
        .DOC(o_data_b[35:34]),
        .DOD(NLW_r_ram_reg_r2_0_7_30_35_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_36_41" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "36" *) 
  (* ram_slice_end = "41" *) 
  RAM32M_HD175 r_ram_reg_r2_0_7_36_41
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [37:36]),
        .DIB(\r_pc_shift_out_reg[55] [39:38]),
        .DIC(\r_pc_shift_out_reg[55] [41:40]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[37:36]),
        .DOB(o_data_b[39:38]),
        .DOC(o_data_b[41:40]),
        .DOD(NLW_r_ram_reg_r2_0_7_36_41_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_42_47" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "47" *) 
  RAM32M_HD176 r_ram_reg_r2_0_7_42_47
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [43:42]),
        .DIB(\r_pc_shift_out_reg[55] [45:44]),
        .DIC(\r_pc_shift_out_reg[55] [47:46]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[43:42]),
        .DOB(o_data_b[45:44]),
        .DOC(o_data_b[47:46]),
        .DOD(NLW_r_ram_reg_r2_0_7_42_47_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_48_53" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "48" *) 
  (* ram_slice_end = "53" *) 
  RAM32M_HD177 r_ram_reg_r2_0_7_48_53
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [49:48]),
        .DIB(\r_pc_shift_out_reg[55] [51:50]),
        .DIC(\r_pc_shift_out_reg[55] [53:52]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[49:48]),
        .DOB(o_data_b[51:50]),
        .DOC(o_data_b[53:52]),
        .DOD(NLW_r_ram_reg_r2_0_7_48_53_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_test_core/inst_bank_l/r_ram_reg_r2_0_7_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD178 r_ram_reg_r2_0_7_54_55
       (.A0(\r_pc_shift_out_reg[1]_0 [0]),
        .A1(\r_pc_shift_out_reg[1]_0 [1]),
        .A2(\r_pc_shift_out_reg[1]_0 [2]),
        .A3(1'b0),
        .A4(1'b0),
        .D(\r_pc_shift_out_reg[55] [54]),
        .DPO(o_data_b[54]),
        .DPRA0(\r_pc_shift_out_reg[49] [0]),
        .DPRA1(\r_pc_shift_out_reg[49] [1]),
        .DPRA2(\r_pc_shift_out_reg[49] [2]),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_r2_0_7_54_55_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_test_core/inst_bank_l/r_ram_reg_r2_0_7_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD179 r_ram_reg_r2_0_7_54_55__0
       (.A0(\r_pc_shift_out_reg[1]_0 [0]),
        .A1(\r_pc_shift_out_reg[1]_0 [1]),
        .A2(\r_pc_shift_out_reg[1]_0 [2]),
        .A3(1'b0),
        .A4(1'b0),
        .D(\r_pc_shift_out_reg[55] [55]),
        .DPO(o_data_b[55]),
        .DPRA0(\r_pc_shift_out_reg[49] [0]),
        .DPRA1(\r_pc_shift_out_reg[49] [1]),
        .DPRA2(\r_pc_shift_out_reg[49] [2]),
        .DPRA3(1'b0),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_r2_0_7_54_55__0_SPO_UNCONNECTED),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "448" *) 
  (* RTL_RAM_NAME = "inst_bank_l/r_ram_reg_r2_0_7_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "7" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD180 r_ram_reg_r2_0_7_6_11
       (.ADDRA({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRB({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRC({1'b0,1'b0,\r_pc_shift_out_reg[49] }),
        .ADDRD({1'b0,1'b0,\r_pc_shift_out_reg[1]_0 }),
        .DIA(\r_pc_shift_out_reg[55] [7:6]),
        .DIB(\r_pc_shift_out_reg[55] [9:8]),
        .DIC(\r_pc_shift_out_reg[55] [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(o_data_b[7:6]),
        .DOB(o_data_b[9:8]),
        .DOC(o_data_b[11:10]),
        .DOD(NLW_r_ram_reg_r2_0_7_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(out),
        .WE(\r_pc_shift_out_reg[1] ));
endmodule

module sync_fifo
   (out,
    o_full,
    o_empty,
    r_empty_reg_0,
    \r_rd_ptr_reg[6]_0 ,
    \r_wr_ptr_reg[0]_0 ,
    \r_rd_ptr_reg[3]_0 ,
    I9);
  output [7:0]out;
  output o_full;
  output o_empty;
  input r_empty_reg_0;
  input \r_rd_ptr_reg[6]_0 ;
  input \r_wr_ptr_reg[0]_0 ;
  input \r_rd_ptr_reg[3]_0 ;
  input [7:0]I9;

  wire [7:0]I9;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire o_full;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire r_empty_i_1_n_0;
  wire r_empty_i_2_n_0;
  wire r_empty_i_3_n_0;
  wire r_empty_i_4_n_0;
  wire r_empty_i_5_n_0;
  wire r_empty_i_6_n_0;
  wire r_empty_i_7_n_0;
  wire r_empty_reg_0;
  wire [6:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[3]_0 ;
  wire \r_rd_ptr_reg[6]_0 ;
  wire [5:0]r_rd_ptr_reg_rep;
  wire \r_rd_ptr_rep[5]_i_2_n_0 ;
  wire \r_wr_ptr[0]_i_1_n_0 ;
  wire \r_wr_ptr[1]_i_1_n_0 ;
  wire \r_wr_ptr[2]_i_1_n_0 ;
  wire \r_wr_ptr[3]_i_1_n_0 ;
  wire \r_wr_ptr[4]_i_1_n_0 ;
  wire \r_wr_ptr[5]_i_1_n_0 ;
  wire \r_wr_ptr[6]_i_2_n_0 ;
  wire \r_wr_ptr_reg[0]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire \r_wr_ptr_reg_n_0_[5] ;
  wire \r_wr_ptr_reg_n_0_[6] ;
  wire ram_wr__0;
  wire ri_full;
  wire [5:0]ri_rd_ptr;
  wire [6:6]ri_rd_ptr__0;
  wire [6:6]ri_wr_ptr;
  wire NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_7_DOC_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_7_DOD_UNCONNECTED;

  LUT4 #(
    .INIT(16'h2000)) 
    r_empty_i_1
       (.I0(r_empty_i_2_n_0),
        .I1(r_empty_i_3_n_0),
        .I2(r_empty_i_4_n_0),
        .I3(r_empty_i_5_n_0),
        .O(r_empty_i_1_n_0));
  LUT5 #(
    .INIT(32'h69999999)) 
    r_empty_i_2
       (.I0(ri_rd_ptr[5]),
        .I1(\r_wr_ptr_reg_n_0_[5] ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(\r_wr_ptr[6]_i_2_n_0 ),
        .O(r_empty_i_2_n_0));
  LUT6 #(
    .INIT(64'h955555556AAAAAAA)) 
    r_empty_i_3
       (.I0(r_rd_ptr_reg[6]),
        .I1(r_rd_ptr_reg[3]),
        .I2(r_rd_ptr_reg[4]),
        .I3(r_rd_ptr_reg[5]),
        .I4(\r_rd_ptr_rep[5]_i_2_n_0 ),
        .I5(ri_wr_ptr),
        .O(r_empty_i_3_n_0));
  LUT6 #(
    .INIT(64'h0990600900000000)) 
    r_empty_i_4
       (.I0(ri_rd_ptr[2]),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(r_empty_i_6_n_0),
        .I3(\r_wr_ptr_reg_n_0_[1] ),
        .I4(ri_rd_ptr[1]),
        .I5(r_empty_i_7_n_0),
        .O(r_empty_i_4_n_0));
  LUT6 #(
    .INIT(64'hD2D22DD22D2DD22D)) 
    r_empty_i_5
       (.I0(\r_rd_ptr_reg[3]_0 ),
        .I1(o_empty),
        .I2(r_rd_ptr_reg[0]),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(o_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    r_empty_i_6
       (.I0(o_full),
        .I1(\r_wr_ptr_reg[0]_0 ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_6_n_0));
  LUT6 #(
    .INIT(64'h8160601818060681)) 
    r_empty_i_7
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr[6]_i_2_n_0 ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr_rep[5]_i_2_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_7_n_0));
  FDPE r_empty_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .D(r_empty_i_1_n_0),
        .PRE(\r_rd_ptr_reg[6]_0 ),
        .Q(o_empty));
  LUT4 #(
    .INIT(16'h8000)) 
    r_full_i_1
       (.I0(r_empty_i_2_n_0),
        .I1(r_empty_i_3_n_0),
        .I2(r_empty_i_4_n_0),
        .I3(r_empty_i_5_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_full),
        .Q(o_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "inst_pc_interface_top/inst_pc_interface/inst_sync_fifo_tx/r_ram_reg_0_63_0_2" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M_HD205 r_ram_reg_0_63_0_2
       (.ADDRA(r_rd_ptr_reg_rep),
        .ADDRB(r_rd_ptr_reg_rep),
        .ADDRC(r_rd_ptr_reg_rep),
        .ADDRD({\r_wr_ptr_reg_n_0_[5] ,\r_wr_ptr_reg_n_0_[4] ,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I9[0]),
        .DIB(I9[1]),
        .DIC(I9[2]),
        .DID(1'b0),
        .DOA(out[0]),
        .DOB(out[1]),
        .DOC(out[2]),
        .DOD(NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(ram_wr__0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_63_0_2_i_1__3
       (.I0(\r_wr_ptr_reg[0]_0 ),
        .I1(o_full),
        .O(ram_wr__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "inst_pc_interface_top/inst_pc_interface/inst_sync_fifo_tx/r_ram_reg_0_63_3_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M_HD206 r_ram_reg_0_63_3_5
       (.ADDRA(r_rd_ptr_reg_rep),
        .ADDRB(r_rd_ptr_reg_rep),
        .ADDRC(r_rd_ptr_reg_rep),
        .ADDRD({\r_wr_ptr_reg_n_0_[5] ,\r_wr_ptr_reg_n_0_[4] ,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I9[3]),
        .DIB(I9[4]),
        .DIC(I9[5]),
        .DID(1'b0),
        .DOA(out[3]),
        .DOB(out[4]),
        .DOC(out[5]),
        .DOD(NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(ram_wr__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "inst_pc_interface_top/inst_pc_interface/inst_sync_fifo_tx/r_ram_reg_0_63_6_7" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "7" *) 
  RAM64M_HD207 r_ram_reg_0_63_6_7
       (.ADDRA(r_rd_ptr_reg_rep),
        .ADDRB(r_rd_ptr_reg_rep),
        .ADDRC(r_rd_ptr_reg_rep),
        .ADDRD({\r_wr_ptr_reg_n_0_[5] ,\r_wr_ptr_reg_n_0_[4] ,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I9[6]),
        .DIB(I9[7]),
        .DIC(1'b0),
        .DID(1'b0),
        .DOA(out[6]),
        .DOB(out[7]),
        .DOC(NLW_r_ram_reg_0_63_6_7_DOC_UNCONNECTED),
        .DOD(NLW_r_ram_reg_0_63_6_7_DOD_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(ram_wr__0));
  (* \PinAttr:I1:HOLD_DETOUR  = "190" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_rd_ptr[6]_i_1 
       (.I0(\r_rd_ptr_rep[5]_i_2_n_0 ),
        .I1(r_rd_ptr_reg[5]),
        .I2(r_rd_ptr_reg[4]),
        .I3(r_rd_ptr_reg[3]),
        .I4(r_rd_ptr_reg[6]),
        .O(ri_rd_ptr__0));
  FDCE \r_rd_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[4]),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg[5] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[5]),
        .Q(r_rd_ptr_reg[5]));
  FDCE \r_rd_ptr_reg[6] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[6]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  FDCE \r_rd_ptr_reg_rep[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[4]),
        .Q(r_rd_ptr_reg_rep[4]));
  FDCE \r_rd_ptr_reg_rep[5] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[5]),
        .Q(r_rd_ptr_reg_rep[5]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_rd_ptr_rep[1]_i_1 
       (.I0(r_rd_ptr_reg[0]),
        .I1(\r_rd_ptr_reg[3]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[1]));
  (* \PinAttr:I4:HOLD_DETOUR  = "179" *) 
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \r_rd_ptr_rep[2]_i_1 
       (.I0(r_rd_ptr_reg[1]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .I3(r_rd_ptr_reg[0]),
        .I4(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_rd_ptr_rep[3]_i_1 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[1]),
        .I5(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_rep[4]_i_1 
       (.I0(r_rd_ptr_reg[3]),
        .I1(\r_rd_ptr_rep[5]_i_2_n_0 ),
        .I2(r_rd_ptr_reg[4]),
        .O(ri_rd_ptr[4]));
  (* \PinAttr:I3:HOLD_DETOUR  = "190" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_rd_ptr_rep[5]_i_1 
       (.I0(\r_rd_ptr_rep[5]_i_2_n_0 ),
        .I1(r_rd_ptr_reg[3]),
        .I2(r_rd_ptr_reg[4]),
        .I3(r_rd_ptr_reg[5]),
        .O(ri_rd_ptr[5]));
  (* \PinAttr:I4:HOLD_DETOUR  = "179" *) 
  LUT5 #(
    .INIT(32'h20000000)) 
    \r_rd_ptr_rep[5]_i_2 
       (.I0(r_rd_ptr_reg[1]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .I3(r_rd_ptr_reg[0]),
        .I4(r_rd_ptr_reg[2]),
        .O(\r_rd_ptr_rep[5]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(o_full),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .O(\r_wr_ptr[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_wr_ptr[1]_i_1 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(\r_wr_ptr_reg[0]_0 ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \r_wr_ptr[2]_i_1 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(o_full),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .I4(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_wr_ptr[3]_i_1 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .I3(o_full),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(\r_wr_ptr[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr[4]_i_1 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(ram_wr__0),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .I4(\r_wr_ptr_reg_n_0_[2] ),
        .I5(\r_wr_ptr_reg_n_0_[4] ),
        .O(\r_wr_ptr[4]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_wr_ptr[5]_i_1 
       (.I0(\r_wr_ptr[6]_i_2_n_0 ),
        .I1(\r_wr_ptr_reg_n_0_[3] ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(\r_wr_ptr_reg_n_0_[5] ),
        .O(\r_wr_ptr[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_wr_ptr[6]_i_1 
       (.I0(\r_wr_ptr[6]_i_2_n_0 ),
        .I1(\r_wr_ptr_reg_n_0_[5] ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(\r_wr_ptr_reg_n_0_[6] ),
        .O(ri_wr_ptr));
  LUT5 #(
    .INIT(32'h20000000)) 
    \r_wr_ptr[6]_i_2 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(o_full),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .I4(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[6]_i_2_n_0 ));
  FDCE \r_wr_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[0]_i_1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[1]_i_1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[2]_i_1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[3]_i_1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[4]_i_1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
  FDCE \r_wr_ptr_reg[5] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[5]_i_1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[5] ));
  FDCE \r_wr_ptr_reg[6] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_rd_ptr_reg[6]_0 ),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[6] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__hierPathDup__1
   (out,
    o_full,
    o_empty,
    r_empty_reg_0,
    \r_wr_ptr_reg[6]_0 ,
    \r_wr_ptr_reg[3]_0 ,
    \r_rd_ptr_reg[0]_0 ,
    I3);
  output [7:0]out;
  output o_full;
  output o_empty;
  input r_empty_reg_0;
  input \r_wr_ptr_reg[6]_0 ;
  input \r_wr_ptr_reg[3]_0 ;
  input \r_rd_ptr_reg[0]_0 ;
  input [7:0]I3;

  wire [7:0]I3;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire \^o_full ;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire r_empty_i_2__0_n_0;
  wire r_empty_i_3__0_n_0;
  wire r_empty_i_4__0_n_0;
  wire r_empty_i_5__0_n_0;
  wire r_empty_i_6__0_n_0;
  wire r_empty_i_7__0_n_0;
  wire r_empty_reg_0;
  wire [6:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire [5:0]r_rd_ptr_reg_rep;
  wire \r_rd_ptr_rep[5]_i_2__0_n_0 ;
  wire \r_wr_ptr[0]_i_1__0_n_0 ;
  wire \r_wr_ptr[1]_i_1__0_n_0 ;
  wire \r_wr_ptr[2]_i_1__0_n_0 ;
  wire \r_wr_ptr[3]_i_1__0_n_0 ;
  wire \r_wr_ptr[4]_i_1__0_n_0 ;
  wire \r_wr_ptr[5]_i_1__0_n_0 ;
  wire \r_wr_ptr[6]_i_2__0_n_0 ;
  wire \r_wr_ptr_reg[3]_0 ;
  wire \r_wr_ptr_reg[6]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire \r_wr_ptr_reg_n_0_[5] ;
  wire \r_wr_ptr_reg_n_0_[6] ;
  wire ram_wr__0;
  wire ri_empty;
  wire ri_full;
  wire [5:0]ri_rd_ptr;
  wire [6:6]ri_rd_ptr__0;
  wire [6:6]ri_wr_ptr;
  wire NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_7_DOC_UNCONNECTED;
  wire NLW_r_ram_reg_0_63_6_7_DOD_UNCONNECTED;

  LUT4 #(
    .INIT(16'h2000)) 
    r_empty_i_1__0
       (.I0(r_empty_i_2__0_n_0),
        .I1(r_empty_i_3__0_n_0),
        .I2(r_empty_i_4__0_n_0),
        .I3(r_empty_i_5__0_n_0),
        .O(ri_empty));
  LUT5 #(
    .INIT(32'h69999999)) 
    r_empty_i_2__0
       (.I0(ri_rd_ptr[5]),
        .I1(\r_wr_ptr_reg_n_0_[5] ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(\r_wr_ptr[6]_i_2__0_n_0 ),
        .O(r_empty_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h955555556AAAAAAA)) 
    r_empty_i_3__0
       (.I0(r_rd_ptr_reg[6]),
        .I1(r_rd_ptr_reg[3]),
        .I2(r_rd_ptr_reg[4]),
        .I3(r_rd_ptr_reg[5]),
        .I4(\r_rd_ptr_rep[5]_i_2__0_n_0 ),
        .I5(ri_wr_ptr),
        .O(r_empty_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h0990600900000000)) 
    r_empty_i_4__0
       (.I0(ri_rd_ptr[2]),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(r_empty_i_6__0_n_0),
        .I3(\r_wr_ptr_reg_n_0_[1] ),
        .I4(ri_rd_ptr[1]),
        .I5(r_empty_i_7__0_n_0),
        .O(r_empty_i_4__0_n_0));
  LUT6 #(
    .INIT(64'hD2D22DD22D2DD22D)) 
    r_empty_i_5__0
       (.I0(\r_rd_ptr_reg[0]_0 ),
        .I1(o_empty),
        .I2(r_rd_ptr_reg[0]),
        .I3(\r_wr_ptr_reg[3]_0 ),
        .I4(\^o_full ),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__0_n_0));
  LUT3 #(
    .INIT(8'h40)) 
    r_empty_i_6__0
       (.I0(\^o_full ),
        .I1(\r_wr_ptr_reg[3]_0 ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_6__0_n_0));
  LUT6 #(
    .INIT(64'h8160601818060681)) 
    r_empty_i_7__0
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr[6]_i_2__0_n_0 ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr_rep[5]_i_2__0_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_7__0_n_0));
  FDPE r_empty_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .D(ri_empty),
        .PRE(\r_wr_ptr_reg[6]_0 ),
        .Q(o_empty));
  LUT4 #(
    .INIT(16'h8000)) 
    r_full_i_1__0
       (.I0(r_empty_i_2__0_n_0),
        .I1(r_empty_i_3__0_n_0),
        .I2(r_empty_i_4__0_n_0),
        .I3(r_empty_i_5__0_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_full),
        .Q(\^o_full ));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "inst_pc_interface_top/inst_pc_interface/inst_sync_fifo_rx/r_ram_reg_0_63_0_2" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "2" *) 
  RAM64M_UNIQ_BASE_ r_ram_reg_0_63_0_2
       (.ADDRA(r_rd_ptr_reg_rep),
        .ADDRB(r_rd_ptr_reg_rep),
        .ADDRC(r_rd_ptr_reg_rep),
        .ADDRD({\r_wr_ptr_reg_n_0_[5] ,\r_wr_ptr_reg_n_0_[4] ,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I3[0]),
        .DIB(I3[1]),
        .DIC(I3[2]),
        .DID(1'b0),
        .DOA(out[0]),
        .DOB(out[1]),
        .DOC(out[2]),
        .DOD(NLW_r_ram_reg_0_63_0_2_DOD_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(ram_wr__0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_63_0_2_i_1__4
       (.I0(\r_wr_ptr_reg[3]_0 ),
        .I1(\^o_full ),
        .O(ram_wr__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "inst_pc_interface_top/inst_pc_interface/inst_sync_fifo_rx/r_ram_reg_0_63_3_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "5" *) 
  RAM64M_HD203 r_ram_reg_0_63_3_5
       (.ADDRA(r_rd_ptr_reg_rep),
        .ADDRB(r_rd_ptr_reg_rep),
        .ADDRC(r_rd_ptr_reg_rep),
        .ADDRD({\r_wr_ptr_reg_n_0_[5] ,\r_wr_ptr_reg_n_0_[4] ,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I3[3]),
        .DIB(I3[4]),
        .DIC(I3[5]),
        .DID(1'b0),
        .DOA(out[3]),
        .DOB(out[4]),
        .DOC(out[5]),
        .DOD(NLW_r_ram_reg_0_63_3_5_DOD_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(ram_wr__0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "512" *) 
  (* RTL_RAM_NAME = "inst_pc_interface_top/inst_pc_interface/inst_sync_fifo_rx/r_ram_reg_0_63_6_7" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "7" *) 
  RAM64M_HD204 r_ram_reg_0_63_6_7
       (.ADDRA(r_rd_ptr_reg_rep),
        .ADDRB(r_rd_ptr_reg_rep),
        .ADDRC(r_rd_ptr_reg_rep),
        .ADDRD({\r_wr_ptr_reg_n_0_[5] ,\r_wr_ptr_reg_n_0_[4] ,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I3[6]),
        .DIB(I3[7]),
        .DIC(1'b0),
        .DID(1'b0),
        .DOA(out[6]),
        .DOB(out[7]),
        .DOC(NLW_r_ram_reg_0_63_6_7_DOC_UNCONNECTED),
        .DOD(NLW_r_ram_reg_0_63_6_7_DOD_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(ram_wr__0));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_rd_ptr[6]_i_1__0 
       (.I0(\r_rd_ptr_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_reg[5]),
        .I2(r_rd_ptr_reg[4]),
        .I3(r_rd_ptr_reg[3]),
        .I4(r_rd_ptr_reg[6]),
        .O(ri_rd_ptr__0));
  FDCE \r_rd_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[4]),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg[5] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[5]),
        .Q(r_rd_ptr_reg[5]));
  FDCE \r_rd_ptr_reg[6] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[6]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  FDCE \r_rd_ptr_reg_rep[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[4]),
        .Q(r_rd_ptr_reg_rep[4]));
  FDCE \r_rd_ptr_reg_rep[5] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_rd_ptr[5]),
        .Q(r_rd_ptr_reg_rep[5]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__0 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_rd_ptr_rep[1]_i_1__0 
       (.I0(r_rd_ptr_reg[0]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \r_rd_ptr_rep[2]_i_1__0 
       (.I0(r_rd_ptr_reg[1]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(r_rd_ptr_reg[0]),
        .I4(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_rd_ptr_rep[3]_i_1__0 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[1]),
        .I5(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h78)) 
    \r_rd_ptr_rep[4]_i_1__0 
       (.I0(r_rd_ptr_reg[3]),
        .I1(\r_rd_ptr_rep[5]_i_2__0_n_0 ),
        .I2(r_rd_ptr_reg[4]),
        .O(ri_rd_ptr[4]));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_rd_ptr_rep[5]_i_1__0 
       (.I0(\r_rd_ptr_rep[5]_i_2__0_n_0 ),
        .I1(r_rd_ptr_reg[3]),
        .I2(r_rd_ptr_reg[4]),
        .I3(r_rd_ptr_reg[5]),
        .O(ri_rd_ptr[5]));
  LUT5 #(
    .INIT(32'h20000000)) 
    \r_rd_ptr_rep[5]_i_2__0 
       (.I0(r_rd_ptr_reg[1]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(r_rd_ptr_reg[0]),
        .I4(r_rd_ptr_reg[2]),
        .O(\r_rd_ptr_rep[5]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__0 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(\^o_full ),
        .I2(\r_wr_ptr_reg[3]_0 ),
        .O(\r_wr_ptr[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hF708)) 
    \r_wr_ptr[1]_i_1__0 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(\r_wr_ptr_reg[3]_0 ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hDFFF2000)) 
    \r_wr_ptr[2]_i_1__0 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\^o_full ),
        .I2(\r_wr_ptr_reg[3]_0 ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .I4(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFF7FFFFF00800000)) 
    \r_wr_ptr[3]_i_1__0 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(\r_wr_ptr_reg[3]_0 ),
        .I3(\^o_full ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(\r_wr_ptr[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \r_wr_ptr[4]_i_1__0 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(ram_wr__0),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .I4(\r_wr_ptr_reg_n_0_[2] ),
        .I5(\r_wr_ptr_reg_n_0_[4] ),
        .O(\r_wr_ptr[4]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'h7F80)) 
    \r_wr_ptr[5]_i_1__0 
       (.I0(\r_wr_ptr[6]_i_2__0_n_0 ),
        .I1(\r_wr_ptr_reg_n_0_[3] ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(\r_wr_ptr_reg_n_0_[5] ),
        .O(\r_wr_ptr[5]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \r_wr_ptr[6]_i_1__0 
       (.I0(\r_wr_ptr[6]_i_2__0_n_0 ),
        .I1(\r_wr_ptr_reg_n_0_[5] ),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(\r_wr_ptr_reg_n_0_[6] ),
        .O(ri_wr_ptr));
  LUT5 #(
    .INIT(32'h20000000)) 
    \r_wr_ptr[6]_i_2__0 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\^o_full ),
        .I2(\r_wr_ptr_reg[3]_0 ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .I4(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[6]_i_2__0_n_0 ));
  FDCE \r_wr_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[0]_i_1__0_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[1]_i_1__0_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[2]_i_1__0_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[3]_i_1__0_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[4]_i_1__0_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
  FDCE \r_wr_ptr_reg[5] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(\r_wr_ptr[5]_i_1__0_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[5] ));
  FDCE \r_wr_ptr_reg[6] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(\r_wr_ptr_reg[6]_0 ),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[6] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized0
   (out,
    o_full,
    o_empty,
    r_full_reg_0,
    r_full_reg_1,
    \r_wr_ptr_reg[1]_0 ,
    \r_rd_ptr_reg[3]_0 ,
    I262);
  output [15:0]out;
  output o_full;
  output o_empty;
  input r_full_reg_0;
  input r_full_reg_1;
  input \r_wr_ptr_reg[1]_0 ;
  input \r_rd_ptr_reg[3]_0 ;
  input [15:0]I262;

  wire [15:0]I262;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire \^o_full ;
  (* RTL_KEEP = "true" *) wire [15:0]out;
  wire r_empty_i_1__12_n_0;
  wire r_empty_i_2__11_n_0;
  wire r_empty_i_3__11_n_0;
  wire r_empty_i_4__8_n_0;
  wire r_empty_i_5__7_n_0;
  wire r_empty_i_6__7_n_0;
  wire r_full_reg_0;
  wire r_full_reg_1;
  wire r_ram_reg_0_15_0_5_i_1__1_n_0;
  wire \r_rd_ptr[4]_i_2__4_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[3]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__6_n_0 ;
  wire \r_wr_ptr[1]_i_1__6_n_0 ;
  wire \r_wr_ptr[2]_i_1__6_n_0 ;
  wire \r_wr_ptr[3]_i_1__6_n_0 ;
  wire \r_wr_ptr_reg[1]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOA_UNCONNECTED;
  wire [0:0]NLW_r_ram_reg_0_15_12_15_DOB_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOA_UNCONNECTED;
  wire [1:1]NLW_r_ram_reg_0_15_6_11_DOB_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__12
       (.I0(r_empty_i_2__11_n_0),
        .I1(r_empty_i_3__11_n_0),
        .O(r_empty_i_1__12_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__11
       (.I0(r_empty_i_4__8_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__7_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__11_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__11
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__7_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__4_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__11_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__8
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\^o_full ),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__8_n_0));
  (* \PinAttr:I0:HOLD_DETOUR  = "196" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__7
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__7_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__7
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__7_n_0));
  FDPE r_empty_reg
       (.C(r_full_reg_0),
        .CE(1'b1),
        .D(r_empty_i_1__12_n_0),
        .PRE(r_full_reg_1),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__11
       (.I0(r_empty_i_2__11_n_0),
        .I1(r_empty_i_3__11_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_full),
        .Q(\^o_full ));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__1
       (.I0(\r_wr_ptr_reg[1]_0 ),
        .I1(\^o_full ),
        .O(r_ram_reg_0_15_0_5_i_1__1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_12_15" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "15" *) 
  RAM32M_HD260 r_ram_reg_0_15_12_15
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I262[13:12]),
        .DIB(I262[15:14]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(NLW_r_ram_reg_0_15_12_15_DOA_UNCONNECTED[1:0]),
        .DOB({out[15],NLW_r_ram_reg_0_15_12_15_DOB_UNCONNECTED[0]}),
        .DOC(NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED[1:0]),
        .WCLK(r_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__1_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD261 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I262[7:6]),
        .DIB(I262[9:8]),
        .DIC(I262[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(NLW_r_ram_reg_0_15_6_11_DOA_UNCONNECTED[1:0]),
        .DOB({NLW_r_ram_reg_0_15_6_11_DOB_UNCONNECTED[1],out[8]}),
        .DOC(NLW_r_ram_reg_0_15_6_11_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(r_full_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__1_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__4 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__4_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__4 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[3]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__4_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__6 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__6 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[3]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__6 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[3]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__6 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__6 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(\^o_full ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .O(\r_wr_ptr[0]_i_1__6_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "196" *) 
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__6 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__6_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__6 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__6 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .I3(\^o_full ),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__6_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__6 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__1_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(\r_wr_ptr[0]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(\r_wr_ptr[1]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(\r_wr_ptr[2]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(\r_wr_ptr[3]_i_1__6_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(r_full_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_1),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized0__hierPathDup__1
   (out,
    o_full,
    o_empty,
    \r_rd_ptr_reg[4]_0 ,
    r_empty_reg_0,
    \r_wr_ptr_reg[0]_0 ,
    \r_rd_ptr_reg[0]_0 ,
    I81);
  output [15:0]out;
  output o_full;
  output o_empty;
  input \r_rd_ptr_reg[4]_0 ;
  input r_empty_reg_0;
  input \r_wr_ptr_reg[0]_0 ;
  input \r_rd_ptr_reg[0]_0 ;
  input [15:0]I81;

  wire [15:0]I81;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire o_full;
  (* RTL_KEEP = "true" *) wire [15:0]out;
  wire r_empty_i_1__3_n_0;
  wire r_empty_i_2__3_n_0;
  wire r_empty_i_3__2_n_0;
  wire r_empty_i_4__2_n_0;
  wire r_empty_i_5__2_n_0;
  wire r_empty_i_6__2_n_0;
  wire r_empty_reg_0;
  wire r_ram_reg_0_15_0_5_i_1__3_n_0;
  wire \r_rd_ptr[4]_i_2_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire \r_rd_ptr_reg[4]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__1_n_0 ;
  wire \r_wr_ptr[1]_i_1__1_n_0 ;
  wire \r_wr_ptr[2]_i_1__1_n_0 ;
  wire \r_wr_ptr[3]_i_1__1_n_0 ;
  wire \r_wr_ptr_reg[0]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__3
       (.I0(r_empty_i_2__3_n_0),
        .I1(r_empty_i_3__2_n_0),
        .O(r_empty_i_1__3_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__3
       (.I0(r_empty_i_4__2_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__2_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__3_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__2
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__2_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__2
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(o_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__2_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__2
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[0]_0 ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__2_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__2
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__2_n_0));
  FDPE r_empty_reg
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .D(r_empty_i_1__3_n_0),
        .PRE(r_empty_reg_0),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__3
       (.I0(r_empty_i_2__3_n_0),
        .I1(r_empty_i_3__2_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_full),
        .Q(o_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD232 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I81[1:0]),
        .DIB(I81[3:2]),
        .DIC(I81[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC(out[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__3_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__3
       (.I0(\r_wr_ptr_reg[0]_0 ),
        .I1(o_full),
        .O(r_ram_reg_0_15_0_5_i_1__3_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_12_15" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "15" *) 
  RAM32M_HD233 r_ram_reg_0_15_12_15
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I81[13:12]),
        .DIB(I81[15:14]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(out[13:12]),
        .DOB(out[15:14]),
        .DOC(NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__3_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD234 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I81[7:6]),
        .DIB(I81[9:8]),
        .DIC(I81[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(out[7:6]),
        .DOB(out[9:8]),
        .DOC(out[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__3_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__1 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__1 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__1 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__1 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__1 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(o_full),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .O(\r_wr_ptr[0]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__1 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[0]_0 ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__1 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__1 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .I3(o_full),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__1 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__3_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[0]_i_1__1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[1]_i_1__1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[2]_i_1__1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[3]_i_1__1_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized0__hierPathDup__2
   (out,
    o_full,
    o_empty,
    \r_wr_ptr_reg[4]_0 ,
    r_full_reg_0,
    \r_wr_ptr_reg[1]_0 ,
    \r_rd_ptr_reg[3]_0 ,
    I100);
  output [15:0]out;
  output o_full;
  output o_empty;
  input \r_wr_ptr_reg[4]_0 ;
  input r_full_reg_0;
  input \r_wr_ptr_reg[1]_0 ;
  input \r_rd_ptr_reg[3]_0 ;
  input [15:0]I100;

  wire [15:0]I100;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire \^o_full ;
  (* RTL_KEEP = "true" *) wire [15:0]out;
  wire r_empty_i_1__5_n_0;
  wire r_empty_i_2__5_n_0;
  wire r_empty_i_3__4_n_0;
  wire r_empty_i_4__4_n_0;
  wire r_empty_i_5__4_n_0;
  wire r_empty_i_6__4_n_0;
  wire r_full_reg_0;
  wire r_ram_reg_0_15_0_5_i_1__0_n_0;
  wire \r_rd_ptr[4]_i_2__1_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[3]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__3_n_0 ;
  wire \r_wr_ptr[1]_i_1__3_n_0 ;
  wire \r_wr_ptr[2]_i_1__3_n_0 ;
  wire \r_wr_ptr[3]_i_1__3_n_0 ;
  wire \r_wr_ptr_reg[1]_0 ;
  wire \r_wr_ptr_reg[4]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOA_UNCONNECTED;
  wire [0:0]NLW_r_ram_reg_0_15_12_15_DOB_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOA_UNCONNECTED;
  wire [1:1]NLW_r_ram_reg_0_15_6_11_DOB_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__5
       (.I0(r_empty_i_2__5_n_0),
        .I1(r_empty_i_3__4_n_0),
        .O(r_empty_i_1__5_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__5
       (.I0(r_empty_i_4__4_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__4_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__5_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__4
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__4_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__1_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__4_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__4
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\^o_full ),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__4_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__4
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__4_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__4
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__4_n_0));
  FDPE r_empty_reg
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .D(r_empty_i_1__5_n_0),
        .PRE(r_full_reg_0),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__5
       (.I0(r_empty_i_2__5_n_0),
        .I1(r_empty_i_3__4_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_full),
        .Q(\^o_full ));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__0
       (.I0(\r_wr_ptr_reg[1]_0 ),
        .I1(\^o_full ),
        .O(r_ram_reg_0_15_0_5_i_1__0_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_12_15" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "15" *) 
  RAM32M_HD219 r_ram_reg_0_15_12_15
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I100[13:12]),
        .DIB(I100[15:14]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(NLW_r_ram_reg_0_15_12_15_DOA_UNCONNECTED[1:0]),
        .DOB({out[15],NLW_r_ram_reg_0_15_12_15_DOB_UNCONNECTED[0]}),
        .DOC(NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__0_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD220 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I100[7:6]),
        .DIB(I100[9:8]),
        .DIC(I100[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(NLW_r_ram_reg_0_15_6_11_DOA_UNCONNECTED[1:0]),
        .DOB({NLW_r_ram_reg_0_15_6_11_DOB_UNCONNECTED[1],out[8]}),
        .DOC(NLW_r_ram_reg_0_15_6_11_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_wr_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__1 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__1_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__1 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[3]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__1_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__3 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__3 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[3]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__3 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[3]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__3 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[3]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__3 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(\^o_full ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .O(\r_wr_ptr[0]_i_1__3_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__3 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__3_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__3 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(\^o_full ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__3 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .I3(\^o_full ),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__3 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__0_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[0]_i_1__3_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[1]_i_1__3_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[2]_i_1__3_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[3]_i_1__3_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(\r_wr_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized0__hierPathDup__3
   (out,
    o_full,
    o_empty,
    r_empty_reg_0,
    r_empty_reg_1,
    \r_wr_ptr_reg[0]_0 ,
    \r_rd_ptr_reg[0]_0 ,
    I243);
  output [15:0]out;
  output o_full;
  output o_empty;
  input r_empty_reg_0;
  input r_empty_reg_1;
  input \r_wr_ptr_reg[0]_0 ;
  input \r_rd_ptr_reg[0]_0 ;
  input [15:0]I243;

  wire [15:0]I243;
  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire o_full;
  (* RTL_KEEP = "true" *) wire [15:0]out;
  wire r_empty_i_1__11_n_0;
  wire r_empty_i_2__10_n_0;
  wire r_empty_i_3__10_n_0;
  wire r_empty_i_4__7_n_0;
  wire r_empty_i_5__6_n_0;
  wire r_empty_i_6__6_n_0;
  wire r_empty_reg_0;
  wire r_empty_reg_1;
  wire r_ram_reg_0_15_0_5_i_1__5_n_0;
  wire \r_rd_ptr[4]_i_2__3_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__5_n_0 ;
  wire \r_wr_ptr[1]_i_1__5_n_0 ;
  wire \r_wr_ptr[2]_i_1__5_n_0 ;
  wire \r_wr_ptr[3]_i_1__5_n_0 ;
  wire \r_wr_ptr_reg[0]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__11
       (.I0(r_empty_i_2__10_n_0),
        .I1(r_empty_i_3__10_n_0),
        .O(r_empty_i_1__11_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__10
       (.I0(r_empty_i_4__7_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__6_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__10_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__10
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__6_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__3_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__10_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__7
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(o_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__7_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__6
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[0]_0 ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__6_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__6
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__6_n_0));
  FDPE r_empty_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .D(r_empty_i_1__11_n_0),
        .PRE(r_empty_reg_1),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__10
       (.I0(r_empty_i_2__10_n_0),
        .I1(r_empty_i_3__10_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_full),
        .Q(o_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD268 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I243[1:0]),
        .DIB(I243[3:2]),
        .DIC(I243[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC(out[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__5_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__5
       (.I0(\r_wr_ptr_reg[0]_0 ),
        .I1(o_full),
        .O(r_ram_reg_0_15_0_5_i_1__5_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_12_15" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "15" *) 
  RAM32M_HD269 r_ram_reg_0_15_12_15
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I243[13:12]),
        .DIB(I243[15:14]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(out[13:12]),
        .DOB(out[15:14]),
        .DOC(NLW_r_ram_reg_0_15_12_15_DOC_UNCONNECTED[1:0]),
        .DOD(NLW_r_ram_reg_0_15_12_15_DOD_UNCONNECTED[1:0]),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__5_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "256" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_sync_fifo_dllp/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD270 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(I243[7:6]),
        .DIB(I243[9:8]),
        .DIC(I243[11:10]),
        .DID({1'b0,1'b0}),
        .DOA(out[7:6]),
        .DOB(out[9:8]),
        .DOC(out[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__5_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__3 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__3_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__3 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__3_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__5 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__5 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__5 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__5 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__5 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(o_full),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .O(\r_wr_ptr[0]_i_1__5_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__5 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[0]_0 ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__5_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__5 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(o_full),
        .I3(\r_wr_ptr_reg[0]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__5 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[0]_0 ),
        .I3(o_full),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__5 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__5_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[0]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[1]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[2]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[3]_i_1__5_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized1
   (out,
    o_empty,
    \r_rd_ptr_reg[4]_0 ,
    r_full_reg_0,
    r_proc_valid_tr_reg,
    \r_wr_ptr_reg[1]_0 ,
    \r_rd_ptr_reg[0]_0 ,
    \r_proc_frame_num_header_reg[3] );
  output [12:0]out;
  output o_empty;
  input \r_rd_ptr_reg[4]_0 ;
  input r_full_reg_0;
  input [4:0]r_proc_valid_tr_reg;
  input \r_wr_ptr_reg[1]_0 ;
  input \r_rd_ptr_reg[0]_0 ;
  input [7:0]\r_proc_frame_num_header_reg[3] ;

  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire [12:0]out;
  wire r_empty_i_1__14_n_0;
  wire r_empty_i_2__13_n_0;
  wire r_empty_i_3__13_n_0;
  wire r_empty_i_4__10_n_0;
  wire r_empty_i_5__9_n_0;
  wire r_empty_i_6__9_n_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_full_reg_0;
  wire [7:0]\r_proc_frame_num_header_reg[3] ;
  wire [4:0]r_proc_valid_tr_reg;
  wire r_ram_reg_0_15_0_5_i_1__8_n_0;
  wire \r_rd_ptr[4]_i_2__6_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire \r_rd_ptr_reg[4]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__8_n_0 ;
  wire \r_wr_ptr[1]_i_1__8_n_0 ;
  wire \r_wr_ptr[2]_i_1__8_n_0 ;
  wire \r_wr_ptr[3]_i_1__8_n_0 ;
  wire \r_wr_ptr_reg[1]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_15_12_12_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__14
       (.I0(r_empty_i_2__13_n_0),
        .I1(r_empty_i_3__13_n_0),
        .O(r_empty_i_1__14_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__13
       (.I0(r_empty_i_4__10_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__9_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__13_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__13
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__9_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__6_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__13_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__10
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(r_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__10_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__9
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__9_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__9
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__9_n_0));
  FDPE r_empty_reg
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .D(r_empty_i_1__14_n_0),
        .PRE(r_full_reg_0),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__14
       (.I0(r_empty_i_2__13_n_0),
        .I1(r_empty_i_3__13_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "208" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_tr_result_buffer/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD256 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(\r_proc_frame_num_header_reg[3] [1:0]),
        .DIB(\r_proc_frame_num_header_reg[3] [3:2]),
        .DIC(\r_proc_frame_num_header_reg[3] [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC(out[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__8_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__8
       (.I0(\r_wr_ptr_reg[1]_0 ),
        .I1(r_full),
        .O(r_ram_reg_0_15_0_5_i_1__8_n_0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "208" *) 
  (* RTL_RAM_NAME = "inst_transceiver_b/inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_tr_result_buffer/r_ram_reg_0_15_12_12" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM32X1D_HD257 r_ram_reg_0_15_12_12
       (.A0(\r_wr_ptr_reg_n_0_[0] ),
        .A1(\r_wr_ptr_reg_n_0_[1] ),
        .A2(\r_wr_ptr_reg_n_0_[2] ),
        .A3(\r_wr_ptr_reg_n_0_[3] ),
        .A4(1'b0),
        .D(r_proc_valid_tr_reg[4]),
        .DPO(out[12]),
        .DPRA0(r_rd_ptr_reg_rep[0]),
        .DPRA1(r_rd_ptr_reg_rep[1]),
        .DPRA2(r_rd_ptr_reg_rep[2]),
        .DPRA3(r_rd_ptr_reg_rep[3]),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_0_15_12_12_SPO_UNCONNECTED),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__8_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "208" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_tr_result_buffer/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD258 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(\r_proc_frame_num_header_reg[3] [7:6]),
        .DIB(r_proc_valid_tr_reg[1:0]),
        .DIC(r_proc_valid_tr_reg[3:2]),
        .DID({1'b0,1'b0}),
        .DOA(out[7:6]),
        .DOB(out[9:8]),
        .DOC(out[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_5_i_1__8_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__6 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__6_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__6 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__6_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__8 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__8 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__8 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__8 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__8 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(r_full),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .O(\r_wr_ptr[0]_i_1__8_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__8 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__8_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__8 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__8_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__8 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .I3(r_full),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__8_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__8 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__8_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[0]_i_1__8_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[1]_i_1__8_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[2]_i_1__8_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[3]_i_1__8_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized1__hierPathDup__1
   (out,
    o_empty,
    r_empty_reg_0,
    r_empty_reg_1,
    r_proc_valid_tr_reg,
    \r_wr_ptr_reg[1]_0 ,
    \r_rd_ptr_reg[0]_0 ,
    p_3_in);
  output [12:0]out;
  output o_empty;
  input r_empty_reg_0;
  input r_empty_reg_1;
  input [4:0]r_proc_valid_tr_reg;
  input \r_wr_ptr_reg[1]_0 ;
  input \r_rd_ptr_reg[0]_0 ;
  input [7:0]p_3_in;

  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire [12:0]out;
  wire [7:0]p_3_in;
  wire r_empty_i_1__4_n_0;
  wire r_empty_i_2__4_n_0;
  wire r_empty_i_3__3_n_0;
  wire r_empty_i_4__3_n_0;
  wire r_empty_i_5__3_n_0;
  wire r_empty_i_6__3_n_0;
  wire r_empty_reg_0;
  wire r_empty_reg_1;
  (* RTL_KEEP = "true" *) wire r_full;
  wire [4:0]r_proc_valid_tr_reg;
  wire r_ram_reg_0_15_0_5_i_1__6_n_0;
  wire \r_rd_ptr[4]_i_2__0_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__2_n_0 ;
  wire \r_wr_ptr[1]_i_1__2_n_0 ;
  wire \r_wr_ptr[2]_i_1__2_n_0 ;
  wire \r_wr_ptr[3]_i_1__2_n_0 ;
  wire \r_wr_ptr_reg[1]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:0]NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED;
  wire NLW_r_ram_reg_0_15_12_12_SPO_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__4
       (.I0(r_empty_i_2__4_n_0),
        .I1(r_empty_i_3__3_n_0),
        .O(r_empty_i_1__4_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__4
       (.I0(r_empty_i_4__3_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__3_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__4_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__3
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__3_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__0_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__3_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__3
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(r_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__3_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__3
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__3_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__3
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__3_n_0));
  FDPE r_empty_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .D(r_empty_i_1__4_n_0),
        .PRE(r_empty_reg_1),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__4
       (.I0(r_empty_i_2__4_n_0),
        .I1(r_empty_i_3__3_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "208" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_tr_result_buffer/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD215 r_ram_reg_0_15_0_5
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(p_3_in[1:0]),
        .DIB(p_3_in[3:2]),
        .DIC(p_3_in[5:4]),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC(out[5:4]),
        .DOD(NLW_r_ram_reg_0_15_0_5_DOD_UNCONNECTED[1:0]),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__6_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_5_i_1__6
       (.I0(\r_wr_ptr_reg[1]_0 ),
        .I1(r_full),
        .O(r_ram_reg_0_15_0_5_i_1__6_n_0));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "208" *) 
  (* RTL_RAM_NAME = "inst_transceiver_a/inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_tr_result_buffer/r_ram_reg_0_15_12_12" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "12" *) 
  RAM32X1D_HD216 r_ram_reg_0_15_12_12
       (.A0(\r_wr_ptr_reg_n_0_[0] ),
        .A1(\r_wr_ptr_reg_n_0_[1] ),
        .A2(\r_wr_ptr_reg_n_0_[2] ),
        .A3(\r_wr_ptr_reg_n_0_[3] ),
        .A4(1'b0),
        .D(r_proc_valid_tr_reg[4]),
        .DPO(out[12]),
        .DPRA0(r_rd_ptr_reg_rep[0]),
        .DPRA1(r_rd_ptr_reg_rep[1]),
        .DPRA2(r_rd_ptr_reg_rep[2]),
        .DPRA3(r_rd_ptr_reg_rep[3]),
        .DPRA4(1'b0),
        .SPO(NLW_r_ram_reg_0_15_12_12_SPO_UNCONNECTED),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__6_n_0));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "208" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_tr_result_buffer/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD217 r_ram_reg_0_15_6_11
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(p_3_in[7:6]),
        .DIB(r_proc_valid_tr_reg[1:0]),
        .DIC(r_proc_valid_tr_reg[3:2]),
        .DID({1'b0,1'b0}),
        .DOA(out[7:6]),
        .DOB(out[9:8]),
        .DOC(out[11:10]),
        .DOD(NLW_r_ram_reg_0_15_6_11_DOD_UNCONNECTED[1:0]),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_5_i_1__6_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__0 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__0_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__0 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__0_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__2 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__2 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__2 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__2 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__2 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(r_full),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .O(\r_wr_ptr[0]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__2 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__2 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__2 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .I3(r_full),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__2 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_5_i_1__6_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[0]_i_1__2_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[1]_i_1__2_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[2]_i_1__2_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(\r_wr_ptr[3]_i_1__2_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_empty_reg_1),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized2
   (out,
    o_empty,
    \r_rd_ptr_reg[4]_0 ,
    r_empty_reg_0,
    \r_dllp_tx_reg[1] ,
    \r_wr_ptr_reg[1]_0 ,
    \r_rd_ptr_reg[0]_0 );
  output [4:0]out;
  output o_empty;
  input \r_rd_ptr_reg[4]_0 ;
  input r_empty_reg_0;
  input [4:0]\r_dllp_tx_reg[1] ;
  input \r_wr_ptr_reg[1]_0 ;
  input \r_rd_ptr_reg[0]_0 ;

  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire [4:0]\r_dllp_tx_reg[1] ;
  wire r_empty_i_1__13_n_0;
  wire r_empty_i_2__12_n_0;
  wire r_empty_i_3__12_n_0;
  wire r_empty_i_4__9_n_0;
  wire r_empty_i_5__8_n_0;
  wire r_empty_i_6__8_n_0;
  wire r_empty_reg_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_ram_reg_0_15_0_4_i_1__0_n_0;
  wire \r_rd_ptr[4]_i_2__5_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire \r_rd_ptr_reg[4]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__7_n_0 ;
  wire \r_wr_ptr[1]_i_1__7_n_0 ;
  wire \r_wr_ptr[2]_i_1__7_n_0 ;
  wire \r_wr_ptr[3]_i_1__7_n_0 ;
  wire \r_wr_ptr_reg[1]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:1]NLW_r_ram_reg_0_15_0_4_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_0_4_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__13
       (.I0(r_empty_i_2__12_n_0),
        .I1(r_empty_i_3__12_n_0),
        .O(r_empty_i_1__13_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__12
       (.I0(r_empty_i_4__9_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__8_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__12_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__12
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__8_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__5_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__12_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__9
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(r_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__9_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__8
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__8_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__8
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__8_n_0));
  FDPE r_empty_reg
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .D(r_empty_i_1__13_n_0),
        .PRE(r_empty_reg_0),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__12
       (.I0(r_empty_i_2__12_n_0),
        .I1(r_empty_i_3__12_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "80" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_id_result_buffer/r_ram_reg_0_15_0_4" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "4" *) 
  RAM32M_HD255 r_ram_reg_0_15_0_4
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(\r_dllp_tx_reg[1] [1:0]),
        .DIB(\r_dllp_tx_reg[1] [3:2]),
        .DIC({1'b0,\r_dllp_tx_reg[1] [4]}),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC({NLW_r_ram_reg_0_15_0_4_DOC_UNCONNECTED[1],out[4]}),
        .DOD(NLW_r_ram_reg_0_15_0_4_DOD_UNCONNECTED[1:0]),
        .WCLK(\r_rd_ptr_reg[4]_0 ),
        .WE(r_ram_reg_0_15_0_4_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_4_i_1__0
       (.I0(\r_wr_ptr_reg[1]_0 ),
        .I1(r_full),
        .O(r_ram_reg_0_15_0_4_i_1__0_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__5 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__5_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__5 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__5_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__7 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__7 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__7 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__7 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__7 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(r_full),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .O(\r_wr_ptr[0]_i_1__7_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__7 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__7_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__7 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__7_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__7 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .I3(r_full),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__7_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__7 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_4_i_1__0_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[0]_i_1__7_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[1]_i_1__7_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[2]_i_1__7_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(\r_wr_ptr[3]_i_1__7_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(\r_rd_ptr_reg[4]_0 ),
        .CE(1'b1),
        .CLR(r_empty_reg_0),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

(* ORIG_REF_NAME = "sync_fifo" *) 
module sync_fifo__parameterized2__hierPathDup__1
   (out,
    o_empty,
    r_empty_reg_0,
    r_full_reg_0,
    \r_dllp_tx_reg[1] ,
    \r_wr_ptr_reg[1]_0 ,
    \r_rd_ptr_reg[0]_0 );
  output [4:0]out;
  output o_empty;
  input r_empty_reg_0;
  input r_full_reg_0;
  input [4:0]\r_dllp_tx_reg[1] ;
  input \r_wr_ptr_reg[1]_0 ;
  input \r_rd_ptr_reg[0]_0 ;

  (* RTL_KEEP = "true" *) wire o_empty;
  (* RTL_KEEP = "true" *) wire [4:0]out;
  wire [4:0]\r_dllp_tx_reg[1] ;
  wire r_empty_i_1__6_n_0;
  wire r_empty_i_2__6_n_0;
  wire r_empty_i_3__5_n_0;
  wire r_empty_i_4__5_n_0;
  wire r_empty_i_5__5_n_0;
  wire r_empty_i_6__5_n_0;
  wire r_empty_reg_0;
  (* RTL_KEEP = "true" *) wire r_full;
  wire r_full_reg_0;
  wire r_ram_reg_0_15_0_4_i_1_n_0;
  wire \r_rd_ptr[4]_i_2__2_n_0 ;
  wire [4:0]r_rd_ptr_reg;
  wire \r_rd_ptr_reg[0]_0 ;
  wire [3:0]r_rd_ptr_reg_rep;
  wire \r_wr_ptr[0]_i_1__4_n_0 ;
  wire \r_wr_ptr[1]_i_1__4_n_0 ;
  wire \r_wr_ptr[2]_i_1__4_n_0 ;
  wire \r_wr_ptr[3]_i_1__4_n_0 ;
  wire \r_wr_ptr_reg[1]_0 ;
  wire \r_wr_ptr_reg_n_0_[0] ;
  wire \r_wr_ptr_reg_n_0_[1] ;
  wire \r_wr_ptr_reg_n_0_[2] ;
  wire \r_wr_ptr_reg_n_0_[3] ;
  wire \r_wr_ptr_reg_n_0_[4] ;
  wire ri_full;
  wire [3:0]ri_rd_ptr;
  wire [4:4]ri_rd_ptr__0;
  wire [4:4]ri_wr_ptr;
  wire [1:1]NLW_r_ram_reg_0_15_0_4_DOC_UNCONNECTED;
  wire [1:0]NLW_r_ram_reg_0_15_0_4_DOD_UNCONNECTED;

  LUT2 #(
    .INIT(4'h2)) 
    r_empty_i_1__6
       (.I0(r_empty_i_2__6_n_0),
        .I1(r_empty_i_3__5_n_0),
        .O(r_empty_i_1__6_n_0));
  LUT6 #(
    .INIT(64'h0110400440041001)) 
    r_empty_i_2__6
       (.I0(r_empty_i_4__5_n_0),
        .I1(ri_rd_ptr[2]),
        .I2(ri_rd_ptr[3]),
        .I3(\r_wr_ptr_reg_n_0_[3] ),
        .I4(r_empty_i_5__5_n_0),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(r_empty_i_2__6_n_0));
  LUT6 #(
    .INIT(64'h7887878787787878)) 
    r_empty_i_3__5
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(r_empty_i_6__5_n_0),
        .I2(\r_wr_ptr_reg_n_0_[4] ),
        .I3(r_rd_ptr_reg[3]),
        .I4(\r_rd_ptr[4]_i_2__2_n_0 ),
        .I5(r_rd_ptr_reg[4]),
        .O(r_empty_i_3__5_n_0));
  LUT6 #(
    .INIT(64'h7D7DEB7DBEBE7DBE)) 
    r_empty_i_4__5
       (.I0(ri_rd_ptr[0]),
        .I1(ri_rd_ptr[1]),
        .I2(\r_wr_ptr_reg_n_0_[1] ),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(r_full),
        .I5(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_4__5_n_0));
  LUT4 #(
    .INIT(16'h0800)) 
    r_empty_i_5__5
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(r_empty_i_5__5_n_0));
  LUT5 #(
    .INIT(32'h08000000)) 
    r_empty_i_6__5
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(r_empty_i_6__5_n_0));
  FDPE r_empty_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .D(r_empty_i_1__6_n_0),
        .PRE(r_full_reg_0),
        .Q(o_empty));
  LUT2 #(
    .INIT(4'h8)) 
    r_full_i_1__6
       (.I0(r_empty_i_2__6_n_0),
        .I1(r_empty_i_3__5_n_0),
        .O(ri_full));
  FDCE r_full_reg
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_full),
        .Q(r_full));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "80" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/inst_id_result_buffer/r_ram_reg_0_15_0_4" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "4" *) 
  RAM32M_HD214 r_ram_reg_0_15_0_4
       (.ADDRA({1'b0,r_rd_ptr_reg_rep}),
        .ADDRB({1'b0,r_rd_ptr_reg_rep}),
        .ADDRC({1'b0,r_rd_ptr_reg_rep}),
        .ADDRD({1'b0,\r_wr_ptr_reg_n_0_[3] ,\r_wr_ptr_reg_n_0_[2] ,\r_wr_ptr_reg_n_0_[1] ,\r_wr_ptr_reg_n_0_[0] }),
        .DIA(\r_dllp_tx_reg[1] [1:0]),
        .DIB(\r_dllp_tx_reg[1] [3:2]),
        .DIC({1'b0,\r_dllp_tx_reg[1] [4]}),
        .DID({1'b0,1'b0}),
        .DOA(out[1:0]),
        .DOB(out[3:2]),
        .DOC({NLW_r_ram_reg_0_15_0_4_DOC_UNCONNECTED[1],out[4]}),
        .DOD(NLW_r_ram_reg_0_15_0_4_DOD_UNCONNECTED[1:0]),
        .WCLK(r_empty_reg_0),
        .WE(r_ram_reg_0_15_0_4_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    r_ram_reg_0_15_0_4_i_1
       (.I0(\r_wr_ptr_reg[1]_0 ),
        .I1(r_full),
        .O(r_ram_reg_0_15_0_4_i_1_n_0));
  LUT3 #(
    .INIT(8'h6A)) 
    \r_rd_ptr[4]_i_1__2 
       (.I0(r_rd_ptr_reg[4]),
        .I1(\r_rd_ptr[4]_i_2__2_n_0 ),
        .I2(r_rd_ptr_reg[3]),
        .O(ri_rd_ptr__0));
  (* \PinAttr:I0:HOLD_DETOUR  = "189" *) 
  LUT5 #(
    .INIT(32'h08000000)) 
    \r_rd_ptr[4]_i_2__2 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(\r_rd_ptr[4]_i_2__2_n_0 ));
  FDCE \r_rd_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg[0]));
  FDCE \r_rd_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg[1]));
  FDCE \r_rd_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg[2]));
  FDCE \r_rd_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg[3]));
  FDCE \r_rd_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr__0),
        .Q(r_rd_ptr_reg[4]));
  FDCE \r_rd_ptr_reg_rep[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[0]),
        .Q(r_rd_ptr_reg_rep[0]));
  FDCE \r_rd_ptr_reg_rep[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[1]),
        .Q(r_rd_ptr_reg_rep[1]));
  FDCE \r_rd_ptr_reg_rep[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[2]),
        .Q(r_rd_ptr_reg_rep[2]));
  FDCE \r_rd_ptr_reg_rep[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_rd_ptr[3]),
        .Q(r_rd_ptr_reg_rep[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_rd_ptr_rep[0]_i_1__4 
       (.I0(r_rd_ptr_reg[0]),
        .I1(o_empty),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .O(ri_rd_ptr[0]));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_rd_ptr_rep[1]_i_1__4 
       (.I0(r_rd_ptr_reg[1]),
        .I1(\r_rd_ptr_reg[0]_0 ),
        .I2(o_empty),
        .I3(r_rd_ptr_reg[0]),
        .O(ri_rd_ptr[1]));
  (* \PinAttr:I0:HOLD_DETOUR  = "189" *) 
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_rd_ptr_rep[2]_i_1__4 
       (.I0(r_rd_ptr_reg[2]),
        .I1(r_rd_ptr_reg[0]),
        .I2(o_empty),
        .I3(\r_rd_ptr_reg[0]_0 ),
        .I4(r_rd_ptr_reg[1]),
        .O(ri_rd_ptr[2]));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_rd_ptr_rep[3]_i_1__4 
       (.I0(r_rd_ptr_reg[3]),
        .I1(r_rd_ptr_reg[1]),
        .I2(\r_rd_ptr_reg[0]_0 ),
        .I3(o_empty),
        .I4(r_rd_ptr_reg[0]),
        .I5(r_rd_ptr_reg[2]),
        .O(ri_rd_ptr[3]));
  LUT3 #(
    .INIT(8'h9A)) 
    \r_wr_ptr[0]_i_1__4 
       (.I0(\r_wr_ptr_reg_n_0_[0] ),
        .I1(r_full),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .O(\r_wr_ptr[0]_i_1__4_n_0 ));
  LUT4 #(
    .INIT(16'hA6AA)) 
    \r_wr_ptr[1]_i_1__4 
       (.I0(\r_wr_ptr_reg_n_0_[1] ),
        .I1(\r_wr_ptr_reg[1]_0 ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg_n_0_[0] ),
        .O(\r_wr_ptr[1]_i_1__4_n_0 ));
  LUT5 #(
    .INIT(32'hA6AAAAAA)) 
    \r_wr_ptr[2]_i_1__4 
       (.I0(\r_wr_ptr_reg_n_0_[2] ),
        .I1(\r_wr_ptr_reg_n_0_[0] ),
        .I2(r_full),
        .I3(\r_wr_ptr_reg[1]_0 ),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .O(\r_wr_ptr[2]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'hAA6AAAAAAAAAAAAA)) 
    \r_wr_ptr[3]_i_1__4 
       (.I0(\r_wr_ptr_reg_n_0_[3] ),
        .I1(\r_wr_ptr_reg_n_0_[1] ),
        .I2(\r_wr_ptr_reg[1]_0 ),
        .I3(r_full),
        .I4(\r_wr_ptr_reg_n_0_[0] ),
        .I5(\r_wr_ptr_reg_n_0_[2] ),
        .O(\r_wr_ptr[3]_i_1__4_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \r_wr_ptr[4]_i_1__4 
       (.I0(\r_wr_ptr_reg_n_0_[4] ),
        .I1(\r_wr_ptr_reg_n_0_[2] ),
        .I2(\r_wr_ptr_reg_n_0_[0] ),
        .I3(r_ram_reg_0_15_0_4_i_1_n_0),
        .I4(\r_wr_ptr_reg_n_0_[1] ),
        .I5(\r_wr_ptr_reg_n_0_[3] ),
        .O(ri_wr_ptr));
  FDCE \r_wr_ptr_reg[0] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[0]_i_1__4_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[0] ));
  FDCE \r_wr_ptr_reg[1] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[1]_i_1__4_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[1] ));
  FDCE \r_wr_ptr_reg[2] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[2]_i_1__4_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[2] ));
  FDCE \r_wr_ptr_reg[3] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(\r_wr_ptr[3]_i_1__4_n_0 ),
        .Q(\r_wr_ptr_reg_n_0_[3] ));
  FDCE \r_wr_ptr_reg[4] 
       (.C(r_empty_reg_0),
        .CE(1'b1),
        .CLR(r_full_reg_0),
        .D(ri_wr_ptr),
        .Q(\r_wr_ptr_reg_n_0_[4] ));
endmodule

module synchronizer
   (out,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(D),
        .Q(r_sync[0]),
        .R(1'b0));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b1),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(r_sync[0]),
        .Q(r_sync[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0
   (out,
    CLK,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__1
   (out,
    CLK,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__10
   (out,
    \r_sync_reg[0]_0 ,
    \r_sync_reg[0]_1 ,
    D);
  output out;
  input \r_sync_reg[0]_0 ;
  input \r_sync_reg[0]_1 ;
  input [0:0]D;

  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;
  wire \r_sync_reg[0]_1 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_1 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_1 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__1_18
   (out,
    CLK,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__1_57
   (out,
    CLK,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__1_59
   (out,
    CLK,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__2
   (out,
    \r_sync_reg[0]_0 ,
    r_in_req);
  output out;
  input \r_sync_reg[0]_0 ;
  input r_in_req;

  wire r_in_req;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .D(r_in_req),
        .Q(r_sync[0]),
        .R(1'b0));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .D(r_sync[0]),
        .Q(r_sync[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__2_19
   (out,
    \r_sync_reg[1]_0 ,
    r_in_req);
  output out;
  input \r_sync_reg[1]_0 ;
  input r_in_req;

  wire r_in_req;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(r_in_req),
        .Q(r_sync[0]),
        .R(1'b0));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(r_sync[0]),
        .Q(r_sync[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__2_58
   (out,
    \r_sync_reg[1]_0 ,
    r_in_req);
  output out;
  input \r_sync_reg[1]_0 ;
  input r_in_req;

  wire r_in_req;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(r_in_req),
        .Q(r_sync[0]),
        .R(1'b0));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .D(r_sync[0]),
        .Q(r_sync[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__2_60
   (out,
    \r_sync_reg[0]_0 ,
    r_in_req);
  output out;
  input \r_sync_reg[0]_0 ;
  input r_in_req;

  wire r_in_req;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .D(r_in_req),
        .Q(r_sync[0]),
        .R(1'b0));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDRE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .D(r_sync[0]),
        .Q(r_sync[1]),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__3
   (out,
    CLK,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__3_51
   (out,
    CLK,
    \r_sync_reg[1]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[1]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[1]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__4
   (out,
    CLK,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__4_39
   (out,
    CLK,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__5
   (out,
    CLK,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__5_40
   (out,
    CLK,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__6
   (out,
    \r_sync_reg[0]_0 ,
    \r_sync_reg[0]_1 ,
    D);
  output out;
  input \r_sync_reg[0]_0 ;
  input \r_sync_reg[0]_1 ;
  input [0:0]D;

  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;
  wire \r_sync_reg[0]_1 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_1 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_1 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__7
   (out,
    \r_sync_reg[1]_0 ,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input \r_sync_reg[1]_0 ;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__8
   (out,
    CLK,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input CLK;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire CLK;
  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

(* ORIG_REF_NAME = "synchronizer" *) 
module synchronizer__parameterized0__hierPathDup__9
   (out,
    \r_sync_reg[1]_0 ,
    \r_sync_reg[0]_0 ,
    D);
  output out;
  input \r_sync_reg[1]_0 ;
  input \r_sync_reg[0]_0 ;
  input [0:0]D;

  wire [0:0]D;
  (* async_reg = "true" *) (* shreg_extract = "no" *) wire [1:0]r_sync;
  wire \r_sync_reg[0]_0 ;
  wire \r_sync_reg[1]_0 ;

  assign out = r_sync[1];
  initial assign \r_sync_reg[0] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[0] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(D),
        .Q(r_sync[0]));
  initial assign \r_sync_reg[1] .notifier = 1'bx;
(* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  (* SHREG_EXTRACT = "no" *) 
  FDCE #(
    .INIT(1'b0),
    .XON("FALSE")) 
    \r_sync_reg[1] 
       (.C(\r_sync_reg[1]_0 ),
        .CE(1'b1),
        .CLR(\r_sync_reg[0]_0 ),
        .D(r_sync[0]),
        .Q(r_sync[1]));
endmodule

module test_core_top
   (o_pc_tx,
    o_trx_a_data_i0,
    o_trx_a_data_wr0,
    o_trx_a_data_rd0,
    o_trx_b_data_i0,
    o_trx_b_data_wr0,
    o_trx_b_data_rd0,
    out,
    \r_temp_reg[33] ,
    \r_sipo_reg[0] ,
    D,
    \r_rst_reg[0] ,
    \r_data_reg[4] ,
    \r_data_reg[4]_0 ,
    \r_data_reg[4]_1 ,
    \r_data_reg[4]_2 ,
    \r_state_reg[0] ,
    \r_state_reg[0]_0 ,
    \r_state_reg[0]_1 ,
    \r_state_reg[5] );
  output o_pc_tx;
  output [55:0]o_trx_a_data_i0;
  output o_trx_a_data_wr0;
  output o_trx_a_data_rd0;
  output [33:0]o_trx_b_data_i0;
  output o_trx_b_data_wr0;
  output o_trx_b_data_rd0;
  input out;
  input [55:0]\r_temp_reg[33] ;
  input \r_sipo_reg[0] ;
  input [33:0]D;
  input \r_rst_reg[0] ;
  input [4:0]\r_data_reg[4] ;
  input [4:0]\r_data_reg[4]_0 ;
  input [4:0]\r_data_reg[4]_1 ;
  input [4:0]\r_data_reg[4]_2 ;
  input \r_state_reg[0] ;
  input \r_state_reg[0]_0 ;
  input \r_state_reg[0]_1 ;
  input \r_state_reg[5] ;

  wire [33:0]D;
  wire inst_bank_c_echo_n_16;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire [2:0]o_bank_c_data_0;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire [2:0]o_bank_c_data_1;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire [15:0]o_bank_c_data_7;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire [7:0]o_bank_c_wr;
  (* RTL_KEEP = "inst_bank_s_trx_a_edge_tabs " *) wire [4:0]o_data;
  (* RTL_KEEP = "inst_bank_s_trx_a_tab_delay_i " *) wire [4:0]o_data__0;
  (* RTL_KEEP = "inst_bank_s_trx_b_edge_tabs " *) wire [4:0]o_data__1;
  (* RTL_KEEP = "inst_bank_s_trx_b_tab_delay_i " *) wire [4:0]o_data__2;
  (* RTL_KEEP = "inst_bank_c_echo " *) wire [15:0]o_data__3;
  (* RTL_KEEP = "inst_bank_c_pattern_num " *) wire [2:0]o_data__4;
  (* RTL_KEEP = "inst_bank_l " *) wire [55:0]o_data_a;
  (* RTL_KEEP = "inst_bank_l " *) wire [55:0]o_data_b;
  (* RTL_KEEP = "inst_bank_p " *) wire [55:0]o_data_b__0;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire [15:0]o_loop_cycle;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire o_loop_done;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire o_loop_run;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire o_loop_timeout;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire [55:0]o_pattern;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire [55:0]o_pattern__0;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire [2:0]o_pattern_addr;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire [2:0]o_pattern_addr__0;
  (* RTL_KEEP = "inst_pc_interface_top " *) wire o_pattern_wr;
  (* RTL_KEEP = "inst_loop_interface_top " *) wire o_pattern_wr__0;
  wire o_pc_tx;
  (* RTL_KEEP = "inst_bank_c_single_loop " *) wire o_q;
  (* RTL_KEEP = "inst_bank_c_continuous_loop " *) wire o_q__0;
  (* RTL_KEEP = "inst_sel_p_bank " *) wire o_q__1;
  (* RTL_KEEP = "inst_local_reset " *) wire o_rst;
  (* RTL_KEEP = "true" *) wire [55:0]o_trx_a_data_i0;
  (* RTL_KEEP = "true" *) wire o_trx_a_data_rd0;
  (* RTL_KEEP = "true" *) wire o_trx_a_data_wr0;
  (* RTL_KEEP = "true" *) wire [33:0]o_trx_b_data_i0;
  (* RTL_KEEP = "true" *) wire o_trx_b_data_rd0;
  (* RTL_KEEP = "true" *) wire o_trx_b_data_wr0;
  wire out;
  wire [2:0]r_addr_a;
  wire [2:0]r_addr_b;
  wire [4:0]\r_data_reg[4] ;
  wire [4:0]\r_data_reg[4]_0 ;
  wire [4:0]\r_data_reg[4]_1 ;
  wire [4:0]\r_data_reg[4]_2 ;
  wire \r_rst_reg[0] ;
  wire \r_sipo_reg[0] ;
  wire \r_state_reg[0] ;
  wire \r_state_reg[0]_0 ;
  wire \r_state_reg[0]_1 ;
  wire \r_state_reg[5] ;
  wire [55:0]\r_temp_reg[33] ;
  wire [15:3]NLW_inst_pc_interface_top_o_bank_c_data_0_UNCONNECTED;
  wire [15:3]NLW_inst_pc_interface_top_o_bank_c_data_1_UNCONNECTED;
  wire [15:0]NLW_inst_pc_interface_top_o_bank_c_data_2_UNCONNECTED;
  wire [15:0]NLW_inst_pc_interface_top_o_bank_c_data_3_UNCONNECTED;
  wire [6:2]NLW_inst_pc_interface_top_o_bank_c_wr_UNCONNECTED;

  sr_ff__hierPathDup__2 inst_bank_c_continuous_loop
       (.out(o_q__0),
        .r_q_reg_0(out),
        .r_q_reg_1(inst_bank_c_echo_n_16),
        .r_q_reg_2(o_bank_c_data_0[2:1]),
        .r_q_reg_3(o_loop_timeout),
        .r_q_reg_4(o_bank_c_wr[0]));
  register__parameterized2 inst_bank_c_echo
       (.D(o_bank_c_data_7),
        .E(o_bank_c_wr[7]),
        .out(o_data__3),
        .\r_data_reg[0]_0 (o_rst),
        .\r_data_reg[0]_1 (out),
        .\r_rst_reg[1] (inst_bank_c_echo_n_16));
  register inst_bank_c_pattern_num
       (.D(o_bank_c_data_1),
        .E(o_bank_c_wr[1]),
        .out(o_data__4),
        .\r_data_reg[0]_0 (inst_bank_c_echo_n_16),
        .\r_data_reg[2]_0 (out));
  sr_ff__hierPathDup__1 inst_bank_c_single_loop
       (.out(o_q),
        .r_q_reg_0(out),
        .r_q_reg_1(inst_bank_c_echo_n_16),
        .r_q_reg_2(o_bank_c_data_0[0]),
        .r_q_reg_3(o_bank_c_wr[0]),
        .r_q_reg_4(o_loop_timeout),
        .r_q_reg_5(o_loop_run));
  sync_dual_port_ram__hierPathDup__1 inst_bank_l
       (.Q(r_addr_b),
        .o_data_a(o_data_a),
        .o_data_b(o_data_b),
        .out(out),
        .\r_pc_shift_out_reg[1] (o_pattern_wr__0),
        .\r_pc_shift_out_reg[1]_0 (o_pattern_addr__0),
        .\r_pc_shift_out_reg[49] (r_addr_a),
        .\r_pc_shift_out_reg[55] (o_pattern__0));
  sync_dual_port_ram inst_bank_p
       (.D(o_pattern_addr__0),
        .Q(r_addr_a),
        .o_data_b(o_data_b__0),
        .o_trx_a_data_i_inferred_i_1(o_pattern),
        .o_trx_a_data_i_inferred_i_1_0(o_pattern_wr),
        .out(out),
        .\r_addr_a_reg[2]_0 (o_pattern_addr),
        .\r_addr_b_reg[2]_0 (r_addr_b));
  register__parameterized1__hierPathDup__1 inst_bank_s_trx_a_edge_tabs
       (.out(o_data),
        .\r_data_reg[0]_0 (inst_bank_c_echo_n_16),
        .\r_data_reg[4]_0 (\r_data_reg[4] ),
        .\r_data_reg[4]_1 (out));
  register__parameterized1__hierPathDup__2 inst_bank_s_trx_a_tab_delay_i
       (.out(o_data__0),
        .\r_data_reg[0]_0 (out),
        .\r_data_reg[0]_1 (inst_bank_c_echo_n_16),
        .\r_data_reg[4]_0 (\r_data_reg[4]_0 ));
  register__parameterized1__hierPathDup__3 inst_bank_s_trx_b_edge_tabs
       (.out(o_data__1),
        .\r_data_reg[0]_0 (inst_bank_c_echo_n_16),
        .\r_data_reg[4]_0 (\r_data_reg[4]_1 ),
        .\r_data_reg[4]_1 (out));
  register__parameterized1__hierPathDup__4 inst_bank_s_trx_b_tab_delay_i
       (.out(o_data__2),
        .\r_data_reg[0]_0 (out),
        .\r_data_reg[0]_1 (inst_bank_c_echo_n_16),
        .\r_data_reg[4]_0 (\r_data_reg[4]_2 ));
  async_reset__parameterized1__hierPathDup__3 inst_local_reset
       (.out(o_rst),
        .\r_rst_reg[0]_0 (out),
        .\r_rst_reg[0]_1 (\r_rst_reg[0] ));
  loop_interface_top inst_loop_interface_top
       (.D(D),
        .Q(o_trx_b_data_rd0),
        .in0(o_trx_b_data_wr0),
        .o_loop_cycle(o_loop_cycle),
        .o_loop_done(o_loop_done),
        .o_loop_timeout(o_loop_timeout),
        .o_pattern(o_pattern__0),
        .o_pattern_addr(o_pattern_addr__0),
        .o_pattern_wr(o_pattern_wr__0),
        .o_trx_a_data_rd(o_trx_a_data_rd0),
        .o_trx_a_data_wr(o_trx_a_data_wr0),
        .o_trx_b_data_i(o_trx_b_data_i0),
        .out(o_loop_run),
        .\r_pattern_num_reg[2] (o_data__4),
        .r_q_reg(out),
        .\r_rst_reg[1] (inst_bank_c_echo_n_16),
        .\r_state_reg[0] (\r_state_reg[0] ),
        .\r_state_reg[0]_0 (\r_state_reg[0]_0 ),
        .\r_state_reg[0]_1 (\r_state_reg[0]_1 ),
        .\r_state_reg[1] (o_q__0),
        .\r_state_reg[1]_0 (o_q),
        .\r_state_reg[5] (\r_state_reg[5] ),
        .\r_temp_reg[33] (\r_temp_reg[33] ));
  pc_interface_top inst_pc_interface_top
       (.o_bank_c_data_0({NLW_inst_pc_interface_top_o_bank_c_data_0_UNCONNECTED[15:3],o_bank_c_data_0}),
        .o_bank_c_data_1({NLW_inst_pc_interface_top_o_bank_c_data_1_UNCONNECTED[15:3],o_bank_c_data_1}),
        .o_bank_c_data_2(NLW_inst_pc_interface_top_o_bank_c_data_2_UNCONNECTED[15:0]),
        .o_bank_c_data_3(NLW_inst_pc_interface_top_o_bank_c_data_3_UNCONNECTED[15:0]),
        .o_bank_c_data_7(o_bank_c_data_7),
        .o_bank_c_wr({o_bank_c_wr[7],NLW_inst_pc_interface_top_o_bank_c_wr_UNCONNECTED[6:2],o_bank_c_wr[1:0]}),
        .o_data_inferred_i_12(o_data__0),
        .o_data_inferred_i_12_0(o_data),
        .o_data_inferred_i_12_1(o_data__2),
        .o_data_inferred_i_12_2(o_data__1),
        .o_data_inferred_i_16(o_loop_run),
        .o_pattern(o_pattern),
        .o_pattern_addr(o_pattern_addr),
        .o_pc_tx(o_pc_tx),
        .out(o_pattern_wr),
        .\r_pc_shift_out_reg[55] (o_loop_cycle),
        .\r_pc_shift_out_reg[55]_0 (o_data__3),
        .\r_pc_shift_out_reg[55]_1 (o_data_b),
        .\r_piso_reg[10] (out),
        .\r_rst_reg[0] (inst_bank_c_echo_n_16),
        .\r_sipo_reg[0] (\r_sipo_reg[0] ));
  sr_ff__hierPathDup__3 inst_sel_p_bank
       (.out(o_q__1),
        .r_q_reg_0(out),
        .r_q_reg_1(inst_bank_c_echo_n_16),
        .r_q_reg_2(o_loop_done),
        .r_q_reg_3(o_loop_run));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_1
       (.I0(o_data_a[55]),
        .I1(o_data_b__0[55]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[55]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_10
       (.I0(o_data_a[46]),
        .I1(o_data_b__0[46]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[46]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_11
       (.I0(o_data_a[45]),
        .I1(o_data_b__0[45]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[45]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_12
       (.I0(o_data_a[44]),
        .I1(o_data_b__0[44]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[44]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_13
       (.I0(o_data_a[43]),
        .I1(o_data_b__0[43]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[43]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_14
       (.I0(o_data_a[42]),
        .I1(o_data_b__0[42]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[42]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_15
       (.I0(o_data_a[41]),
        .I1(o_data_b__0[41]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[41]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_16
       (.I0(o_data_a[40]),
        .I1(o_data_b__0[40]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[40]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_17
       (.I0(o_data_a[39]),
        .I1(o_data_b__0[39]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[39]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_18
       (.I0(o_data_a[38]),
        .I1(o_data_b__0[38]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[38]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_19
       (.I0(o_data_a[37]),
        .I1(o_data_b__0[37]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[37]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_2
       (.I0(o_data_a[54]),
        .I1(o_data_b__0[54]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[54]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_20
       (.I0(o_data_a[36]),
        .I1(o_data_b__0[36]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[36]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_21
       (.I0(o_data_a[35]),
        .I1(o_data_b__0[35]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[35]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_22
       (.I0(o_data_a[34]),
        .I1(o_data_b__0[34]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[34]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_23
       (.I0(o_data_a[33]),
        .I1(o_data_b__0[33]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[33]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_24
       (.I0(o_data_a[32]),
        .I1(o_data_b__0[32]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[32]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_25
       (.I0(o_data_a[31]),
        .I1(o_data_b__0[31]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[31]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_26
       (.I0(o_data_a[30]),
        .I1(o_data_b__0[30]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[30]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_27
       (.I0(o_data_a[29]),
        .I1(o_data_b__0[29]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[29]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_28
       (.I0(o_data_a[28]),
        .I1(o_data_b__0[28]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[28]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_29
       (.I0(o_data_a[27]),
        .I1(o_data_b__0[27]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[27]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_3
       (.I0(o_data_a[53]),
        .I1(o_data_b__0[53]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[53]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_30
       (.I0(o_data_a[26]),
        .I1(o_data_b__0[26]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[26]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_31
       (.I0(o_data_a[25]),
        .I1(o_data_b__0[25]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[25]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_32
       (.I0(o_data_a[24]),
        .I1(o_data_b__0[24]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[24]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_33
       (.I0(o_data_a[23]),
        .I1(o_data_b__0[23]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[23]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_34
       (.I0(o_data_a[22]),
        .I1(o_data_b__0[22]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[22]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_35
       (.I0(o_data_a[21]),
        .I1(o_data_b__0[21]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[21]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_36
       (.I0(o_data_a[20]),
        .I1(o_data_b__0[20]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[20]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_37
       (.I0(o_data_a[19]),
        .I1(o_data_b__0[19]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[19]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_38
       (.I0(o_data_a[18]),
        .I1(o_data_b__0[18]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[18]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_39
       (.I0(o_data_a[17]),
        .I1(o_data_b__0[17]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[17]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_4
       (.I0(o_data_a[52]),
        .I1(o_data_b__0[52]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[52]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_40
       (.I0(o_data_a[16]),
        .I1(o_data_b__0[16]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[16]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_41
       (.I0(o_data_a[15]),
        .I1(o_data_b__0[15]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[15]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_42
       (.I0(o_data_a[14]),
        .I1(o_data_b__0[14]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[14]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_43
       (.I0(o_data_a[13]),
        .I1(o_data_b__0[13]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[13]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_44
       (.I0(o_data_a[12]),
        .I1(o_data_b__0[12]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[12]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_45
       (.I0(o_data_a[11]),
        .I1(o_data_b__0[11]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[11]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_46
       (.I0(o_data_a[10]),
        .I1(o_data_b__0[10]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[10]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_47
       (.I0(o_data_a[9]),
        .I1(o_data_b__0[9]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[9]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_48
       (.I0(o_data_a[8]),
        .I1(o_data_b__0[8]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[8]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_49
       (.I0(o_data_a[7]),
        .I1(o_data_b__0[7]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[7]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_5
       (.I0(o_data_a[51]),
        .I1(o_data_b__0[51]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[51]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_50
       (.I0(o_data_a[6]),
        .I1(o_data_b__0[6]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[6]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_51
       (.I0(o_data_a[5]),
        .I1(o_data_b__0[5]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[5]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_52
       (.I0(o_data_a[4]),
        .I1(o_data_b__0[4]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[4]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_53
       (.I0(o_data_a[3]),
        .I1(o_data_b__0[3]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[3]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_54
       (.I0(o_data_a[2]),
        .I1(o_data_b__0[2]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[2]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_55
       (.I0(o_data_a[1]),
        .I1(o_data_b__0[1]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[1]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_56
       (.I0(o_data_a[0]),
        .I1(o_data_b__0[0]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[0]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_6
       (.I0(o_data_a[50]),
        .I1(o_data_b__0[50]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[50]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_7
       (.I0(o_data_a[49]),
        .I1(o_data_b__0[49]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[49]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_8
       (.I0(o_data_a[48]),
        .I1(o_data_b__0[48]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[48]));
  LUT3 #(
    .INIT(8'hAC)) 
    o_trx_a_data_i_inferred_i_9
       (.I0(o_data_a[47]),
        .I1(o_data_b__0[47]),
        .I2(o_q__1),
        .O(o_trx_a_data_i0[47]));
endmodule

(* ECO_CHECKSUM = "1beb142" *) 
(* NotValidForBitStream *)
module top
   (GCLK,
    JA3,
    JA2,
    FMC_CLK0_N,
    FMC_CLK0_P,
    FMC_CLK1_N,
    FMC_CLK1_P,
    FMC_LA07_P,
    FMC_LA07_N,
    FMC_LA04_P,
    FMC_LA04_N,
    FMC_LA02_N,
    FMC_LA02_P,
    FMC_LA00_CC_N,
    FMC_LA00_CC_P,
    FMC_LA03_P,
    FMC_LA03_N,
    FMC_LA08_P,
    FMC_LA08_N,
    LD0,
    LD1,
    LD2,
    LD3,
    LD4,
    LD5,
    LD6,
    LD7);
  input GCLK;
  input JA3;
  output JA2;
  input FMC_CLK0_N;
  input FMC_CLK0_P;
  output FMC_CLK1_N;
  output FMC_CLK1_P;
  input FMC_LA07_P;
  input FMC_LA07_N;
  output FMC_LA04_P;
  output FMC_LA04_N;
  output FMC_LA02_N;
  output FMC_LA02_P;
  input FMC_LA00_CC_N;
  input FMC_LA00_CC_P;
  input FMC_LA03_P;
  input FMC_LA03_N;
  output FMC_LA08_P;
  output FMC_LA08_N;
  output LD0;
  output LD1;
  output LD2;
  output LD3;
  output LD4;
  output LD5;
  output LD6;
  output LD7;

  (* IBUF_LOW_PWR = 0 *) wire FMC_CLK0_N;
  (* IBUF_LOW_PWR = 0 *) wire FMC_CLK0_P;
  wire FMC_CLK1_N;
  wire FMC_CLK1_P;
  (* IBUF_LOW_PWR = 0 *) wire FMC_LA00_CC_N;
  (* IBUF_LOW_PWR = 0 *) wire FMC_LA00_CC_P;
  wire FMC_LA02_N;
  wire FMC_LA02_P;
  (* IBUF_LOW_PWR = 0 *) wire FMC_LA03_N;
  (* IBUF_LOW_PWR = 0 *) wire FMC_LA03_P;
  wire FMC_LA04_N;
  wire FMC_LA04_P;
  (* IBUF_LOW_PWR = 0 *) wire FMC_LA07_N;
  (* IBUF_LOW_PWR = 0 *) wire FMC_LA07_P;
  wire FMC_LA08_N;
  wire FMC_LA08_P;
  (* IBUF_LOW_PWR *) wire GCLK;
  wire JA2;
  wire JA2_OBUF;
  wire JA3;
  wire JA3_IBUF;
  wire LD0;
  wire LD1;
  wire LD2;
  wire LD3;
  wire LD4;
  wire LD5;
  wire LD6;
  wire LD7;
  wire [33:0]\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 ;
  wire [55:0]\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 ;
  wire [3:0]\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in ;
  wire [3:0]\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 ;
  wire [33:0]\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in ;
  wire [55:0]\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__7_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__1_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__2_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__3_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__4_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__5_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__6_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6__0_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__7_n_0 ;
  wire \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0_n_0 ;
  wire [7:0]\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in ;
  wire [7:0]\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 ;
  wire \inst_physical_layer_top/internal_clk_600 ;
  wire inst_transceiver_a_n_0;
  wire inst_transceiver_a_n_1;
  wire inst_transceiver_a_n_107;
  wire inst_transceiver_a_n_16;
  wire inst_transceiver_a_n_17;
  wire inst_transceiver_a_n_18;
  wire inst_transceiver_a_n_19;
  wire inst_transceiver_a_n_2;
  wire inst_transceiver_a_n_20;
  wire inst_transceiver_a_n_3;
  wire inst_transceiver_a_n_4;
  wire inst_transceiver_a_n_5;
  wire inst_transceiver_a_n_6;
  wire inst_transceiver_a_n_7;
  wire inst_transceiver_b_n_0;
  wire inst_transceiver_b_n_1;
  wire inst_transceiver_b_n_15;
  wire inst_transceiver_b_n_151;
  wire inst_transceiver_b_n_16;
  wire inst_transceiver_b_n_17;
  wire inst_transceiver_b_n_18;
  wire inst_transceiver_b_n_19;
  wire inst_transceiver_b_n_2;
  wire inst_transceiver_b_n_3;
  wire inst_transceiver_b_n_4;
  wire inst_transceiver_b_n_5;
  wire inst_transceiver_b_n_6;
  (* RTL_KEEP = "inst_mmcm " *) wire o_bufg_clk_120;
  (* RTL_KEEP = "inst_pll " *) wire o_bufg_clk_166;
  (* RTL_KEEP = "inst_mmcm " *) wire o_bufg_clk_300;
  (* RTL_KEEP = "inst_mmcm " *) wire o_bufio_clk_600;
  (* RTL_KEEP = "inst_mmcm " *) wire o_bufr_clk_120;
  (* RTL_KEEP = "inst_mmcm " *) wire o_bufr_clk_200;
  (* RTL_KEEP = "inst_filter_uart_rx " *) wire o_filter;
  (* RTL_KEEP = "inst_pll " *) wire o_locked;
  (* RTL_KEEP = "inst_mmcm " *) wire o_locked__0;
  (* RTL_KEEP = "inst_transceiver_a " *) wire [4:0]o_mon_delay_tabs;
  (* RTL_KEEP = "inst_transceiver_b " *) wire [4:0]o_mon_delay_tabs__0;
  (* RTL_KEEP = "inst_transceiver_a " *) wire [4:0]o_mon_edge_tabs;
  (* RTL_KEEP = "inst_transceiver_b " *) wire [4:0]o_mon_edge_tabs__0;
  (* RTL_KEEP = "inst_rst_test_core " *) wire o_rst;
  (* RTL_KEEP = "inst_rst_trx " *) wire o_rst__0;
  (* RTL_KEEP = "inst_sync_uart_rx " *) wire o_sync;
  (* RTL_KEEP = "inst_transceiver_a " *) wire [33:0]o_tlp;
  (* RTL_KEEP = "inst_transceiver_b " *) wire [55:0]o_tlp__0;
  (* RTL_KEEP = "inst_transceiver_a " *) wire o_tlp_rdy;
  (* RTL_KEEP = "inst_transceiver_b " *) wire o_tlp_rdy__0;
  (* RTL_KEEP = "inst_transceiver_a " *) wire o_tlp_valid;
  (* RTL_KEEP = "inst_transceiver_b " *) wire o_tlp_valid__0;
  (* RTL_KEEP = "inst_test_core " *) wire [55:0]o_trx_a_data_i;
  (* RTL_KEEP = "inst_test_core " *) wire o_trx_a_data_rd;
  (* RTL_KEEP = "inst_test_core " *) wire o_trx_a_data_wr;
  (* RTL_KEEP = "inst_test_core " *) wire [33:0]o_trx_b_data_i;
  (* RTL_KEEP = "inst_test_core " *) wire o_trx_b_data_rd;
  (* RTL_KEEP = "inst_test_core " *) wire o_trx_b_data_wr;
  wire NLW_inst_delay_control_RDY_UNCONNECTED;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5__0_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17__0_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23__0_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29__0_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_33_DOC_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_33_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_35_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_36_41_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_42_47_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_48_53_DOD_UNCONNECTED ;
  wire \NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55_SPO_UNCONNECTED ;
  wire \NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55__0_SPO_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11_DOD_UNCONNECTED ;
  wire [1:0]\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11__0_DOD_UNCONNECTED ;

initial begin
 $sdf_annotate("cpu_impl_netlist.sdf",,,,"tool_control");
end
  OBUF JA2_OBUF_inst
       (.I(JA2_OBUF),
        .O(JA2));
  IBUF JA3_IBUF_inst
       (.I(JA3),
        .O(JA3_IBUF));
  OBUF LD0_OBUF_inst
       (.I(1'b0),
        .O(LD0));
  OBUF LD1_OBUF_inst
       (.I(1'b0),
        .O(LD1));
  OBUF LD2_OBUF_inst
       (.I(1'b0),
        .O(LD2));
  OBUF LD3_OBUF_inst
       (.I(1'b0),
        .O(LD3));
  OBUF LD4_OBUF_inst
       (.I(1'b0),
        .O(LD4));
  OBUF LD5_OBUF_inst
       (.I(1'b0),
        .O(LD5));
  OBUF LD6_OBUF_inst
       (.I(1'b0),
        .O(LD6));
  OBUF LD7_OBUF_inst
       (.I(1'b0),
        .O(LD7));
  (* BOX_TYPE = "PRIMITIVE" *) 
  IDELAYCTRL #(
    .SIM_DEVICE("7SERIES")) 
    inst_delay_control
       (.RDY(NLW_inst_delay_control_RDY_UNCONNECTED),
        .REFCLK(o_bufg_clk_300),
        .RST(1'b0));
  simple_filter inst_filter_uart_rx
       (.D(o_sync),
        .out(o_filter),
        .r_filter_o_reg_0(o_bufg_clk_166));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_UNIQ_BASE_ \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5 
       (.ADDRA({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRB({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRC({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [1:0]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [3:2]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [1:0]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [3:2]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [5:4]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_20));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "5" *) 
  RAM32M_HD122 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5__0 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [1:0]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [3:2]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [1:0]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [3:2]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [5:4]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_0_5__0_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD123 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17 
       (.ADDRA({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRB({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRC({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [13:12]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [15:14]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [13:12]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [15:14]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [17:16]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_20));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "12" *) 
  (* ram_slice_end = "17" *) 
  RAM32M_HD124 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17__0 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [13:12]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [15:14]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [13:12]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [15:14]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [17:16]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_12_17__0_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD125 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23 
       (.ADDRA({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRB({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRC({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [19:18]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [21:20]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [19:18]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [21:20]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [23:22]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_20));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "18" *) 
  (* ram_slice_end = "23" *) 
  RAM32M_HD126 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23__0 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [19:18]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [21:20]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [19:18]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [21:20]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [23:22]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_18_23__0_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD127 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29 
       (.ADDRA({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRB({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRC({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [25:24]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [27:26]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [25:24]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [27:26]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [29:28]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_20));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "24" *) 
  (* ram_slice_end = "29" *) 
  RAM32M_HD128 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29__0 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [25:24]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [27:26]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [25:24]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [27:26]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [29:28]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_24_29__0_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_33" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "33" *) 
  RAM32M_HD129 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_33 
       (.ADDRA({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRB({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRC({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [31:30]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [33:32]),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [31:30]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [33:32]),
        .DOC(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_33_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_33_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_20));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_35" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "30" *) 
  (* ram_slice_end = "35" *) 
  RAM32M_HD130 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_35 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [31:30]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [33:32]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [35:34]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [31:30]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [33:32]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [35:34]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_30_35_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_36_41" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "36" *) 
  (* ram_slice_end = "41" *) 
  RAM32M_HD131 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_36_41 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [37:36]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [39:38]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [41:40]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [37:36]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [39:38]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [41:40]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_36_41_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_42_47" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "42" *) 
  (* ram_slice_end = "47" *) 
  RAM32M_HD132 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_42_47 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [43:42]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [45:44]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [47:46]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [43:42]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [45:44]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [47:46]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_42_47_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_48_53" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "48" *) 
  (* ram_slice_end = "53" *) 
  RAM32M_HD133 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_48_53 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [49:48]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [51:50]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [53:52]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [49:48]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [51:50]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [53:52]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_48_53_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_UNIQ_BASE_ \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55 
       (.A0(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [0]),
        .A1(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [1]),
        .A2(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [2]),
        .A3(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [3]),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [54]),
        .DPO(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [54]),
        .DPRA0(inst_transceiver_b_n_18),
        .DPRA1(inst_transceiver_b_n_17),
        .DPRA2(inst_transceiver_b_n_16),
        .DPRA3(inst_transceiver_b_n_15),
        .DPRA4(1'b0),
        .SPO(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55_SPO_UNCONNECTED ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT = "32'h00000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "54" *) 
  (* ram_slice_end = "55" *) 
  RAM32X1D_HD134 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55__0 
       (.A0(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [0]),
        .A1(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [1]),
        .A2(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [2]),
        .A3(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 [3]),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [55]),
        .DPO(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [55]),
        .DPRA0(inst_transceiver_b_n_18),
        .DPRA1(inst_transceiver_b_n_17),
        .DPRA2(inst_transceiver_b_n_16),
        .DPRA3(inst_transceiver_b_n_15),
        .DPRA4(1'b0),
        .SPO(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_54_55__0_SPO_UNCONNECTED ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "544" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD135 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11 
       (.ADDRA({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRB({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRC({1'b0,inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [7:6]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [9:8]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [7:6]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [9:8]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 [11:10]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_20));
  (* INIT_A = "64'h0000000000000000" *) 
  (* INIT_B = "64'h0000000000000000" *) 
  (* INIT_C = "64'h0000000000000000" *) 
  (* INIT_D = "64'h0000000000000000" *) 
  (* METHODOLOGY_DRC_VIOS = "" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11" *) 
  (* RTL_RAM_TYPE = "RAM_SDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "15" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "11" *) 
  RAM32M_HD136 \inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11__0 
       (.ADDRA({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRB({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRC({1'b0,inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .ADDRD({1'b0,\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 }),
        .DIA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [7:6]),
        .DIB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [9:8]),
        .DIC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [7:6]),
        .DOB(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [9:8]),
        .DOC(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 [11:10]),
        .DOD(\NLW_inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/r_ram_reg_0_15_6_11__0_DOD_UNCONNECTED [1:0]),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_19));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_HD281 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [0]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD282 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [1]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD283 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [1]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD284 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [2]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD285 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [2]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD286 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [3]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD287 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [3]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD288 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [4]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD289 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [4]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM32X1S_HD290 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [5]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM32X1S_HD291 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [5]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM32X1S_HD292 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [6]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM32X1S_HD293 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [6]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "96" *) 
  (* ram_addr_end = "111" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM32X1S_HD294 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [7]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_7));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM32X1S_HD295 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [7]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* XILINX_LEGACY_PRIM = "RAM16X1S" *) 
  (* XILINX_TRANSFORM_PINMAP = "GND:A4" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "79" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_HD296 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__7 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(1'b0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [0]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__7_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM32X1S_UNIQ_BASE_ \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [0]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM32X1S_HD137 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__0 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [1]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM32X1S_HD138 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__1 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [2]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__1_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM32X1S_HD139 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__2 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [3]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__2_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM32X1S_HD140 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__3 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [4]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__3_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM32X1S_HD141 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__4 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [5]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__4_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM32X1S_HD142 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__5 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [6]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__5_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "32'h00000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "64" *) 
  (* ram_addr_end = "95" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM32X1S_HD143 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__6 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [7]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__6_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_6));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM64X1S_UNIQ_BASE_ \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [0]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM64X1S_HD144 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [1]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "1" *) 
  (* ram_slice_end = "1" *) 
  RAM64X1S_HD145 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [1]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM64X1S_HD146 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [2]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "2" *) 
  (* ram_slice_end = "2" *) 
  RAM64X1S_HD147 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [2]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM64X1S_HD148 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [3]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "3" *) 
  (* ram_slice_end = "3" *) 
  RAM64X1S_HD149 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [3]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM64X1S_HD150 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [4]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "4" *) 
  (* ram_slice_end = "4" *) 
  RAM64X1S_HD151 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [4]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM64X1S_HD152 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [5]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "5" *) 
  (* ram_slice_end = "5" *) 
  RAM64X1S_HD153 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [5]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1S_HD154 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [6]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "6" *) 
  (* ram_slice_end = "6" *) 
  RAM64X1S_HD155 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [6]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "896" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1S_HD156 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6 
       (.A0(inst_transceiver_a_n_5),
        .A1(inst_transceiver_a_n_4),
        .A2(inst_transceiver_a_n_3),
        .A3(inst_transceiver_a_n_2),
        .A4(inst_transceiver_a_n_1),
        .A5(inst_transceiver_a_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in [7]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_a_n_107));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "7" *) 
  (* ram_slice_end = "7" *) 
  RAM64X1S_HD157 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6__0 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [7]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6__0_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  (* INIT = "64'h0000000000000000" *) 
  (* RTL_RAM_BITS = "640" *) 
  (* RTL_RAM_NAME = "inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "63" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "0" *) 
  RAM64X1S_HD158 \inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__7 
       (.A0(inst_transceiver_b_n_5),
        .A1(inst_transceiver_b_n_4),
        .A2(inst_transceiver_b_n_3),
        .A3(inst_transceiver_b_n_2),
        .A4(inst_transceiver_b_n_1),
        .A5(inst_transceiver_b_n_0),
        .D(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 [0]),
        .O(\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__7_n_0 ),
        .WCLK(o_bufg_clk_120),
        .WE(inst_transceiver_b_n_151));
  clock_source_mmcm inst_mmcm
       (.FMC_CLK0_N(FMC_CLK0_N),
        .FMC_CLK0_P(FMC_CLK0_P),
        .o_bufg_clk_1200(o_bufg_clk_120),
        .o_bufg_clk_3000(o_bufg_clk_300),
        .o_bufio_clk_6000(o_bufio_clk_600),
        .o_bufr_clk_1200(o_bufr_clk_120),
        .o_bufr_clk_2000(o_bufr_clk_200),
        .o_locked0(o_locked__0));
  clock_source_pll inst_pll
       (.FMC_CLK1_N(FMC_CLK1_N),
        .FMC_CLK1_P(FMC_CLK1_P),
        .GCLK(GCLK),
        .o_bufg_clk_1660(o_bufg_clk_166),
        .o_locked0(o_locked));
  async_reset inst_rst_test_core
       (.out(o_rst),
        .\r_rst_reg[0]_0 (o_bufg_clk_166),
        .\r_rst_reg[0]_1 (o_locked));
  async_reset__parameterized0__hierPathDup__1 inst_rst_trx
       (.CLK(o_bufr_clk_120),
        .out(o_rst__0),
        .\r_rst_reg[0]_0 (o_locked__0));
  synchronizer inst_sync_uart_rx
       (.D(JA3_IBUF),
        .out(o_sync),
        .\r_sync_reg[1]_0 (o_bufg_clk_166));
  test_core_top inst_test_core
       (.D(o_tlp),
        .o_pc_tx(JA2_OBUF),
        .o_trx_a_data_i0(o_trx_a_data_i),
        .o_trx_a_data_rd0(o_trx_a_data_rd),
        .o_trx_a_data_wr0(o_trx_a_data_wr),
        .o_trx_b_data_i0(o_trx_b_data_i),
        .o_trx_b_data_rd0(o_trx_b_data_rd),
        .o_trx_b_data_wr0(o_trx_b_data_wr),
        .out(o_bufg_clk_166),
        .\r_data_reg[4] (o_mon_edge_tabs),
        .\r_data_reg[4]_0 (o_mon_delay_tabs),
        .\r_data_reg[4]_1 (o_mon_edge_tabs__0),
        .\r_data_reg[4]_2 (o_mon_delay_tabs__0),
        .\r_rst_reg[0] (o_rst),
        .\r_sipo_reg[0] (o_filter),
        .\r_state_reg[0] (o_tlp_valid),
        .\r_state_reg[0]_0 (o_tlp_rdy),
        .\r_state_reg[0]_1 (o_tlp_valid__0),
        .\r_state_reg[5] (o_tlp_rdy__0),
        .\r_temp_reg[33] (o_tlp__0));
  lvds_transceiver_top inst_transceiver_a
       (.CLK(o_bufr_clk_120),
        .CLKB0(o_bufio_clk_600),
        .FMC_LA02_N(FMC_LA02_N),
        .FMC_LA02_P(FMC_LA02_P),
        .FMC_LA04_N(FMC_LA04_N),
        .FMC_LA04_P(FMC_LA04_P),
        .FMC_LA07_N(FMC_LA07_N),
        .FMC_LA07_P(FMC_LA07_P),
        .I117({inst_transceiver_a_n_16,inst_transceiver_a_n_17,inst_transceiver_a_n_18,inst_transceiver_a_n_19}),
        .I118(inst_transceiver_a_n_20),
        .O268({inst_transceiver_a_n_0,inst_transceiver_a_n_1,inst_transceiver_a_n_2,inst_transceiver_a_n_3,inst_transceiver_a_n_4,inst_transceiver_a_n_5}),
        .i_clk_200(o_bufr_clk_200),
        .in00(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00 ),
        .inst_oserdese2_master(o_bufio_clk_600),
        .o_mon_delay_tabs(o_mon_delay_tabs),
        .o_mon_edge_tabs(o_mon_edge_tabs),
        .o_tlp(o_tlp),
        .o_tlp_rdy(o_tlp_rdy),
        .o_tlp_valid(o_tlp_valid),
        .out(o_bufg_clk_120),
        .p_3_in(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in ),
        .\r_buffer_addr_reg[5] (inst_transceiver_a_n_6),
        .\r_kd_reg[0] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0_n_0 ),
        .\r_kd_reg[0]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0_n_0 ),
        .\r_kd_reg[0]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0_n_0 ),
        .\r_kd_reg[1] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0_n_0 ),
        .\r_kd_reg[1]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__0_n_0 ),
        .\r_kd_reg[1]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0_n_0 ),
        .\r_kd_reg[2] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1_n_0 ),
        .\r_kd_reg[2]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__1_n_0 ),
        .\r_kd_reg[2]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1_n_0 ),
        .\r_kd_reg[3] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2_n_0 ),
        .\r_kd_reg[3]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__2_n_0 ),
        .\r_kd_reg[3]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2_n_0 ),
        .\r_kd_reg[4] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3_n_0 ),
        .\r_kd_reg[4]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__3_n_0 ),
        .\r_kd_reg[4]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3_n_0 ),
        .\r_kd_reg[5] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4_n_0 ),
        .\r_kd_reg[5]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__4_n_0 ),
        .\r_kd_reg[5]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4_n_0 ),
        .\r_kd_reg[6] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5_n_0 ),
        .\r_kd_reg[6]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__5_n_0 ),
        .\r_kd_reg[6]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5_n_0 ),
        .\r_kd_reg[7] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6_n_0 ),
        .\r_kd_reg[7]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_31_0_0__6_n_0 ),
        .\r_kd_reg[7]_1 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6_n_0 ),
        .\r_mux_stage_reg[7][7] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in ),
        .\r_mux_stage_reg[7][7]_0 (o_trx_a_data_i),
        .\r_rd_ptr_bin_reg[3] (o_trx_a_data_rd),
        .r_rply_wr_reg(inst_transceiver_a_n_7),
        .r_rply_wr_reg_0(inst_transceiver_a_n_107),
        .\r_rst_reg[0] (o_rst__0),
        .\r_rst_reg[1] (o_bufg_clk_166),
        .\r_tlp_temp_wr_addr_reg[3] (\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in ),
        .\r_wr_ptr_bin_reg[0] (o_trx_a_data_wr));
  lvds_transceiver_top__parameterized0 inst_transceiver_b
       (.CLKB0(\inst_physical_layer_top/internal_clk_600 ),
        .FMC_LA00_CC_N(FMC_LA00_CC_N),
        .FMC_LA00_CC_P(FMC_LA00_CC_P),
        .FMC_LA03_N(FMC_LA03_N),
        .FMC_LA03_P(FMC_LA03_P),
        .FMC_LA08_N(FMC_LA08_N),
        .FMC_LA08_P(FMC_LA08_P),
        .O399({inst_transceiver_b_n_0,inst_transceiver_b_n_1,inst_transceiver_b_n_2,inst_transceiver_b_n_3,inst_transceiver_b_n_4,inst_transceiver_b_n_5}),
        .i_tlp(o_trx_b_data_i),
        .in0(\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/in00_0 ),
        .o_clk_600(\inst_physical_layer_top/internal_clk_600 ),
        .o_mon_delay_tabs(o_mon_delay_tabs__0),
        .o_mon_edge_tabs(o_mon_edge_tabs__0),
        .o_tlp(o_tlp__0),
        .o_tlp_rdy(o_tlp_rdy__0),
        .o_tlp_valid(o_tlp_valid__0),
        .out(o_bufg_clk_120),
        .\r_buffer_addr_reg[4] (inst_transceiver_b_n_6),
        .\r_kd_reg[0] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__7_n_0 ),
        .\r_kd_reg[0]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__7_n_0 ),
        .\r_kd_reg[1] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__0__0_n_0 ),
        .\r_kd_reg[1]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__0__0_n_0 ),
        .\r_kd_reg[2] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__1__0_n_0 ),
        .\r_kd_reg[2]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__1__0_n_0 ),
        .\r_kd_reg[3] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__2__0_n_0 ),
        .\r_kd_reg[3]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__2__0_n_0 ),
        .\r_kd_reg[4] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__3__0_n_0 ),
        .\r_kd_reg[4]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__3__0_n_0 ),
        .\r_kd_reg[5] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__4__0_n_0 ),
        .\r_kd_reg[5]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__4__0_n_0 ),
        .\r_kd_reg[6] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__5__0_n_0 ),
        .\r_kd_reg[6]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__5__0_n_0 ),
        .\r_kd_reg[7] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_15_0_0__6__0_n_0 ),
        .\r_kd_reg[7]_0 (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/inst_replay_data/replay_buffer_reg_0_63_0_0__6__0_n_0 ),
        .\r_mux_stage_reg[5][7] (\inst_link_layer_top/inst_transmitter_packet_interface_top/inst_packet_generator/p_2_in_4 ),
        .\r_rd_ptr_bin_reg[3] (o_trx_b_data_rd),
        .r_rply_wr_reg(inst_transceiver_b_n_151),
        .\r_rst_reg[0] (o_bufg_clk_166),
        .\r_stage_reg[7][7] (\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_3_in_2 ),
        .\r_tlp_temp_rd_addr_reg[3] ({inst_transceiver_b_n_15,inst_transceiver_b_n_16,inst_transceiver_b_n_17,inst_transceiver_b_n_18}),
        .\r_tlp_temp_wr_addr_reg[3] (\inst_link_layer_top/inst_receiver_packet_interface_top/inst_packet_checker/p_2_in_3 ),
        .\r_tr_state_reg[6] (inst_transceiver_b_n_19),
        .\r_wr_ptr_bin_reg[0] (o_trx_b_data_wr));
endmodule

module transceiver_elastic_buffer
   (out,
    CLK,
    \r_rst_reg[1] ,
    D,
    \r_rst_reg[1]_0 );
  output [8:0]out;
  input CLK;
  input \r_rst_reg[1] ;
  input [8:0]D;
  input \r_rst_reg[1]_0 ;

  wire CLK;
  wire [8:0]D;
  wire inst_reset_rd_n_0;
  wire inst_reset_wr_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_empty;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_full;
  (* RTL_KEEP = "true" *) wire [8:0]out;
  wire [8:0]r_data_i;
  wire r_rd_enable;
  wire r_rd_enable_i_2_n_0;
  wire \r_rst_reg[1] ;
  wire \r_rst_reg[1]_0 ;
  wire r_wr_enable;
  wire r_wr_enable_i_2_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire [8:0]ri_data_o;
  wire ri_rd_enable;
  wire ri_wr_enable;

  async_fifo__parameterized1 inst_async_fifo
       (.CLK(CLK),
        .Q(r_data_i),
        .o_almost_empty(o_almost_empty),
        .o_almost_full(o_almost_full),
        .out(ri_data_o),
        .r_almost_empty_reg_0(inst_reset_rd_n_0),
        .r_almost_full_reg_0(inst_reset_wr_n_0),
        .r_rd_enable(r_rd_enable),
        .r_wr_enable(r_wr_enable),
        .\r_wr_ptr_bin_reg[0]_0 (\r_rst_reg[1] ));
  async_reset__parameterized1 inst_reset_rd
       (.CLK(CLK),
        .\r_rst_reg[0]_0 (\r_rst_reg[1]_0 ),
        .\r_rst_reg[1]_0 (inst_reset_rd_n_0));
  async_reset__parameterized1_1 inst_reset_wr
       (.\r_rst_reg[1]_0 (inst_reset_wr_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ),
        .\r_rst_reg[1]_2 (\r_rst_reg[1]_0 ));
  FDCE \r_data_i_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[0]),
        .Q(r_data_i[0]));
  FDCE \r_data_i_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[1]),
        .Q(r_data_i[1]));
  FDPE \r_data_i_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(D[2]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[2]));
  FDPE \r_data_i_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(D[3]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[3]));
  FDPE \r_data_i_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(D[4]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[4]));
  FDPE \r_data_i_reg[5] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(D[5]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[5]));
  FDPE \r_data_i_reg[6] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(D[6]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[6]));
  FDCE \r_data_i_reg[7] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[7]),
        .Q(r_data_i[7]));
  FDPE \r_data_i_reg[8] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .D(D[8]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[8]));
  FDCE \r_data_o_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[0]),
        .Q(out[0]));
  FDCE \r_data_o_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[1]),
        .Q(out[1]));
  FDPE \r_data_o_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[2]),
        .PRE(inst_reset_rd_n_0),
        .Q(out[2]));
  FDPE \r_data_o_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[3]),
        .PRE(inst_reset_rd_n_0),
        .Q(out[3]));
  FDPE \r_data_o_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[4]),
        .PRE(inst_reset_rd_n_0),
        .Q(out[4]));
  FDPE \r_data_o_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[5]),
        .PRE(inst_reset_rd_n_0),
        .Q(out[5]));
  FDPE \r_data_o_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[6]),
        .PRE(inst_reset_rd_n_0),
        .Q(out[6]));
  FDCE \r_data_o_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[7]),
        .Q(out[7]));
  FDPE \r_data_o_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[8]),
        .PRE(inst_reset_rd_n_0),
        .Q(out[8]));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_rd_enable_i_1
       (.I0(ri_data_o[6]),
        .I1(ri_data_o[5]),
        .I2(r_rd_enable_i_2_n_0),
        .I3(ri_data_o[7]),
        .I4(o_almost_empty),
        .O(ri_rd_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_rd_enable_i_2
       (.I0(ri_data_o[2]),
        .I1(ri_data_o[4]),
        .I2(ri_data_o[1]),
        .I3(ri_data_o[0]),
        .I4(ri_data_o[8]),
        .I5(ri_data_o[3]),
        .O(r_rd_enable_i_2_n_0));
  FDCE r_rd_enable_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_rd_enable),
        .Q(r_rd_enable));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_wr_enable_i_1
       (.I0(D[6]),
        .I1(D[5]),
        .I2(r_wr_enable_i_2_n_0),
        .I3(D[7]),
        .I4(o_almost_full),
        .O(ri_wr_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_wr_enable_i_2
       (.I0(D[2]),
        .I1(D[4]),
        .I2(D[1]),
        .I3(D[0]),
        .I4(D[8]),
        .I5(D[3]),
        .O(r_wr_enable_i_2_n_0));
  FDCE r_wr_enable_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(ri_wr_enable),
        .Q(r_wr_enable));
endmodule

(* ORIG_REF_NAME = "transceiver_elastic_buffer" *) 
module transceiver_elastic_buffer__hierPathDup__1
   (o_data,
    i_wr_clk,
    out,
    D,
    \r_rst_reg[1] );
  output [8:0]o_data;
  input i_wr_clk;
  input out;
  input [8:0]D;
  input \r_rst_reg[1] ;

  wire [8:0]D;
  wire i_wr_clk;
  wire inst_reset_rd_n_0;
  wire inst_reset_wr_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_empty;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_full;
  (* RTL_KEEP = "true" *) wire [8:0]o_data;
  wire out;
  wire [8:0]r_data_i;
  wire r_rd_enable;
  wire r_rd_enable_i_2_n_0;
  wire \r_rst_reg[1] ;
  wire r_wr_enable;
  wire r_wr_enable_i_2_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire [8:0]ri_data_o;
  wire ri_rd_enable;
  wire ri_wr_enable;

  async_fifo__parameterized1__hierPathDup__1 inst_async_fifo
       (.Q(r_data_i),
        .i_wr_clk(i_wr_clk),
        .in00(ri_data_o),
        .o_almost_empty(o_almost_empty),
        .out(o_almost_full),
        .r_rd_enable(r_rd_enable),
        .\r_rd_ptr_diff_reg[0]_0 (inst_reset_rd_n_0),
        .\r_rd_ptr_diff_reg[6]_0 (out),
        .r_wr_enable(r_wr_enable),
        .\r_wr_ptr_diff_reg[2]_0 (inst_reset_wr_n_0));
  async_reset__parameterized1_25 inst_reset_rd
       (.out(out),
        .\r_rst_reg[1]_0 (inst_reset_rd_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  async_reset__parameterized1_26 inst_reset_wr
       (.i_wr_clk(i_wr_clk),
        .\r_rst_reg[1]_0 (inst_reset_wr_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  FDCE \r_data_i_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[0]),
        .Q(r_data_i[0]));
  FDCE \r_data_i_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[1]),
        .Q(r_data_i[1]));
  FDPE \r_data_i_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[2]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[2]));
  FDPE \r_data_i_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[3]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[3]));
  FDPE \r_data_i_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[4]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[4]));
  FDPE \r_data_i_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[5]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[5]));
  FDPE \r_data_i_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[6]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[6]));
  FDCE \r_data_i_reg[7] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[7]),
        .Q(r_data_i[7]));
  FDPE \r_data_i_reg[8] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[8]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[8]));
  FDCE \r_data_o_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[0]),
        .Q(o_data[0]));
  FDCE \r_data_o_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[1]),
        .Q(o_data[1]));
  FDPE \r_data_o_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[2]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[2]));
  FDPE \r_data_o_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[3]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[3]));
  FDPE \r_data_o_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[4]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[4]));
  FDPE \r_data_o_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[5]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[5]));
  FDPE \r_data_o_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[6]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[6]));
  FDCE \r_data_o_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[7]),
        .Q(o_data[7]));
  FDPE \r_data_o_reg[8] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[8]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[8]));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_rd_enable_i_1
       (.I0(ri_data_o[6]),
        .I1(ri_data_o[5]),
        .I2(r_rd_enable_i_2_n_0),
        .I3(ri_data_o[7]),
        .I4(o_almost_empty),
        .O(ri_rd_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_rd_enable_i_2
       (.I0(ri_data_o[2]),
        .I1(ri_data_o[4]),
        .I2(ri_data_o[1]),
        .I3(ri_data_o[0]),
        .I4(ri_data_o[8]),
        .I5(ri_data_o[3]),
        .O(r_rd_enable_i_2_n_0));
  FDCE r_rd_enable_reg
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_rd_enable),
        .Q(r_rd_enable));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_wr_enable_i_1
       (.I0(D[6]),
        .I1(D[5]),
        .I2(r_wr_enable_i_2_n_0),
        .I3(D[7]),
        .I4(o_almost_full),
        .O(ri_wr_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_wr_enable_i_2
       (.I0(D[2]),
        .I1(D[4]),
        .I2(D[1]),
        .I3(D[0]),
        .I4(D[8]),
        .I5(D[3]),
        .O(r_wr_enable_i_2_n_0));
  FDCE r_wr_enable_reg
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(ri_wr_enable),
        .Q(r_wr_enable));
endmodule

(* ORIG_REF_NAME = "transceiver_elastic_buffer" *) 
module transceiver_elastic_buffer__hierPathDup__2
   (o_data,
    out,
    CLK,
    D,
    \r_rst_reg[1] );
  output [8:0]o_data;
  input out;
  input CLK;
  input [8:0]D;
  input \r_rst_reg[1] ;

  wire CLK;
  wire [8:0]D;
  wire inst_reset_rd_n_0;
  wire inst_reset_wr_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_empty;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_full;
  (* RTL_KEEP = "true" *) wire [8:0]o_data;
  wire out;
  wire [8:0]r_data_i;
  wire r_rd_enable;
  wire r_rd_enable_i_2_n_0;
  wire \r_rst_reg[1] ;
  wire r_wr_enable;
  wire r_wr_enable_i_2_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire [8:0]ri_data_o;
  wire ri_rd_enable;
  wire ri_wr_enable;

  async_fifo__parameterized1__hierPathDup__2 inst_async_fifo
       (.CLK(CLK),
        .Q(r_data_i),
        .in00(ri_data_o),
        .o_almost_empty(o_almost_empty),
        .out(o_almost_full),
        .r_full_reg_0(out),
        .r_rd_enable(r_rd_enable),
        .\r_rd_ptr_diff_reg[0]_0 (inst_reset_rd_n_0),
        .r_wr_enable(r_wr_enable),
        .\r_wr_ptr_diff_reg[2]_0 (inst_reset_wr_n_0));
  async_reset__parameterized1_23 inst_reset_rd
       (.CLK(CLK),
        .\r_rst_reg[0]_0 (\r_rst_reg[1] ),
        .\r_rst_reg[1]_0 (inst_reset_rd_n_0));
  async_reset__parameterized1_24 inst_reset_wr
       (.out(out),
        .\r_rst_reg[1]_0 (inst_reset_wr_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  FDCE \r_data_i_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[0]),
        .Q(r_data_i[0]));
  FDCE \r_data_i_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[1]),
        .Q(r_data_i[1]));
  FDPE \r_data_i_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(D[2]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[2]));
  FDPE \r_data_i_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(D[3]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[3]));
  FDPE \r_data_i_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(D[4]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[4]));
  FDPE \r_data_i_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(D[5]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[5]));
  FDPE \r_data_i_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(D[6]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[6]));
  FDCE \r_data_i_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[7]),
        .Q(r_data_i[7]));
  FDPE \r_data_i_reg[8] 
       (.C(out),
        .CE(1'b1),
        .D(D[8]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[8]));
  FDCE \r_data_o_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[0]),
        .Q(o_data[0]));
  FDCE \r_data_o_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[1]),
        .Q(o_data[1]));
  FDPE \r_data_o_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[2]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[2]));
  FDPE \r_data_o_reg[3] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[3]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[3]));
  FDPE \r_data_o_reg[4] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[4]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[4]));
  FDPE \r_data_o_reg[5] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[5]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[5]));
  FDPE \r_data_o_reg[6] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[6]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[6]));
  FDCE \r_data_o_reg[7] 
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[7]),
        .Q(o_data[7]));
  FDPE \r_data_o_reg[8] 
       (.C(CLK),
        .CE(1'b1),
        .D(ri_data_o[8]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[8]));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_rd_enable_i_1
       (.I0(ri_data_o[6]),
        .I1(ri_data_o[5]),
        .I2(r_rd_enable_i_2_n_0),
        .I3(ri_data_o[7]),
        .I4(o_almost_empty),
        .O(ri_rd_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_rd_enable_i_2
       (.I0(ri_data_o[2]),
        .I1(ri_data_o[4]),
        .I2(ri_data_o[1]),
        .I3(ri_data_o[0]),
        .I4(ri_data_o[8]),
        .I5(ri_data_o[3]),
        .O(r_rd_enable_i_2_n_0));
  FDCE r_rd_enable_reg
       (.C(CLK),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_rd_enable),
        .Q(r_rd_enable));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_wr_enable_i_1
       (.I0(D[6]),
        .I1(D[5]),
        .I2(r_wr_enable_i_2_n_0),
        .I3(D[7]),
        .I4(o_almost_full),
        .O(ri_wr_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_wr_enable_i_2
       (.I0(D[2]),
        .I1(D[4]),
        .I2(D[1]),
        .I3(D[0]),
        .I4(D[8]),
        .I5(D[3]),
        .O(r_wr_enable_i_2_n_0));
  FDCE r_wr_enable_reg
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(ri_wr_enable),
        .Q(r_wr_enable));
endmodule

(* ORIG_REF_NAME = "transceiver_elastic_buffer" *) 
module transceiver_elastic_buffer__hierPathDup__3
   (o_data,
    i_wr_clk,
    out,
    D,
    \r_rst_reg[1] );
  output [8:0]o_data;
  input i_wr_clk;
  input out;
  input [8:0]D;
  input \r_rst_reg[1] ;

  wire [8:0]D;
  wire i_wr_clk;
  wire inst_reset_rd_n_0;
  wire inst_reset_wr_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_empty;
  (* RTL_KEEP = "inst_async_fifo " *) wire o_almost_full;
  (* RTL_KEEP = "true" *) wire [8:0]o_data;
  wire out;
  wire [8:0]r_data_i;
  wire r_rd_enable;
  wire r_rd_enable_i_2_n_0;
  wire \r_rst_reg[1] ;
  wire r_wr_enable;
  wire r_wr_enable_i_2_n_0;
  (* RTL_KEEP = "inst_async_fifo " *) wire [8:0]ri_data_o;
  wire ri_rd_enable;
  wire ri_wr_enable;

  async_fifo__parameterized1__hierPathDup__3 inst_async_fifo
       (.Q(r_data_i),
        .i_wr_clk(i_wr_clk),
        .in00(ri_data_o),
        .o_almost_empty(o_almost_empty),
        .out(o_almost_full),
        .r_rd_enable(r_rd_enable),
        .\r_rd_ptr_bin_reg[6]_0 (out),
        .\r_rd_ptr_diff_reg[0]_0 (inst_reset_rd_n_0),
        .r_wr_enable(r_wr_enable),
        .\r_wr_ptr_diff_reg[2]_0 (inst_reset_wr_n_0));
  async_reset__parameterized1_2 inst_reset_rd
       (.out(out),
        .\r_rst_reg[1]_0 (inst_reset_rd_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  async_reset__parameterized1_3 inst_reset_wr
       (.i_wr_clk(i_wr_clk),
        .\r_rst_reg[1]_0 (inst_reset_wr_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  FDCE \r_data_i_reg[0] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[0]),
        .Q(r_data_i[0]));
  FDCE \r_data_i_reg[1] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[1]),
        .Q(r_data_i[1]));
  FDPE \r_data_i_reg[2] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[2]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[2]));
  FDPE \r_data_i_reg[3] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[3]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[3]));
  FDPE \r_data_i_reg[4] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[4]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[4]));
  FDPE \r_data_i_reg[5] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[5]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[5]));
  FDPE \r_data_i_reg[6] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[6]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[6]));
  FDCE \r_data_i_reg[7] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(D[7]),
        .Q(r_data_i[7]));
  FDPE \r_data_i_reg[8] 
       (.C(i_wr_clk),
        .CE(1'b1),
        .D(D[8]),
        .PRE(inst_reset_wr_n_0),
        .Q(r_data_i[8]));
  FDCE \r_data_o_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[0]),
        .Q(o_data[0]));
  FDCE \r_data_o_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[1]),
        .Q(o_data[1]));
  FDPE \r_data_o_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[2]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[2]));
  FDPE \r_data_o_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[3]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[3]));
  FDPE \r_data_o_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[4]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[4]));
  FDPE \r_data_o_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[5]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[5]));
  FDPE \r_data_o_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[6]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[6]));
  FDCE \r_data_o_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_data_o[7]),
        .Q(o_data[7]));
  FDPE \r_data_o_reg[8] 
       (.C(out),
        .CE(1'b1),
        .D(ri_data_o[8]),
        .PRE(inst_reset_rd_n_0),
        .Q(o_data[8]));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_rd_enable_i_1
       (.I0(ri_data_o[6]),
        .I1(ri_data_o[5]),
        .I2(r_rd_enable_i_2_n_0),
        .I3(ri_data_o[7]),
        .I4(o_almost_empty),
        .O(ri_rd_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_rd_enable_i_2
       (.I0(ri_data_o[2]),
        .I1(ri_data_o[4]),
        .I2(ri_data_o[1]),
        .I3(ri_data_o[0]),
        .I4(ri_data_o[8]),
        .I5(ri_data_o[3]),
        .O(r_rd_enable_i_2_n_0));
  FDCE r_rd_enable_reg
       (.C(out),
        .CE(1'b1),
        .CLR(inst_reset_rd_n_0),
        .D(ri_rd_enable),
        .Q(r_rd_enable));
  LUT5 #(
    .INIT(32'hFFF7FFFF)) 
    r_wr_enable_i_1
       (.I0(D[6]),
        .I1(D[5]),
        .I2(r_wr_enable_i_2_n_0),
        .I3(D[7]),
        .I4(o_almost_full),
        .O(ri_wr_enable));
  LUT6 #(
    .INIT(64'hFFF7FFFFFFFFFFFF)) 
    r_wr_enable_i_2
       (.I0(D[2]),
        .I1(D[4]),
        .I2(D[1]),
        .I3(D[0]),
        .I4(D[8]),
        .I5(D[3]),
        .O(r_wr_enable_i_2_n_0));
  FDCE r_wr_enable_reg
       (.C(i_wr_clk),
        .CE(1'b1),
        .CLR(inst_reset_wr_n_0),
        .D(ri_wr_enable),
        .Q(r_wr_enable));
endmodule

module transceiver_link_controller
   (out,
    o_tx_dllp_wr,
    o_tx_start,
    o_tx_stop,
    o_tx_rply,
    o_tx_id_ack,
    o_rx_dllp_rd,
    o_rx_id_result_rd,
    Q,
    r_rx_tlp_rdy_reg_0,
    \r_rst_reg[1] ,
    \r_state_reg[2]_0 ,
    \r_state_reg[9]_0 ,
    \r_state_reg[8]_0 ,
    \r_state_reg[0]__0_0 ,
    \r_state_reg[0]__0_1 ,
    \r_dllp_tx_reg[8]_0 ,
    \r_rst_reg[0] ,
    D,
    lopt);
  output [15:0]out;
  output o_tx_dllp_wr;
  output o_tx_start;
  output o_tx_stop;
  output o_tx_rply;
  output o_tx_id_ack;
  output o_rx_dllp_rd;
  output o_rx_id_result_rd;
  output [0:0]Q;
  input r_rx_tlp_rdy_reg_0;
  input \r_rst_reg[1] ;
  input \r_state_reg[2]_0 ;
  input \r_state_reg[9]_0 ;
  input \r_state_reg[8]_0 ;
  input \r_state_reg[0]__0_0 ;
  input \r_state_reg[0]__0_1 ;
  input [4:0]\r_dllp_tx_reg[8]_0 ;
  input \r_rst_reg[0] ;
  input [1:0]D;
  input lopt;

  wire \<const0> ;
  wire [1:0]D;
  wire [0:0]Q;
  wire inst_local_reset_n_0;
  wire lopt;
  (* RTL_KEEP = "true" *) wire o_rx_dllp_rd;
  (* RTL_KEEP = "true" *) wire o_rx_id_result_rd;
  (* RTL_KEEP = "true" *) wire o_tx_dllp_wr;
  (* RTL_KEEP = "true" *) wire o_tx_id_ack;
  (* RTL_KEEP = "true" *) wire o_tx_start;
  (* RTL_KEEP = "true" *) wire o_tx_stop;
  (* RTL_KEEP = "true" *) wire [15:0]\^out ;
  wire \r_dllp_rx[15]_i_2__0_n_0 ;
  wire \r_dllp_rx_reg_n_0_[15] ;
  wire \r_dllp_rx_reg_n_0_[8] ;
  wire \r_dllp_tx[15]_i_3__0_n_0 ;
  wire [4:0]\r_dllp_tx_reg[8]_0 ;
  wire [1:0]r_jump_sel;
  wire \r_jump_sel[0]_i_1__0_n_0 ;
  wire \r_jump_sel[0]_i_2_n_0 ;
  wire \r_jump_sel[1]_i_1__0_n_0 ;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire r_rx_tlp_rdy;
  wire r_rx_tlp_rdy_reg_0;
  (* RTL_KEEP = "true" *) wire [7:7]r_state;
  wire \r_state[0]__0_i_2__2_n_0 ;
  wire \r_state[0]__0_i_3__2_n_0 ;
  wire \r_state[0]__0_i_4__2_n_0 ;
  wire \r_state[0]__0_i_5__2_n_0 ;
  wire \r_state[0]__0_i_6__2_n_0 ;
  wire \r_state[0]__0_i_7__2_n_0 ;
  wire \r_state[0]__0_i_8__0_n_0 ;
  wire \r_state[0]_i_10__2_n_0 ;
  wire \r_state[0]_i_11__2_n_0 ;
  wire \r_state[0]_i_12__2_n_0 ;
  wire \r_state[0]_i_2__10_n_0 ;
  wire \r_state[0]_i_3__9_n_0 ;
  wire \r_state[0]_i_4__8_n_0 ;
  wire \r_state[0]_i_5__6_n_0 ;
  wire \r_state[0]_i_6__4_n_0 ;
  wire \r_state[0]_i_7__2_n_0 ;
  wire \r_state[0]_i_8__2_n_0 ;
  wire \r_state[0]_i_9__1_n_0 ;
  wire \r_state[11]__0_i_2__0_n_0 ;
  wire \r_state[11]__0_i_3__0_n_0 ;
  wire \r_state[11]_i_2__5_n_0 ;
  wire \r_state[11]_i_3__2_n_0 ;
  wire \r_state[12]__0_i_2_n_0 ;
  wire \r_state[12]__0_i_3__0_n_0 ;
  wire \r_state[12]__0_i_4__0_n_0 ;
  wire \r_state[12]_i_2__5_n_0 ;
  wire \r_state[12]_i_3__5_n_0 ;
  wire \r_state[14]__0_i_2__0_n_0 ;
  wire \r_state[14]__0_i_3_n_0 ;
  wire \r_state[14]__0_i_4__0_n_0 ;
  wire \r_state[14]_i_2__2_n_0 ;
  wire \r_state[14]_i_3__2_n_0 ;
  wire \r_state[16]__0_i_2__0_n_0 ;
  wire \r_state[16]__0_i_3__0_n_0 ;
  wire \r_state[16]__0_i_4__0_n_0 ;
  wire \r_state[16]__0_i_5__0_n_0 ;
  wire \r_state[16]__0_i_6_n_0 ;
  wire \r_state[16]_i_10__0_n_0 ;
  wire \r_state[16]_i_11__0_n_0 ;
  wire \r_state[16]_i_12__0_n_0 ;
  wire \r_state[16]_i_4__0_n_0 ;
  wire \r_state[16]_i_5__0_n_0 ;
  wire \r_state[16]_i_6__0_n_0 ;
  wire \r_state[16]_i_7__0_n_0 ;
  wire \r_state[16]_i_8__0_n_0 ;
  wire \r_state[16]_i_9__0_n_0 ;
  wire \r_state[1]__0_i_2__0_n_0 ;
  wire \r_state[1]__0_i_3_n_0 ;
  wire \r_state[2]__0_i_2__2_n_0 ;
  wire \r_state[2]__0_i_3__0_n_0 ;
  wire \r_state[2]__0_i_4__0_n_0 ;
  wire \r_state[2]__0_i_5__0_n_0 ;
  wire \r_state[2]__0_i_6__0_n_0 ;
  wire \r_state[2]_i_2__10_n_0 ;
  wire \r_state[2]_i_3__1_n_0 ;
  wire \r_state[2]_i_4__0_n_0 ;
  wire \r_state[2]_i_5__0_n_0 ;
  wire \r_state[2]_i_6__0_n_0 ;
  wire \r_state[2]_i_7__0_n_0 ;
  wire \r_state[6]__0_i_2__2_n_0 ;
  wire \r_state[6]_i_2__6_n_0 ;
  wire \r_state[7]__0_i_2__2_n_0 ;
  wire \r_state[7]__0_i_3__2_n_0 ;
  wire \r_state[7]_i_2__7_n_0 ;
  wire \r_state[7]_i_3__3_n_0 ;
  wire \r_state[8]__0_i_1__0_n_0 ;
  wire \r_state[8]__0_i_2__0_n_0 ;
  wire \r_state[9]__0_i_1__0_n_0 ;
  wire \r_state[9]__0_i_2__2_n_0 ;
  wire \r_state[9]__0_i_3__2_n_0 ;
  wire \r_state[9]__0_i_4__0_n_0 ;
  wire \r_state[9]__0_i_5_n_0 ;
  wire \r_state[9]_i_2__4_n_0 ;
  wire \r_state[9]_i_3__4_n_0 ;
  wire \r_state[9]_i_4__2_n_0 ;
  wire \r_state[9]_i_5__2_n_0 ;
  wire [16:0]r_state__0;
  wire \r_state_reg[0]__0_0 ;
  wire \r_state_reg[0]__0_1 ;
  wire \r_state_reg[0]__0_n_0 ;
  wire \r_state_reg[11]__0_n_0 ;
  wire \r_state_reg[16]__0_n_0 ;
  wire \r_state_reg[2]_0 ;
  wire \r_state_reg[2]__0_n_0 ;
  wire \r_state_reg[3]__0_n_0 ;
  wire \r_state_reg[4]__0_n_0 ;
  wire \r_state_reg[5]__0_n_0 ;
  wire \r_state_reg[6]__0_n_0 ;
  wire \r_state_reg[8]_0 ;
  wire \r_state_reg[9]_0 ;
  wire \r_status_timer[0]_i_2__0_n_0 ;
  wire \r_status_timer[0]_i_3__0_n_0 ;
  wire \r_status_timer[0]_i_4__0_n_0 ;
  wire \r_status_timer[0]_i_5__0_n_0 ;
  wire \r_status_timer[0]_i_6__0_n_0 ;
  wire \r_status_timer[12]_i_2__0_n_0 ;
  wire \r_status_timer[4]_i_2__0_n_0 ;
  wire \r_status_timer[4]_i_3__0_n_0 ;
  wire \r_status_timer[4]_i_4__0_n_0 ;
  wire \r_status_timer[4]_i_5__0_n_0 ;
  wire \r_status_timer[8]_i_2__0_n_0 ;
  wire \r_status_timer[8]_i_3__0_n_0 ;
  wire \r_status_timer[8]_i_4__0_n_0 ;
  wire \r_status_timer[8]_i_5__0_n_0 ;
  wire [12:0]r_status_timer_reg;
  wire \r_status_timer_reg[0]_i_1__0_n_0 ;
  wire \r_status_timer_reg[0]_i_1__0_n_4 ;
  wire \r_status_timer_reg[0]_i_1__0_n_5 ;
  wire \r_status_timer_reg[0]_i_1__0_n_6 ;
  wire \r_status_timer_reg[0]_i_1__0_n_7 ;
  wire \r_status_timer_reg[12]_i_1__0_n_7 ;
  wire \r_status_timer_reg[4]_i_1__0_n_0 ;
  wire \r_status_timer_reg[4]_i_1__0_n_4 ;
  wire \r_status_timer_reg[4]_i_1__0_n_5 ;
  wire \r_status_timer_reg[4]_i_1__0_n_6 ;
  wire \r_status_timer_reg[4]_i_1__0_n_7 ;
  wire \r_status_timer_reg[8]_i_1__0_n_0 ;
  wire \r_status_timer_reg[8]_i_1__0_n_4 ;
  wire \r_status_timer_reg[8]_i_1__0_n_5 ;
  wire \r_status_timer_reg[8]_i_1__0_n_6 ;
  wire \r_status_timer_reg[8]_i_1__0_n_7 ;
  wire r_update_status;
  wire r_update_status_i_2__0_n_0;
  wire ri_dllp_rx;
  wire ri_dllp_tx;
  wire [15:0]ri_dllp_tx0_in;
  wire ri_jump_sel;
  wire ri_state;
  wire [16:0]ri_state__0;
  wire [16:0]ri_state__1;
  wire ri_update_status;
  wire [2:0]\NLW_r_status_timer_reg[0]_i_1__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_r_status_timer_reg[12]_i_1__0_CO_UNCONNECTED ;
  wire [3:1]\NLW_r_status_timer_reg[12]_i_1__0_O_UNCONNECTED ;
  wire [2:0]\NLW_r_status_timer_reg[4]_i_1__0_CO_UNCONNECTED ;
  wire [2:0]\NLW_r_status_timer_reg[8]_i_1__0_CO_UNCONNECTED ;

  assign out[15] = \^out [15];
  assign out[14] = \<const0> ;
  assign out[13] = \<const0> ;
  assign out[12] = \<const0> ;
  assign out[11] = \<const0> ;
  assign out[10] = \<const0> ;
  assign out[9] = \<const0> ;
  assign out[8] = \^out [8];
  assign out[7] = \<const0> ;
  assign out[6] = \<const0> ;
  assign out[5] = \<const0> ;
  assign out[4] = \<const0> ;
  assign out[3:0] = \^out [3:0];
  GND GND
       (.G(\<const0> ));
  async_reset__parameterized1_15 inst_local_reset
       (.\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_rst_reg[1]_1 (\r_rst_reg[1] ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \r_dllp_rx[15]_i_1__0 
       (.I0(\r_dllp_rx[15]_i_2__0_n_0 ),
        .I1(r_state__0[4]),
        .I2(r_state__0[8]),
        .I3(r_state__0[6]),
        .I4(r_state__0[7]),
        .I5(r_state__0[5]),
        .O(ri_dllp_rx));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_dllp_rx[15]_i_2__0 
       (.I0(\r_state[16]_i_8__0_n_0 ),
        .I1(r_state__0[2]),
        .I2(r_state__0[3]),
        .I3(r_state__0[0]),
        .I4(r_state__0[1]),
        .O(\r_dllp_rx[15]_i_2__0_n_0 ));
  FDCE \r_dllp_rx_reg[15] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_rx),
        .CLR(inst_local_reset_n_0),
        .D(D[1]),
        .Q(\r_dllp_rx_reg_n_0_[15] ));
  FDCE \r_dllp_rx_reg[8] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_rx),
        .CLR(inst_local_reset_n_0),
        .D(D[0]),
        .Q(\r_dllp_rx_reg_n_0_[8] ));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[0]_i_1__0 
       (.I0(\r_dllp_tx_reg[8]_0 [0]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[0]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_dllp_tx[15]_i_1__0 
       (.I0(\r_state[16]_i_8__0_n_0 ),
        .I1(r_state__0[8]),
        .I2(r_state__0[6]),
        .I3(r_state__0[0]),
        .I4(r_state__0[4]),
        .I5(\r_dllp_tx[15]_i_3__0_n_0 ),
        .O(ri_dllp_tx));
  LUT1 #(
    .INIT(2'h1)) 
    \r_dllp_tx[15]_i_2__0 
       (.I0(r_state__0[7]),
        .O(ri_dllp_tx0_in[15]));
  LUT5 #(
    .INIT(32'hFFFFFEEF)) 
    \r_dllp_tx[15]_i_3__0 
       (.I0(r_state__0[3]),
        .I1(r_state__0[2]),
        .I2(r_state__0[5]),
        .I3(r_state__0[7]),
        .I4(r_state__0[1]),
        .O(\r_dllp_tx[15]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[1]_i_1__0 
       (.I0(\r_dllp_tx_reg[8]_0 [1]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[2]_i_1__0 
       (.I0(\r_dllp_tx_reg[8]_0 [2]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[3]_i_1__0 
       (.I0(\r_dllp_tx_reg[8]_0 [3]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[3]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \r_dllp_tx[8]_i_1__0 
       (.I0(\r_dllp_tx_reg[8]_0 [4]),
        .I1(r_state__0[5]),
        .I2(lopt),
        .O(ri_dllp_tx0_in[8]));
  FDCE \r_dllp_tx_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[0]),
        .Q(\^out [0]));
  FDCE \r_dllp_tx_reg[15] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[15]),
        .Q(\^out [15]));
  FDCE \r_dllp_tx_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[1]),
        .Q(\^out [1]));
  FDCE \r_dllp_tx_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[2]),
        .Q(\^out [2]));
  FDCE \r_dllp_tx_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[3]),
        .Q(\^out [3]));
  FDCE \r_dllp_tx_reg[8] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[8]),
        .Q(\^out [8]));
  LUT6 #(
    .INIT(64'hFFFBFFFF00040000)) 
    \r_jump_sel[0]_i_1__0 
       (.I0(\r_jump_sel[0]_i_2_n_0 ),
        .I1(r_state__0[2]),
        .I2(r_state__0[0]),
        .I3(r_state__0[1]),
        .I4(\r_state[16]_i_8__0_n_0 ),
        .I5(r_jump_sel[0]),
        .O(\r_jump_sel[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_jump_sel[0]_i_2 
       (.I0(r_state__0[3]),
        .I1(r_state__0[4]),
        .I2(r_state__0[5]),
        .I3(r_state__0[7]),
        .I4(r_state__0[6]),
        .I5(r_state__0[8]),
        .O(\r_jump_sel[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \r_jump_sel[1]_i_1__0 
       (.I0(r_jump_sel[0]),
        .I1(ri_jump_sel),
        .I2(r_jump_sel[1]),
        .O(\r_jump_sel[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_jump_sel[1]_i_2__0 
       (.I0(\r_state[16]_i_8__0_n_0 ),
        .I1(r_state__0[1]),
        .I2(r_state__0[0]),
        .I3(r_state__0[2]),
        .I4(\r_jump_sel[0]_i_2_n_0 ),
        .O(ri_jump_sel));
  FDCE #(
    .INIT(1'b0)) 
    \r_jump_sel_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_jump_sel[0]_i_1__0_n_0 ),
        .Q(r_jump_sel[0]));
  FDCE #(
    .INIT(1'b0)) 
    \r_jump_sel_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_jump_sel[1]_i_1__0_n_0 ),
        .Q(r_jump_sel[1]));
  FDCE r_rx_tlp_rdy_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_rx_tlp_rdy_reg_0),
        .Q(r_rx_tlp_rdy));
  LUT6 #(
    .INIT(64'hD7C6FFFFD7C6D7C6)) 
    \r_state[0]__0_i_1__2 
       (.I0(\r_state[0]__0_i_2__2_n_0 ),
        .I1(\r_state_reg[0]__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state[0]__0_i_3__2_n_0 ),
        .I4(\r_state[0]__0_i_4__2_n_0 ),
        .I5(\r_state[0]__0_i_5__2_n_0 ),
        .O(ri_state__1[0]));
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[0]__0_i_2__2 
       (.I0(\r_state_reg[3]__0_n_0 ),
        .I1(Q),
        .I2(\r_state[9]__0_i_2__2_n_0 ),
        .I3(\r_state[16]__0_i_4__0_n_0 ),
        .I4(\r_state_reg[16]__0_n_0 ),
        .O(\r_state[0]__0_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEE0EEEEEEEEEE)) 
    \r_state[0]__0_i_3__2 
       (.I0(\r_state_reg[2]__0_n_0 ),
        .I1(Q),
        .I2(\r_state_reg[16]__0_n_0 ),
        .I3(\r_state[16]__0_i_4__0_n_0 ),
        .I4(\r_state[9]__0_i_2__2_n_0 ),
        .I5(\r_state[0]__0_i_6__2_n_0 ),
        .O(\r_state[0]__0_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000001000101010)) 
    \r_state[0]__0_i_4__2 
       (.I0(\r_state[9]__0_i_2__2_n_0 ),
        .I1(\r_state_reg[16]__0_n_0 ),
        .I2(\r_state[9]__0_i_4__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[0]__0_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFEFFFEFFFEFEEE)) 
    \r_state[0]__0_i_5__2 
       (.I0(\r_state[0]__0_i_7__2_n_0 ),
        .I1(\r_state[0]__0_i_8__0_n_0 ),
        .I2(\r_state_reg[6]__0_n_0 ),
        .I3(r_state),
        .I4(\r_state[9]__0_i_2__2_n_0 ),
        .I5(\r_state_reg[16]__0_n_0 ),
        .O(\r_state[0]__0_i_5__2_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[0]__0_i_6__2 
       (.I0(\r_state_reg[2]_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .O(\r_state[0]__0_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFFFAFCC8)) 
    \r_state[0]__0_i_7__2 
       (.I0(\r_state[2]__0_i_4__0_n_0 ),
        .I1(\r_state[1]__0_i_3_n_0 ),
        .I2(\r_state_reg[11]__0_n_0 ),
        .I3(o_rx_id_result_rd),
        .I4(\r_state[1]__0_i_2__0_n_0 ),
        .I5(o_rx_dllp_rd),
        .O(\r_state[0]__0_i_7__2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]__0_i_8__0 
       (.I0(\r_state_reg[3]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[0]__0_i_8__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \r_state[0]_i_10__2 
       (.I0(r_state__0[11]),
        .I1(r_state__0[9]),
        .I2(r_state__0[8]),
        .I3(\r_state[12]_i_3__5_n_0 ),
        .I4(\r_state[16]_i_7__0_n_0 ),
        .O(\r_state[0]_i_10__2_n_0 ));
  LUT3 #(
    .INIT(8'h17)) 
    \r_state[0]_i_11__2 
       (.I0(r_state__0[14]),
        .I1(r_state__0[15]),
        .I2(r_state__0[16]),
        .O(\r_state[0]_i_11__2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]_i_12__2 
       (.I0(r_state__0[16]),
        .I1(r_state__0[15]),
        .I2(r_state__0[14]),
        .O(\r_state[0]_i_12__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF4FFF4F4F4F4)) 
    \r_state[0]_i_1__11 
       (.I0(\r_state[0]_i_2__10_n_0 ),
        .I1(\r_state[0]_i_3__9_n_0 ),
        .I2(\r_state[0]_i_4__8_n_0 ),
        .I3(\r_state[16]_i_8__0_n_0 ),
        .I4(\r_state[12]_i_2__5_n_0 ),
        .I5(r_state__0[0]),
        .O(ri_state__0[0]));
  LUT6 #(
    .INIT(64'h0000000000010111)) 
    \r_state[0]_i_2__10 
       (.I0(r_state__0[7]),
        .I1(r_state__0[6]),
        .I2(r_state__0[4]),
        .I3(r_state__0[5]),
        .I4(r_state__0[3]),
        .I5(\r_state[0]_i_5__6_n_0 ),
        .O(\r_state[0]_i_2__10_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFF4FFF4F4F4)) 
    \r_state[0]_i_3__9 
       (.I0(\r_state[0]_i_6__4_n_0 ),
        .I1(\r_state[0]_i_7__2_n_0 ),
        .I2(\r_state[0]_i_8__2_n_0 ),
        .I3(r_state__0[7]),
        .I4(r_state__0[6]),
        .I5(\r_state[0]_i_5__6_n_0 ),
        .O(\r_state[0]_i_3__9_n_0 ));
  LUT6 #(
    .INIT(64'hFF0CFF0CFF0C0C1D)) 
    \r_state[0]_i_4__8 
       (.I0(r_state__0[0]),
        .I1(r_state__0[1]),
        .I2(\r_state[0]_i_9__1_n_0 ),
        .I3(r_state__0[2]),
        .I4(\r_state[0]_i_10__2_n_0 ),
        .I5(r_state__0[3]),
        .O(\r_state[0]_i_4__8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[0]_i_5__6 
       (.I0(\r_state[12]_i_3__5_n_0 ),
        .I1(r_state__0[8]),
        .I2(r_state__0[9]),
        .I3(r_state__0[11]),
        .O(\r_state[0]_i_5__6_n_0 ));
  LUT6 #(
    .INIT(64'h00000008000F0F0F)) 
    \r_state[0]_i_6__4 
       (.I0(\r_state[0]_i_11__2_n_0 ),
        .I1(\r_state[9]_i_5__2_n_0 ),
        .I2(r_state__0[11]),
        .I3(r_state__0[9]),
        .I4(r_state__0[8]),
        .I5(\r_state[12]_i_3__5_n_0 ),
        .O(\r_state[0]_i_6__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFEEE)) 
    \r_state[0]_i_7__2 
       (.I0(r_state__0[9]),
        .I1(r_state__0[8]),
        .I2(r_state__0[12]),
        .I3(r_state__0[13]),
        .I4(r_state__0[11]),
        .I5(\r_state[0]_i_12__2_n_0 ),
        .O(\r_state[0]_i_7__2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]_i_8__2 
       (.I0(r_state__0[3]),
        .I1(r_state__0[5]),
        .I2(r_state__0[4]),
        .O(\r_state[0]_i_8__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[0]_i_9__1 
       (.I0(\r_state[11]_i_2__5_n_0 ),
        .I1(\r_state_reg[2]_0 ),
        .I2(\r_state[16]_i_12__0_n_0 ),
        .I3(r_state__0[2]),
        .I4(r_state__0[3]),
        .I5(\r_state[16]_i_11__0_n_0 ),
        .O(\r_state[0]_i_9__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[11]__0_i_1__0 
       (.I0(\r_state[11]__0_i_2__0_n_0 ),
        .I1(\r_state[11]__0_i_3__0_n_0 ),
        .I2(\r_state_reg[0]__0_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state_reg[3]__0_n_0 ),
        .I5(\r_state_reg[4]__0_n_0 ),
        .O(ri_state__1[11]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[11]__0_i_2__0 
       (.I0(o_rx_dllp_rd),
        .I1(\r_state[12]__0_i_3__0_n_0 ),
        .I2(\r_state_reg[11]__0_n_0 ),
        .O(\r_state[11]__0_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEFF)) 
    \r_state[11]__0_i_3__0 
       (.I0(Q),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(o_rx_id_result_rd),
        .I4(r_state),
        .O(\r_state[11]__0_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000040400)) 
    \r_state[11]_i_1__5 
       (.I0(r_state__0[8]),
        .I1(\r_state[11]_i_2__5_n_0 ),
        .I2(\r_state[11]_i_3__2_n_0 ),
        .I3(r_state__0[9]),
        .I4(r_state__0[7]),
        .I5(\r_state[16]_i_9__0_n_0 ),
        .O(ri_state__0[11]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[11]_i_2__5 
       (.I0(r_state__0[11]),
        .I1(r_state__0[12]),
        .I2(r_state__0[13]),
        .I3(r_state__0[16]),
        .I4(r_state__0[15]),
        .I5(r_state__0[14]),
        .O(\r_state[11]_i_2__5_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[11]_i_3__2 
       (.I0(r_state__0[6]),
        .I1(r_state__0[5]),
        .I2(r_state__0[4]),
        .O(\r_state[11]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_state[12]__0_i_1__0 
       (.I0(\r_state[12]__0_i_2_n_0 ),
        .I1(\r_state_reg[0]__0_n_0 ),
        .I2(o_rx_id_result_rd),
        .I3(\r_state_reg[11]__0_n_0 ),
        .I4(\r_state[12]__0_i_3__0_n_0 ),
        .O(ri_state__1[12]));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \r_state[12]__0_i_2 
       (.I0(Q),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(\r_state[9]__0_i_4__0_n_0 ),
        .I3(o_rx_dllp_rd),
        .I4(\r_state[12]__0_i_4__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[12]__0_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[12]__0_i_3__0 
       (.I0(o_tx_stop),
        .I1(o_tx_id_ack),
        .I2(\r_state_reg[16]__0_n_0 ),
        .I3(o_tx_start),
        .I4(o_tx_dllp_wr),
        .O(\r_state[12]__0_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]__0_i_4__0 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .O(\r_state[12]__0_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[12]_i_1__5 
       (.I0(\r_state[12]_i_2__5_n_0 ),
        .I1(r_state__0[0]),
        .I2(r_state__0[9]),
        .I3(r_state__0[11]),
        .I4(\r_state[12]_i_3__5_n_0 ),
        .O(ri_state__0[12]));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[12]_i_2__5 
       (.I0(\r_jump_sel[0]_i_2_n_0 ),
        .I1(r_state__0[1]),
        .I2(r_state__0[2]),
        .O(\r_state[12]_i_2__5_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[12]_i_3__5 
       (.I0(r_state__0[14]),
        .I1(r_state__0[15]),
        .I2(r_state__0[16]),
        .I3(r_state__0[13]),
        .I4(r_state__0[12]),
        .O(\r_state[12]_i_3__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT4 #(
    .INIT(16'h0020)) 
    \r_state[13]__0_i_1__0 
       (.I0(\r_state[14]__0_i_2__0_n_0 ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_dllp_rx_reg_n_0_[8] ),
        .I3(\r_state[14]__0_i_3_n_0 ),
        .O(ri_state__1[13]));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[13]_i_1__4 
       (.I0(\r_state[14]_i_2__2_n_0 ),
        .I1(\r_state[14]_i_3__2_n_0 ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .I3(\r_dllp_rx_reg_n_0_[8] ),
        .O(ri_state__0[13]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[14]__0_i_1__0 
       (.I0(\r_state[14]__0_i_2__0_n_0 ),
        .I1(\r_state[14]__0_i_3_n_0 ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .I3(\r_dllp_rx_reg_n_0_[8] ),
        .O(ri_state__1[14]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[14]__0_i_2__0 
       (.I0(\r_state[16]__0_i_4__0_n_0 ),
        .I1(\r_state_reg[11]__0_n_0 ),
        .I2(\r_state_reg[0]__0_n_0 ),
        .I3(o_rx_id_result_rd),
        .I4(\r_state[14]__0_i_4__0_n_0 ),
        .O(\r_state[14]__0_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFEF)) 
    \r_state[14]__0_i_3 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(Q),
        .I2(o_rx_dllp_rd),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[14]__0_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[14]__0_i_4__0 
       (.I0(o_tx_id_ack),
        .I1(o_tx_stop),
        .I2(o_tx_start),
        .I3(o_tx_dllp_wr),
        .O(\r_state[14]__0_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[14]_i_1__2 
       (.I0(\r_state[14]_i_2__2_n_0 ),
        .I1(\r_state[14]_i_3__2_n_0 ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .I3(\r_dllp_rx_reg_n_0_[8] ),
        .O(ri_state__0[14]));
  LUT5 #(
    .INIT(32'h00020000)) 
    \r_state[14]_i_2__2 
       (.I0(\r_state[16]_i_7__0_n_0 ),
        .I1(r_state__0[11]),
        .I2(r_state__0[0]),
        .I3(r_state__0[9]),
        .I4(\r_state[7]_i_3__3_n_0 ),
        .O(\r_state[14]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \r_state[14]_i_3__2 
       (.I0(r_state__0[3]),
        .I1(r_state__0[16]),
        .I2(r_state__0[2]),
        .I3(r_state__0[1]),
        .I4(r_state__0[8]),
        .O(\r_state[14]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \r_state[15]__0_i_1__0 
       (.I0(\r_state[16]__0_i_2__0_n_0 ),
        .I1(\r_dllp_rx_reg_n_0_[8] ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .O(ri_state__1[15]));
  LUT6 #(
    .INIT(64'h0000000080000000)) 
    \r_state[15]_i_1__0 
       (.I0(\r_dllp_rx_reg_n_0_[8] ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_state[16]_i_7__0_n_0 ),
        .I3(r_state__0[8]),
        .I4(\r_state[16]_i_8__0_n_0 ),
        .I5(\r_state[16]_i_9__0_n_0 ),
        .O(ri_state__0[15]));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \r_state[16]__0_i_1__0 
       (.I0(\r_dllp_rx_reg_n_0_[8] ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_state[16]__0_i_2__0_n_0 ),
        .O(ri_state__1[16]));
  LUT6 #(
    .INIT(64'h0000040000000000)) 
    \r_state[16]__0_i_2__0 
       (.I0(\r_state[16]__0_i_3__0_n_0 ),
        .I1(\r_state[16]__0_i_4__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(o_rx_dllp_rd),
        .I4(\r_state[16]__0_i_5__0_n_0 ),
        .I5(\r_state[16]__0_i_6_n_0 ),
        .O(\r_state[16]__0_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[16]__0_i_3__0 
       (.I0(\r_state_reg[11]__0_n_0 ),
        .I1(o_tx_dllp_wr),
        .I2(o_tx_start),
        .I3(\r_state_reg[16]__0_n_0 ),
        .I4(o_tx_id_ack),
        .I5(o_tx_stop),
        .O(\r_state[16]__0_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[16]__0_i_4__0 
       (.I0(\r_state_reg[6]__0_n_0 ),
        .I1(r_state),
        .I2(\r_state_reg[4]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[16]__0_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[16]__0_i_5__0 
       (.I0(o_rx_id_result_rd),
        .I1(\r_state_reg[0]__0_n_0 ),
        .O(\r_state[16]__0_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[16]__0_i_6 
       (.I0(Q),
        .I1(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[16]__0_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \r_state[16]_i_10__0 
       (.I0(r_status_timer_reg[1]),
        .I1(r_status_timer_reg[0]),
        .I2(r_status_timer_reg[3]),
        .I3(r_status_timer_reg[2]),
        .O(\r_state[16]_i_10__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[16]_i_11__0 
       (.I0(r_state__0[7]),
        .I1(r_state__0[6]),
        .I2(r_state__0[9]),
        .I3(r_state__0[8]),
        .O(\r_state[16]_i_11__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[16]_i_12__0 
       (.I0(r_state__0[4]),
        .I1(r_state__0[5]),
        .O(\r_state[16]_i_12__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF000D)) 
    \r_state[16]_i_1__0 
       (.I0(r_state__0[0]),
        .I1(\r_state[16]_i_4__0_n_0 ),
        .I2(r_state__0[11]),
        .I3(r_state__0[1]),
        .I4(\r_state[16]_i_5__0_n_0 ),
        .I5(\r_state[16]_i_6__0_n_0 ),
        .O(ri_state));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    \r_state[16]_i_2__0 
       (.I0(\r_dllp_rx_reg_n_0_[8] ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_state[16]_i_7__0_n_0 ),
        .I3(r_state__0[8]),
        .I4(\r_state[16]_i_8__0_n_0 ),
        .I5(\r_state[16]_i_9__0_n_0 ),
        .O(ri_state__0[16]));
  LUT5 #(
    .INIT(32'h00008000)) 
    \r_state[16]_i_4__0 
       (.I0(r_status_timer_reg[6]),
        .I1(r_status_timer_reg[7]),
        .I2(r_status_timer_reg[4]),
        .I3(r_status_timer_reg[5]),
        .I4(\r_state[16]_i_10__0_n_0 ),
        .O(\r_state[16]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEFF)) 
    \r_state[16]_i_5__0 
       (.I0(\r_state[16]_i_11__0_n_0 ),
        .I1(r_state__0[2]),
        .I2(r_state__0[16]),
        .I3(\r_state[7]_i_3__3_n_0 ),
        .I4(r_state__0[3]),
        .I5(\r_state[16]_i_12__0_n_0 ),
        .O(\r_state[16]_i_5__0_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFF0FFF00EE00)) 
    \r_state[16]_i_6__0 
       (.I0(\r_state_reg[2]_0 ),
        .I1(\r_state_reg[0]__0_0 ),
        .I2(\r_state_reg[0]__0_1 ),
        .I3(r_state__0[1]),
        .I4(r_state__0[0]),
        .I5(r_state__0[11]),
        .O(\r_state[16]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[16]_i_7__0 
       (.I0(r_state__0[7]),
        .I1(r_state__0[6]),
        .I2(r_state__0[5]),
        .I3(r_state__0[4]),
        .O(\r_state[16]_i_7__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[16]_i_8__0 
       (.I0(\r_state[12]_i_3__5_n_0 ),
        .I1(r_state__0[11]),
        .I2(r_state__0[9]),
        .O(\r_state[16]_i_8__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[16]_i_9__0 
       (.I0(r_state__0[1]),
        .I1(r_state__0[0]),
        .I2(r_state__0[3]),
        .I3(r_state__0[2]),
        .O(\r_state[16]_i_9__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_state[1]__0_i_1__2 
       (.I0(\r_state[1]__0_i_2__0_n_0 ),
        .I1(o_rx_id_result_rd),
        .I2(\r_state_reg[11]__0_n_0 ),
        .I3(\r_state[1]__0_i_3_n_0 ),
        .I4(\r_state[12]__0_i_2_n_0 ),
        .I5(\r_state_reg[0]__0_n_0 ),
        .O(ri_state__1[1]));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[1]__0_i_2__0 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(o_tx_id_ack),
        .I2(o_tx_stop),
        .O(\r_state[1]__0_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[1]__0_i_3 
       (.I0(o_tx_dllp_wr),
        .I1(o_tx_start),
        .O(\r_state[1]__0_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[1]_i_1__11 
       (.I0(r_state__0[9]),
        .I1(r_state__0[11]),
        .I2(\r_state[12]_i_3__5_n_0 ),
        .I3(r_state__0[0]),
        .I4(\r_state[12]_i_2__5_n_0 ),
        .O(ri_state__0[1]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[2]__0_i_1__2 
       (.I0(\r_state[2]__0_i_2__2_n_0 ),
        .I1(r_state),
        .I2(\r_state[7]__0_i_2__2_n_0 ),
        .I3(\r_state_reg[11]__0_n_0 ),
        .I4(o_rx_dllp_rd),
        .I5(o_rx_id_result_rd),
        .O(ri_state__1[2]));
  LUT6 #(
    .INIT(64'h000C000C888888FF)) 
    \r_state[2]__0_i_2__2 
       (.I0(\r_state[2]__0_i_3__0_n_0 ),
        .I1(\r_state[16]__0_i_6_n_0 ),
        .I2(\r_state[2]__0_i_4__0_n_0 ),
        .I3(\r_state[2]__0_i_5__0_n_0 ),
        .I4(\r_state[2]__0_i_6__0_n_0 ),
        .I5(\r_state[12]__0_i_3__0_n_0 ),
        .O(\r_state[2]__0_i_2__2_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h03380038)) 
    \r_state[2]__0_i_3__0 
       (.I0(\r_state_reg[9]_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .I2(\r_state_reg[6]__0_n_0 ),
        .I3(\r_state_reg[4]__0_n_0 ),
        .I4(\r_state_reg[8]_0 ),
        .O(\r_state[2]__0_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEE8)) 
    \r_state[2]__0_i_4__0 
       (.I0(o_tx_dllp_wr),
        .I1(o_tx_start),
        .I2(\r_state_reg[16]__0_n_0 ),
        .I3(o_tx_id_ack),
        .I4(o_tx_stop),
        .O(\r_state[2]__0_i_4__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[2]__0_i_5__0 
       (.I0(\r_state_reg[6]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[2]__0_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hEEF3)) 
    \r_state[2]__0_i_6__0 
       (.I0(r_update_status),
        .I1(Q),
        .I2(\r_state_reg[2]_0 ),
        .I3(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[2]__0_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000AA8A0000008A)) 
    \r_state[2]_i_1__11 
       (.I0(\r_state[2]_i_2__10_n_0 ),
        .I1(\r_state[2]_i_3__1_n_0 ),
        .I2(r_state__0[3]),
        .I3(r_state__0[1]),
        .I4(\r_state[2]_i_4__0_n_0 ),
        .I5(\r_state[2]_i_5__0_n_0 ),
        .O(ri_state__0[2]));
  LUT6 #(
    .INIT(64'hCCCCCFDDCFCFCFDF)) 
    \r_state[2]_i_2__10 
       (.I0(\r_state[2]_i_6__0_n_0 ),
        .I1(r_state__0[1]),
        .I2(\r_state[12]_i_3__5_n_0 ),
        .I3(r_state__0[6]),
        .I4(\r_state[16]_i_12__0_n_0 ),
        .I5(\r_state[2]_i_7__0_n_0 ),
        .O(\r_state[2]_i_2__10_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[2]_i_3__1 
       (.I0(r_state__0[6]),
        .I1(r_state__0[5]),
        .I2(r_state__0[4]),
        .I3(r_update_status),
        .I4(\r_state[12]_i_3__5_n_0 ),
        .O(\r_state[2]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[2]_i_4__0 
       (.I0(r_state__0[8]),
        .I1(r_state__0[9]),
        .I2(r_state__0[11]),
        .I3(r_state__0[2]),
        .I4(r_state__0[0]),
        .I5(r_state__0[7]),
        .O(\r_state[2]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000000)) 
    \r_state[2]_i_5__0 
       (.I0(\r_state[16]_i_12__0_n_0 ),
        .I1(r_state__0[6]),
        .I2(\r_state_reg[2]_0 ),
        .I3(r_state__0[16]),
        .I4(r_state__0[3]),
        .I5(\r_state[7]_i_3__3_n_0 ),
        .O(\r_state[2]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h5555555455545441)) 
    \r_state[2]_i_6__0 
       (.I0(r_state__0[3]),
        .I1(r_state__0[12]),
        .I2(r_state__0[13]),
        .I3(r_state__0[16]),
        .I4(r_state__0[15]),
        .I5(r_state__0[14]),
        .O(\r_state[2]_i_6__0_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'hFABFFFBF)) 
    \r_state[2]_i_7__0 
       (.I0(r_state__0[6]),
        .I1(\r_state_reg[8]_0 ),
        .I2(r_state__0[4]),
        .I3(r_state__0[5]),
        .I4(\r_state_reg[9]_0 ),
        .O(\r_state[2]_i_7__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[3]__0_i_1__2 
       (.I0(r_jump_sel[0]),
        .I1(r_jump_sel[1]),
        .I2(\r_state[6]__0_i_2__2_n_0 ),
        .I3(\r_state[7]__0_i_3__2_n_0 ),
        .O(ri_state__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \r_state[3]_i_1__11 
       (.I0(\r_state[6]_i_2__6_n_0 ),
        .I1(\r_state[16]_i_7__0_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[4]__0_i_1__0 
       (.I0(\r_state[6]__0_i_2__2_n_0 ),
        .I1(r_jump_sel[1]),
        .I2(r_jump_sel[0]),
        .I3(\r_state[7]__0_i_3__2_n_0 ),
        .O(ri_state__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \r_state[4]_i_1__9 
       (.I0(\r_state[6]_i_2__6_n_0 ),
        .I1(\r_state[16]_i_7__0_n_0 ),
        .I2(r_jump_sel[1]),
        .I3(r_jump_sel[0]),
        .O(ri_state__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \r_state[5]__0_i_1__0 
       (.I0(\r_state[6]__0_i_2__2_n_0 ),
        .I1(r_jump_sel[0]),
        .I2(r_jump_sel[1]),
        .I3(\r_state[7]__0_i_3__2_n_0 ),
        .O(ri_state__1[5]));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \r_state[5]_i_1__7 
       (.I0(\r_state[6]_i_2__6_n_0 ),
        .I1(\r_state[16]_i_7__0_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    \r_state[6]__0_i_1__2 
       (.I0(\r_state[6]__0_i_2__2_n_0 ),
        .I1(r_jump_sel[0]),
        .I2(r_jump_sel[1]),
        .I3(\r_state[7]__0_i_3__2_n_0 ),
        .O(ri_state__1[6]));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \r_state[6]__0_i_2__2 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(\r_state_reg[0]__0_n_0 ),
        .I2(Q),
        .I3(\r_state_reg[3]__0_n_0 ),
        .I4(\r_state_reg[2]__0_n_0 ),
        .O(\r_state[6]__0_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \r_state[6]_i_1__10 
       (.I0(\r_state[6]_i_2__6_n_0 ),
        .I1(\r_state[16]_i_7__0_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__0[6]));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \r_state[6]_i_2__6 
       (.I0(\r_state[9]_i_3__4_n_0 ),
        .I1(r_state__0[3]),
        .I2(r_state__0[16]),
        .I3(r_state__0[1]),
        .I4(r_state__0[0]),
        .I5(r_state__0[2]),
        .O(\r_state[6]_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    \r_state[7]__0_i_1__2 
       (.I0(\r_state[7]__0_i_2__2_n_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(r_update_status),
        .I3(Q),
        .I4(\r_state_reg[16]__0_n_0 ),
        .I5(\r_state[7]__0_i_3__2_n_0 ),
        .O(ri_state__1[7]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[7]__0_i_2__2 
       (.I0(\r_state_reg[2]__0_n_0 ),
        .I1(\r_state_reg[0]__0_n_0 ),
        .O(\r_state[7]__0_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[7]__0_i_3__2 
       (.I0(\r_state[9]__0_i_2__2_n_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .I2(\r_state_reg[4]__0_n_0 ),
        .I3(r_state),
        .I4(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[7]__0_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \r_state[7]_i_1__7 
       (.I0(\r_state[16]_i_7__0_n_0 ),
        .I1(\r_state[7]_i_2__7_n_0 ),
        .I2(\r_state[7]_i_3__3_n_0 ),
        .I3(r_state__0[8]),
        .I4(r_state__0[9]),
        .I5(r_state__0[11]),
        .O(ri_state__0[7]));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \r_state[7]_i_2__7 
       (.I0(r_state__0[16]),
        .I1(r_state__0[2]),
        .I2(r_update_status),
        .I3(r_state__0[0]),
        .I4(r_state__0[3]),
        .I5(r_state__0[1]),
        .O(\r_state[7]_i_2__7_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[7]_i_3__3 
       (.I0(r_state__0[13]),
        .I1(r_state__0[12]),
        .I2(r_state__0[15]),
        .I3(r_state__0[14]),
        .O(\r_state[7]_i_3__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[8]__0_i_1__0 
       (.I0(\r_state[9]__0_i_2__2_n_0 ),
        .I1(\r_state[8]__0_i_2__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(Q),
        .I4(\r_state_reg[0]__0_n_0 ),
        .I5(\r_state_reg[16]__0_n_0 ),
        .O(\r_state[8]__0_i_1__0_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFB)) 
    \r_state[8]__0_i_2__0 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state_reg[8]_0 ),
        .I4(\r_state_reg[6]__0_n_0 ),
        .I5(r_state),
        .O(\r_state[8]__0_i_2__0_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \r_state[8]_i_1__5 
       (.I0(\r_state[9]_i_2__4_n_0 ),
        .I1(r_state__0[0]),
        .I2(\r_state_reg[8]_0 ),
        .I3(r_state__0[5]),
        .I4(r_state__0[4]),
        .O(ri_state__0[8]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    \r_state[9]__0_i_1__0 
       (.I0(\r_state[9]__0_i_2__2_n_0 ),
        .I1(\r_state_reg[9]_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state[9]__0_i_3__2_n_0 ),
        .I4(\r_state[9]__0_i_4__0_n_0 ),
        .I5(\r_state[9]__0_i_5_n_0 ),
        .O(\r_state[9]__0_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[9]__0_i_2__2 
       (.I0(\r_state[1]__0_i_3_n_0 ),
        .I1(o_tx_stop),
        .I2(o_tx_id_ack),
        .I3(o_rx_id_result_rd),
        .I4(o_rx_dllp_rd),
        .I5(\r_state_reg[11]__0_n_0 ),
        .O(\r_state[9]__0_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]__0_i_3__2 
       (.I0(Q),
        .I1(\r_state_reg[16]__0_n_0 ),
        .O(\r_state[9]__0_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]__0_i_4__0 
       (.I0(r_state),
        .I1(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[9]__0_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[9]__0_i_5 
       (.I0(\r_state_reg[0]__0_n_0 ),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(\r_state_reg[4]__0_n_0 ),
        .O(\r_state[9]__0_i_5_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \r_state[9]_i_1__9 
       (.I0(\r_state[9]_i_2__4_n_0 ),
        .I1(r_state__0[4]),
        .I2(r_state__0[5]),
        .I3(r_state__0[0]),
        .I4(\r_state_reg[9]_0 ),
        .O(ri_state__0[9]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[9]_i_2__4 
       (.I0(\r_state[9]_i_3__4_n_0 ),
        .I1(r_state__0[1]),
        .I2(r_state__0[2]),
        .I3(r_state__0[16]),
        .I4(r_state__0[3]),
        .I5(\r_state[9]_i_4__2_n_0 ),
        .O(\r_state[9]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \r_state[9]_i_3__4 
       (.I0(r_state__0[14]),
        .I1(r_state__0[15]),
        .I2(\r_state[9]_i_5__2_n_0 ),
        .I3(r_state__0[8]),
        .I4(r_state__0[9]),
        .I5(r_state__0[11]),
        .O(\r_state[9]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]_i_4__2 
       (.I0(r_state__0[6]),
        .I1(r_state__0[7]),
        .O(\r_state[9]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[9]_i_5__2 
       (.I0(r_state__0[12]),
        .I1(r_state__0[13]),
        .O(\r_state[9]_i_5__2_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .D(ri_state__0[0]),
        .PRE(inst_local_reset_n_0),
        .Q(r_state__0[0]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .D(ri_state__1[0]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_state_reg[0]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[11]),
        .Q(r_state__0[11]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[11]),
        .Q(\r_state_reg[11]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[12]),
        .Q(r_state__0[12]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[12]),
        .Q(o_tx_dllp_wr));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[13]),
        .Q(r_state__0[13]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[13]),
        .Q(o_tx_start));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[14] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[14]),
        .Q(r_state__0[14]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[14]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[14]),
        .Q(o_tx_stop));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[15] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[15]),
        .Q(r_state__0[15]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[15]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[15]),
        .Q(o_tx_id_ack));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[16] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[16]),
        .Q(r_state__0[16]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[16]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[16]),
        .Q(\r_state_reg[16]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[1]),
        .Q(r_state__0[1]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[1]),
        .Q(Q));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[2]),
        .Q(r_state__0[2]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[2]),
        .Q(\r_state_reg[2]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[3]),
        .Q(r_state__0[3]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[3]),
        .Q(\r_state_reg[3]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[4]),
        .Q(r_state__0[4]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[4]),
        .Q(\r_state_reg[4]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[5]),
        .Q(r_state__0[5]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[5]),
        .Q(\r_state_reg[5]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[6]),
        .Q(r_state__0[6]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[6]),
        .Q(\r_state_reg[6]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[7]),
        .Q(r_state__0[7]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[7]),
        .Q(r_state));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[8]),
        .Q(r_state__0[8]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(\r_state[8]__0_i_1__0_n_0 ),
        .Q(o_rx_dllp_rd));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[9]),
        .Q(r_state__0[9]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9]__0 
       (.C(\r_rst_reg[1] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(\r_state[9]__0_i_1__0_n_0 ),
        .Q(o_rx_id_result_rd));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_2__0 
       (.I0(r_status_timer_reg[0]),
        .I1(Q),
        .O(\r_status_timer[0]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_3__0 
       (.I0(r_status_timer_reg[3]),
        .I1(Q),
        .O(\r_status_timer[0]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_4__0 
       (.I0(r_status_timer_reg[2]),
        .I1(Q),
        .O(\r_status_timer[0]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_5__0 
       (.I0(r_status_timer_reg[1]),
        .I1(Q),
        .O(\r_status_timer[0]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_status_timer[0]_i_6__0 
       (.I0(r_status_timer_reg[0]),
        .I1(Q),
        .O(\r_status_timer[0]_i_6__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[12]_i_2__0 
       (.I0(r_status_timer_reg[12]),
        .I1(Q),
        .O(\r_status_timer[12]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_2__0 
       (.I0(r_status_timer_reg[7]),
        .I1(Q),
        .O(\r_status_timer[4]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_3__0 
       (.I0(r_status_timer_reg[6]),
        .I1(Q),
        .O(\r_status_timer[4]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_4__0 
       (.I0(r_status_timer_reg[5]),
        .I1(Q),
        .O(\r_status_timer[4]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_5__0 
       (.I0(r_status_timer_reg[4]),
        .I1(Q),
        .O(\r_status_timer[4]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_2__0 
       (.I0(r_status_timer_reg[11]),
        .I1(Q),
        .O(\r_status_timer[8]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_3__0 
       (.I0(r_status_timer_reg[10]),
        .I1(Q),
        .O(\r_status_timer[8]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_4__0 
       (.I0(r_status_timer_reg[9]),
        .I1(Q),
        .O(\r_status_timer[8]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_5__0 
       (.I0(r_status_timer_reg[8]),
        .I1(Q),
        .O(\r_status_timer[8]_i_5__0_n_0 ));
  FDCE \r_status_timer_reg[0] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1__0_n_7 ),
        .Q(r_status_timer_reg[0]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[0]_i_1__0 
       (.CI(1'b0),
        .CO({\r_status_timer_reg[0]_i_1__0_n_0 ,\NLW_r_status_timer_reg[0]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,\r_status_timer[0]_i_2__0_n_0 }),
        .O({\r_status_timer_reg[0]_i_1__0_n_4 ,\r_status_timer_reg[0]_i_1__0_n_5 ,\r_status_timer_reg[0]_i_1__0_n_6 ,\r_status_timer_reg[0]_i_1__0_n_7 }),
        .S({\r_status_timer[0]_i_3__0_n_0 ,\r_status_timer[0]_i_4__0_n_0 ,\r_status_timer[0]_i_5__0_n_0 ,\r_status_timer[0]_i_6__0_n_0 }));
  FDCE \r_status_timer_reg[10] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1__0_n_5 ),
        .Q(r_status_timer_reg[10]));
  FDCE \r_status_timer_reg[11] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1__0_n_4 ),
        .Q(r_status_timer_reg[11]));
  FDCE \r_status_timer_reg[12] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[12]_i_1__0_n_7 ),
        .Q(r_status_timer_reg[12]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[12]_i_1__0 
       (.CI(\r_status_timer_reg[8]_i_1__0_n_0 ),
        .CO(\NLW_r_status_timer_reg[12]_i_1__0_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_r_status_timer_reg[12]_i_1__0_O_UNCONNECTED [3:1],\r_status_timer_reg[12]_i_1__0_n_7 }),
        .S({1'b0,1'b0,1'b0,\r_status_timer[12]_i_2__0_n_0 }));
  FDCE \r_status_timer_reg[1] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1__0_n_6 ),
        .Q(r_status_timer_reg[1]));
  FDCE \r_status_timer_reg[2] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1__0_n_5 ),
        .Q(r_status_timer_reg[2]));
  FDCE \r_status_timer_reg[3] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1__0_n_4 ),
        .Q(r_status_timer_reg[3]));
  FDCE \r_status_timer_reg[4] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1__0_n_7 ),
        .Q(r_status_timer_reg[4]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[4]_i_1__0 
       (.CI(\r_status_timer_reg[0]_i_1__0_n_0 ),
        .CO({\r_status_timer_reg[4]_i_1__0_n_0 ,\NLW_r_status_timer_reg[4]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\r_status_timer_reg[4]_i_1__0_n_4 ,\r_status_timer_reg[4]_i_1__0_n_5 ,\r_status_timer_reg[4]_i_1__0_n_6 ,\r_status_timer_reg[4]_i_1__0_n_7 }),
        .S({\r_status_timer[4]_i_2__0_n_0 ,\r_status_timer[4]_i_3__0_n_0 ,\r_status_timer[4]_i_4__0_n_0 ,\r_status_timer[4]_i_5__0_n_0 }));
  FDCE \r_status_timer_reg[5] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1__0_n_6 ),
        .Q(r_status_timer_reg[5]));
  FDCE \r_status_timer_reg[6] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1__0_n_5 ),
        .Q(r_status_timer_reg[6]));
  FDCE \r_status_timer_reg[7] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1__0_n_4 ),
        .Q(r_status_timer_reg[7]));
  FDCE \r_status_timer_reg[8] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1__0_n_7 ),
        .Q(r_status_timer_reg[8]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[8]_i_1__0 
       (.CI(\r_status_timer_reg[4]_i_1__0_n_0 ),
        .CO({\r_status_timer_reg[8]_i_1__0_n_0 ,\NLW_r_status_timer_reg[8]_i_1__0_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\r_status_timer_reg[8]_i_1__0_n_4 ,\r_status_timer_reg[8]_i_1__0_n_5 ,\r_status_timer_reg[8]_i_1__0_n_6 ,\r_status_timer_reg[8]_i_1__0_n_7 }),
        .S({\r_status_timer[8]_i_2__0_n_0 ,\r_status_timer[8]_i_3__0_n_0 ,\r_status_timer[8]_i_4__0_n_0 ,\r_status_timer[8]_i_5__0_n_0 }));
  FDCE \r_status_timer_reg[9] 
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1__0_n_6 ),
        .Q(r_status_timer_reg[9]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h000000000000FEEF)) 
    r_update_status_i_1__0
       (.I0(r_update_status_i_2__0_n_0),
        .I1(r_update_status),
        .I2(lopt),
        .I3(r_rx_tlp_rdy),
        .I4(r_state),
        .I5(Q),
        .O(ri_update_status));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    r_update_status_i_2__0
       (.I0(\r_state[16]_i_4__0_n_0 ),
        .I1(r_status_timer_reg[8]),
        .I2(r_status_timer_reg[11]),
        .I3(r_status_timer_reg[10]),
        .I4(r_status_timer_reg[9]),
        .I5(r_status_timer_reg[12]),
        .O(r_update_status_i_2__0_n_0));
  FDCE r_update_status_reg
       (.C(\r_rst_reg[1] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_update_status),
        .Q(r_update_status));
endmodule

(* ORIG_REF_NAME = "transceiver_link_controller" *) 
module transceiver_link_controller__hierPathDup__1
   (out,
    o_tx_dllp_wr,
    o_tx_start,
    o_tx_stop,
    o_tx_rply,
    o_tx_id_ack,
    o_rx_dllp_rd,
    o_rx_id_result_rd,
    Q,
    r_rx_tlp_rdy_reg_0,
    \r_rst_reg[0] ,
    \r_state_reg[0]__0_0 ,
    \r_state_reg[0]__0_1 ,
    \r_state_reg[8]_0 ,
    \r_state_reg[9]_0 ,
    \r_state_reg[0]__0_2 ,
    \r_dllp_tx_reg[8]_0 ,
    \r_rst_reg[0]_0 ,
    D,
    lopt);
  output [15:0]out;
  output o_tx_dllp_wr;
  output o_tx_start;
  output o_tx_stop;
  output o_tx_rply;
  output o_tx_id_ack;
  output o_rx_dllp_rd;
  output o_rx_id_result_rd;
  output [0:0]Q;
  input r_rx_tlp_rdy_reg_0;
  input \r_rst_reg[0] ;
  input \r_state_reg[0]__0_0 ;
  input \r_state_reg[0]__0_1 ;
  input \r_state_reg[8]_0 ;
  input \r_state_reg[9]_0 ;
  input \r_state_reg[0]__0_2 ;
  input [4:0]\r_dllp_tx_reg[8]_0 ;
  input \r_rst_reg[0]_0 ;
  input [1:0]D;
  input lopt;

  wire \<const0> ;
  wire [1:0]D;
  wire [0:0]Q;
  wire inst_local_reset_n_0;
  wire lopt;
  (* RTL_KEEP = "true" *) wire o_rx_dllp_rd;
  (* RTL_KEEP = "true" *) wire o_rx_id_result_rd;
  (* RTL_KEEP = "true" *) wire o_tx_dllp_wr;
  (* RTL_KEEP = "true" *) wire o_tx_id_ack;
  (* RTL_KEEP = "true" *) wire o_tx_start;
  (* RTL_KEEP = "true" *) wire o_tx_stop;
  (* RTL_KEEP = "true" *) wire [15:0]\^out ;
  wire \r_dllp_rx[15]_i_2_n_0 ;
  wire \r_dllp_rx_reg_n_0_[15] ;
  wire \r_dllp_rx_reg_n_0_[8] ;
  wire \r_dllp_tx[15]_i_3_n_0 ;
  wire [4:0]\r_dllp_tx_reg[8]_0 ;
  wire [1:0]r_jump_sel;
  wire \r_jump_sel[0]_i_1_n_0 ;
  wire \r_jump_sel[1]_i_1_n_0 ;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[0]_0 ;
  wire r_rx_tlp_rdy;
  wire r_rx_tlp_rdy_reg_0;
  (* RTL_KEEP = "true" *) wire [7:7]r_state;
  wire \r_state[0]__0_i_10_n_0 ;
  wire \r_state[0]__0_i_2__0_n_0 ;
  wire \r_state[0]__0_i_3__0_n_0 ;
  wire \r_state[0]__0_i_4__0_n_0 ;
  wire \r_state[0]__0_i_5__0_n_0 ;
  wire \r_state[0]__0_i_6__0_n_0 ;
  wire \r_state[0]__0_i_7__0_n_0 ;
  wire \r_state[0]__0_i_8_n_0 ;
  wire \r_state[0]__0_i_9_n_0 ;
  wire \r_state[0]_i_10__0_n_0 ;
  wire \r_state[0]_i_11__0_n_0 ;
  wire \r_state[0]_i_12__0_n_0 ;
  wire \r_state[0]_i_2__6_n_0 ;
  wire \r_state[0]_i_3__5_n_0 ;
  wire \r_state[0]_i_4__4_n_0 ;
  wire \r_state[0]_i_5__2_n_0 ;
  wire \r_state[0]_i_6__1_n_0 ;
  wire \r_state[0]_i_7__0_n_0 ;
  wire \r_state[0]_i_8__0_n_0 ;
  wire \r_state[0]_i_9__0_n_0 ;
  wire \r_state[11]__0_i_2_n_0 ;
  wire \r_state[11]__0_i_3_n_0 ;
  wire \r_state[11]__0_i_4_n_0 ;
  wire \r_state[11]_i_2__1_n_0 ;
  wire \r_state[11]_i_3__0_n_0 ;
  wire \r_state[12]__0_i_2__0_n_0 ;
  wire \r_state[12]__0_i_3_n_0 ;
  wire \r_state[12]__0_i_4_n_0 ;
  wire \r_state[12]_i_2__2_n_0 ;
  wire \r_state[12]_i_3__2_n_0 ;
  wire \r_state[14]__0_i_2_n_0 ;
  wire \r_state[14]__0_i_3__0_n_0 ;
  wire \r_state[14]__0_i_4_n_0 ;
  wire \r_state[14]_i_2__0_n_0 ;
  wire \r_state[14]_i_3__1_n_0 ;
  wire \r_state[14]_i_4__0_n_0 ;
  wire \r_state[16]__0_i_2_n_0 ;
  wire \r_state[16]__0_i_3_n_0 ;
  wire \r_state[16]__0_i_4_n_0 ;
  wire \r_state[16]__0_i_5_n_0 ;
  wire \r_state[16]_i_10_n_0 ;
  wire \r_state[16]_i_11_n_0 ;
  wire \r_state[16]_i_12_n_0 ;
  wire \r_state[16]_i_13_n_0 ;
  wire \r_state[16]_i_4_n_0 ;
  wire \r_state[16]_i_5_n_0 ;
  wire \r_state[16]_i_6_n_0 ;
  wire \r_state[16]_i_7_n_0 ;
  wire \r_state[16]_i_8_n_0 ;
  wire \r_state[16]_i_9_n_0 ;
  wire \r_state[1]__0_i_2_n_0 ;
  wire \r_state[2]__0_i_2__0_n_0 ;
  wire \r_state[2]__0_i_3_n_0 ;
  wire \r_state[2]__0_i_4_n_0 ;
  wire \r_state[2]__0_i_5_n_0 ;
  wire \r_state[2]__0_i_6_n_0 ;
  wire \r_state[2]_i_2__6_n_0 ;
  wire \r_state[2]_i_3_n_0 ;
  wire \r_state[2]_i_4_n_0 ;
  wire \r_state[2]_i_5_n_0 ;
  wire \r_state[2]_i_6_n_0 ;
  wire \r_state[2]_i_7_n_0 ;
  wire \r_state[2]_i_8_n_0 ;
  wire \r_state[6]__0_i_2__0_n_0 ;
  wire \r_state[6]_i_2__3_n_0 ;
  wire \r_state[7]__0_i_2__0_n_0 ;
  wire \r_state[7]__0_i_3__0_n_0 ;
  wire \r_state[7]_i_2__4_n_0 ;
  wire \r_state[7]_i_3__1_n_0 ;
  wire \r_state[7]_i_4__1_n_0 ;
  wire \r_state[8]__0_i_2_n_0 ;
  wire \r_state[8]__0_i_3_n_0 ;
  wire \r_state[9]__0_i_2__0_n_0 ;
  wire \r_state[9]__0_i_3__0_n_0 ;
  wire \r_state[9]__0_i_4_n_0 ;
  wire \r_state[9]_i_2__2_n_0 ;
  wire [16:0]r_state__0;
  wire \r_state_reg[0]__0_0 ;
  wire \r_state_reg[0]__0_1 ;
  wire \r_state_reg[0]__0_2 ;
  wire \r_state_reg[0]__0_n_0 ;
  wire \r_state_reg[11]__0_n_0 ;
  wire \r_state_reg[16]__0_n_0 ;
  wire \r_state_reg[2]__0_n_0 ;
  wire \r_state_reg[3]__0_n_0 ;
  wire \r_state_reg[4]__0_n_0 ;
  wire \r_state_reg[5]__0_n_0 ;
  wire \r_state_reg[6]__0_n_0 ;
  wire \r_state_reg[8]_0 ;
  wire \r_state_reg[9]_0 ;
  wire \r_status_timer[0]_i_2_n_0 ;
  wire \r_status_timer[0]_i_3_n_0 ;
  wire \r_status_timer[0]_i_4_n_0 ;
  wire \r_status_timer[0]_i_5_n_0 ;
  wire \r_status_timer[0]_i_6_n_0 ;
  wire \r_status_timer[12]_i_2_n_0 ;
  wire \r_status_timer[4]_i_2_n_0 ;
  wire \r_status_timer[4]_i_3_n_0 ;
  wire \r_status_timer[4]_i_4_n_0 ;
  wire \r_status_timer[4]_i_5_n_0 ;
  wire \r_status_timer[8]_i_2_n_0 ;
  wire \r_status_timer[8]_i_3_n_0 ;
  wire \r_status_timer[8]_i_4_n_0 ;
  wire \r_status_timer[8]_i_5_n_0 ;
  wire [12:0]r_status_timer_reg;
  wire \r_status_timer_reg[0]_i_1_n_0 ;
  wire \r_status_timer_reg[0]_i_1_n_4 ;
  wire \r_status_timer_reg[0]_i_1_n_5 ;
  wire \r_status_timer_reg[0]_i_1_n_6 ;
  wire \r_status_timer_reg[0]_i_1_n_7 ;
  wire \r_status_timer_reg[12]_i_1_n_7 ;
  wire \r_status_timer_reg[4]_i_1_n_0 ;
  wire \r_status_timer_reg[4]_i_1_n_4 ;
  wire \r_status_timer_reg[4]_i_1_n_5 ;
  wire \r_status_timer_reg[4]_i_1_n_6 ;
  wire \r_status_timer_reg[4]_i_1_n_7 ;
  wire \r_status_timer_reg[8]_i_1_n_0 ;
  wire \r_status_timer_reg[8]_i_1_n_4 ;
  wire \r_status_timer_reg[8]_i_1_n_5 ;
  wire \r_status_timer_reg[8]_i_1_n_6 ;
  wire \r_status_timer_reg[8]_i_1_n_7 ;
  wire r_update_status;
  wire r_update_status_i_2_n_0;
  wire r_update_status_i_3_n_0;
  wire ri_dllp_rx;
  wire ri_dllp_tx;
  wire [15:0]ri_dllp_tx0_in;
  wire ri_jump_sel;
  wire ri_state;
  wire [16:0]ri_state__0;
  wire [16:0]ri_state__1;
  wire ri_update_status;
  wire [2:0]\NLW_r_status_timer_reg[0]_i_1_CO_UNCONNECTED ;
  wire [3:0]\NLW_r_status_timer_reg[12]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_r_status_timer_reg[12]_i_1_O_UNCONNECTED ;
  wire [2:0]\NLW_r_status_timer_reg[4]_i_1_CO_UNCONNECTED ;
  wire [2:0]\NLW_r_status_timer_reg[8]_i_1_CO_UNCONNECTED ;

  assign out[15] = \^out [15];
  assign out[14] = \<const0> ;
  assign out[13] = \<const0> ;
  assign out[12] = \<const0> ;
  assign out[11] = \<const0> ;
  assign out[10] = \<const0> ;
  assign out[9] = \<const0> ;
  assign out[8] = \^out [8];
  assign out[7] = \<const0> ;
  assign out[6] = \<const0> ;
  assign out[5] = \<const0> ;
  assign out[4] = \<const0> ;
  assign out[3:0] = \^out [3:0];
  GND GND
       (.G(\<const0> ));
  async_reset__parameterized1_54 inst_local_reset
       (.\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[0]_1 (\r_rst_reg[0]_0 ),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \r_dllp_rx[15]_i_1 
       (.I0(r_state__0[11]),
        .I1(\r_state[16]_i_5_n_0 ),
        .I2(r_state__0[9]),
        .I3(\r_state[16]_i_10_n_0 ),
        .I4(r_state__0[4]),
        .I5(\r_dllp_rx[15]_i_2_n_0 ),
        .O(ri_dllp_rx));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_dllp_rx[15]_i_2 
       (.I0(r_state__0[8]),
        .I1(r_state__0[6]),
        .I2(r_state__0[7]),
        .I3(r_state__0[5]),
        .O(\r_dllp_rx[15]_i_2_n_0 ));
  FDCE \r_dllp_rx_reg[15] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_rx),
        .CLR(inst_local_reset_n_0),
        .D(D[1]),
        .Q(\r_dllp_rx_reg_n_0_[15] ));
  FDCE \r_dllp_rx_reg[8] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_rx),
        .CLR(inst_local_reset_n_0),
        .D(D[0]),
        .Q(\r_dllp_rx_reg_n_0_[8] ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[0]_i_1 
       (.I0(\r_dllp_tx_reg[8]_0 [0]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[0]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_dllp_tx[15]_i_1 
       (.I0(\r_state[16]_i_8_n_0 ),
        .I1(r_state__0[8]),
        .I2(r_state__0[6]),
        .I3(r_state__0[0]),
        .I4(r_state__0[4]),
        .I5(\r_dllp_tx[15]_i_3_n_0 ),
        .O(ri_dllp_tx));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_dllp_tx[15]_i_2 
       (.I0(r_state__0[7]),
        .O(ri_dllp_tx0_in[15]));
  LUT5 #(
    .INIT(32'hFFFFFEEF)) 
    \r_dllp_tx[15]_i_3 
       (.I0(r_state__0[3]),
        .I1(r_state__0[2]),
        .I2(r_state__0[5]),
        .I3(r_state__0[7]),
        .I4(r_state__0[1]),
        .O(\r_dllp_tx[15]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[1]_i_1 
       (.I0(\r_dllp_tx_reg[8]_0 [1]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[1]));
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[2]_i_1 
       (.I0(\r_dllp_tx_reg[8]_0 [2]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \r_dllp_tx[3]_i_1 
       (.I0(\r_dllp_tx_reg[8]_0 [3]),
        .I1(r_state__0[7]),
        .O(ri_dllp_tx0_in[3]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT3 #(
    .INIT(8'h8B)) 
    \r_dllp_tx[8]_i_1 
       (.I0(\r_dllp_tx_reg[8]_0 [4]),
        .I1(r_state__0[5]),
        .I2(lopt),
        .O(ri_dllp_tx0_in[8]));
  FDCE \r_dllp_tx_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[0]),
        .Q(\^out [0]));
  FDCE \r_dllp_tx_reg[15] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[15]),
        .Q(\^out [15]));
  FDCE \r_dllp_tx_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[1]),
        .Q(\^out [1]));
  FDCE \r_dllp_tx_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[2]),
        .Q(\^out [2]));
  FDCE \r_dllp_tx_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[3]),
        .Q(\^out [3]));
  FDCE \r_dllp_tx_reg[8] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_dllp_tx),
        .CLR(inst_local_reset_n_0),
        .D(ri_dllp_tx0_in[8]),
        .Q(\^out [8]));
  LUT6 #(
    .INIT(64'hFFFBFFFF00040000)) 
    \r_jump_sel[0]_i_1 
       (.I0(\r_state[12]_i_3__2_n_0 ),
        .I1(r_state__0[2]),
        .I2(r_state__0[0]),
        .I3(r_state__0[1]),
        .I4(\r_state[16]_i_8_n_0 ),
        .I5(r_jump_sel[0]),
        .O(\r_jump_sel[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \r_jump_sel[1]_i_1 
       (.I0(r_jump_sel[0]),
        .I1(ri_jump_sel),
        .I2(r_jump_sel[1]),
        .O(\r_jump_sel[1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_jump_sel[1]_i_2 
       (.I0(\r_state[16]_i_8_n_0 ),
        .I1(r_state__0[1]),
        .I2(r_state__0[0]),
        .I3(r_state__0[2]),
        .I4(\r_state[12]_i_3__2_n_0 ),
        .O(ri_jump_sel));
  FDCE #(
    .INIT(1'b0)) 
    \r_jump_sel_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_jump_sel[0]_i_1_n_0 ),
        .Q(r_jump_sel[0]));
  FDCE #(
    .INIT(1'b0)) 
    \r_jump_sel_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_jump_sel[1]_i_1_n_0 ),
        .Q(r_jump_sel[1]));
  FDCE r_rx_tlp_rdy_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(r_rx_tlp_rdy_reg_0),
        .Q(r_rx_tlp_rdy));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[0]__0_i_10 
       (.I0(o_tx_id_ack),
        .I1(o_tx_stop),
        .I2(o_tx_start),
        .I3(o_tx_dllp_wr),
        .O(\r_state[0]__0_i_10_n_0 ));
  LUT6 #(
    .INIT(64'hBBBBBBBBABABABAA)) 
    \r_state[0]__0_i_1__0 
       (.I0(\r_state[0]__0_i_2__0_n_0 ),
        .I1(\r_state[0]__0_i_3__0_n_0 ),
        .I2(\r_state[0]__0_i_4__0_n_0 ),
        .I3(\r_state[0]__0_i_5__0_n_0 ),
        .I4(\r_state[0]__0_i_6__0_n_0 ),
        .I5(\r_state[0]__0_i_7__0_n_0 ),
        .O(ri_state__1[0]));
  LUT6 #(
    .INIT(64'hFFFEFCC3FFFFFCFC)) 
    \r_state[0]__0_i_2__0 
       (.I0(\r_state_reg[0]__0_0 ),
        .I1(\r_state_reg[2]__0_n_0 ),
        .I2(\r_state_reg[0]__0_n_0 ),
        .I3(\r_state_reg[3]__0_n_0 ),
        .I4(Q),
        .I5(\r_state[0]__0_i_8_n_0 ),
        .O(\r_state[0]__0_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAABBBAAAAAAAA)) 
    \r_state[0]__0_i_3__0 
       (.I0(\r_state[0]__0_i_8_n_0 ),
        .I1(\r_state[8]__0_i_3_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[4]__0_n_0 ),
        .I4(\r_state_reg[3]__0_n_0 ),
        .I5(\r_state[0]__0_i_9_n_0 ),
        .O(\r_state[0]__0_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000100000007)) 
    \r_state[0]__0_i_4__0 
       (.I0(o_rx_dllp_rd),
        .I1(o_rx_id_result_rd),
        .I2(\r_state[11]__0_i_4_n_0 ),
        .I3(o_tx_dllp_wr),
        .I4(o_tx_start),
        .I5(\r_state_reg[11]__0_n_0 ),
        .O(\r_state[0]__0_i_4__0_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]__0_i_5__0 
       (.I0(\r_state_reg[11]__0_n_0 ),
        .I1(o_rx_dllp_rd),
        .I2(o_rx_id_result_rd),
        .O(\r_state[0]__0_i_5__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFEE8)) 
    \r_state[0]__0_i_6__0 
       (.I0(o_tx_stop),
        .I1(o_tx_id_ack),
        .I2(\r_state_reg[16]__0_n_0 ),
        .I3(o_tx_dllp_wr),
        .I4(o_tx_start),
        .O(\r_state[0]__0_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFDDC)) 
    \r_state[0]__0_i_7__0 
       (.I0(\r_state[0]__0_i_9_n_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .I2(\r_state_reg[6]__0_n_0 ),
        .I3(r_state),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[0]__0_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h0008)) 
    \r_state[0]__0_i_8 
       (.I0(\r_state[16]__0_i_5_n_0 ),
        .I1(\r_state[12]__0_i_2__0_n_0 ),
        .I2(o_rx_id_result_rd),
        .I3(o_rx_dllp_rd),
        .O(\r_state[0]__0_i_8_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[0]__0_i_9 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(\r_state_reg[11]__0_n_0 ),
        .I2(o_rx_dllp_rd),
        .I3(o_rx_id_result_rd),
        .I4(\r_state[0]__0_i_10_n_0 ),
        .O(\r_state[0]__0_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \r_state[0]_i_10__0 
       (.I0(r_state__0[11]),
        .I1(r_state__0[9]),
        .I2(r_state__0[8]),
        .I3(\r_state[16]_i_5_n_0 ),
        .I4(\r_state[16]_i_9_n_0 ),
        .I5(\r_state[16]_i_10_n_0 ),
        .O(\r_state[0]_i_10__0_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[0]_i_11__0 
       (.I0(r_state__0[16]),
        .I1(r_state__0[15]),
        .I2(r_state__0[14]),
        .O(\r_state[0]_i_11__0_n_0 ));
  LUT3 #(
    .INIT(8'h17)) 
    \r_state[0]_i_12__0 
       (.I0(r_state__0[14]),
        .I1(r_state__0[15]),
        .I2(r_state__0[16]),
        .O(\r_state[0]_i_12__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF570000)) 
    \r_state[0]_i_1__7 
       (.I0(\r_state[0]_i_2__6_n_0 ),
        .I1(\r_state[0]_i_3__5_n_0 ),
        .I2(\r_state[0]_i_4__4_n_0 ),
        .I3(r_state__0[1]),
        .I4(\r_state[0]_i_5__2_n_0 ),
        .I5(\r_state[0]_i_6__1_n_0 ),
        .O(ri_state__0[0]));
  LUT6 #(
    .INIT(64'hABBBABBBABBBAAAA)) 
    \r_state[0]_i_2__6 
       (.I0(\r_state[0]_i_7__0_n_0 ),
        .I1(\r_state[16]_i_11_n_0 ),
        .I2(r_state__0[7]),
        .I3(r_state__0[6]),
        .I4(\r_state[0]_i_8__0_n_0 ),
        .I5(\r_state[0]_i_9__0_n_0 ),
        .O(\r_state[0]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[0]_i_3__5 
       (.I0(r_state__0[6]),
        .I1(r_state__0[7]),
        .O(\r_state[0]_i_3__5_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[0]_i_4__4 
       (.I0(\r_state[16]_i_5_n_0 ),
        .I1(r_state__0[8]),
        .I2(r_state__0[9]),
        .I3(r_state__0[11]),
        .O(\r_state[0]_i_4__4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[0]_i_5__2 
       (.I0(\r_state[11]_i_2__1_n_0 ),
        .I1(\r_state_reg[0]__0_0 ),
        .I2(\r_state[2]_i_3_n_0 ),
        .I3(r_state__0[2]),
        .I4(r_state__0[3]),
        .I5(\r_state[16]_i_12_n_0 ),
        .O(\r_state[0]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFDFFFDFFF0FDF0)) 
    \r_state[0]_i_6__1 
       (.I0(\r_state[16]_i_8_n_0 ),
        .I1(\r_state[12]_i_3__2_n_0 ),
        .I2(\r_state[0]_i_10__0_n_0 ),
        .I3(r_state__0[0]),
        .I4(r_state__0[1]),
        .I5(r_state__0[2]),
        .O(\r_state[0]_i_6__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200020202)) 
    \r_state[0]_i_7__0 
       (.I0(\r_state[0]_i_3__5_n_0 ),
        .I1(\r_state[16]_i_5_n_0 ),
        .I2(\r_state[2]_i_8_n_0 ),
        .I3(r_state__0[3]),
        .I4(r_state__0[4]),
        .I5(r_state__0[5]),
        .O(\r_state[0]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000001700)) 
    \r_state[0]_i_8__0 
       (.I0(r_state__0[12]),
        .I1(r_state__0[13]),
        .I2(r_state__0[11]),
        .I3(\r_state[0]_i_11__0_n_0 ),
        .I4(r_state__0[9]),
        .I5(r_state__0[8]),
        .O(\r_state[0]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000203330333)) 
    \r_state[0]_i_9__0 
       (.I0(\r_state[0]_i_12__0_n_0 ),
        .I1(r_state__0[11]),
        .I2(r_state__0[9]),
        .I3(r_state__0[8]),
        .I4(\r_state[7]_i_4__1_n_0 ),
        .I5(\r_state[16]_i_5_n_0 ),
        .O(\r_state[0]_i_9__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[11]__0_i_1 
       (.I0(\r_state[11]__0_i_2_n_0 ),
        .I1(\r_state[11]__0_i_3_n_0 ),
        .I2(Q),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[6]__0_n_0 ),
        .O(ri_state__1[11]));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[11]__0_i_2 
       (.I0(\r_state[11]__0_i_4_n_0 ),
        .I1(o_tx_start),
        .I2(\r_state_reg[11]__0_n_0 ),
        .I3(o_tx_dllp_wr),
        .I4(o_rx_dllp_rd),
        .O(\r_state[11]__0_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF9)) 
    \r_state[11]__0_i_3 
       (.I0(o_rx_id_result_rd),
        .I1(r_state),
        .I2(\r_state_reg[2]__0_n_0 ),
        .I3(\r_state_reg[0]__0_n_0 ),
        .I4(\r_state_reg[4]__0_n_0 ),
        .I5(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[11]__0_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[11]__0_i_4 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(o_tx_id_ack),
        .I2(o_tx_stop),
        .O(\r_state[11]__0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010100)) 
    \r_state[11]_i_1__2 
       (.I0(\r_state[11]_i_2__1_n_0 ),
        .I1(r_state__0[8]),
        .I2(\r_state[16]_i_10_n_0 ),
        .I3(r_state__0[9]),
        .I4(r_state__0[7]),
        .I5(\r_state[11]_i_3__0_n_0 ),
        .O(ri_state__0[11]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[11]_i_2__1 
       (.I0(r_state__0[11]),
        .I1(r_state__0[16]),
        .I2(r_state__0[15]),
        .I3(r_state__0[14]),
        .I4(r_state__0[12]),
        .I5(r_state__0[13]),
        .O(\r_state[11]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[11]_i_3__0 
       (.I0(r_state__0[6]),
        .I1(r_state__0[5]),
        .I2(r_state__0[4]),
        .O(\r_state[11]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000200)) 
    \r_state[12]__0_i_1 
       (.I0(\r_state[12]__0_i_2__0_n_0 ),
        .I1(\r_state_reg[0]__0_n_0 ),
        .I2(o_rx_id_result_rd),
        .I3(\r_state_reg[11]__0_n_0 ),
        .I4(\r_state[12]__0_i_3_n_0 ),
        .O(ri_state__1[12]));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[12]__0_i_2__0 
       (.I0(o_tx_start),
        .I1(o_tx_dllp_wr),
        .I2(o_tx_stop),
        .I3(o_tx_id_ack),
        .I4(\r_state_reg[16]__0_n_0 ),
        .O(\r_state[12]__0_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \r_state[12]__0_i_3 
       (.I0(\r_state[12]__0_i_4_n_0 ),
        .I1(o_rx_dllp_rd),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(Q),
        .I4(\r_state_reg[2]__0_n_0 ),
        .O(\r_state[12]__0_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[12]__0_i_4 
       (.I0(\r_state_reg[4]__0_n_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .I2(\r_state_reg[6]__0_n_0 ),
        .I3(r_state),
        .O(\r_state[12]__0_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000010000)) 
    \r_state[12]_i_1__2 
       (.I0(\r_state[12]_i_2__2_n_0 ),
        .I1(\r_state[12]_i_3__2_n_0 ),
        .I2(r_state__0[0]),
        .I3(r_state__0[9]),
        .I4(r_state__0[11]),
        .I5(\r_state[16]_i_5_n_0 ),
        .O(ri_state__0[12]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_2__2 
       (.I0(r_state__0[2]),
        .I1(r_state__0[1]),
        .O(\r_state[12]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[12]_i_3__2 
       (.I0(r_state__0[3]),
        .I1(r_state__0[4]),
        .I2(r_state__0[5]),
        .I3(r_state__0[7]),
        .I4(r_state__0[6]),
        .I5(r_state__0[8]),
        .O(\r_state[12]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002000)) 
    \r_state[13]__0_i_1 
       (.I0(\r_state[14]__0_i_2_n_0 ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_dllp_rx_reg_n_0_[8] ),
        .I3(o_rx_dllp_rd),
        .I4(\r_state[14]__0_i_3__0_n_0 ),
        .I5(\r_state_reg[2]__0_n_0 ),
        .O(ri_state__1[13]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[13]_i_1__1 
       (.I0(\r_state[14]_i_2__0_n_0 ),
        .I1(\r_state[14]_i_3__1_n_0 ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .I3(\r_dllp_rx_reg_n_0_[8] ),
        .O(ri_state__0[13]));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \r_state[14]__0_i_1 
       (.I0(\r_state[14]__0_i_2_n_0 ),
        .I1(o_rx_dllp_rd),
        .I2(\r_state[14]__0_i_3__0_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_dllp_rx_reg_n_0_[15] ),
        .I5(\r_dllp_rx_reg_n_0_[8] ),
        .O(ri_state__1[14]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[14]__0_i_2 
       (.I0(\r_state[16]__0_i_5_n_0 ),
        .I1(o_tx_id_ack),
        .I2(o_tx_stop),
        .I3(\r_state[14]__0_i_4_n_0 ),
        .I4(o_rx_id_result_rd),
        .I5(\r_state_reg[0]__0_n_0 ),
        .O(\r_state[14]__0_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[14]__0_i_3__0 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(Q),
        .O(\r_state[14]__0_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[14]__0_i_4 
       (.I0(o_tx_dllp_wr),
        .I1(o_tx_start),
        .O(\r_state[14]__0_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[14]_i_1__0 
       (.I0(\r_state[14]_i_2__0_n_0 ),
        .I1(\r_state[14]_i_3__1_n_0 ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .I3(\r_dllp_rx_reg_n_0_[8] ),
        .O(ri_state__0[14]));
  LUT5 #(
    .INIT(32'h00000002)) 
    \r_state[14]_i_2__0 
       (.I0(\r_state[16]_i_9_n_0 ),
        .I1(r_state__0[11]),
        .I2(r_state__0[0]),
        .I3(r_state__0[9]),
        .I4(\r_state[14]_i_4__0_n_0 ),
        .O(\r_state[14]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFEFFFF)) 
    \r_state[14]_i_3__1 
       (.I0(r_state__0[3]),
        .I1(r_state__0[16]),
        .I2(r_state__0[2]),
        .I3(r_state__0[1]),
        .I4(r_state__0[8]),
        .O(\r_state[14]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[14]_i_4__0 
       (.I0(r_state__0[13]),
        .I1(r_state__0[12]),
        .I2(r_state__0[15]),
        .I3(r_state__0[14]),
        .O(\r_state[14]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \r_state[15]__0_i_1 
       (.I0(\r_state[16]__0_i_2_n_0 ),
        .I1(\r_dllp_rx_reg_n_0_[8] ),
        .I2(\r_dllp_rx_reg_n_0_[15] ),
        .O(ri_state__1[15]));
  LUT6 #(
    .INIT(64'h0000800000000000)) 
    \r_state[15]_i_1 
       (.I0(\r_dllp_rx_reg_n_0_[8] ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_state[16]_i_8_n_0 ),
        .I3(\r_state[16]_i_9_n_0 ),
        .I4(\r_state[16]_i_10_n_0 ),
        .I5(r_state__0[8]),
        .O(ri_state__0[15]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \r_state[16]__0_i_1 
       (.I0(\r_dllp_rx_reg_n_0_[8] ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_state[16]__0_i_2_n_0 ),
        .O(ri_state__1[16]));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \r_state[16]__0_i_2 
       (.I0(\r_state[12]__0_i_2__0_n_0 ),
        .I1(\r_state[16]__0_i_3_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(o_rx_dllp_rd),
        .I4(\r_state[16]__0_i_4_n_0 ),
        .I5(\r_state[16]__0_i_5_n_0 ),
        .O(\r_state[16]__0_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[16]__0_i_3 
       (.I0(o_rx_id_result_rd),
        .I1(\r_state_reg[0]__0_n_0 ),
        .O(\r_state[16]__0_i_3_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[16]__0_i_4 
       (.I0(Q),
        .I1(\r_state_reg[2]__0_n_0 ),
        .O(\r_state[16]__0_i_4_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[16]__0_i_5 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[6]__0_n_0 ),
        .I3(\r_state_reg[11]__0_n_0 ),
        .I4(r_state),
        .O(\r_state[16]__0_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[16]_i_1 
       (.I0(\r_state[16]_i_4_n_0 ),
        .I1(\r_state[16]_i_5_n_0 ),
        .I2(\r_state[16]_i_6_n_0 ),
        .I3(\r_state[16]_i_7_n_0 ),
        .O(ri_state));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[16]_i_10 
       (.I0(r_state__0[1]),
        .I1(r_state__0[0]),
        .I2(r_state__0[3]),
        .I3(r_state__0[2]),
        .O(\r_state[16]_i_10_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[16]_i_11 
       (.I0(r_state__0[3]),
        .I1(r_state__0[5]),
        .I2(r_state__0[4]),
        .O(\r_state[16]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[16]_i_12 
       (.I0(r_state__0[9]),
        .I1(r_state__0[8]),
        .I2(r_state__0[7]),
        .I3(r_state__0[6]),
        .O(\r_state[16]_i_12_n_0 ));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_state[16]_i_13 
       (.I0(r_status_timer_reg[3]),
        .I1(r_status_timer_reg[2]),
        .I2(r_status_timer_reg[1]),
        .I3(r_status_timer_reg[4]),
        .I4(r_status_timer_reg[0]),
        .O(\r_state[16]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h0000400000000000)) 
    \r_state[16]_i_2 
       (.I0(\r_dllp_rx_reg_n_0_[8] ),
        .I1(\r_dllp_rx_reg_n_0_[15] ),
        .I2(\r_state[16]_i_8_n_0 ),
        .I3(\r_state[16]_i_9_n_0 ),
        .I4(\r_state[16]_i_10_n_0 ),
        .I5(r_state__0[8]),
        .O(ri_state__0[16]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFDFFFCFCFC)) 
    \r_state[16]_i_4 
       (.I0(\r_state_reg[0]__0_2 ),
        .I1(r_state__0[2]),
        .I2(\r_state[16]_i_11_n_0 ),
        .I3(r_state__0[0]),
        .I4(r_state__0[1]),
        .I5(r_state__0[11]),
        .O(\r_state[16]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[16]_i_5 
       (.I0(r_state__0[13]),
        .I1(r_state__0[12]),
        .I2(r_state__0[14]),
        .I3(r_state__0[15]),
        .I4(r_state__0[16]),
        .O(\r_state[16]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFF1FFF1FFF1F0F1)) 
    \r_state[16]_i_6 
       (.I0(r_state__0[0]),
        .I1(r_state__0[11]),
        .I2(\r_state[16]_i_12_n_0 ),
        .I3(r_state__0[1]),
        .I4(\r_state_reg[0]__0_0 ),
        .I5(\r_state_reg[0]__0_1 ),
        .O(\r_state[16]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0200000000000000)) 
    \r_state[16]_i_7 
       (.I0(\r_state[16]_i_13_n_0 ),
        .I1(r_state__0[11]),
        .I2(r_state__0[1]),
        .I3(r_status_timer_reg[7]),
        .I4(r_status_timer_reg[6]),
        .I5(r_status_timer_reg[5]),
        .O(\r_state[16]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[16]_i_8 
       (.I0(r_state__0[9]),
        .I1(\r_state[16]_i_5_n_0 ),
        .I2(r_state__0[11]),
        .O(\r_state[16]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[16]_i_9 
       (.I0(r_state__0[7]),
        .I1(r_state__0[6]),
        .I2(r_state__0[5]),
        .I3(r_state__0[4]),
        .O(\r_state[16]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0000000001000000)) 
    \r_state[1]__0_i_1__0 
       (.I0(o_rx_id_result_rd),
        .I1(o_tx_dllp_wr),
        .I2(\r_state_reg[11]__0_n_0 ),
        .I3(\r_state[1]__0_i_2_n_0 ),
        .I4(\r_state_reg[0]__0_n_0 ),
        .I5(\r_state[12]__0_i_3_n_0 ),
        .O(ri_state__1[1]));
  LUT4 #(
    .INIT(16'h0001)) 
    \r_state[1]__0_i_2 
       (.I0(o_tx_start),
        .I1(o_tx_stop),
        .I2(o_tx_id_ack),
        .I3(\r_state_reg[16]__0_n_0 ),
        .O(\r_state[1]__0_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000008)) 
    \r_state[1]_i_1__7 
       (.I0(\r_state[16]_i_8_n_0 ),
        .I1(r_state__0[0]),
        .I2(\r_state[12]_i_3__2_n_0 ),
        .I3(r_state__0[1]),
        .I4(r_state__0[2]),
        .O(ri_state__0[1]));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[2]__0_i_1__0 
       (.I0(\r_state[2]__0_i_2__0_n_0 ),
        .I1(\r_state_reg[11]__0_n_0 ),
        .I2(r_state),
        .I3(o_rx_dllp_rd),
        .I4(o_rx_id_result_rd),
        .I5(\r_state[7]__0_i_3__0_n_0 ),
        .O(ri_state__1[2]));
  LUT6 #(
    .INIT(64'hD100D1C0C000C000)) 
    \r_state[2]__0_i_2__0 
       (.I0(\r_state[2]__0_i_3_n_0 ),
        .I1(\r_state[2]__0_i_4_n_0 ),
        .I2(\r_state[2]__0_i_5_n_0 ),
        .I3(\r_state[12]__0_i_2__0_n_0 ),
        .I4(\r_state[0]__0_i_6__0_n_0 ),
        .I5(\r_state[2]__0_i_6_n_0 ),
        .O(\r_state[2]__0_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hEEE0)) 
    \r_state[2]__0_i_3 
       (.I0(\r_state_reg[3]__0_n_0 ),
        .I1(\r_state_reg[0]__0_0 ),
        .I2(Q),
        .I3(r_update_status),
        .O(\r_state[2]__0_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[2]__0_i_4 
       (.I0(Q),
        .I1(\r_state_reg[3]__0_n_0 ),
        .O(\r_state[2]__0_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h555F555F5FD555D5)) 
    \r_state[2]__0_i_5 
       (.I0(\r_state[12]__0_i_2__0_n_0 ),
        .I1(\r_state_reg[8]_0 ),
        .I2(\r_state_reg[4]__0_n_0 ),
        .I3(\r_state_reg[5]__0_n_0 ),
        .I4(\r_state_reg[9]_0 ),
        .I5(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[2]__0_i_5_n_0 ));
  LUT3 #(
    .INIT(8'h01)) 
    \r_state[2]__0_i_6 
       (.I0(\r_state_reg[6]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .O(\r_state[2]__0_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h00000000FFFF00AB)) 
    \r_state[2]_i_1__7 
       (.I0(\r_state[2]_i_2__6_n_0 ),
        .I1(\r_state[2]_i_3_n_0 ),
        .I2(\r_state[2]_i_4_n_0 ),
        .I3(\r_state[2]_i_5_n_0 ),
        .I4(r_state__0[1]),
        .I5(\r_state[2]_i_6_n_0 ),
        .O(ri_state__0[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hAABBBAAAAAAABAAA)) 
    \r_state[2]_i_2__6 
       (.I0(r_state__0[6]),
        .I1(\r_state[16]_i_5_n_0 ),
        .I2(\r_state_reg[8]_0 ),
        .I3(r_state__0[4]),
        .I4(r_state__0[5]),
        .I5(\r_state_reg[9]_0 ),
        .O(\r_state[2]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[2]_i_3 
       (.I0(r_state__0[4]),
        .I1(r_state__0[5]),
        .O(\r_state[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h5555555455545441)) 
    \r_state[2]_i_4 
       (.I0(r_state__0[3]),
        .I1(r_state__0[16]),
        .I2(r_state__0[15]),
        .I3(r_state__0[14]),
        .I4(r_state__0[12]),
        .I5(r_state__0[13]),
        .O(\r_state[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFEAAAAA8A8)) 
    \r_state[2]_i_5 
       (.I0(r_state__0[6]),
        .I1(r_state__0[5]),
        .I2(r_state__0[4]),
        .I3(r_update_status),
        .I4(\r_state[16]_i_5_n_0 ),
        .I5(r_state__0[3]),
        .O(\r_state[2]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF4)) 
    \r_state[2]_i_6 
       (.I0(\r_state[2]_i_7_n_0 ),
        .I1(r_state__0[1]),
        .I2(r_state__0[7]),
        .I3(r_state__0[0]),
        .I4(r_state__0[2]),
        .I5(\r_state[2]_i_8_n_0 ),
        .O(\r_state[2]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[2]_i_7 
       (.I0(\r_state_reg[0]__0_0 ),
        .I1(r_state__0[16]),
        .I2(r_state__0[3]),
        .I3(\r_state[14]_i_4__0_n_0 ),
        .I4(\r_state[2]_i_3_n_0 ),
        .I5(r_state__0[6]),
        .O(\r_state[2]_i_7_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[2]_i_8 
       (.I0(r_state__0[11]),
        .I1(r_state__0[9]),
        .I2(r_state__0[8]),
        .O(\r_state[2]_i_8_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[3]__0_i_1__0 
       (.I0(\r_state[7]__0_i_2__0_n_0 ),
        .I1(r_jump_sel[0]),
        .I2(r_jump_sel[1]),
        .I3(\r_state[6]__0_i_2__0_n_0 ),
        .O(ri_state__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \r_state[3]_i_1__7 
       (.I0(\r_state[6]_i_2__3_n_0 ),
        .I1(\r_state[16]_i_9_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[4]__0_i_1 
       (.I0(\r_state[7]__0_i_2__0_n_0 ),
        .I1(\r_state[6]__0_i_2__0_n_0 ),
        .I2(r_jump_sel[1]),
        .I3(r_jump_sel[0]),
        .O(ri_state__1[4]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \r_state[4]_i_1__6 
       (.I0(\r_state[6]_i_2__3_n_0 ),
        .I1(\r_state[16]_i_9_n_0 ),
        .I2(r_jump_sel[1]),
        .I3(r_jump_sel[0]),
        .O(ri_state__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h0200)) 
    \r_state[5]__0_i_1 
       (.I0(\r_state[7]__0_i_2__0_n_0 ),
        .I1(\r_state[6]__0_i_2__0_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__1[5]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'h0800)) 
    \r_state[5]_i_1__5 
       (.I0(\r_state[6]_i_2__3_n_0 ),
        .I1(\r_state[16]_i_9_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h2000)) 
    \r_state[6]__0_i_1__0 
       (.I0(\r_state[7]__0_i_2__0_n_0 ),
        .I1(\r_state[6]__0_i_2__0_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__1[6]));
  LUT5 #(
    .INIT(32'hFFFFFEFF)) 
    \r_state[6]__0_i_2__0 
       (.I0(Q),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(\r_state_reg[16]__0_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state_reg[0]__0_n_0 ),
        .O(\r_state[6]__0_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \r_state[6]_i_1__6 
       (.I0(\r_state[6]_i_2__3_n_0 ),
        .I1(\r_state[16]_i_9_n_0 ),
        .I2(r_jump_sel[0]),
        .I3(r_jump_sel[1]),
        .O(ri_state__0[6]));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \r_state[6]_i_2__3 
       (.I0(\r_state[7]_i_3__1_n_0 ),
        .I1(r_state__0[3]),
        .I2(r_state__0[16]),
        .I3(r_state__0[1]),
        .I4(r_state__0[0]),
        .I5(r_state__0[2]),
        .O(\r_state[6]_i_2__3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000800)) 
    \r_state[7]__0_i_1__0 
       (.I0(\r_state[7]__0_i_2__0_n_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(Q),
        .I3(r_update_status),
        .I4(\r_state_reg[16]__0_n_0 ),
        .I5(\r_state[7]__0_i_3__0_n_0 ),
        .O(ri_state__1[7]));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[7]__0_i_2__0 
       (.I0(r_state),
        .I1(\r_state_reg[6]__0_n_0 ),
        .I2(\r_state_reg[5]__0_n_0 ),
        .I3(\r_state_reg[4]__0_n_0 ),
        .I4(\r_state[9]__0_i_3__0_n_0 ),
        .O(\r_state[7]__0_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[7]__0_i_3__0 
       (.I0(\r_state_reg[2]__0_n_0 ),
        .I1(\r_state_reg[0]__0_n_0 ),
        .O(\r_state[7]__0_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_state[7]_i_1__4 
       (.I0(r_state__0[4]),
        .I1(r_state__0[5]),
        .I2(r_state__0[6]),
        .I3(r_state__0[7]),
        .I4(\r_state[7]_i_2__4_n_0 ),
        .I5(\r_state[7]_i_3__1_n_0 ),
        .O(ri_state__0[7]));
  LUT6 #(
    .INIT(64'h0000010000000000)) 
    \r_state[7]_i_2__4 
       (.I0(r_state__0[0]),
        .I1(r_state__0[2]),
        .I2(r_state__0[16]),
        .I3(r_update_status),
        .I4(r_state__0[1]),
        .I5(r_state__0[3]),
        .O(\r_state[7]_i_2__4_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[7]_i_3__1 
       (.I0(r_state__0[14]),
        .I1(r_state__0[15]),
        .I2(\r_state[7]_i_4__1_n_0 ),
        .I3(r_state__0[8]),
        .I4(r_state__0[9]),
        .I5(r_state__0[11]),
        .O(\r_state[7]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[7]_i_4__1 
       (.I0(r_state__0[12]),
        .I1(r_state__0[13]),
        .O(\r_state[7]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[8]__0_i_1 
       (.I0(\r_state[8]__0_i_2_n_0 ),
        .I1(\r_state_reg[16]__0_n_0 ),
        .I2(\r_state_reg[3]__0_n_0 ),
        .I3(Q),
        .I4(\r_state[9]__0_i_3__0_n_0 ),
        .O(ri_state__1[8]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFEF)) 
    \r_state[8]__0_i_2 
       (.I0(\r_state_reg[8]_0 ),
        .I1(\r_state_reg[5]__0_n_0 ),
        .I2(\r_state_reg[4]__0_n_0 ),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state_reg[0]__0_n_0 ),
        .I5(\r_state[8]__0_i_3_n_0 ),
        .O(\r_state[8]__0_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[8]__0_i_3 
       (.I0(r_state),
        .I1(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[8]__0_i_3_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00020000)) 
    \r_state[8]_i_1__3 
       (.I0(\r_state[9]_i_2__2_n_0 ),
        .I1(r_state__0[0]),
        .I2(\r_state_reg[8]_0 ),
        .I3(r_state__0[5]),
        .I4(r_state__0[4]),
        .O(ri_state__0[8]));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_state[9]__0_i_1 
       (.I0(\r_state_reg[16]__0_n_0 ),
        .I1(\r_state_reg[3]__0_n_0 ),
        .I2(Q),
        .I3(\r_state_reg[2]__0_n_0 ),
        .I4(\r_state[9]__0_i_2__0_n_0 ),
        .I5(\r_state[9]__0_i_3__0_n_0 ),
        .O(ri_state__1[9]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFD)) 
    \r_state[9]__0_i_2__0 
       (.I0(\r_state_reg[5]__0_n_0 ),
        .I1(\r_state_reg[4]__0_n_0 ),
        .I2(\r_state_reg[0]__0_n_0 ),
        .I3(\r_state_reg[9]_0 ),
        .I4(r_state),
        .I5(\r_state_reg[6]__0_n_0 ),
        .O(\r_state[9]__0_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \r_state[9]__0_i_3__0 
       (.I0(o_tx_dllp_wr),
        .I1(o_tx_start),
        .I2(o_tx_stop),
        .I3(o_tx_id_ack),
        .I4(\r_state[9]__0_i_4_n_0 ),
        .I5(\r_state_reg[11]__0_n_0 ),
        .O(\r_state[9]__0_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[9]__0_i_4 
       (.I0(o_rx_id_result_rd),
        .I1(o_rx_dllp_rd),
        .O(\r_state[9]__0_i_4_n_0 ));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00000020)) 
    \r_state[9]_i_1__5 
       (.I0(\r_state[9]_i_2__2_n_0 ),
        .I1(r_state__0[4]),
        .I2(r_state__0[5]),
        .I3(r_state__0[0]),
        .I4(\r_state_reg[9]_0 ),
        .O(ri_state__0[9]));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \r_state[9]_i_2__2 
       (.I0(\r_state[7]_i_3__1_n_0 ),
        .I1(\r_state[0]_i_3__5_n_0 ),
        .I2(r_state__0[1]),
        .I3(r_state__0[2]),
        .I4(r_state__0[16]),
        .I5(r_state__0[3]),
        .O(\r_state[9]_i_2__2_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .D(ri_state__0[0]),
        .PRE(inst_local_reset_n_0),
        .Q(r_state__0[0]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .D(ri_state__1[0]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_state_reg[0]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[11]),
        .Q(r_state__0[11]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[11]),
        .Q(\r_state_reg[11]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[12]),
        .Q(r_state__0[12]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[12]),
        .Q(o_tx_dllp_wr));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[13]),
        .Q(r_state__0[13]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[13]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[13]),
        .Q(o_tx_start));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[14] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[14]),
        .Q(r_state__0[14]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[14]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[14]),
        .Q(o_tx_stop));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[15] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[15]),
        .Q(r_state__0[15]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[15]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[15]),
        .Q(o_tx_id_ack));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[16] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[16]),
        .Q(r_state__0[16]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[16]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[16]),
        .Q(\r_state_reg[16]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[1]),
        .Q(r_state__0[1]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[1]),
        .Q(Q));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[2]),
        .Q(r_state__0[2]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[2]),
        .Q(\r_state_reg[2]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[3]),
        .Q(r_state__0[3]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[3]),
        .Q(\r_state_reg[3]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[4]),
        .Q(r_state__0[4]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[4]),
        .Q(\r_state_reg[4]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[5]),
        .Q(r_state__0[5]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[5]),
        .Q(\r_state_reg[5]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[6]),
        .Q(r_state__0[6]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[6]),
        .Q(\r_state_reg[6]__0_n_0 ));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[7]),
        .Q(r_state__0[7]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[7]),
        .Q(r_state));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[8]),
        .Q(r_state__0[8]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[8]),
        .Q(o_rx_dllp_rd));
  (* FSM_ENCODED_STATES = "S_JUMP:00000000000000100,S_TX_TLP_START:00010000000000000,S_READ_ID_STATUS:00000001000000000,S_ENTRY_RX:00000000000100000,S_TX_TLP_REPLAY:10000000000000000,S_READ_DLLP:00000000100000000,S_SEND_STATUS:00000000010000000,S_CHECK_ACK_ID:00000010000000000,S_WRITE_DLLP:00001000000000000,S_CAL:00000000000000010,S_TX_TLP_ID_ACK:01000000000000000,S_ENTRY_RX_DLLP:00000000000010000,S_ENTRY_TX:00000000001000000,S_INIT:00000000000000001,S_CHECK_DLLP_RDY:00000100000000000,S_TX_TLP_STOP:00100000000000000,S_ENTRY_STATUS:00000000000001000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__0[9]),
        .Q(r_state__0[9]));
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9]__0 
       (.C(\r_rst_reg[0] ),
        .CE(ri_state),
        .CLR(inst_local_reset_n_0),
        .D(ri_state__1[9]),
        .Q(o_rx_id_result_rd));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_2 
       (.I0(r_status_timer_reg[0]),
        .I1(Q),
        .O(\r_status_timer[0]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_3 
       (.I0(r_status_timer_reg[3]),
        .I1(Q),
        .O(\r_status_timer[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_4 
       (.I0(r_status_timer_reg[2]),
        .I1(Q),
        .O(\r_status_timer[0]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[0]_i_5 
       (.I0(r_status_timer_reg[1]),
        .I1(Q),
        .O(\r_status_timer[0]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \r_status_timer[0]_i_6 
       (.I0(r_status_timer_reg[0]),
        .I1(Q),
        .O(\r_status_timer[0]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[12]_i_2 
       (.I0(r_status_timer_reg[12]),
        .I1(Q),
        .O(\r_status_timer[12]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_2 
       (.I0(r_status_timer_reg[7]),
        .I1(Q),
        .O(\r_status_timer[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_3 
       (.I0(r_status_timer_reg[6]),
        .I1(Q),
        .O(\r_status_timer[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_4 
       (.I0(r_status_timer_reg[5]),
        .I1(Q),
        .O(\r_status_timer[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[4]_i_5 
       (.I0(r_status_timer_reg[4]),
        .I1(Q),
        .O(\r_status_timer[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_2 
       (.I0(r_status_timer_reg[11]),
        .I1(Q),
        .O(\r_status_timer[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_3 
       (.I0(r_status_timer_reg[10]),
        .I1(Q),
        .O(\r_status_timer[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_4 
       (.I0(r_status_timer_reg[9]),
        .I1(Q),
        .O(\r_status_timer[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_status_timer[8]_i_5 
       (.I0(r_status_timer_reg[8]),
        .I1(Q),
        .O(\r_status_timer[8]_i_5_n_0 ));
  FDCE \r_status_timer_reg[0] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1_n_7 ),
        .Q(r_status_timer_reg[0]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\r_status_timer_reg[0]_i_1_n_0 ,\NLW_r_status_timer_reg[0]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,\r_status_timer[0]_i_2_n_0 }),
        .O({\r_status_timer_reg[0]_i_1_n_4 ,\r_status_timer_reg[0]_i_1_n_5 ,\r_status_timer_reg[0]_i_1_n_6 ,\r_status_timer_reg[0]_i_1_n_7 }),
        .S({\r_status_timer[0]_i_3_n_0 ,\r_status_timer[0]_i_4_n_0 ,\r_status_timer[0]_i_5_n_0 ,\r_status_timer[0]_i_6_n_0 }));
  FDCE \r_status_timer_reg[10] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1_n_5 ),
        .Q(r_status_timer_reg[10]));
  FDCE \r_status_timer_reg[11] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1_n_4 ),
        .Q(r_status_timer_reg[11]));
  FDCE \r_status_timer_reg[12] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[12]_i_1_n_7 ),
        .Q(r_status_timer_reg[12]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[12]_i_1 
       (.CI(\r_status_timer_reg[8]_i_1_n_0 ),
        .CO(\NLW_r_status_timer_reg[12]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_r_status_timer_reg[12]_i_1_O_UNCONNECTED [3:1],\r_status_timer_reg[12]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,\r_status_timer[12]_i_2_n_0 }));
  FDCE \r_status_timer_reg[1] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1_n_6 ),
        .Q(r_status_timer_reg[1]));
  FDCE \r_status_timer_reg[2] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1_n_5 ),
        .Q(r_status_timer_reg[2]));
  FDCE \r_status_timer_reg[3] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[0]_i_1_n_4 ),
        .Q(r_status_timer_reg[3]));
  FDCE \r_status_timer_reg[4] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1_n_7 ),
        .Q(r_status_timer_reg[4]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[4]_i_1 
       (.CI(\r_status_timer_reg[0]_i_1_n_0 ),
        .CO({\r_status_timer_reg[4]_i_1_n_0 ,\NLW_r_status_timer_reg[4]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\r_status_timer_reg[4]_i_1_n_4 ,\r_status_timer_reg[4]_i_1_n_5 ,\r_status_timer_reg[4]_i_1_n_6 ,\r_status_timer_reg[4]_i_1_n_7 }),
        .S({\r_status_timer[4]_i_2_n_0 ,\r_status_timer[4]_i_3_n_0 ,\r_status_timer[4]_i_4_n_0 ,\r_status_timer[4]_i_5_n_0 }));
  FDCE \r_status_timer_reg[5] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1_n_6 ),
        .Q(r_status_timer_reg[5]));
  FDCE \r_status_timer_reg[6] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1_n_5 ),
        .Q(r_status_timer_reg[6]));
  FDCE \r_status_timer_reg[7] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[4]_i_1_n_4 ),
        .Q(r_status_timer_reg[7]));
  FDCE \r_status_timer_reg[8] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1_n_7 ),
        .Q(r_status_timer_reg[8]));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \r_status_timer_reg[8]_i_1 
       (.CI(\r_status_timer_reg[4]_i_1_n_0 ),
        .CO({\r_status_timer_reg[8]_i_1_n_0 ,\NLW_r_status_timer_reg[8]_i_1_CO_UNCONNECTED [2:0]}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\r_status_timer_reg[8]_i_1_n_4 ,\r_status_timer_reg[8]_i_1_n_5 ,\r_status_timer_reg[8]_i_1_n_6 ,\r_status_timer_reg[8]_i_1_n_7 }),
        .S({\r_status_timer[8]_i_2_n_0 ,\r_status_timer[8]_i_3_n_0 ,\r_status_timer[8]_i_4_n_0 ,\r_status_timer[8]_i_5_n_0 }));
  FDCE \r_status_timer_reg[9] 
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(\r_status_timer_reg[8]_i_1_n_6 ),
        .Q(r_status_timer_reg[9]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h000000000000FEEF)) 
    r_update_status_i_1
       (.I0(r_update_status_i_2_n_0),
        .I1(r_update_status),
        .I2(lopt),
        .I3(r_rx_tlp_rdy),
        .I4(r_state),
        .I5(Q),
        .O(ri_update_status));
  LUT5 #(
    .INIT(32'h20000000)) 
    r_update_status_i_2
       (.I0(\r_state[16]_i_13_n_0 ),
        .I1(r_update_status_i_3_n_0),
        .I2(r_status_timer_reg[7]),
        .I3(r_status_timer_reg[6]),
        .I4(r_status_timer_reg[5]),
        .O(r_update_status_i_2_n_0));
  LUT5 #(
    .INIT(32'h7FFFFFFF)) 
    r_update_status_i_3
       (.I0(r_status_timer_reg[12]),
        .I1(r_status_timer_reg[10]),
        .I2(r_status_timer_reg[8]),
        .I3(r_status_timer_reg[9]),
        .I4(r_status_timer_reg[11]),
        .O(r_update_status_i_3_n_0));
  FDCE r_update_status_reg
       (.C(\r_rst_reg[0] ),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_update_status),
        .Q(r_update_status));
endmodule

module transceiver_link_layer_top
   (\r_buffer_addr_reg[4] ,
    \r_buffer_addr_reg[5] ,
    \r_buffer_addr_reg[5]_0 ,
    r_rply_wr_reg,
    \r_mux_stage_reg[7][7] ,
    o_tlp,
    I117,
    I118,
    \r_tlp_temp_wr_addr_reg[3] ,
    p_3_in,
    o_phys_cal_start,
    o_phys_packet_k_en,
    o_phys_packet_byte,
    \r_buffer_addr_reg[3] ,
    \r_buffer_addr_reg[2] ,
    \r_buffer_addr_reg[1] ,
    \r_buffer_addr_reg[0] ,
    in0,
    o_tlp_valid,
    r_rply_wr_reg_0,
    out,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[0]_1 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[1]_1 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[2]_1 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[3]_1 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[4]_1 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[5]_1 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[6]_1 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    \r_kd_reg[7]_1 ,
    in00,
    \r_rst_reg[1] ,
    \r_mux_stage_reg[7][7]_0 ,
    \r_wr_ptr_bin_reg[0] ,
    \r_state_reg[0]__0 ,
    \r_state_reg[0]__0_0 ,
    \r_rst_reg[0] ,
    D,
    \r_rd_ptr_bin_reg[3] );
  output \r_buffer_addr_reg[4] ;
  output \r_buffer_addr_reg[5] ;
  output \r_buffer_addr_reg[5]_0 ;
  output r_rply_wr_reg;
  output [7:0]\r_mux_stage_reg[7][7] ;
  output [33:0]o_tlp;
  output [3:0]I117;
  output I118;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [33:0]p_3_in;
  output o_phys_cal_start;
  output o_phys_packet_k_en;
  output [7:0]o_phys_packet_byte;
  output \r_buffer_addr_reg[3] ;
  output \r_buffer_addr_reg[2] ;
  output \r_buffer_addr_reg[1] ;
  output \r_buffer_addr_reg[0] ;
  output in0;
  output o_tlp_valid;
  output r_rply_wr_reg_0;
  input out;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[0]_1 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[1]_1 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[2]_1 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[3]_1 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[4]_1 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[5]_1 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[6]_1 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input \r_kd_reg[7]_1 ;
  input [33:0]in00;
  input \r_rst_reg[1] ;
  input [55:0]\r_mux_stage_reg[7][7]_0 ;
  input \r_wr_ptr_bin_reg[0] ;
  input \r_state_reg[0]__0 ;
  input \r_state_reg[0]__0_0 ;
  input \r_rst_reg[0] ;
  input [8:0]D;
  input \r_rd_ptr_bin_reg[3] ;

  wire [8:0]D;
  wire [3:0]I117;
  wire I118;
  wire in0;
  wire [33:0]in00;
  wire lopt;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire [15:6]o_dllp;
  (* RTL_KEEP = "inst_transmitter_packet_interface_top " *) wire o_dllp_rdy;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire o_dllp_valid;
  (* RTL_KEEP = "true" *) wire o_phys_cal_start;
  (* RTL_KEEP = "true" *) wire [7:0]o_phys_packet_byte;
  (* RTL_KEEP = "true" *) wire o_phys_packet_k_en;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_rx_dllp_rd;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_rx_id_result_rd;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire [4:0]o_status_id;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire o_status_id_valid;
  wire [33:0]o_tlp;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire o_tlp_rdy_orig;
  wire o_tlp_valid;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire [15:0]o_tx_dllp;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_dllp_wr;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_id_ack;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_start;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_stop;
  wire out;
  wire [33:0]p_3_in;
  wire \r_buffer_addr_reg[0] ;
  wire \r_buffer_addr_reg[1] ;
  wire \r_buffer_addr_reg[2] ;
  wire \r_buffer_addr_reg[3] ;
  wire \r_buffer_addr_reg[4] ;
  wire \r_buffer_addr_reg[5] ;
  wire \r_buffer_addr_reg[5]_0 ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[0]_1 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[1]_1 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[2]_1 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[3]_1 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[4]_1 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[5]_1 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[6]_1 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire \r_kd_reg[7]_1 ;
  wire [7:0]\r_mux_stage_reg[7][7] ;
  wire [55:0]\r_mux_stage_reg[7][7]_0 ;
  wire \r_rd_ptr_bin_reg[3] ;
  wire r_rply_wr_reg;
  wire r_rply_wr_reg_0;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire \r_state_reg[0]__0 ;
  wire \r_state_reg[0]__0_0 ;
  wire [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  wire \r_wr_ptr_bin_reg[0] ;
  wire [14:0]NLW_inst_receiver_packet_interface_top_o_dllp_UNCONNECTED;
  wire NLW_inst_transceiver_link_controller_o_tx_rply_UNCONNECTED;
  wire NLW_inst_transmitter_packet_interface_top_o_tlp_id_all_ack_UNCONNECTED;
  wire NLW_inst_transmitter_packet_interface_top_r_rply_enable_reg_UNCONNECTED;
  wire [3:0]NLW_inst_transmitter_packet_interface_top_o_tlp_id_ack_UNCONNECTED;

  receiver_packet_interface_top inst_receiver_packet_interface_top
       (.D(D),
        .I117(I117),
        .I118(I118),
        .in00(in00),
        .inst_bufg_clk_120(o_tlp),
        .lopt(lopt),
        .o_dllp({o_dllp[15],NLW_inst_receiver_packet_interface_top_o_dllp_UNCONNECTED[14:9],o_dllp[8],NLW_inst_receiver_packet_interface_top_o_dllp_UNCONNECTED[7:0]}),
        .o_dllp_valid(o_dllp_valid),
        .o_status_id(o_status_id),
        .o_status_id_valid(o_status_id_valid),
        .out(o_tlp_rdy_orig),
        .p_3_in(p_3_in),
        .r_empty_reg(o_tlp_valid),
        .\r_rd_ptr_bin_reg[3] (\r_rd_ptr_bin_reg[3] ),
        .\r_rd_ptr_reg[0] (o_rx_id_result_rd),
        .\r_rd_ptr_reg[3] (o_rx_dllp_rd),
        .\r_rst_reg[0] (out),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1] (\r_rst_reg[1] ),
        .\r_tlp_temp_wr_addr_reg[3] (\r_tlp_temp_wr_addr_reg[3] ));
  transceiver_link_controller__hierPathDup__1 inst_transceiver_link_controller
       (.D({o_dllp[15],o_dllp[8]}),
        .Q(o_phys_cal_start),
        .lopt(lopt),
        .o_rx_dllp_rd(o_rx_dllp_rd),
        .o_rx_id_result_rd(o_rx_id_result_rd),
        .o_tx_dllp_wr(o_tx_dllp_wr),
        .o_tx_id_ack(o_tx_id_ack),
        .o_tx_rply(NLW_inst_transceiver_link_controller_o_tx_rply_UNCONNECTED),
        .o_tx_start(o_tx_start),
        .o_tx_stop(o_tx_stop),
        .out(o_tx_dllp),
        .\r_dllp_tx_reg[8]_0 (o_status_id),
        .\r_rst_reg[0] (out),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .r_rx_tlp_rdy_reg_0(o_tlp_rdy_orig),
        .\r_state_reg[0]__0_0 (\r_state_reg[0]__0 ),
        .\r_state_reg[0]__0_1 (\r_state_reg[0]__0_0 ),
        .\r_state_reg[0]__0_2 (o_dllp_rdy),
        .\r_state_reg[8]_0 (o_dllp_valid),
        .\r_state_reg[9]_0 (o_status_id_valid));
  transmitter_packet_interface_top inst_transmitter_packet_interface_top
       (.I81(o_tx_dllp),
        .Q({o_phys_packet_k_en,o_phys_packet_byte}),
        .in0(in0),
        .o_dllp_rdy(o_dllp_rdy),
        .o_tlp_id_ack(NLW_inst_transmitter_packet_interface_top_o_tlp_id_ack_UNCONNECTED[3:0]),
        .o_tlp_id_all_ack(NLW_inst_transmitter_packet_interface_top_o_tlp_id_all_ack_UNCONNECTED),
        .out(out),
        .\r_buffer_addr_reg[0] (\r_buffer_addr_reg[0] ),
        .\r_buffer_addr_reg[1] (\r_buffer_addr_reg[1] ),
        .\r_buffer_addr_reg[2] (\r_buffer_addr_reg[2] ),
        .\r_buffer_addr_reg[3] (\r_buffer_addr_reg[3] ),
        .\r_buffer_addr_reg[4] (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[5] (\r_buffer_addr_reg[5] ),
        .\r_buffer_addr_reg[5]_0 (\r_buffer_addr_reg[5]_0 ),
        .\r_kd_reg[0] (\r_kd_reg[0] ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0]_0 ),
        .\r_kd_reg[0]_1 (\r_kd_reg[0]_1 ),
        .\r_kd_reg[1] (\r_kd_reg[1] ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1]_0 ),
        .\r_kd_reg[1]_1 (\r_kd_reg[1]_1 ),
        .\r_kd_reg[2] (\r_kd_reg[2] ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2]_0 ),
        .\r_kd_reg[2]_1 (\r_kd_reg[2]_1 ),
        .\r_kd_reg[3] (\r_kd_reg[3] ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3]_0 ),
        .\r_kd_reg[3]_1 (\r_kd_reg[3]_1 ),
        .\r_kd_reg[4] (\r_kd_reg[4] ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4]_0 ),
        .\r_kd_reg[4]_1 (\r_kd_reg[4]_1 ),
        .\r_kd_reg[5] (\r_kd_reg[5] ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5]_0 ),
        .\r_kd_reg[5]_1 (\r_kd_reg[5]_1 ),
        .\r_kd_reg[6] (\r_kd_reg[6] ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6]_0 ),
        .\r_kd_reg[6]_1 (\r_kd_reg[6]_1 ),
        .\r_kd_reg[7] (\r_kd_reg[7] ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7]_0 ),
        .\r_kd_reg[7]_1 (\r_kd_reg[7]_1 ),
        .\r_mux_stage_reg[7][7] (\r_mux_stage_reg[7][7] ),
        .\r_mux_stage_reg[7][7]_0 (\r_mux_stage_reg[7][7]_0 ),
        .r_rply_enable_reg(NLW_inst_transmitter_packet_interface_top_r_rply_enable_reg_UNCONNECTED),
        .r_rply_wr_reg(r_rply_wr_reg),
        .r_rply_wr_reg_0(r_rply_wr_reg_0),
        .\r_rst_reg[0] (\r_rst_reg[0] ),
        .\r_rst_reg[1] (\r_rst_reg[1] ),
        .r_tlp_enable_reg(o_tx_start),
        .r_tlp_enable_reg_0(o_tx_stop),
        .\r_tlp_id_ack_reg[0] (o_tx_id_ack),
        .\r_wr_ptr_bin_reg[0] (\r_wr_ptr_bin_reg[0] ),
        .\r_wr_ptr_reg[0] (o_tx_dllp_wr));
endmodule

(* ORIG_REF_NAME = "transceiver_link_layer_top" *) 
module transceiver_link_layer_top__parameterized0
   (\r_buffer_addr_reg[4] ,
    \r_buffer_addr_reg[5] ,
    \r_buffer_addr_reg[4]_0 ,
    \r_mux_stage_reg[5][7] ,
    o_tlp,
    \r_tlp_temp_rd_addr_reg[3] ,
    \r_tr_state_reg[6] ,
    \r_tlp_temp_wr_addr_reg[3] ,
    \r_stage_reg[7][7] ,
    o_phys_cal_start,
    o_phys_packet_k_en,
    o_phys_packet_byte,
    \r_buffer_addr_reg[3] ,
    \r_buffer_addr_reg[2] ,
    \r_buffer_addr_reg[1] ,
    \r_buffer_addr_reg[0] ,
    o_tlp_rdy,
    o_tlp_valid,
    r_rply_wr_reg,
    out,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    in0,
    \r_rst_reg[0] ,
    \r_state_reg[2] ,
    \r_rd_ptr_bin_reg[3] ,
    \r_wr_ptr_bin_reg[0] ,
    \r_state_reg[0]__0 ,
    \r_rst_reg[0]_0 ,
    i_tlp,
    D);
  output \r_buffer_addr_reg[4] ;
  output \r_buffer_addr_reg[5] ;
  output \r_buffer_addr_reg[4]_0 ;
  output [7:0]\r_mux_stage_reg[5][7] ;
  output [55:0]o_tlp;
  output [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  output \r_tr_state_reg[6] ;
  output [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  output [55:0]\r_stage_reg[7][7] ;
  output o_phys_cal_start;
  output o_phys_packet_k_en;
  output [7:0]o_phys_packet_byte;
  output \r_buffer_addr_reg[3] ;
  output \r_buffer_addr_reg[2] ;
  output \r_buffer_addr_reg[1] ;
  output \r_buffer_addr_reg[0] ;
  output o_tlp_rdy;
  output o_tlp_valid;
  output r_rply_wr_reg;
  input out;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input [55:0]in0;
  input \r_rst_reg[0] ;
  input \r_state_reg[2] ;
  input \r_rd_ptr_bin_reg[3] ;
  input \r_wr_ptr_bin_reg[0] ;
  input \r_state_reg[0]__0 ;
  input \r_rst_reg[0]_0 ;
  input [33:0]i_tlp;
  input [8:0]D;

  wire [8:0]D;
  wire [33:0]i_tlp;
  wire [55:0]in0;
  wire lopt;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire [15:6]o_dllp;
  (* RTL_KEEP = "inst_transmitter_packet_interface_top " *) wire o_dllp_rdy;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire o_dllp_valid;
  (* RTL_KEEP = "true" *) wire o_phys_cal_start;
  (* RTL_KEEP = "true" *) wire [7:0]o_phys_packet_byte;
  (* RTL_KEEP = "true" *) wire o_phys_packet_k_en;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_rx_dllp_rd;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_rx_id_result_rd;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire [4:0]o_status_id;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire o_status_id_valid;
  wire [55:0]o_tlp;
  wire o_tlp_rdy;
  (* RTL_KEEP = "inst_receiver_packet_interface_top " *) wire o_tlp_rdy_orig;
  wire o_tlp_valid;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire [15:0]o_tx_dllp;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_dllp_wr;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_id_ack;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_start;
  (* RTL_KEEP = "inst_transceiver_link_controller " *) wire o_tx_stop;
  wire out;
  wire \r_buffer_addr_reg[0] ;
  wire \r_buffer_addr_reg[1] ;
  wire \r_buffer_addr_reg[2] ;
  wire \r_buffer_addr_reg[3] ;
  wire \r_buffer_addr_reg[4] ;
  wire \r_buffer_addr_reg[4]_0 ;
  wire \r_buffer_addr_reg[5] ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire [7:0]\r_mux_stage_reg[5][7] ;
  wire \r_rd_ptr_bin_reg[3] ;
  wire r_rply_wr_reg;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[0]_0 ;
  wire [55:0]\r_stage_reg[7][7] ;
  wire \r_state_reg[0]__0 ;
  wire \r_state_reg[2] ;
  wire [3:0]\r_tlp_temp_rd_addr_reg[3] ;
  wire [3:0]\r_tlp_temp_wr_addr_reg[3] ;
  wire \r_tr_state_reg[6] ;
  wire \r_wr_ptr_bin_reg[0] ;
  wire [14:0]NLW_inst_receiver_packet_interface_top_o_dllp_UNCONNECTED;
  wire NLW_inst_transceiver_link_controller_o_tx_rply_UNCONNECTED;
  wire NLW_inst_transmitter_packet_interface_top_o_tlp_id_all_ack_UNCONNECTED;
  wire NLW_inst_transmitter_packet_interface_top_r_rply_enable_reg_UNCONNECTED;
  wire [3:0]NLW_inst_transmitter_packet_interface_top_o_tlp_id_ack_UNCONNECTED;

  receiver_packet_interface_top__parameterized0 inst_receiver_packet_interface_top
       (.D(D),
        .in0(in0),
        .inst_bufg_clk_120(o_tlp),
        .lopt(lopt),
        .o_dllp({o_dllp[15],NLW_inst_receiver_packet_interface_top_o_dllp_UNCONNECTED[14:9],o_dllp[8],NLW_inst_receiver_packet_interface_top_o_dllp_UNCONNECTED[7:0]}),
        .o_dllp_valid(o_dllp_valid),
        .o_status_id(o_status_id),
        .o_status_id_valid(o_status_id_valid),
        .out(o_tlp_rdy_orig),
        .r_empty_reg(o_tlp_valid),
        .\r_rd_ptr_bin_reg[3] (\r_rd_ptr_bin_reg[3] ),
        .\r_rd_ptr_reg[0] (o_rx_id_result_rd),
        .\r_rd_ptr_reg[3] (o_rx_dllp_rd),
        .\r_rst_reg[0] (\r_rst_reg[0] ),
        .\r_rst_reg[0]_0 (\r_rst_reg[0]_0 ),
        .\r_rst_reg[1] (out),
        .\r_stage_reg[7][7] (\r_stage_reg[7][7] ),
        .\r_tlp_temp_rd_addr_reg[3] (\r_tlp_temp_rd_addr_reg[3] ),
        .\r_tlp_temp_wr_addr_reg[3] (\r_tlp_temp_wr_addr_reg[3] ),
        .\r_tr_state_reg[6] (\r_tr_state_reg[6] ));
  transceiver_link_controller inst_transceiver_link_controller
       (.D({o_dllp[15],o_dllp[8]}),
        .Q(o_phys_cal_start),
        .lopt(lopt),
        .o_rx_dllp_rd(o_rx_dllp_rd),
        .o_rx_id_result_rd(o_rx_id_result_rd),
        .o_tx_dllp_wr(o_tx_dllp_wr),
        .o_tx_id_ack(o_tx_id_ack),
        .o_tx_rply(NLW_inst_transceiver_link_controller_o_tx_rply_UNCONNECTED),
        .o_tx_start(o_tx_start),
        .o_tx_stop(o_tx_stop),
        .out(o_tx_dllp),
        .\r_dllp_tx_reg[8]_0 (o_status_id),
        .\r_rst_reg[0] (\r_rst_reg[0]_0 ),
        .\r_rst_reg[1] (out),
        .r_rx_tlp_rdy_reg_0(o_tlp_rdy_orig),
        .\r_state_reg[0]__0_0 (\r_state_reg[0]__0 ),
        .\r_state_reg[0]__0_1 (o_dllp_rdy),
        .\r_state_reg[2]_0 (\r_state_reg[2] ),
        .\r_state_reg[8]_0 (o_dllp_valid),
        .\r_state_reg[9]_0 (o_status_id_valid));
  transmitter_packet_interface_top__parameterized0 inst_transmitter_packet_interface_top
       (.I243(o_tx_dllp),
        .Q({o_phys_packet_k_en,o_phys_packet_byte}),
        .i_tlp(i_tlp),
        .o_dllp_rdy(o_dllp_rdy),
        .o_tlp_id_ack(NLW_inst_transmitter_packet_interface_top_o_tlp_id_ack_UNCONNECTED[3:0]),
        .o_tlp_id_all_ack(NLW_inst_transmitter_packet_interface_top_o_tlp_id_all_ack_UNCONNECTED),
        .out(out),
        .\r_buffer_addr_reg[0] (\r_buffer_addr_reg[0] ),
        .\r_buffer_addr_reg[1] (\r_buffer_addr_reg[1] ),
        .\r_buffer_addr_reg[2] (\r_buffer_addr_reg[2] ),
        .\r_buffer_addr_reg[3] (\r_buffer_addr_reg[3] ),
        .\r_buffer_addr_reg[4] (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[4]_0 (\r_buffer_addr_reg[4]_0 ),
        .\r_buffer_addr_reg[5] (\r_buffer_addr_reg[5] ),
        .r_full_reg(o_tlp_rdy),
        .\r_kd_reg[0] (\r_kd_reg[0] ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0]_0 ),
        .\r_kd_reg[1] (\r_kd_reg[1] ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1]_0 ),
        .\r_kd_reg[2] (\r_kd_reg[2] ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2]_0 ),
        .\r_kd_reg[3] (\r_kd_reg[3] ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3]_0 ),
        .\r_kd_reg[4] (\r_kd_reg[4] ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4]_0 ),
        .\r_kd_reg[5] (\r_kd_reg[5] ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5]_0 ),
        .\r_kd_reg[6] (\r_kd_reg[6] ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6]_0 ),
        .\r_kd_reg[7] (\r_kd_reg[7] ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7]_0 ),
        .\r_mux_stage_reg[5][7] (\r_mux_stage_reg[5][7] ),
        .r_rply_enable_reg(NLW_inst_transmitter_packet_interface_top_r_rply_enable_reg_UNCONNECTED),
        .r_rply_wr_reg(r_rply_wr_reg),
        .\r_rst_reg[0] (\r_rst_reg[0] ),
        .\r_rst_reg[0]_0 (\r_rst_reg[0]_0 ),
        .r_tlp_enable_reg(o_tx_start),
        .r_tlp_enable_reg_0(o_tx_stop),
        .\r_tlp_id_ack_reg[0] (o_tx_id_ack),
        .\r_wr_ptr_bin_reg[0] (\r_wr_ptr_bin_reg[0] ),
        .\r_wr_ptr_reg[0] (o_tx_dllp_wr));
endmodule

module transceiver_physical_layer_top
   (FMC_LA04_P,
    FMC_LA04_N,
    out,
    o_cal_done,
    o_cal_fail,
    o_packet_k_en,
    o_packet_byte,
    o_clk_200,
    o_mon_edge_tabs,
    o_mon_delay_tabs,
    o_mon_delay_tabs_wr,
    FMC_LA02_P,
    FMC_LA02_N,
    inst_oserdese2_master,
    CLK,
    CLKB0,
    i_clk_200,
    FMC_LA07_P,
    FMC_LA07_N,
    r_start_reg,
    \dout_reg[9] ,
    \r_rst_reg[1] );
  output FMC_LA04_P;
  output FMC_LA04_N;
  output out;
  output o_cal_done;
  output o_cal_fail;
  output o_packet_k_en;
  output [7:0]o_packet_byte;
  output o_clk_200;
  output [4:0]o_mon_edge_tabs;
  output [4:0]o_mon_delay_tabs;
  output o_mon_delay_tabs_wr;
  output FMC_LA02_P;
  output FMC_LA02_N;
  input inst_oserdese2_master;
  input CLK;
  input CLKB0;
  input i_clk_200;
  input FMC_LA07_P;
  input FMC_LA07_N;
  input r_start_reg;
  input [8:0]\dout_reg[9] ;
  input \r_rst_reg[1] ;

  (* RTL_KEEP = "true" *) wire CLK;
  wire CLKB0;
  wire FMC_LA02_N;
  wire FMC_LA02_P;
  wire FMC_LA04_N;
  wire FMC_LA04_P;
  wire FMC_LA07_N;
  wire FMC_LA07_P;
  wire [8:0]\dout_reg[9] ;
  (* RTL_KEEP = "true" *) wire i_clk_200;
  wire inst_oserdese2_master;
  wire inst_physical_iob_rx_n_14;
  (* RTL_KEEP = "true" *) wire o_cal_done;
  (* RTL_KEEP = "true" *) wire o_cal_fail;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_delay_tabs;
  (* RTL_KEEP = "true" *) wire o_mon_delay_tabs_wr;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_edge_tabs;
  (* RTL_KEEP = "true" *) wire [7:0]o_packet_byte;
  (* RTL_KEEP = "true" *) wire o_packet_k_en;
  (* RTL_KEEP = "inst_clk_120_reset " *) wire o_rst;
  (* RTL_KEEP = "inst_clk_200_reset " *) wire o_rst__0;
  wire \r_rst_reg[1] ;
  wire r_start_reg;

  assign o_clk_200 = i_clk_200;
  assign out = CLK;
  async_reset__parameterized1__hierPathDup__9 inst_clk_120_reset
       (.CLK(CLK),
        .out(o_rst),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  async_reset__parameterized1__hierPathDup__10 inst_clk_200_reset
       (.i_clk_200(i_clk_200),
        .out(o_rst__0),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  physical_iob_clk_gen inst_physical_iob_clk_gen
       (.FMC_LA02_N(FMC_LA02_N),
        .FMC_LA02_P(FMC_LA02_P),
        .inst_oddr_0(inst_oserdese2_master));
  receiver_physical_iob_top_27 inst_physical_iob_rx
       (.CLK(CLK),
        .CLKB0(CLKB0),
        .D(o_mon_edge_tabs),
        .FMC_LA07_N(FMC_LA07_N),
        .FMC_LA07_P(FMC_LA07_P),
        .i_clk_200(i_clk_200),
        .in0(o_packet_k_en),
        .inst_iserdese2(inst_oserdese2_master),
        .o_cal_fail(o_cal_fail),
        .o_mon_delay_tabs(o_mon_delay_tabs),
        .o_mon_delay_tabs_wr(o_mon_delay_tabs_wr),
        .o_packet_byte(o_packet_byte),
        .out(o_cal_done),
        .\r_rst_reg[0] (o_rst),
        .\r_rst_reg[1] (inst_physical_iob_rx_n_14),
        .\r_rst_reg[1]_0 (o_rst__0),
        .r_start_reg(r_start_reg));
  transmitter_physical_iob_top_28 inst_physical_iob_tx
       (.CLK(CLK),
        .FMC_LA04_N(FMC_LA04_N),
        .FMC_LA04_P(FMC_LA04_P),
        .\dout_reg[9] (\dout_reg[9] ),
        .inst_oserdese2_master(inst_oserdese2_master),
        .\r_rst_reg[0] (inst_physical_iob_rx_n_14));
endmodule

(* ORIG_REF_NAME = "transceiver_physical_layer_top" *) 
module transceiver_physical_layer_top__parameterized0
   (o_clk_600,
    FMC_LA08_P,
    FMC_LA08_N,
    out,
    o_cal_done,
    o_cal_fail,
    o_packet_k_en,
    o_packet_byte,
    o_clk_200,
    o_mon_edge_tabs,
    o_mon_delay_tabs,
    o_mon_delay_tabs_wr,
    CLKB0,
    FMC_LA03_P,
    FMC_LA03_N,
    r_start_reg,
    \dout_reg[9] ,
    FMC_LA00_CC_P,
    FMC_LA00_CC_N,
    \r_rst_reg[1] );
  output o_clk_600;
  output FMC_LA08_P;
  output FMC_LA08_N;
  output out;
  output o_cal_done;
  output o_cal_fail;
  output o_packet_k_en;
  output [7:0]o_packet_byte;
  output o_clk_200;
  output [4:0]o_mon_edge_tabs;
  output [4:0]o_mon_delay_tabs;
  output o_mon_delay_tabs_wr;
  input CLKB0;
  input FMC_LA03_P;
  input FMC_LA03_N;
  input r_start_reg;
  input [8:0]\dout_reg[9] ;
  input FMC_LA00_CC_P;
  input FMC_LA00_CC_N;
  input \r_rst_reg[1] ;

  wire CLKB0;
  wire FMC_LA00_CC_N;
  wire FMC_LA00_CC_P;
  wire FMC_LA03_N;
  wire FMC_LA03_P;
  wire FMC_LA08_N;
  wire FMC_LA08_P;
  wire [8:0]\dout_reg[9] ;
  wire inst_physical_iob_rx_n_14;
  (* RTL_KEEP = "true" *) wire o_cal_done;
  (* RTL_KEEP = "true" *) wire o_cal_fail;
  (* RTL_KEEP = "true" *) wire o_clk_200;
  wire o_clk_600;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_delay_tabs;
  (* RTL_KEEP = "true" *) wire o_mon_delay_tabs_wr;
  (* RTL_KEEP = "true" *) wire [4:0]o_mon_edge_tabs;
  (* RTL_KEEP = "true" *) wire [7:0]o_packet_byte;
  (* RTL_KEEP = "true" *) wire o_packet_k_en;
  (* RTL_KEEP = "inst_clk_120_reset " *) wire o_rst;
  (* RTL_KEEP = "inst_clk_200_reset " *) wire o_rst__0;
  (* RTL_KEEP = "true" *) wire out;
  wire \r_rst_reg[1] ;
  wire r_start_reg;

  async_reset__parameterized1__hierPathDup__15 inst_clk_120_reset
       (.o_clk_120(out),
        .out(o_rst),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  async_reset__parameterized1__hierPathDup__16 inst_clk_200_reset
       (.o_clk_200(o_clk_200),
        .out(o_rst__0),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
  physical_iob_clk_div inst_physical_iob_clk_div
       (.FMC_LA00_CC_N(FMC_LA00_CC_N),
        .FMC_LA00_CC_P(FMC_LA00_CC_P),
        .o_clk_120(out),
        .o_clk_200(o_clk_200),
        .o_clk_600(o_clk_600));
  receiver_physical_iob_top inst_physical_iob_rx
       (.CLK(out),
        .CLKB0(CLKB0),
        .D(o_mon_edge_tabs),
        .FMC_LA03_N(FMC_LA03_N),
        .FMC_LA03_P(FMC_LA03_P),
        .in0(o_packet_k_en),
        .o_cal_fail(o_cal_fail),
        .o_clk_200(o_clk_200),
        .o_clk_600(o_clk_600),
        .o_mon_delay_tabs(o_mon_delay_tabs),
        .o_mon_delay_tabs_wr(o_mon_delay_tabs_wr),
        .o_packet_byte(o_packet_byte),
        .out(o_cal_done),
        .\r_rst_reg[0] (o_rst),
        .\r_rst_reg[1] (inst_physical_iob_rx_n_14),
        .\r_rst_reg[1]_0 (o_rst__0),
        .r_start_reg(r_start_reg));
  transmitter_physical_iob_top inst_physical_iob_tx
       (.CLK(out),
        .FMC_LA08_N(FMC_LA08_N),
        .FMC_LA08_P(FMC_LA08_P),
        .\dout_reg[9] (\dout_reg[9] ),
        .o_clk_600(o_clk_600),
        .\r_rst_reg[0] (inst_physical_iob_rx_n_14));
endmodule

module transmitter_packet_generator_top
   (o_tlp_id_all_ack,
    \r_buffer_addr_reg[4] ,
    \r_buffer_addr_reg[5] ,
    \r_buffer_addr_reg[5]_0 ,
    r_rply_wr_reg,
    o_tlp_ack,
    o_dllp_ack,
    \r_mux_stage_reg[7][7] ,
    \r_buffer_addr_reg[3] ,
    \r_buffer_addr_reg[2] ,
    \r_buffer_addr_reg[1] ,
    \r_buffer_addr_reg[0] ,
    r_rply_wr_reg_0,
    Q,
    \r_phys_reg[8]_0 ,
    out,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[0]_1 ,
    \r_kd_reg[0]_2 ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[1]_1 ,
    \r_kd_reg[1]_2 ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[2]_1 ,
    \r_kd_reg[2]_2 ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[3]_1 ,
    \r_kd_reg[3]_2 ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[4]_1 ,
    \r_kd_reg[4]_2 ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[5]_1 ,
    \r_kd_reg[5]_2 ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[6]_1 ,
    \r_kd_reg[6]_2 ,
    \r_kd_reg[7]_0 ,
    \r_kd_reg[7]_1 ,
    \r_kd_reg[7]_2 ,
    \r_state_reg[2] ,
    r_rply_enable_reg,
    \r_tlp_id_ack_reg[0] ,
    \r_state_reg[1] ,
    r_tlp_enable_reg,
    r_tlp_enable_reg_0,
    \r_rst_reg[0] ,
    \r_mux_stage_reg[7][7]_0 ,
    \r_mux_stage_reg[7][7]_1 );
  output o_tlp_id_all_ack;
  output \r_buffer_addr_reg[4] ;
  output \r_buffer_addr_reg[5] ;
  output \r_buffer_addr_reg[5]_0 ;
  output r_rply_wr_reg;
  output o_tlp_ack;
  output o_dllp_ack;
  output [7:0]\r_mux_stage_reg[7][7] ;
  output \r_buffer_addr_reg[3] ;
  output \r_buffer_addr_reg[2] ;
  output \r_buffer_addr_reg[1] ;
  output \r_buffer_addr_reg[0] ;
  output r_rply_wr_reg_0;
  output [3:0]Q;
  output [8:0]\r_phys_reg[8]_0 ;
  input out;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[0]_1 ;
  input \r_kd_reg[0]_2 ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[1]_1 ;
  input \r_kd_reg[1]_2 ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[2]_1 ;
  input \r_kd_reg[2]_2 ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[3]_1 ;
  input \r_kd_reg[3]_2 ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[4]_1 ;
  input \r_kd_reg[4]_2 ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[5]_1 ;
  input \r_kd_reg[5]_2 ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[6]_1 ;
  input \r_kd_reg[6]_2 ;
  input \r_kd_reg[7]_0 ;
  input \r_kd_reg[7]_1 ;
  input \r_kd_reg[7]_2 ;
  input \r_state_reg[2] ;
  input r_rply_enable_reg;
  input \r_tlp_id_ack_reg[0] ;
  input \r_state_reg[1] ;
  input r_tlp_enable_reg;
  input r_tlp_enable_reg_0;
  input \r_rst_reg[0] ;
  input [55:0]\r_mux_stage_reg[7][7]_0 ;
  input [15:0]\r_mux_stage_reg[7][7]_1 ;

  wire inst_local_reset_n_0;
  (* RTL_KEEP = "inst_fifo_data " *) wire [7:0]o_byte;
  (* RTL_KEEP = "inst_replay_data " *) wire [7:0]o_byte__0;
  (* RTL_KEEP = "inst_crc_8 " *) wire [7:0]o_crc;
  (* RTL_KEEP = "inst_controller " *) wire o_crc_calc;
  (* RTL_KEEP = "inst_controller " *) wire o_crc_init;
  (* RTL_KEEP = "true" *) wire o_dllp_ack;
  (* RTL_KEEP = "inst_controller " *) wire o_frame_load;
  (* RTL_KEEP = "inst_controller " *) wire o_packet_stop;
  (* RTL_KEEP = "inst_controller " *) wire [3:0]o_rply_id;
  (* RTL_KEEP = "inst_controller " *) wire o_rply_id_set;
  (* RTL_KEEP = "inst_controller " *) wire o_rply_rd;
  (* RTL_KEEP = "inst_controller " *) wire o_rply_wr;
  (* RTL_KEEP = "inst_controller " *) wire o_sel_dllp;
  (* RTL_KEEP = "inst_controller " *) wire o_sel_rply;
  (* RTL_KEEP = "true" *) wire o_tlp_ack;
  (* RTL_KEEP = "inst_controller " *) wire [7:0]o_tlp_header;
  wire out;
  wire \r_buffer_addr_reg[0] ;
  wire \r_buffer_addr_reg[1] ;
  wire \r_buffer_addr_reg[2] ;
  wire \r_buffer_addr_reg[3] ;
  wire \r_buffer_addr_reg[4] ;
  wire \r_buffer_addr_reg[5] ;
  wire \r_buffer_addr_reg[5]_0 ;
  wire [8:0]r_kd;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[0]_1 ;
  wire \r_kd_reg[0]_2 ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[1]_1 ;
  wire \r_kd_reg[1]_2 ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[2]_1 ;
  wire \r_kd_reg[2]_2 ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[3]_1 ;
  wire \r_kd_reg[3]_2 ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[4]_1 ;
  wire \r_kd_reg[4]_2 ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[5]_1 ;
  wire \r_kd_reg[5]_2 ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[6]_1 ;
  wire \r_kd_reg[6]_2 ;
  wire \r_kd_reg[7]_0 ;
  wire \r_kd_reg[7]_1 ;
  wire \r_kd_reg[7]_2 ;
  wire [55:0]\r_mux_stage_reg[7][7]_0 ;
  wire [15:0]\r_mux_stage_reg[7][7]_1 ;
  wire [8:0]\r_phys_reg[8]_0 ;
  wire r_rply_wr_reg;
  wire r_rply_wr_reg_0;
  wire \r_rst_reg[0] ;
  wire \r_state_reg[1] ;
  wire \r_state_reg[2] ;
  wire r_tlp_enable_reg;
  wire r_tlp_enable_reg_0;
  wire \r_tlp_id_ack_reg[0] ;
  wire [8:0]ri_kd;
  wire [8:0]ri_phys;
  wire NLW_inst_controller_r_rply_enable_reg_0_UNCONNECTED;
  wire NLW_inst_controller_r_tlp_id_all_ack_reg_0_UNCONNECTED;
  wire [3:0]\NLW_inst_controller_r_tlp_id_ack_reg[3]_0_UNCONNECTED ;

  assign \r_mux_stage_reg[7][7] [7:0] = o_byte;
  packet_generator_controller inst_controller
       (.Q(o_dllp_ack),
        .in0(o_tlp_ack),
        .o_crc_calc(o_crc_calc),
        .o_frame_load(o_frame_load),
        .o_packet_run(ri_kd[8]),
        .o_packet_stop(o_packet_stop),
        .o_rply_id(o_rply_id),
        .o_rply_id_set(o_rply_id_set),
        .o_rply_rd(o_rply_rd),
        .o_rply_wr(o_rply_wr),
        .o_sel_dllp(o_sel_dllp),
        .o_sel_rply(o_sel_rply),
        .o_tlp_header(o_tlp_header),
        .out(o_crc_init),
        .r_rply_enable_reg_0(NLW_inst_controller_r_rply_enable_reg_0_UNCONNECTED),
        .\r_rst_reg[0] (out),
        .\r_rst_reg[1] (inst_local_reset_n_0),
        .\r_state_reg[1]_0 (\r_state_reg[1] ),
        .\r_state_reg[2]_0 (\r_state_reg[2] ),
        .r_tlp_enable_reg_0(r_tlp_enable_reg),
        .r_tlp_enable_reg_1(r_tlp_enable_reg_0),
        .\r_tlp_id_ack_reg[0]_0 (\r_tlp_id_ack_reg[0] ),
        .\r_tlp_id_ack_reg[3]_0 (\NLW_inst_controller_r_tlp_id_ack_reg[3]_0_UNCONNECTED [3:0]),
        .r_tlp_id_all_ack_reg_0(NLW_inst_controller_r_tlp_id_all_ack_reg_0_UNCONNECTED));
  crc_8__hierPathDup__1 inst_crc_8
       (.out(o_crc),
        .\r_crc_reg[0]_0 (inst_local_reset_n_0),
        .\r_crc_reg[0]_1 (o_byte),
        .\r_crc_reg[0]_2 (o_crc_calc),
        .\r_crc_reg[2]_0 (o_crc_init),
        .\r_crc_reg[7]_0 (out));
  packet_generator_shift_out inst_fifo_data
       (.D(o_tlp_header),
        .out(o_byte),
        .\r_mux_stage_reg[1][0]_0 (o_frame_load),
        .\r_mux_stage_reg[6][0]_0 (o_sel_dllp),
        .\r_mux_stage_reg[6][7]_0 (out),
        .\r_mux_stage_reg[7][7]_0 (\r_mux_stage_reg[7][7]_0 ),
        .\r_mux_stage_reg[7][7]_1 (\r_mux_stage_reg[7][7]_1 ));
  async_reset__parameterized1_52 inst_local_reset
       (.out(out),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0));
  packet_generator_replay_buffer inst_replay_data
       (.out(o_byte__0),
        .\r_buffer_addr_reg[0]_0 (\r_buffer_addr_reg[0] ),
        .\r_buffer_addr_reg[0]_1 (o_rply_wr),
        .\r_buffer_addr_reg[0]_2 (out),
        .\r_buffer_addr_reg[0]_3 (o_rply_id_set),
        .\r_buffer_addr_reg[0]_4 (o_rply_rd),
        .\r_buffer_addr_reg[1]_0 (\r_buffer_addr_reg[1] ),
        .\r_buffer_addr_reg[2]_0 (\r_buffer_addr_reg[2] ),
        .\r_buffer_addr_reg[3]_0 (\r_buffer_addr_reg[3] ),
        .\r_buffer_addr_reg[3]_1 (o_rply_id),
        .\r_buffer_addr_reg[4]_0 (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[5]_0 (\r_buffer_addr_reg[5] ),
        .\r_buffer_addr_reg[5]_1 (\r_buffer_addr_reg[5]_0 ),
        .\r_buffer_addr_reg[6]_0 (inst_local_reset_n_0),
        .\r_kd_reg[0] (\r_kd_reg[0]_0 ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0]_1 ),
        .\r_kd_reg[0]_1 (\r_kd_reg[0]_2 ),
        .\r_kd_reg[1] (\r_kd_reg[1]_0 ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1]_1 ),
        .\r_kd_reg[1]_1 (\r_kd_reg[1]_2 ),
        .\r_kd_reg[2] (\r_kd_reg[2]_0 ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2]_1 ),
        .\r_kd_reg[2]_1 (\r_kd_reg[2]_2 ),
        .\r_kd_reg[3] (\r_kd_reg[3]_0 ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3]_1 ),
        .\r_kd_reg[3]_1 (\r_kd_reg[3]_2 ),
        .\r_kd_reg[4] (\r_kd_reg[4]_0 ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4]_1 ),
        .\r_kd_reg[4]_1 (\r_kd_reg[4]_2 ),
        .\r_kd_reg[5] (\r_kd_reg[5]_0 ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5]_1 ),
        .\r_kd_reg[5]_1 (\r_kd_reg[5]_2 ),
        .\r_kd_reg[6] (\r_kd_reg[6]_0 ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6]_1 ),
        .\r_kd_reg[6]_1 (\r_kd_reg[6]_2 ),
        .\r_kd_reg[7] (\r_kd_reg[7]_0 ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7]_1 ),
        .\r_kd_reg[7]_1 (\r_kd_reg[7]_2 ),
        .r_rply_wr_reg(r_rply_wr_reg),
        .r_rply_wr_reg_0(r_rply_wr_reg_0));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h5404)) 
    \r_kd[0]_i_1 
       (.I0(ri_kd[8]),
        .I1(o_byte[0]),
        .I2(o_sel_rply),
        .I3(o_byte__0[0]),
        .O(ri_kd[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h5404)) 
    \r_kd[1]_i_1 
       (.I0(ri_kd[8]),
        .I1(o_byte[1]),
        .I2(o_sel_rply),
        .I3(o_byte__0[1]),
        .O(ri_kd[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \r_kd[2]_i_1 
       (.I0(o_byte[2]),
        .I1(o_sel_rply),
        .I2(o_byte__0[2]),
        .I3(ri_kd[8]),
        .O(ri_kd[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \r_kd[3]_i_1 
       (.I0(o_byte[3]),
        .I1(o_sel_rply),
        .I2(o_byte__0[3]),
        .I3(ri_kd[8]),
        .O(ri_kd[3]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \r_kd[4]_i_1 
       (.I0(o_byte[4]),
        .I1(o_sel_rply),
        .I2(o_byte__0[4]),
        .I3(ri_kd[8]),
        .O(ri_kd[4]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h00B800B800B8FFB8)) 
    \r_kd[5]_i_1 
       (.I0(o_byte__0[5]),
        .I1(o_sel_rply),
        .I2(o_byte[5]),
        .I3(ri_kd[8]),
        .I4(o_sel_dllp),
        .I5(o_packet_stop),
        .O(ri_kd[5]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00B8FFB8)) 
    \r_kd[6]_i_1 
       (.I0(o_byte__0[6]),
        .I1(o_sel_rply),
        .I2(o_byte[6]),
        .I3(ri_kd[8]),
        .I4(o_frame_load),
        .O(ri_kd[6]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h5404)) 
    \r_kd[7]_i_1 
       (.I0(ri_kd[8]),
        .I1(o_byte[7]),
        .I2(o_sel_rply),
        .I3(o_byte__0[7]),
        .O(ri_kd[7]));
  FDCE \r_kd_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[0]),
        .Q(r_kd[0]));
  FDCE \r_kd_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[1]),
        .Q(r_kd[1]));
  FDPE \r_kd_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[2]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[2]));
  FDPE \r_kd_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[3]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[3]));
  FDPE \r_kd_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[4]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[4]));
  FDPE \r_kd_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[5]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[5]));
  FDPE \r_kd_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[6]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[6]));
  FDCE \r_kd_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[7]),
        .Q(r_kd[7]));
  FDCE \r_kd_reg[8] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[8]),
        .Q(r_kd[8]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[0]_i_1 
       (.I0(o_crc[0]),
        .I1(r_kd[0]),
        .I2(o_packet_stop),
        .O(ri_phys[0]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[1]_i_1 
       (.I0(o_crc[1]),
        .I1(r_kd[1]),
        .I2(o_packet_stop),
        .O(ri_phys[1]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[2]_i_1 
       (.I0(o_crc[2]),
        .I1(r_kd[2]),
        .I2(o_packet_stop),
        .O(ri_phys[2]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[3]_i_1 
       (.I0(o_crc[3]),
        .I1(r_kd[3]),
        .I2(o_packet_stop),
        .O(ri_phys[3]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[4]_i_1 
       (.I0(o_crc[4]),
        .I1(r_kd[4]),
        .I2(o_packet_stop),
        .O(ri_phys[4]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[5]_i_1 
       (.I0(o_crc[5]),
        .I1(r_kd[5]),
        .I2(o_packet_stop),
        .O(ri_phys[5]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[6]_i_1 
       (.I0(o_crc[6]),
        .I1(r_kd[6]),
        .I2(o_packet_stop),
        .O(ri_phys[6]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[7]_i_1 
       (.I0(o_crc[7]),
        .I1(r_kd[7]),
        .I2(o_packet_stop),
        .O(ri_phys[7]));
  LUT2 #(
    .INIT(4'h2)) 
    \r_phys[8]_i_1 
       (.I0(r_kd[8]),
        .I1(o_packet_stop),
        .O(ri_phys[8]));
  FDCE \r_phys_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[0]),
        .Q(\r_phys_reg[8]_0 [0]));
  FDCE \r_phys_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[1]),
        .Q(\r_phys_reg[8]_0 [1]));
  FDPE \r_phys_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[2]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [2]));
  FDPE \r_phys_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[3]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [3]));
  FDPE \r_phys_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[4]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [4]));
  FDPE \r_phys_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[5]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [5]));
  FDPE \r_phys_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[6]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [6]));
  FDCE \r_phys_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[7]),
        .Q(\r_phys_reg[8]_0 [7]));
  FDCE \r_phys_reg[8] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[8]),
        .Q(\r_phys_reg[8]_0 [8]));
endmodule

(* ORIG_REF_NAME = "transmitter_packet_generator_top" *) 
module transmitter_packet_generator_top__parameterized0
   (o_tlp_id_all_ack,
    \r_buffer_addr_reg[4] ,
    \r_buffer_addr_reg[5] ,
    \r_buffer_addr_reg[4]_0 ,
    o_tlp_ack,
    o_dllp_ack,
    \r_mux_stage_reg[5][7] ,
    \r_buffer_addr_reg[3] ,
    \r_buffer_addr_reg[2] ,
    \r_buffer_addr_reg[1] ,
    \r_buffer_addr_reg[0] ,
    r_rply_wr_reg,
    Q,
    \r_phys_reg[8]_0 ,
    out,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[0]_1 ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[1]_1 ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[2]_1 ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[3]_1 ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[4]_1 ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[5]_1 ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[6]_1 ,
    \r_kd_reg[7]_0 ,
    \r_kd_reg[7]_1 ,
    \r_state_reg[2] ,
    r_rply_enable_reg,
    \r_tlp_id_ack_reg[0] ,
    \r_state_reg[3] ,
    r_tlp_enable_reg,
    r_tlp_enable_reg_0,
    \r_rst_reg[0] ,
    \r_mux_stage_reg[5][1] ,
    \r_mux_stage_reg[5][7]_0 );
  output o_tlp_id_all_ack;
  output \r_buffer_addr_reg[4] ;
  output \r_buffer_addr_reg[5] ;
  output \r_buffer_addr_reg[4]_0 ;
  output o_tlp_ack;
  output o_dllp_ack;
  output [7:0]\r_mux_stage_reg[5][7] ;
  output \r_buffer_addr_reg[3] ;
  output \r_buffer_addr_reg[2] ;
  output \r_buffer_addr_reg[1] ;
  output \r_buffer_addr_reg[0] ;
  output r_rply_wr_reg;
  output [3:0]Q;
  output [8:0]\r_phys_reg[8]_0 ;
  input out;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[0]_1 ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[1]_1 ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[2]_1 ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[3]_1 ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[4]_1 ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[5]_1 ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[6]_1 ;
  input \r_kd_reg[7]_0 ;
  input \r_kd_reg[7]_1 ;
  input \r_state_reg[2] ;
  input r_rply_enable_reg;
  input \r_tlp_id_ack_reg[0] ;
  input \r_state_reg[3] ;
  input r_tlp_enable_reg;
  input r_tlp_enable_reg_0;
  input \r_rst_reg[0] ;
  input [33:0]\r_mux_stage_reg[5][1] ;
  input [15:0]\r_mux_stage_reg[5][7]_0 ;

  wire inst_local_reset_n_0;
  (* RTL_KEEP = "inst_fifo_data " *) wire [7:0]o_byte;
  (* RTL_KEEP = "inst_replay_data " *) wire [7:0]o_byte__0;
  (* RTL_KEEP = "inst_crc_8 " *) wire [7:0]o_crc;
  (* RTL_KEEP = "inst_controller " *) wire o_crc_calc;
  (* RTL_KEEP = "inst_controller " *) wire o_crc_init;
  (* RTL_KEEP = "true" *) wire o_dllp_ack;
  (* RTL_KEEP = "inst_controller " *) wire o_frame_load;
  (* RTL_KEEP = "inst_controller " *) wire o_packet_stop;
  (* RTL_KEEP = "inst_controller " *) wire [3:0]o_rply_id;
  (* RTL_KEEP = "inst_controller " *) wire o_rply_id_set;
  (* RTL_KEEP = "inst_controller " *) wire o_rply_rd;
  (* RTL_KEEP = "inst_controller " *) wire o_rply_wr;
  (* RTL_KEEP = "inst_controller " *) wire o_sel_dllp;
  (* RTL_KEEP = "inst_controller " *) wire o_sel_rply;
  (* RTL_KEEP = "true" *) wire o_tlp_ack;
  (* RTL_KEEP = "inst_controller " *) wire [7:0]o_tlp_header;
  wire out;
  wire \r_buffer_addr_reg[0] ;
  wire \r_buffer_addr_reg[1] ;
  wire \r_buffer_addr_reg[2] ;
  wire \r_buffer_addr_reg[3] ;
  wire \r_buffer_addr_reg[4] ;
  wire \r_buffer_addr_reg[4]_0 ;
  wire \r_buffer_addr_reg[5] ;
  wire [8:0]r_kd;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[0]_1 ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[1]_1 ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[2]_1 ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[3]_1 ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[4]_1 ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[5]_1 ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[6]_1 ;
  wire \r_kd_reg[7]_0 ;
  wire \r_kd_reg[7]_1 ;
  wire [33:0]\r_mux_stage_reg[5][1] ;
  wire [15:0]\r_mux_stage_reg[5][7]_0 ;
  wire [8:0]\r_phys_reg[8]_0 ;
  wire r_rply_wr_reg;
  wire \r_rst_reg[0] ;
  wire \r_state_reg[2] ;
  wire \r_state_reg[3] ;
  wire r_tlp_enable_reg;
  wire r_tlp_enable_reg_0;
  wire \r_tlp_id_ack_reg[0] ;
  wire [8:0]ri_kd;
  wire [8:0]ri_phys;
  wire NLW_inst_controller_r_rply_enable_reg_0_UNCONNECTED;
  wire NLW_inst_controller_r_tlp_id_all_ack_reg_0_UNCONNECTED;
  wire [3:0]\NLW_inst_controller_r_tlp_id_ack_reg[3]_0_UNCONNECTED ;

  assign \r_mux_stage_reg[5][7] [7:0] = o_byte;
  packet_generator_controller__parameterized0 inst_controller
       (.Q(o_dllp_ack),
        .in0(o_tlp_ack),
        .o_crc_calc(o_crc_calc),
        .o_frame_load(o_frame_load),
        .o_packet_run(ri_kd[8]),
        .o_packet_stop(o_packet_stop),
        .o_rply_id(o_rply_id),
        .o_rply_id_set(o_rply_id_set),
        .o_rply_rd(o_rply_rd),
        .o_rply_wr(o_rply_wr),
        .o_sel_dllp(o_sel_dllp),
        .o_sel_rply(o_sel_rply),
        .o_tlp_header(o_tlp_header),
        .out(o_crc_init),
        .r_rply_enable_reg_0(NLW_inst_controller_r_rply_enable_reg_0_UNCONNECTED),
        .\r_rst_reg[1] (out),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0),
        .\r_state_reg[2]_0 (\r_state_reg[2] ),
        .\r_state_reg[3]_0 (\r_state_reg[3] ),
        .r_tlp_enable_reg_0(r_tlp_enable_reg),
        .r_tlp_enable_reg_1(r_tlp_enable_reg_0),
        .\r_tlp_id_ack_reg[0]_0 (\r_tlp_id_ack_reg[0] ),
        .\r_tlp_id_ack_reg[3]_0 (\NLW_inst_controller_r_tlp_id_ack_reg[3]_0_UNCONNECTED [3:0]),
        .r_tlp_id_all_ack_reg_0(NLW_inst_controller_r_tlp_id_all_ack_reg_0_UNCONNECTED));
  crc_8__hierPathDup__3 inst_crc_8
       (.out(o_crc),
        .\r_crc_reg[0]_0 (out),
        .\r_crc_reg[0]_1 (inst_local_reset_n_0),
        .\r_crc_reg[0]_2 (o_byte),
        .\r_crc_reg[0]_3 (o_crc_calc),
        .\r_crc_reg[2]_0 (o_crc_init));
  packet_generator_shift_out__parameterized0 inst_fifo_data
       (.D(o_tlp_header),
        .out(o_byte),
        .\r_mux_stage_reg[1][0]_0 (o_frame_load),
        .\r_mux_stage_reg[4][0]_0 (o_sel_dllp),
        .\r_mux_stage_reg[5][1]_0 (\r_mux_stage_reg[5][1] ),
        .\r_mux_stage_reg[5][7]_0 (out),
        .\r_mux_stage_reg[5][7]_1 (\r_mux_stage_reg[5][7]_0 ));
  async_reset__parameterized1_13 inst_local_reset
       (.out(out),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (inst_local_reset_n_0));
  packet_generator_replay_buffer__parameterized0 inst_replay_data
       (.out(o_byte__0),
        .\r_buffer_addr_reg[0]_0 (\r_buffer_addr_reg[0] ),
        .\r_buffer_addr_reg[0]_1 (o_rply_wr),
        .\r_buffer_addr_reg[0]_2 (o_rply_id_set),
        .\r_buffer_addr_reg[0]_3 (o_rply_rd),
        .\r_buffer_addr_reg[1]_0 (\r_buffer_addr_reg[1] ),
        .\r_buffer_addr_reg[2]_0 (\r_buffer_addr_reg[2] ),
        .\r_buffer_addr_reg[3]_0 (\r_buffer_addr_reg[3] ),
        .\r_buffer_addr_reg[3]_1 (o_rply_id),
        .\r_buffer_addr_reg[4]_0 (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[4]_1 (\r_buffer_addr_reg[4]_0 ),
        .\r_buffer_addr_reg[5]_0 (\r_buffer_addr_reg[5] ),
        .\r_buffer_addr_reg[6]_0 (out),
        .\r_buffer_addr_reg[6]_1 (inst_local_reset_n_0),
        .\r_kd_reg[0] (\r_kd_reg[0]_0 ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0]_1 ),
        .\r_kd_reg[1] (\r_kd_reg[1]_0 ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1]_1 ),
        .\r_kd_reg[2] (\r_kd_reg[2]_0 ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2]_1 ),
        .\r_kd_reg[3] (\r_kd_reg[3]_0 ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3]_1 ),
        .\r_kd_reg[4] (\r_kd_reg[4]_0 ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4]_1 ),
        .\r_kd_reg[5] (\r_kd_reg[5]_0 ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5]_1 ),
        .\r_kd_reg[6] (\r_kd_reg[6]_0 ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6]_1 ),
        .\r_kd_reg[7] (\r_kd_reg[7]_0 ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7]_1 ),
        .r_rply_wr_reg(r_rply_wr_reg));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h5404)) 
    \r_kd[0]_i_1__0 
       (.I0(ri_kd[8]),
        .I1(o_byte[0]),
        .I2(o_sel_rply),
        .I3(o_byte__0[0]),
        .O(ri_kd[0]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h5404)) 
    \r_kd[1]_i_1__0 
       (.I0(ri_kd[8]),
        .I1(o_byte[1]),
        .I2(o_sel_rply),
        .I3(o_byte__0[1]),
        .O(ri_kd[1]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \r_kd[2]_i_1__0 
       (.I0(o_byte[2]),
        .I1(o_sel_rply),
        .I2(o_byte__0[2]),
        .I3(ri_kd[8]),
        .O(ri_kd[2]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \r_kd[3]_i_1__0 
       (.I0(o_byte[3]),
        .I1(o_sel_rply),
        .I2(o_byte__0[3]),
        .I3(ri_kd[8]),
        .O(ri_kd[3]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'hFFE2)) 
    \r_kd[4]_i_1__0 
       (.I0(o_byte[4]),
        .I1(o_sel_rply),
        .I2(o_byte__0[4]),
        .I3(ri_kd[8]),
        .O(ri_kd[4]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT6 #(
    .INIT(64'h00B800B800B8FFB8)) 
    \r_kd[5]_i_1__0 
       (.I0(o_byte__0[5]),
        .I1(o_sel_rply),
        .I2(o_byte[5]),
        .I3(ri_kd[8]),
        .I4(o_sel_dllp),
        .I5(o_packet_stop),
        .O(ri_kd[5]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT5 #(
    .INIT(32'h00B8FFB8)) 
    \r_kd[6]_i_1__0 
       (.I0(o_byte__0[6]),
        .I1(o_sel_rply),
        .I2(o_byte[6]),
        .I3(ri_kd[8]),
        .I4(o_frame_load),
        .O(ri_kd[6]));
  (* OPT_MODIFIED = "RETARGET" *) 
  LUT4 #(
    .INIT(16'h5404)) 
    \r_kd[7]_i_1__0 
       (.I0(ri_kd[8]),
        .I1(o_byte[7]),
        .I2(o_sel_rply),
        .I3(o_byte__0[7]),
        .O(ri_kd[7]));
  FDCE \r_kd_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[0]),
        .Q(r_kd[0]));
  FDCE \r_kd_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[1]),
        .Q(r_kd[1]));
  FDPE \r_kd_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[2]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[2]));
  FDPE \r_kd_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[3]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[3]));
  FDPE \r_kd_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[4]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[4]));
  FDPE \r_kd_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[5]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[5]));
  FDPE \r_kd_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(ri_kd[6]),
        .PRE(inst_local_reset_n_0),
        .Q(r_kd[6]));
  FDCE \r_kd_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[7]),
        .Q(r_kd[7]));
  FDCE \r_kd_reg[8] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_kd[8]),
        .Q(r_kd[8]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[0]_i_1__0 
       (.I0(o_crc[0]),
        .I1(r_kd[0]),
        .I2(o_packet_stop),
        .O(ri_phys[0]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[1]_i_1__0 
       (.I0(o_crc[1]),
        .I1(r_kd[1]),
        .I2(o_packet_stop),
        .O(ri_phys[1]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[2]_i_1__0 
       (.I0(o_crc[2]),
        .I1(r_kd[2]),
        .I2(o_packet_stop),
        .O(ri_phys[2]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[3]_i_1__0 
       (.I0(o_crc[3]),
        .I1(r_kd[3]),
        .I2(o_packet_stop),
        .O(ri_phys[3]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[4]_i_1__0 
       (.I0(o_crc[4]),
        .I1(r_kd[4]),
        .I2(o_packet_stop),
        .O(ri_phys[4]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[5]_i_1__0 
       (.I0(o_crc[5]),
        .I1(r_kd[5]),
        .I2(o_packet_stop),
        .O(ri_phys[5]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[6]_i_1__0 
       (.I0(o_crc[6]),
        .I1(r_kd[6]),
        .I2(o_packet_stop),
        .O(ri_phys[6]));
  LUT3 #(
    .INIT(8'hAC)) 
    \r_phys[7]_i_1__0 
       (.I0(o_crc[7]),
        .I1(r_kd[7]),
        .I2(o_packet_stop),
        .O(ri_phys[7]));
  LUT2 #(
    .INIT(4'h2)) 
    \r_phys[8]_i_1__0 
       (.I0(r_kd[8]),
        .I1(o_packet_stop),
        .O(ri_phys[8]));
  FDCE \r_phys_reg[0] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[0]),
        .Q(\r_phys_reg[8]_0 [0]));
  FDCE \r_phys_reg[1] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[1]),
        .Q(\r_phys_reg[8]_0 [1]));
  FDPE \r_phys_reg[2] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[2]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [2]));
  FDPE \r_phys_reg[3] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[3]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [3]));
  FDPE \r_phys_reg[4] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[4]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [4]));
  FDPE \r_phys_reg[5] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[5]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [5]));
  FDPE \r_phys_reg[6] 
       (.C(out),
        .CE(1'b1),
        .D(ri_phys[6]),
        .PRE(inst_local_reset_n_0),
        .Q(\r_phys_reg[8]_0 [6]));
  FDCE \r_phys_reg[7] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[7]),
        .Q(\r_phys_reg[8]_0 [7]));
  FDCE \r_phys_reg[8] 
       (.C(out),
        .CE(1'b1),
        .CLR(inst_local_reset_n_0),
        .D(ri_phys[8]),
        .Q(\r_phys_reg[8]_0 [8]));
endmodule

module transmitter_packet_interface_top
   (\r_buffer_addr_reg[4] ,
    \r_buffer_addr_reg[5] ,
    \r_buffer_addr_reg[5]_0 ,
    r_rply_wr_reg,
    \r_mux_stage_reg[7][7] ,
    o_dllp_rdy,
    o_tlp_id_all_ack,
    o_tlp_id_ack,
    \r_buffer_addr_reg[3] ,
    \r_buffer_addr_reg[2] ,
    \r_buffer_addr_reg[1] ,
    \r_buffer_addr_reg[0] ,
    in0,
    r_rply_wr_reg_0,
    Q,
    out,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[0]_1 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[1]_1 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[2]_1 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[3]_1 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[4]_1 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[5]_1 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[6]_1 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    \r_kd_reg[7]_1 ,
    \r_rst_reg[1] ,
    \r_mux_stage_reg[7][7]_0 ,
    r_rply_enable_reg,
    \r_wr_ptr_reg[0] ,
    \r_wr_ptr_bin_reg[0] ,
    \r_tlp_id_ack_reg[0] ,
    r_tlp_enable_reg,
    r_tlp_enable_reg_0,
    \r_rst_reg[0] ,
    I81);
  output \r_buffer_addr_reg[4] ;
  output \r_buffer_addr_reg[5] ;
  output \r_buffer_addr_reg[5]_0 ;
  output r_rply_wr_reg;
  output [7:0]\r_mux_stage_reg[7][7] ;
  output o_dllp_rdy;
  output o_tlp_id_all_ack;
  output [3:0]o_tlp_id_ack;
  output \r_buffer_addr_reg[3] ;
  output \r_buffer_addr_reg[2] ;
  output \r_buffer_addr_reg[1] ;
  output \r_buffer_addr_reg[0] ;
  output in0;
  output r_rply_wr_reg_0;
  output [8:0]Q;
  input out;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[0]_1 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[1]_1 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[2]_1 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[3]_1 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[4]_1 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[5]_1 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[6]_1 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input \r_kd_reg[7]_1 ;
  input \r_rst_reg[1] ;
  input [55:0]\r_mux_stage_reg[7][7]_0 ;
  input r_rply_enable_reg;
  input \r_wr_ptr_reg[0] ;
  input \r_wr_ptr_bin_reg[0] ;
  input \r_tlp_id_ack_reg[0] ;
  input r_tlp_enable_reg;
  input r_tlp_enable_reg_0;
  input \r_rst_reg[0] ;
  input [15:0]I81;

  wire [15:0]I81;
  wire [8:0]Q;
  wire inst_async_fifo_tlp_n_58;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire [55:0]o_data;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire [15:0]o_data__0;
  (* RTL_KEEP = "inst_packet_generator " *) wire o_dllp_ack;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_empty;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire o_empty__0;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_full;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire o_full__0;
  (* RTL_KEEP = "inst_tlp_reset " *) wire o_rst;
  (* RTL_KEEP = "inst_sys_reset_120 " *) wire o_rst__0;
  (* RTL_KEEP = "inst_packet_generator " *) wire o_tlp_ack;
  wire out;
  wire \r_buffer_addr_reg[0] ;
  wire \r_buffer_addr_reg[1] ;
  wire \r_buffer_addr_reg[2] ;
  wire \r_buffer_addr_reg[3] ;
  wire \r_buffer_addr_reg[4] ;
  wire \r_buffer_addr_reg[5] ;
  wire \r_buffer_addr_reg[5]_0 ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[0]_1 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[1]_1 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[2]_1 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[3]_1 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[4]_1 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[5]_1 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[6]_1 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire \r_kd_reg[7]_1 ;
  wire [7:0]\r_mux_stage_reg[7][7] ;
  wire [55:0]\r_mux_stage_reg[7][7]_0 ;
  wire r_rply_wr_reg;
  wire r_rply_wr_reg_0;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[1] ;
  wire r_tlp_enable_reg;
  wire r_tlp_enable_reg_0;
  wire \r_tlp_id_ack_reg[0] ;
  wire \r_wr_ptr_bin_reg[0] ;
  wire \r_wr_ptr_reg[0] ;
  wire NLW_inst_packet_generator_o_tlp_id_all_ack_UNCONNECTED;
  wire NLW_inst_packet_generator_r_rply_enable_reg_UNCONNECTED;
  wire [3:0]NLW_inst_packet_generator_Q_UNCONNECTED;

  assign in0 = o_full;
  assign o_dllp_rdy = o_full__0;
  async_fifo__hierPathDup__1 inst_async_fifo_tlp
       (.o_empty(o_empty),
        .o_full(o_full),
        .out(o_data),
        .\r_mux_stage_reg[7][7] (\r_mux_stage_reg[7][7]_0 ),
        .\r_rd_ptr_bin_reg[4]_0 (out),
        .\r_rd_ptr_diff_reg[1]_0 (o_rst__0),
        .\r_rd_ptr_gray_reg[0]_0 (o_tlp_ack),
        .\r_rst_reg[1] (inst_async_fifo_tlp_n_58),
        .\r_wr_ptr_bin_reg[0]_0 (o_rst),
        .\r_wr_ptr_bin_reg[0]_1 (\r_wr_ptr_bin_reg[0] ),
        .\r_wr_ptr_diff_reg[4]_0 (\r_rst_reg[1] ));
  transmitter_packet_generator_top inst_packet_generator
       (.Q(NLW_inst_packet_generator_Q_UNCONNECTED[3:0]),
        .o_dllp_ack(o_dllp_ack),
        .o_tlp_ack(o_tlp_ack),
        .o_tlp_id_all_ack(NLW_inst_packet_generator_o_tlp_id_all_ack_UNCONNECTED),
        .out(out),
        .\r_buffer_addr_reg[0] (\r_buffer_addr_reg[0] ),
        .\r_buffer_addr_reg[1] (\r_buffer_addr_reg[1] ),
        .\r_buffer_addr_reg[2] (\r_buffer_addr_reg[2] ),
        .\r_buffer_addr_reg[3] (\r_buffer_addr_reg[3] ),
        .\r_buffer_addr_reg[4] (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[5] (\r_buffer_addr_reg[5] ),
        .\r_buffer_addr_reg[5]_0 (\r_buffer_addr_reg[5]_0 ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0] ),
        .\r_kd_reg[0]_1 (\r_kd_reg[0]_0 ),
        .\r_kd_reg[0]_2 (\r_kd_reg[0]_1 ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1] ),
        .\r_kd_reg[1]_1 (\r_kd_reg[1]_0 ),
        .\r_kd_reg[1]_2 (\r_kd_reg[1]_1 ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2] ),
        .\r_kd_reg[2]_1 (\r_kd_reg[2]_0 ),
        .\r_kd_reg[2]_2 (\r_kd_reg[2]_1 ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3] ),
        .\r_kd_reg[3]_1 (\r_kd_reg[3]_0 ),
        .\r_kd_reg[3]_2 (\r_kd_reg[3]_1 ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4] ),
        .\r_kd_reg[4]_1 (\r_kd_reg[4]_0 ),
        .\r_kd_reg[4]_2 (\r_kd_reg[4]_1 ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5] ),
        .\r_kd_reg[5]_1 (\r_kd_reg[5]_0 ),
        .\r_kd_reg[5]_2 (\r_kd_reg[5]_1 ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6] ),
        .\r_kd_reg[6]_1 (\r_kd_reg[6]_0 ),
        .\r_kd_reg[6]_2 (\r_kd_reg[6]_1 ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7] ),
        .\r_kd_reg[7]_1 (\r_kd_reg[7]_0 ),
        .\r_kd_reg[7]_2 (\r_kd_reg[7]_1 ),
        .\r_mux_stage_reg[7][7] (\r_mux_stage_reg[7][7] ),
        .\r_mux_stage_reg[7][7]_0 (o_data),
        .\r_mux_stage_reg[7][7]_1 (o_data__0),
        .\r_phys_reg[8]_0 (Q),
        .r_rply_enable_reg(NLW_inst_packet_generator_r_rply_enable_reg_UNCONNECTED),
        .r_rply_wr_reg(r_rply_wr_reg),
        .r_rply_wr_reg_0(r_rply_wr_reg_0),
        .\r_rst_reg[0] (inst_async_fifo_tlp_n_58),
        .\r_state_reg[1] (o_empty__0),
        .\r_state_reg[2] (o_empty),
        .r_tlp_enable_reg(r_tlp_enable_reg),
        .r_tlp_enable_reg_0(r_tlp_enable_reg_0),
        .\r_tlp_id_ack_reg[0] (\r_tlp_id_ack_reg[0] ));
  sync_fifo__parameterized0__hierPathDup__1 inst_sync_fifo_dllp
       (.I81(I81),
        .o_empty(o_empty__0),
        .o_full(o_full__0),
        .out(o_data__0),
        .r_empty_reg_0(inst_async_fifo_tlp_n_58),
        .\r_rd_ptr_reg[0]_0 (o_dllp_ack),
        .\r_rd_ptr_reg[4]_0 (out),
        .\r_wr_ptr_reg[0]_0 (\r_wr_ptr_reg[0] ));
  async_reset__parameterized1__hierPathDup__5 inst_sys_reset_120
       (.out(o_rst__0),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (out));
  async_reset__parameterized1__hierPathDup__4 inst_tlp_reset
       (.out(o_rst),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[1]_0 (\r_rst_reg[1] ));
endmodule

(* ORIG_REF_NAME = "transmitter_packet_interface_top" *) 
module transmitter_packet_interface_top__parameterized0
   (\r_buffer_addr_reg[4] ,
    \r_buffer_addr_reg[5] ,
    \r_buffer_addr_reg[4]_0 ,
    \r_mux_stage_reg[5][7] ,
    o_dllp_rdy,
    o_tlp_id_all_ack,
    o_tlp_id_ack,
    \r_buffer_addr_reg[3] ,
    \r_buffer_addr_reg[2] ,
    \r_buffer_addr_reg[1] ,
    \r_buffer_addr_reg[0] ,
    r_full_reg,
    r_rply_wr_reg,
    Q,
    out,
    \r_kd_reg[0] ,
    \r_kd_reg[0]_0 ,
    \r_kd_reg[1] ,
    \r_kd_reg[1]_0 ,
    \r_kd_reg[2] ,
    \r_kd_reg[2]_0 ,
    \r_kd_reg[3] ,
    \r_kd_reg[3]_0 ,
    \r_kd_reg[4] ,
    \r_kd_reg[4]_0 ,
    \r_kd_reg[5] ,
    \r_kd_reg[5]_0 ,
    \r_kd_reg[6] ,
    \r_kd_reg[6]_0 ,
    \r_kd_reg[7] ,
    \r_kd_reg[7]_0 ,
    \r_rst_reg[0] ,
    r_rply_enable_reg,
    \r_wr_ptr_bin_reg[0] ,
    \r_wr_ptr_reg[0] ,
    \r_tlp_id_ack_reg[0] ,
    r_tlp_enable_reg,
    r_tlp_enable_reg_0,
    i_tlp,
    \r_rst_reg[0]_0 ,
    I243);
  output \r_buffer_addr_reg[4] ;
  output \r_buffer_addr_reg[5] ;
  output \r_buffer_addr_reg[4]_0 ;
  output [7:0]\r_mux_stage_reg[5][7] ;
  output o_dllp_rdy;
  output o_tlp_id_all_ack;
  output [3:0]o_tlp_id_ack;
  output \r_buffer_addr_reg[3] ;
  output \r_buffer_addr_reg[2] ;
  output \r_buffer_addr_reg[1] ;
  output \r_buffer_addr_reg[0] ;
  output r_full_reg;
  output r_rply_wr_reg;
  output [8:0]Q;
  input out;
  input \r_kd_reg[0] ;
  input \r_kd_reg[0]_0 ;
  input \r_kd_reg[1] ;
  input \r_kd_reg[1]_0 ;
  input \r_kd_reg[2] ;
  input \r_kd_reg[2]_0 ;
  input \r_kd_reg[3] ;
  input \r_kd_reg[3]_0 ;
  input \r_kd_reg[4] ;
  input \r_kd_reg[4]_0 ;
  input \r_kd_reg[5] ;
  input \r_kd_reg[5]_0 ;
  input \r_kd_reg[6] ;
  input \r_kd_reg[6]_0 ;
  input \r_kd_reg[7] ;
  input \r_kd_reg[7]_0 ;
  input \r_rst_reg[0] ;
  input r_rply_enable_reg;
  input \r_wr_ptr_bin_reg[0] ;
  input \r_wr_ptr_reg[0] ;
  input \r_tlp_id_ack_reg[0] ;
  input r_tlp_enable_reg;
  input r_tlp_enable_reg_0;
  input [33:0]i_tlp;
  input \r_rst_reg[0]_0 ;
  input [15:0]I243;

  wire [15:0]I243;
  wire [8:0]Q;
  wire [33:0]i_tlp;
  wire inst_async_fifo_tlp_n_36;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire [33:0]o_data;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire [15:0]o_data__0;
  (* RTL_KEEP = "inst_packet_generator " *) wire o_dllp_ack;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_empty;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire o_empty__0;
  (* RTL_KEEP = "inst_async_fifo_tlp " *) wire o_full;
  (* RTL_KEEP = "inst_sync_fifo_dllp " *) wire o_full__0;
  (* RTL_KEEP = "inst_tlp_reset " *) wire o_rst;
  (* RTL_KEEP = "inst_sys_reset_120 " *) wire o_rst__0;
  (* RTL_KEEP = "inst_packet_generator " *) wire o_tlp_ack;
  wire out;
  wire \r_buffer_addr_reg[0] ;
  wire \r_buffer_addr_reg[1] ;
  wire \r_buffer_addr_reg[2] ;
  wire \r_buffer_addr_reg[3] ;
  wire \r_buffer_addr_reg[4] ;
  wire \r_buffer_addr_reg[4]_0 ;
  wire \r_buffer_addr_reg[5] ;
  wire \r_kd_reg[0] ;
  wire \r_kd_reg[0]_0 ;
  wire \r_kd_reg[1] ;
  wire \r_kd_reg[1]_0 ;
  wire \r_kd_reg[2] ;
  wire \r_kd_reg[2]_0 ;
  wire \r_kd_reg[3] ;
  wire \r_kd_reg[3]_0 ;
  wire \r_kd_reg[4] ;
  wire \r_kd_reg[4]_0 ;
  wire \r_kd_reg[5] ;
  wire \r_kd_reg[5]_0 ;
  wire \r_kd_reg[6] ;
  wire \r_kd_reg[6]_0 ;
  wire \r_kd_reg[7] ;
  wire \r_kd_reg[7]_0 ;
  wire [7:0]\r_mux_stage_reg[5][7] ;
  wire r_rply_wr_reg;
  wire \r_rst_reg[0] ;
  wire \r_rst_reg[0]_0 ;
  wire r_tlp_enable_reg;
  wire r_tlp_enable_reg_0;
  wire \r_tlp_id_ack_reg[0] ;
  wire \r_wr_ptr_bin_reg[0] ;
  wire \r_wr_ptr_reg[0] ;
  wire NLW_inst_packet_generator_o_tlp_id_all_ack_UNCONNECTED;
  wire NLW_inst_packet_generator_r_rply_enable_reg_UNCONNECTED;
  wire [3:0]NLW_inst_packet_generator_Q_UNCONNECTED;

  assign o_dllp_rdy = o_full__0;
  assign r_full_reg = o_full;
  async_fifo__parameterized0 inst_async_fifo_tlp
       (.i_tlp(i_tlp),
        .o_empty(o_empty),
        .o_full(o_full),
        .out(o_data),
        .r_almost_empty_reg_0(out),
        .r_almost_full_reg_0(\r_rst_reg[0] ),
        .\r_rd_ptr_diff_reg[1]_0 (o_rst__0),
        .\r_rd_ptr_gray_reg[0]_0 (o_tlp_ack),
        .\r_rst_reg[1] (inst_async_fifo_tlp_n_36),
        .\r_wr_ptr_bin_reg[0]_0 (o_rst),
        .\r_wr_ptr_bin_reg[0]_1 (\r_wr_ptr_bin_reg[0] ));
  transmitter_packet_generator_top__parameterized0 inst_packet_generator
       (.Q(NLW_inst_packet_generator_Q_UNCONNECTED[3:0]),
        .o_dllp_ack(o_dllp_ack),
        .o_tlp_ack(o_tlp_ack),
        .o_tlp_id_all_ack(NLW_inst_packet_generator_o_tlp_id_all_ack_UNCONNECTED),
        .out(out),
        .\r_buffer_addr_reg[0] (\r_buffer_addr_reg[0] ),
        .\r_buffer_addr_reg[1] (\r_buffer_addr_reg[1] ),
        .\r_buffer_addr_reg[2] (\r_buffer_addr_reg[2] ),
        .\r_buffer_addr_reg[3] (\r_buffer_addr_reg[3] ),
        .\r_buffer_addr_reg[4] (\r_buffer_addr_reg[4] ),
        .\r_buffer_addr_reg[4]_0 (\r_buffer_addr_reg[4]_0 ),
        .\r_buffer_addr_reg[5] (\r_buffer_addr_reg[5] ),
        .\r_kd_reg[0]_0 (\r_kd_reg[0] ),
        .\r_kd_reg[0]_1 (\r_kd_reg[0]_0 ),
        .\r_kd_reg[1]_0 (\r_kd_reg[1] ),
        .\r_kd_reg[1]_1 (\r_kd_reg[1]_0 ),
        .\r_kd_reg[2]_0 (\r_kd_reg[2] ),
        .\r_kd_reg[2]_1 (\r_kd_reg[2]_0 ),
        .\r_kd_reg[3]_0 (\r_kd_reg[3] ),
        .\r_kd_reg[3]_1 (\r_kd_reg[3]_0 ),
        .\r_kd_reg[4]_0 (\r_kd_reg[4] ),
        .\r_kd_reg[4]_1 (\r_kd_reg[4]_0 ),
        .\r_kd_reg[5]_0 (\r_kd_reg[5] ),
        .\r_kd_reg[5]_1 (\r_kd_reg[5]_0 ),
        .\r_kd_reg[6]_0 (\r_kd_reg[6] ),
        .\r_kd_reg[6]_1 (\r_kd_reg[6]_0 ),
        .\r_kd_reg[7]_0 (\r_kd_reg[7] ),
        .\r_kd_reg[7]_1 (\r_kd_reg[7]_0 ),
        .\r_mux_stage_reg[5][1] (o_data),
        .\r_mux_stage_reg[5][7] (\r_mux_stage_reg[5][7] ),
        .\r_mux_stage_reg[5][7]_0 (o_data__0),
        .\r_phys_reg[8]_0 (Q),
        .r_rply_enable_reg(NLW_inst_packet_generator_r_rply_enable_reg_UNCONNECTED),
        .r_rply_wr_reg(r_rply_wr_reg),
        .\r_rst_reg[0] (inst_async_fifo_tlp_n_36),
        .\r_state_reg[2] (o_empty),
        .\r_state_reg[3] (o_empty__0),
        .r_tlp_enable_reg(r_tlp_enable_reg),
        .r_tlp_enable_reg_0(r_tlp_enable_reg_0),
        .\r_tlp_id_ack_reg[0] (\r_tlp_id_ack_reg[0] ));
  sync_fifo__parameterized0__hierPathDup__3 inst_sync_fifo_dllp
       (.I243(I243),
        .o_empty(o_empty__0),
        .o_full(o_full__0),
        .out(o_data__0),
        .r_empty_reg_0(out),
        .r_empty_reg_1(inst_async_fifo_tlp_n_36),
        .\r_rd_ptr_reg[0]_0 (o_dllp_ack),
        .\r_wr_ptr_reg[0]_0 (\r_wr_ptr_reg[0] ));
  async_reset__parameterized1__hierPathDup__12 inst_sys_reset_120
       (.out(o_rst__0),
        .\r_rst_reg[0]_0 (out),
        .\r_rst_reg[0]_1 (\r_rst_reg[0]_0 ));
  async_reset__parameterized1__hierPathDup__11 inst_tlp_reset
       (.out(o_rst),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ),
        .\r_rst_reg[0]_1 (\r_rst_reg[0]_0 ));
endmodule

module transmitter_physical_iob_top
   (FMC_LA08_P,
    FMC_LA08_N,
    o_clk_600,
    CLK,
    \dout_reg[9] ,
    \r_rst_reg[0] );
  output FMC_LA08_P;
  output FMC_LA08_N;
  input o_clk_600;
  input CLK;
  input [8:0]\dout_reg[9] ;
  input \r_rst_reg[0] ;

  wire CLK;
  wire FMC_LA08_N;
  wire FMC_LA08_P;
  (* RTL_KEEP = "inst_8b10b_enc " *) wire [9:0]dout;
  wire [8:0]\dout_reg[9] ;
  wire o_clk_600;
  (* RTL_KEEP = "inst_local_reset_120 " *) wire o_rst;
  wire \r_rst_reg[0] ;

  encoder_8b10b inst_8b10b_enc
       (.CLK(CLK),
        .\dout_reg[9]_0 (\dout_reg[9] ),
        .out(dout));
  async_reset__parameterized1__hierPathDup__8 inst_local_reset_120
       (.CLK(CLK),
        .out(o_rst),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ));
  physical_iob_oserdes inst_oserdes
       (.CLK(CLK),
        .FMC_LA08_N(FMC_LA08_N),
        .FMC_LA08_P(FMC_LA08_P),
        .o_clk_600(o_clk_600),
        .out(dout),
        .\r_rst_reg[0] (o_rst));
endmodule

(* ORIG_REF_NAME = "transmitter_physical_iob_top" *) 
module transmitter_physical_iob_top_28
   (FMC_LA04_P,
    FMC_LA04_N,
    inst_oserdese2_master,
    CLK,
    \dout_reg[9] ,
    \r_rst_reg[0] );
  output FMC_LA04_P;
  output FMC_LA04_N;
  input inst_oserdese2_master;
  input CLK;
  input [8:0]\dout_reg[9] ;
  input \r_rst_reg[0] ;

  wire CLK;
  wire FMC_LA04_N;
  wire FMC_LA04_P;
  (* RTL_KEEP = "inst_8b10b_enc " *) wire [9:0]dout;
  wire [8:0]\dout_reg[9] ;
  wire inst_oserdese2_master;
  (* RTL_KEEP = "inst_local_reset_120 " *) wire o_rst;
  wire \r_rst_reg[0] ;

  encoder_8b10b_29 inst_8b10b_enc
       (.CLK(CLK),
        .\dout_reg[9]_0 (\dout_reg[9] ),
        .out(dout));
  async_reset__parameterized1__hierPathDup__8_30 inst_local_reset_120
       (.CLK(CLK),
        .out(o_rst),
        .\r_rst_reg[0]_0 (\r_rst_reg[0] ));
  physical_iob_oserdes_31 inst_oserdes
       (.CLK(CLK),
        .FMC_LA04_N(FMC_LA04_N),
        .FMC_LA04_P(FMC_LA04_P),
        .inst_oserdese2_master_0(inst_oserdese2_master),
        .out(dout),
        .\r_rst_reg[0] (o_rst));
endmodule

module uart_rx
   (out,
    o_data_valid,
    o_frame_err,
    o_parity_err,
    \r_sipo_reg[0]_0 ,
    \r_state_reg[0]_0 ,
    \r_baud_reg[10]_0 );
  output [7:0]out;
  output o_data_valid;
  output o_frame_err;
  output o_parity_err;
  input \r_sipo_reg[0]_0 ;
  input \r_state_reg[0]_0 ;
  input \r_baud_reg[10]_0 ;

  (* RTL_KEEP = "true" *) wire o_data_valid;
  (* RTL_KEEP = "true" *) wire \^o_frame_err ;
  (* RTL_KEEP = "true" *) wire \^o_parity_err ;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire p_1_in;
  wire \r_baud[10]_i_2_n_0 ;
  wire \r_baud[10]_i_3_n_0 ;
  wire \r_baud[10]_i_4_n_0 ;
  wire \r_baud[5]_i_2_n_0 ;
  wire [10:0]r_baud_reg;
  wire \r_baud_reg[10]_0 ;
  wire \r_bit[3]_i_1_n_0 ;
  wire [3:0]r_bit_reg;
  wire \r_sipo_reg[0]_0 ;
  wire \r_sipo_reg_n_0_[0] ;
  wire \r_state[0]_i_2_n_0 ;
  wire \r_state[0]_i_3_n_0 ;
  wire \r_state[0]_i_4_n_0 ;
  wire \r_state[11]_i_2_n_0 ;
  wire \r_state[12]_i_10_n_0 ;
  wire \r_state[12]_i_11_n_0 ;
  wire \r_state[12]_i_12_n_0 ;
  wire \r_state[12]_i_13_n_0 ;
  wire \r_state[12]_i_14_n_0 ;
  wire \r_state[12]_i_15_n_0 ;
  wire \r_state[12]_i_16_n_0 ;
  wire \r_state[12]_i_17_n_0 ;
  wire \r_state[12]_i_1_n_0 ;
  wire \r_state[12]_i_4_n_0 ;
  wire \r_state[12]_i_5_n_0 ;
  wire \r_state[12]_i_6_n_0 ;
  wire \r_state[12]_i_7_n_0 ;
  wire \r_state[12]_i_8_n_0 ;
  wire \r_state[12]_i_9_n_0 ;
  wire \r_state[3]_i_2_n_0 ;
  wire \r_state[3]_i_3_n_0 ;
  wire \r_state[3]_i_4_n_0 ;
  wire \r_state[5]_i_2_n_0 ;
  wire \r_state[5]_i_3_n_0 ;
  wire \r_state[8]_i_2_n_0 ;
  wire \r_state[9]_i_2_n_0 ;
  wire \r_state_reg[0]_0 ;
  wire \r_state_reg_n_0_[0] ;
  wire \r_state_reg_n_0_[1] ;
  wire \r_state_reg_n_0_[3] ;
  wire \r_state_reg_n_0_[5] ;
  wire \r_state_reg_n_0_[6] ;
  wire \r_state_reg_n_0_[7] ;
  wire \r_state_reg_n_0_[8] ;
  wire \r_state_reg_n_0_[9] ;
  wire [10:0]ri_baud;
  wire [3:0]ri_bit;
  wire [12:0]ri_state;
  wire sipo_shift;

  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \r_baud[0]_i_1 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(\r_state_reg_n_0_[0] ),
        .I4(sipo_shift),
        .I5(r_baud_reg[0]),
        .O(ri_baud[0]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \r_baud[10]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[10]),
        .I2(\r_baud[10]_i_3_n_0 ),
        .I3(r_baud_reg[8]),
        .I4(r_baud_reg[9]),
        .I5(\r_baud[10]_i_4_n_0 ),
        .O(ri_baud[10]));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_baud[10]_i_2 
       (.I0(sipo_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(p_1_in),
        .I4(\r_state_reg_n_0_[6] ),
        .O(\r_baud[10]_i_2_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "196" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \r_baud[10]_i_3 
       (.I0(r_baud_reg[6]),
        .I1(r_baud_reg[7]),
        .O(\r_baud[10]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_baud[10]_i_4 
       (.I0(r_baud_reg[4]),
        .I1(r_baud_reg[2]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[1]),
        .I4(r_baud_reg[3]),
        .I5(r_baud_reg[5]),
        .O(\r_baud[10]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \r_baud[1]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[1]),
        .I2(r_baud_reg[0]),
        .O(ri_baud[1]));
  (* \PinAttr:I1:HOLD_DETOUR  = "196" *) 
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \r_baud[2]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[2]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[1]),
        .O(ri_baud[2]));
  (* \PinAttr:I4:HOLD_DETOUR  = "196" *) 
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \r_baud[3]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[3]),
        .I2(r_baud_reg[1]),
        .I3(r_baud_reg[0]),
        .I4(r_baud_reg[2]),
        .O(ri_baud[3]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \r_baud[4]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[4]),
        .I2(r_baud_reg[2]),
        .I3(r_baud_reg[0]),
        .I4(r_baud_reg[1]),
        .I5(r_baud_reg[3]),
        .O(ri_baud[4]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \r_baud[5]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[5]),
        .I2(\r_baud[5]_i_2_n_0 ),
        .O(ri_baud[5]));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_baud[5]_i_2 
       (.I0(r_baud_reg[3]),
        .I1(r_baud_reg[1]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[2]),
        .I4(r_baud_reg[4]),
        .O(\r_baud[5]_i_2_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "196" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \r_baud[6]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[6]),
        .I2(\r_baud[10]_i_4_n_0 ),
        .O(ri_baud[6]));
  (* \PinAttr:I1:HOLD_DETOUR  = "196" *) 
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT4 #(
    .INIT(16'h2888)) 
    \r_baud[7]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[7]),
        .I2(\r_baud[10]_i_4_n_0 ),
        .I3(r_baud_reg[6]),
        .O(ri_baud[7]));
  (* \PinAttr:I2:HOLD_DETOUR  = "196" *) 
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \r_baud[8]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[8]),
        .I2(r_baud_reg[7]),
        .I3(r_baud_reg[6]),
        .I4(\r_baud[10]_i_4_n_0 ),
        .O(ri_baud[8]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \r_baud[9]_i_1 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(r_baud_reg[9]),
        .I2(r_baud_reg[8]),
        .I3(r_baud_reg[6]),
        .I4(r_baud_reg[7]),
        .I5(\r_baud[10]_i_4_n_0 ),
        .O(ri_baud[9]));
  FDCE \r_baud_reg[0] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[0]),
        .Q(r_baud_reg[0]));
  FDCE \r_baud_reg[10] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[10]),
        .Q(r_baud_reg[10]));
  FDCE \r_baud_reg[1] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[1]),
        .Q(r_baud_reg[1]));
  FDCE \r_baud_reg[2] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[2]),
        .Q(r_baud_reg[2]));
  FDCE \r_baud_reg[3] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[3]),
        .Q(r_baud_reg[3]));
  FDCE \r_baud_reg[4] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[4]),
        .Q(r_baud_reg[4]));
  FDCE \r_baud_reg[5] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[5]),
        .Q(r_baud_reg[5]));
  FDCE \r_baud_reg[6] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[6]),
        .Q(r_baud_reg[6]));
  FDCE \r_baud_reg[7] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[7]),
        .Q(r_baud_reg[7]));
  FDCE \r_baud_reg[8] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[8]),
        .Q(r_baud_reg[8]));
  FDCE \r_baud_reg[9] 
       (.C(\r_state_reg[0]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_baud[9]),
        .Q(r_baud_reg[9]));
  LUT3 #(
    .INIT(8'h01)) 
    \r_bit[0]_i_1 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_bit_reg[0]),
        .O(ri_bit[0]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'h0110)) 
    \r_bit[1]_i_1 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_bit_reg[1]),
        .I3(r_bit_reg[0]),
        .O(ri_bit[1]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT5 #(
    .INIT(32'h01101010)) 
    \r_bit[2]_i_1 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_bit_reg[2]),
        .I3(r_bit_reg[0]),
        .I4(r_bit_reg[1]),
        .O(ri_bit[2]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_bit[3]_i_1 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(sipo_shift),
        .I3(\r_state_reg_n_0_[0] ),
        .O(\r_bit[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0110101010101010)) 
    \r_bit[3]_i_2 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_bit_reg[3]),
        .I3(r_bit_reg[2]),
        .I4(r_bit_reg[1]),
        .I5(r_bit_reg[0]),
        .O(ri_bit[3]));
  FDCE \r_bit_reg[0] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_bit[3]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_bit[0]),
        .Q(r_bit_reg[0]));
  FDCE \r_bit_reg[1] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_bit[3]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_bit[1]),
        .Q(r_bit_reg[1]));
  FDCE \r_bit_reg[2] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_bit[3]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_bit[2]),
        .Q(r_bit_reg[2]));
  FDCE \r_bit_reg[3] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_bit[3]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_bit[3]),
        .Q(r_bit_reg[3]));
  FDCE \r_sipo_reg[0] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(\r_sipo_reg[0]_0 ),
        .Q(\r_sipo_reg_n_0_[0] ));
  FDCE \r_sipo_reg[1] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(\r_sipo_reg_n_0_[0] ),
        .Q(out[0]));
  FDCE \r_sipo_reg[2] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[0]),
        .Q(out[1]));
  FDCE \r_sipo_reg[3] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[1]),
        .Q(out[2]));
  FDCE \r_sipo_reg[4] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[2]),
        .Q(out[3]));
  FDCE \r_sipo_reg[5] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[3]),
        .Q(out[4]));
  FDCE \r_sipo_reg[6] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[4]),
        .Q(out[5]));
  FDCE \r_sipo_reg[7] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[5]),
        .Q(out[6]));
  FDCE \r_sipo_reg[8] 
       (.C(\r_state_reg[0]_0 ),
        .CE(sipo_shift),
        .CLR(\r_baud_reg[10]_0 ),
        .D(out[6]),
        .Q(out[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEFD)) 
    \r_state[0]_i_1 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(\r_state[0]_i_2_n_0 ),
        .I2(\r_state[0]_i_3_n_0 ),
        .I3(\r_state[12]_i_9_n_0 ),
        .I4(\r_state_reg_n_0_[9] ),
        .I5(\r_state[12]_i_6_n_0 ),
        .O(ri_state[0]));
  LUT6 #(
    .INIT(64'hFFFFFFFAFFFAFFEA)) 
    \r_state[0]_i_2 
       (.I0(\r_state[12]_i_5_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(sipo_shift),
        .I3(\r_state[0]_i_4_n_0 ),
        .I4(p_1_in),
        .I5(\r_state_reg_n_0_[6] ),
        .O(\r_state[0]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hE0)) 
    \r_state[0]_i_3 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[8] ),
        .O(\r_state[0]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[0]_i_4 
       (.I0(\^o_parity_err ),
        .I1(\^o_frame_err ),
        .I2(o_data_valid),
        .O(\r_state[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h0400)) 
    \r_state[10]_i_1 
       (.I0(\r_state[12]_i_9_n_0 ),
        .I1(\r_state_reg_n_0_[9] ),
        .I2(\r_state[12]_i_10_n_0 ),
        .I3(\r_state[12]_i_11_n_0 ),
        .O(ri_state[10]));
  LUT5 #(
    .INIT(32'h00020000)) 
    \r_state[11]_i_1 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_sipo_reg[0]_0 ),
        .I3(p_1_in),
        .I4(\r_state[11]_i_2_n_0 ),
        .O(ri_state[11]));
  LUT3 #(
    .INIT(8'h02)) 
    \r_state[11]_i_2 
       (.I0(\r_state[5]_i_3_n_0 ),
        .I1(sipo_shift),
        .I2(\r_state_reg_n_0_[0] ),
        .O(\r_state[11]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \r_state[12]_i_1 
       (.I0(\r_state[12]_i_4_n_0 ),
        .I1(\r_state[12]_i_5_n_0 ),
        .I2(\r_state[12]_i_6_n_0 ),
        .I3(\r_state[12]_i_7_n_0 ),
        .I4(\r_state[12]_i_8_n_0 ),
        .O(\r_state[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \r_state[12]_i_10 
       (.I0(\r_sipo_reg_n_0_[0] ),
        .I1(\r_state[12]_i_15_n_0 ),
        .I2(out[6]),
        .I3(out[7]),
        .I4(out[4]),
        .I5(out[5]),
        .O(\r_state[12]_i_10_n_0 ));
  LUT4 #(
    .INIT(16'h0002)) 
    \r_state[12]_i_11 
       (.I0(\r_baud[10]_i_2_n_0 ),
        .I1(o_data_valid),
        .I2(\^o_frame_err ),
        .I3(\^o_parity_err ),
        .O(\r_state[12]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \r_state[12]_i_12 
       (.I0(r_baud_reg[10]),
        .I1(r_baud_reg[9]),
        .I2(\r_state[12]_i_16_n_0 ),
        .I3(r_baud_reg[6]),
        .I4(r_baud_reg[7]),
        .I5(r_baud_reg[8]),
        .O(\r_state[12]_i_12_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \r_state[12]_i_13 
       (.I0(r_baud_reg[2]),
        .I1(r_baud_reg[3]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[1]),
        .I4(r_baud_reg[4]),
        .I5(r_baud_reg[5]),
        .O(\r_state[12]_i_13_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000080)) 
    \r_state[12]_i_14 
       (.I0(\r_baud[10]_i_3_n_0 ),
        .I1(\r_state[12]_i_17_n_0 ),
        .I2(r_baud_reg[9]),
        .I3(r_baud_reg[10]),
        .I4(r_baud_reg[5]),
        .I5(r_baud_reg[8]),
        .O(\r_state[12]_i_14_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \r_state[12]_i_15 
       (.I0(out[2]),
        .I1(out[3]),
        .I2(out[0]),
        .I3(out[1]),
        .O(\r_state[12]_i_15_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_16 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(\r_state_reg_n_0_[5] ),
        .O(\r_state[12]_i_16_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[12]_i_17 
       (.I0(\r_state_reg_n_0_[1] ),
        .I1(\r_state_reg_n_0_[7] ),
        .O(\r_state[12]_i_17_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \r_state[12]_i_2 
       (.I0(\r_state[12]_i_9_n_0 ),
        .I1(\r_state[12]_i_10_n_0 ),
        .I2(\r_state_reg_n_0_[9] ),
        .I3(\r_state[12]_i_11_n_0 ),
        .O(ri_state[12]));
  LUT6 #(
    .INIT(64'hFFFFFFF88888888F)) 
    \r_state[12]_i_4 
       (.I0(\r_state[12]_i_12_n_0 ),
        .I1(\r_state[12]_i_13_n_0 ),
        .I2(\r_state[12]_i_9_n_0 ),
        .I3(\^o_parity_err ),
        .I4(\^o_frame_err ),
        .I5(\r_state_reg_n_0_[0] ),
        .O(\r_state[12]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFEE8)) 
    \r_state[12]_i_5 
       (.I0(\r_state_reg_n_0_[1] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state_reg_n_0_[5] ),
        .O(\r_state[12]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[12]_i_6 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(sipo_shift),
        .O(\r_state[12]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFEE1)) 
    \r_state[12]_i_7 
       (.I0(\r_sipo_reg[0]_0 ),
        .I1(\r_state[12]_i_9_n_0 ),
        .I2(\^o_parity_err ),
        .I3(\^o_frame_err ),
        .I4(o_data_valid),
        .I5(\r_state_reg_n_0_[9] ),
        .O(\r_state[12]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h0000020000000000)) 
    \r_state[12]_i_8 
       (.I0(r_baud_reg[4]),
        .I1(r_baud_reg[3]),
        .I2(r_baud_reg[2]),
        .I3(r_baud_reg[1]),
        .I4(r_baud_reg[0]),
        .I5(\r_state[12]_i_14_n_0 ),
        .O(\r_state[12]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[12]_i_9 
       (.I0(\r_state_reg_n_0_[5] ),
        .I1(\r_state_reg_n_0_[3] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state_reg_n_0_[1] ),
        .O(\r_state[12]_i_9_n_0 ));
  LUT6 #(
    .INIT(64'h0001000000000000)) 
    \r_state[1]_i_1 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(sipo_shift),
        .I4(\r_state_reg_n_0_[0] ),
        .I5(\r_state[5]_i_3_n_0 ),
        .O(ri_state[1]));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[2]_i_1 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[1] ),
        .I3(\r_state_reg_n_0_[7] ),
        .I4(\r_state[8]_i_2_n_0 ),
        .O(ri_state[2]));
  LUT6 #(
    .INIT(64'h00000C8800000088)) 
    \r_state[3]_i_1 
       (.I0(\r_state[3]_i_2_n_0 ),
        .I1(\r_state[5]_i_3_n_0 ),
        .I2(\r_state[3]_i_3_n_0 ),
        .I3(sipo_shift),
        .I4(\r_state_reg_n_0_[0] ),
        .I5(\r_state[3]_i_4_n_0 ),
        .O(ri_state[3]));
  LUT3 #(
    .INIT(8'h10)) 
    \r_state[3]_i_2 
       (.I0(\r_state_reg_n_0_[8] ),
        .I1(\r_state_reg_n_0_[6] ),
        .I2(p_1_in),
        .O(\r_state[3]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[3]_i_3 
       (.I0(\r_state_reg_n_0_[6] ),
        .I1(p_1_in),
        .I2(\r_state_reg_n_0_[8] ),
        .O(\r_state[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFEFF)) 
    \r_state[3]_i_4 
       (.I0(r_bit_reg[0]),
        .I1(r_bit_reg[1]),
        .I2(r_bit_reg[2]),
        .I3(r_bit_reg[3]),
        .O(\r_state[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[4]_i_1 
       (.I0(\r_state_reg_n_0_[1] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[3] ),
        .I3(\r_state_reg_n_0_[5] ),
        .I4(\r_state[8]_i_2_n_0 ),
        .O(ri_state[4]));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \r_state[5]_i_1 
       (.I0(r_bit_reg[0]),
        .I1(r_bit_reg[1]),
        .I2(r_bit_reg[2]),
        .I3(r_bit_reg[3]),
        .I4(\r_state[5]_i_2_n_0 ),
        .I5(\r_state[5]_i_3_n_0 ),
        .O(ri_state[5]));
  LUT5 #(
    .INIT(32'h00000004)) 
    \r_state[5]_i_2 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(sipo_shift),
        .I2(\r_state_reg_n_0_[8] ),
        .I3(p_1_in),
        .I4(\r_state_reg_n_0_[6] ),
        .O(\r_state[5]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000001)) 
    \r_state[5]_i_3 
       (.I0(\r_state_reg_n_0_[9] ),
        .I1(\r_state[12]_i_9_n_0 ),
        .I2(o_data_valid),
        .I3(\^o_frame_err ),
        .I4(\^o_parity_err ),
        .O(\r_state[5]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[6]_i_1 
       (.I0(\r_state_reg_n_0_[1] ),
        .I1(\r_state_reg_n_0_[7] ),
        .I2(\r_state_reg_n_0_[5] ),
        .I3(\r_state_reg_n_0_[3] ),
        .I4(\r_state[8]_i_2_n_0 ),
        .O(ri_state[6]));
  LUT6 #(
    .INIT(64'h00000C0008080000)) 
    \r_state[7]_i_1 
       (.I0(\r_state[9]_i_2_n_0 ),
        .I1(\r_state[11]_i_2_n_0 ),
        .I2(p_1_in),
        .I3(\r_sipo_reg[0]_0 ),
        .I4(\r_state_reg_n_0_[8] ),
        .I5(\r_state_reg_n_0_[6] ),
        .O(ri_state[7]));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT5 #(
    .INIT(32'h00100000)) 
    \r_state[8]_i_1 
       (.I0(\r_state_reg_n_0_[3] ),
        .I1(\r_state_reg_n_0_[5] ),
        .I2(\r_state_reg_n_0_[7] ),
        .I3(\r_state_reg_n_0_[1] ),
        .I4(\r_state[8]_i_2_n_0 ),
        .O(ri_state[8]));
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[8]_i_2 
       (.I0(\^o_parity_err ),
        .I1(\^o_frame_err ),
        .I2(o_data_valid),
        .I3(\r_baud[10]_i_2_n_0 ),
        .I4(\r_state_reg_n_0_[9] ),
        .O(\r_state[8]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00040000)) 
    \r_state[9]_i_1 
       (.I0(\r_state[9]_i_2_n_0 ),
        .I1(\r_state_reg_n_0_[8] ),
        .I2(\r_state_reg_n_0_[6] ),
        .I3(p_1_in),
        .I4(\r_state[11]_i_2_n_0 ),
        .O(ri_state[9]));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[9]_i_2 
       (.I0(r_bit_reg[0]),
        .I1(r_bit_reg[1]),
        .I2(r_bit_reg[2]),
        .I3(r_bit_reg[3]),
        .O(\r_state[9]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .D(ri_state[0]),
        .PRE(\r_baud_reg[10]_0 ),
        .Q(\r_state_reg_n_0_[0] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[10] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[10]),
        .Q(o_data_valid));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[11] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[11]),
        .Q(\^o_frame_err ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[12] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[12]),
        .Q(\^o_parity_err ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[1]),
        .Q(\r_state_reg_n_0_[1] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[2]),
        .Q(p_1_in));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[3]),
        .Q(\r_state_reg_n_0_[3] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[4]),
        .Q(sipo_shift));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[5]),
        .Q(\r_state_reg_n_0_[5] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[6] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[6]),
        .Q(\r_state_reg_n_0_[6] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[7] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[7]),
        .Q(\r_state_reg_n_0_[7] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[8] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[8]),
        .Q(\r_state_reg_n_0_[8] ));
  (* FSM_ENCODED_STATES = "S_STOP:0000100000000,S_DATA:0000000001000,S_START_WAIT:0000000000100,S_STOP_WAIT:0000010000000,S_PARITY_ERROR:1000000000000,S_STOP_CHECK:0000001000000,S_FRAME_ERROR:0100000000000,S_START:0000000000010,S_SHIFT:0000000010000,S_PARITY:0001000000000,S_DATA_WAIT:0000000100000,S_DONE:0010000000000,S_IDLE:0000000000001" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[9] 
       (.C(\r_state_reg[0]_0 ),
        .CE(\r_state[12]_i_1_n_0 ),
        .CLR(\r_baud_reg[10]_0 ),
        .D(ri_state[9]),
        .Q(\r_state_reg_n_0_[9] ));
endmodule

module uart_transceiver
   (out,
    o_rx_valid,
    o_tx_rdy,
    o_pc_tx,
    \r_piso_reg[10] ,
    \r_baud_reg[0] ,
    \r_wr_ptr_reg[0] ,
    \r_sipo_reg[0] ,
    \r_rd_ptr_reg[0] ,
    I9);
  output [7:0]out;
  output o_rx_valid;
  output o_tx_rdy;
  output o_pc_tx;
  input \r_piso_reg[10] ;
  input \r_baud_reg[0] ;
  input \r_wr_ptr_reg[0] ;
  input \r_sipo_reg[0] ;
  input \r_rd_ptr_reg[0] ;
  input [7:0]I9;

  wire [7:0]I9;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_0;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_1;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_2;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_3;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_4;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_5;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_6;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire inst_sync_fifo_tx_n_7;
  (* RTL_KEEP = "inst_uart_rx " *) wire [7:0]o_data_orig;
  (* RTL_KEEP = "inst_uart_rx " *) wire o_data_valid;
  (* RTL_KEEP = "inst_uart_tx " *) wire o_done;
  (* RTL_KEEP = "inst_sync_fifo_rx " *) wire o_empty;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire o_empty__0;
  (* RTL_KEEP = "inst_sync_fifo_tx " *) wire o_full__0;
  wire o_pc_tx;
  (* RTL_KEEP = "true" *) wire [7:0]out;
  wire \r_baud_reg[0] ;
  wire \r_piso_reg[10] ;
  wire \r_rd_ptr_reg[0] ;
  wire \r_sipo_reg[0] ;
  wire \r_wr_ptr_reg[0] ;
  wire NLW_inst_sync_fifo_rx_o_full_UNCONNECTED;
  wire NLW_inst_uart_rx_o_frame_err_UNCONNECTED;
  wire NLW_inst_uart_rx_o_parity_err_UNCONNECTED;

  assign o_rx_valid = o_empty;
  assign o_tx_rdy = o_full__0;
  sync_fifo__hierPathDup__1 inst_sync_fifo_rx
       (.I3(o_data_orig),
        .o_empty(o_empty),
        .o_full(NLW_inst_sync_fifo_rx_o_full_UNCONNECTED),
        .out(out),
        .r_empty_reg_0(\r_piso_reg[10] ),
        .\r_rd_ptr_reg[0]_0 (\r_rd_ptr_reg[0] ),
        .\r_wr_ptr_reg[3]_0 (o_data_valid),
        .\r_wr_ptr_reg[6]_0 (\r_baud_reg[0] ));
  sync_fifo inst_sync_fifo_tx
       (.I9(I9),
        .o_empty(o_empty__0),
        .o_full(o_full__0),
        .out({inst_sync_fifo_tx_n_0,inst_sync_fifo_tx_n_1,inst_sync_fifo_tx_n_2,inst_sync_fifo_tx_n_3,inst_sync_fifo_tx_n_4,inst_sync_fifo_tx_n_5,inst_sync_fifo_tx_n_6,inst_sync_fifo_tx_n_7}),
        .r_empty_reg_0(\r_piso_reg[10] ),
        .\r_rd_ptr_reg[3]_0 (o_done),
        .\r_rd_ptr_reg[6]_0 (\r_baud_reg[0] ),
        .\r_wr_ptr_reg[0]_0 (\r_wr_ptr_reg[0] ));
  uart_rx inst_uart_rx
       (.o_data_valid(o_data_valid),
        .o_frame_err(NLW_inst_uart_rx_o_frame_err_UNCONNECTED),
        .o_parity_err(NLW_inst_uart_rx_o_parity_err_UNCONNECTED),
        .out(o_data_orig),
        .\r_baud_reg[10]_0 (\r_baud_reg[0] ),
        .\r_sipo_reg[0]_0 (\r_sipo_reg[0] ),
        .\r_state_reg[0]_0 (\r_piso_reg[10] ));
  uart_tx inst_uart_tx
       (.o_pc_tx(o_pc_tx),
        .out(o_done),
        .\r_baud_reg[0]_0 (\r_baud_reg[0] ),
        .\r_piso_reg[10]_0 (\r_piso_reg[10] ),
        .\r_piso_reg[9]_0 ({inst_sync_fifo_tx_n_0,inst_sync_fifo_tx_n_1,inst_sync_fifo_tx_n_2,inst_sync_fifo_tx_n_3,inst_sync_fifo_tx_n_4,inst_sync_fifo_tx_n_5,inst_sync_fifo_tx_n_6,inst_sync_fifo_tx_n_7}),
        .\r_state_reg[0]_0 (o_empty__0));
endmodule

module uart_tx
   (out,
    o_pc_tx,
    \r_piso_reg[10]_0 ,
    \r_baud_reg[0]_0 ,
    \r_state_reg[0]_0 ,
    \r_piso_reg[9]_0 );
  output out;
  output o_pc_tx;
  input \r_piso_reg[10]_0 ;
  input \r_baud_reg[0]_0 ;
  input \r_state_reg[0]_0 ;
  input [7:0]\r_piso_reg[9]_0 ;

  wire o_pc_tx;
  (* RTL_KEEP = "true" *) wire out;
  wire piso_load;
  wire piso_shift;
  wire \r_baud[10]_i_2__0_n_0 ;
  wire \r_baud[10]_i_3__0_n_0 ;
  wire \r_baud[5]_i_2__0_n_0 ;
  wire \r_baud[6]_i_2_n_0 ;
  wire [10:0]r_baud_reg;
  wire \r_baud_reg[0]_0 ;
  wire \r_piso[10]_i_1_n_0 ;
  wire \r_piso[1]_i_2_n_0 ;
  wire \r_piso[1]_i_3_n_0 ;
  wire \r_piso_reg[10]_0 ;
  wire [7:0]\r_piso_reg[9]_0 ;
  wire \r_piso_reg_n_0_[0] ;
  wire \r_piso_reg_n_0_[10] ;
  wire \r_piso_reg_n_0_[1] ;
  wire \r_piso_reg_n_0_[2] ;
  wire \r_piso_reg_n_0_[3] ;
  wire \r_piso_reg_n_0_[4] ;
  wire \r_piso_reg_n_0_[5] ;
  wire \r_piso_reg_n_0_[6] ;
  wire \r_piso_reg_n_0_[7] ;
  wire \r_piso_reg_n_0_[8] ;
  wire \r_piso_reg_n_0_[9] ;
  wire \r_state[2]_i_2_n_0 ;
  wire \r_state[4]_i_2_n_0 ;
  wire \r_state[4]_i_3_n_0 ;
  wire \r_state[4]_i_4_n_0 ;
  wire \r_state[4]_i_5_n_0 ;
  wire \r_state[5]_i_1__0_n_0 ;
  wire \r_state[5]_i_3__0_n_0 ;
  wire \r_state[5]_i_4_n_0 ;
  wire \r_state[5]_i_5_n_0 ;
  wire \r_state[5]_i_6_n_0 ;
  wire \r_state_reg[0]_0 ;
  wire \r_state_reg_n_0_[0] ;
  wire \r_state_reg_n_0_[2] ;
  wire \r_state_reg_n_0_[4] ;
  wire [10:0]ri_baud__0;
  wire [10:1]ri_piso;
  wire [5:0]ri_state;
  wire ri_tx;

  (* \PinAttr:I2:HOLD_DETOUR  = "185" *) 
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \r_baud[0]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[0]),
        .O(ri_baud__0[0]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \r_baud[10]_i_1__0 
       (.I0(\r_baud[10]_i_2__0_n_0 ),
        .I1(r_baud_reg[10]),
        .I2(r_baud_reg[7]),
        .I3(r_baud_reg[8]),
        .I4(r_baud_reg[9]),
        .I5(\r_baud[10]_i_3__0_n_0 ),
        .O(ri_baud__0[10]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_baud[10]_i_2__0 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(piso_shift),
        .O(\r_baud[10]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \r_baud[10]_i_3__0 
       (.I0(\r_baud[6]_i_2_n_0 ),
        .I1(r_baud_reg[6]),
        .O(\r_baud[10]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'h0110)) 
    \r_baud[1]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[1]),
        .I3(r_baud_reg[0]),
        .O(ri_baud__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT5 #(
    .INIT(32'h01101010)) 
    \r_baud[2]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[2]),
        .I3(r_baud_reg[0]),
        .I4(r_baud_reg[1]),
        .O(ri_baud__0[2]));
  LUT6 #(
    .INIT(64'h0110101010101010)) 
    \r_baud[3]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[3]),
        .I3(r_baud_reg[1]),
        .I4(r_baud_reg[0]),
        .I5(r_baud_reg[2]),
        .O(ri_baud__0[3]));
  LUT6 #(
    .INIT(64'h2888888888888888)) 
    \r_baud[4]_i_1__0 
       (.I0(\r_baud[10]_i_2__0_n_0 ),
        .I1(r_baud_reg[4]),
        .I2(r_baud_reg[2]),
        .I3(r_baud_reg[0]),
        .I4(r_baud_reg[1]),
        .I5(r_baud_reg[3]),
        .O(ri_baud__0[4]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT4 #(
    .INIT(16'h0110)) 
    \r_baud[5]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[5]),
        .I3(\r_baud[5]_i_2__0_n_0 ),
        .O(ri_baud__0[5]));
  LUT5 #(
    .INIT(32'h80000000)) 
    \r_baud[5]_i_2__0 
       (.I0(r_baud_reg[3]),
        .I1(r_baud_reg[1]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[2]),
        .I4(r_baud_reg[4]),
        .O(\r_baud[5]_i_2__0_n_0 ));
  (* \PinAttr:I2:HOLD_DETOUR  = "194" *) 
  LUT4 #(
    .INIT(16'h0110)) 
    \r_baud[6]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[6]),
        .I3(\r_baud[6]_i_2_n_0 ),
        .O(ri_baud__0[6]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \r_baud[6]_i_2 
       (.I0(r_baud_reg[4]),
        .I1(r_baud_reg[2]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[1]),
        .I4(r_baud_reg[3]),
        .I5(r_baud_reg[5]),
        .O(\r_baud[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'h0110)) 
    \r_baud[7]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[7]),
        .I3(\r_baud[10]_i_3__0_n_0 ),
        .O(ri_baud__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT5 #(
    .INIT(32'h01101010)) 
    \r_baud[8]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[8]),
        .I3(\r_baud[10]_i_3__0_n_0 ),
        .I4(r_baud_reg[7]),
        .O(ri_baud__0[8]));
  LUT6 #(
    .INIT(64'h0110101010101010)) 
    \r_baud[9]_i_1__0 
       (.I0(piso_shift),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(r_baud_reg[9]),
        .I3(r_baud_reg[8]),
        .I4(r_baud_reg[7]),
        .I5(\r_baud[10]_i_3__0_n_0 ),
        .O(ri_baud__0[9]));
  FDCE \r_baud_reg[0] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[0]),
        .Q(r_baud_reg[0]));
  FDCE \r_baud_reg[10] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[10]),
        .Q(r_baud_reg[10]));
  FDCE \r_baud_reg[1] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[1]),
        .Q(r_baud_reg[1]));
  FDCE \r_baud_reg[2] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[2]),
        .Q(r_baud_reg[2]));
  FDCE \r_baud_reg[3] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[3]),
        .Q(r_baud_reg[3]));
  FDCE \r_baud_reg[4] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[4]),
        .Q(r_baud_reg[4]));
  FDCE \r_baud_reg[5] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[5]),
        .Q(r_baud_reg[5]));
  FDCE \r_baud_reg[6] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[6]),
        .Q(r_baud_reg[6]));
  FDCE \r_baud_reg[7] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[7]),
        .Q(r_baud_reg[7]));
  FDCE \r_baud_reg[8] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[8]),
        .Q(r_baud_reg[8]));
  FDCE \r_baud_reg[9] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_baud__0[9]),
        .Q(r_baud_reg[9]));
  LUT2 #(
    .INIT(4'hE)) 
    \r_piso[10]_i_1 
       (.I0(piso_shift),
        .I1(piso_load),
        .O(\r_piso[10]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \r_piso[10]_i_2 
       (.I0(\r_piso_reg_n_0_[9] ),
        .I1(piso_load),
        .O(ri_piso[10]));
  LUT4 #(
    .INIT(16'h6F60)) 
    \r_piso[1]_i_1 
       (.I0(\r_piso[1]_i_2_n_0 ),
        .I1(\r_piso[1]_i_3_n_0 ),
        .I2(piso_load),
        .I3(\r_piso_reg_n_0_[0] ),
        .O(ri_piso[1]));
  LUT4 #(
    .INIT(16'h6996)) 
    \r_piso[1]_i_2 
       (.I0(\r_piso_reg[9]_0 [6]),
        .I1(\r_piso_reg[9]_0 [7]),
        .I2(\r_piso_reg[9]_0 [4]),
        .I3(\r_piso_reg[9]_0 [5]),
        .O(\r_piso[1]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h6996)) 
    \r_piso[1]_i_3 
       (.I0(\r_piso_reg[9]_0 [2]),
        .I1(\r_piso_reg[9]_0 [3]),
        .I2(\r_piso_reg[9]_0 [0]),
        .I3(\r_piso_reg[9]_0 [1]),
        .O(\r_piso[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[2]_i_1 
       (.I0(\r_piso_reg[9]_0 [0]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[1] ),
        .O(ri_piso[2]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[3]_i_1 
       (.I0(\r_piso_reg[9]_0 [1]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[2] ),
        .O(ri_piso[3]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[4]_i_1 
       (.I0(\r_piso_reg[9]_0 [2]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[3] ),
        .O(ri_piso[4]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[5]_i_1 
       (.I0(\r_piso_reg[9]_0 [3]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[4] ),
        .O(ri_piso[5]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[6]_i_1 
       (.I0(\r_piso_reg[9]_0 [4]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[5] ),
        .O(ri_piso[6]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[7]_i_1 
       (.I0(\r_piso_reg[9]_0 [5]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[6] ),
        .O(ri_piso[7]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[8]_i_1 
       (.I0(\r_piso_reg[9]_0 [6]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[7] ),
        .O(ri_piso[8]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \r_piso[9]_i_1 
       (.I0(\r_piso_reg[9]_0 [7]),
        .I1(piso_load),
        .I2(\r_piso_reg_n_0_[8] ),
        .O(ri_piso[9]));
  FDCE \r_piso_reg[0] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(piso_load),
        .Q(\r_piso_reg_n_0_[0] ));
  FDCE \r_piso_reg[10] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[10]),
        .Q(\r_piso_reg_n_0_[10] ));
  FDCE \r_piso_reg[1] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[1]),
        .Q(\r_piso_reg_n_0_[1] ));
  FDCE \r_piso_reg[2] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[2]),
        .Q(\r_piso_reg_n_0_[2] ));
  FDCE \r_piso_reg[3] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[3]),
        .Q(\r_piso_reg_n_0_[3] ));
  FDCE \r_piso_reg[4] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[4]),
        .Q(\r_piso_reg_n_0_[4] ));
  FDCE \r_piso_reg[5] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[5]),
        .Q(\r_piso_reg_n_0_[5] ));
  FDCE \r_piso_reg[6] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[6]),
        .Q(\r_piso_reg_n_0_[6] ));
  FDCE \r_piso_reg[7] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[7]),
        .Q(\r_piso_reg_n_0_[7] ));
  FDCE \r_piso_reg[8] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[8]),
        .Q(\r_piso_reg_n_0_[8] ));
  FDCE \r_piso_reg[9] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_piso[10]_i_1_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_piso[9]),
        .Q(\r_piso_reg_n_0_[9] ));
  LUT6 #(
    .INIT(64'hFFFFFFFEFFFEFEEB)) 
    \r_state[0]_i_1__0 
       (.I0(out),
        .I1(\r_state_reg_n_0_[0] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(piso_load),
        .I4(\r_state_reg_n_0_[4] ),
        .I5(piso_shift),
        .O(ri_state[0]));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \r_state[1]_i_1__0 
       (.I0(piso_shift),
        .I1(out),
        .I2(\r_state_reg_n_0_[0] ),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(piso_load),
        .I5(\r_state_reg_n_0_[4] ),
        .O(ri_state[1]));
  LUT6 #(
    .INIT(64'h0000000800000C00)) 
    \r_state[2]_i_1__0 
       (.I0(\r_state[4]_i_3_n_0 ),
        .I1(\r_state[2]_i_2_n_0 ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(piso_load),
        .I4(\r_state_reg_n_0_[4] ),
        .I5(piso_shift),
        .O(ri_state[2]));
  LUT2 #(
    .INIT(4'h1)) 
    \r_state[2]_i_2 
       (.I0(\r_state_reg_n_0_[0] ),
        .I1(out),
        .O(\r_state[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000010)) 
    \r_state[3]_i_1__0 
       (.I0(piso_load),
        .I1(\r_state_reg_n_0_[4] ),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(piso_shift),
        .I4(out),
        .I5(\r_state_reg_n_0_[0] ),
        .O(ri_state[3]));
  LUT5 #(
    .INIT(32'h00000100)) 
    \r_state[4]_i_1__0 
       (.I0(\r_state[4]_i_2_n_0 ),
        .I1(out),
        .I2(\r_state_reg_n_0_[0] ),
        .I3(piso_shift),
        .I4(\r_state[4]_i_3_n_0 ),
        .O(ri_state[4]));
  LUT3 #(
    .INIT(8'hFE)) 
    \r_state[4]_i_2 
       (.I0(\r_state_reg_n_0_[4] ),
        .I1(piso_load),
        .I2(\r_state_reg_n_0_[2] ),
        .O(\r_state[4]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \r_state[4]_i_3 
       (.I0(\r_piso_reg_n_0_[10] ),
        .I1(\r_piso_reg_n_0_[9] ),
        .I2(\r_piso_reg_n_0_[0] ),
        .I3(\r_state[4]_i_4_n_0 ),
        .I4(\r_state[4]_i_5_n_0 ),
        .O(\r_state[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[4]_i_4 
       (.I0(\r_piso_reg_n_0_[6] ),
        .I1(\r_piso_reg_n_0_[5] ),
        .I2(\r_piso_reg_n_0_[8] ),
        .I3(\r_piso_reg_n_0_[7] ),
        .O(\r_state[4]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \r_state[4]_i_5 
       (.I0(\r_piso_reg_n_0_[2] ),
        .I1(\r_piso_reg_n_0_[1] ),
        .I2(\r_piso_reg_n_0_[4] ),
        .I3(\r_piso_reg_n_0_[3] ),
        .O(\r_state[4]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFF8F8FF)) 
    \r_state[5]_i_1__0 
       (.I0(\r_state[5]_i_3__0_n_0 ),
        .I1(\r_state[5]_i_4_n_0 ),
        .I2(\r_state[5]_i_5_n_0 ),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(\r_state_reg_n_0_[0] ),
        .I5(\r_state[5]_i_6_n_0 ),
        .O(\r_state[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \r_state[5]_i_2__0 
       (.I0(\r_state_reg_n_0_[4] ),
        .I1(piso_shift),
        .I2(piso_load),
        .I3(\r_state_reg_n_0_[2] ),
        .I4(out),
        .I5(\r_state_reg_n_0_[0] ),
        .O(ri_state[5]));
  LUT6 #(
    .INIT(64'h0000008000000000)) 
    \r_state[5]_i_3__0 
       (.I0(r_baud_reg[7]),
        .I1(r_baud_reg[8]),
        .I2(r_baud_reg[5]),
        .I3(r_baud_reg[6]),
        .I4(r_baud_reg[9]),
        .I5(r_baud_reg[10]),
        .O(\r_state[5]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    \r_state[5]_i_4 
       (.I0(r_baud_reg[2]),
        .I1(r_baud_reg[3]),
        .I2(r_baud_reg[0]),
        .I3(r_baud_reg[1]),
        .I4(r_baud_reg[4]),
        .I5(\r_state_reg_n_0_[2] ),
        .O(\r_state[5]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \r_state[5]_i_5 
       (.I0(piso_load),
        .I1(\r_state_reg_n_0_[4] ),
        .O(\r_state[5]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hEEEF)) 
    \r_state[5]_i_6 
       (.I0(out),
        .I1(piso_shift),
        .I2(\r_state_reg_n_0_[2] ),
        .I3(\r_state_reg[0]_0 ),
        .O(\r_state[5]_i_6_n_0 ));
  (* FSM_ENCODED_STATES = "S_IDLE:000001,S_START:000010,S_SHIFT:001000,S_DONE:100000,S_FRAME:000100,S_WAIT:010000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDPE #(
    .INIT(1'b1)) 
    \r_state_reg[0] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_state[5]_i_1__0_n_0 ),
        .D(ri_state[0]),
        .PRE(\r_baud_reg[0]_0 ),
        .Q(\r_state_reg_n_0_[0] ));
  (* FSM_ENCODED_STATES = "S_IDLE:000001,S_START:000010,S_SHIFT:001000,S_DONE:100000,S_FRAME:000100,S_WAIT:010000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[1] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_state[5]_i_1__0_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_state[1]),
        .Q(piso_load));
  (* FSM_ENCODED_STATES = "S_IDLE:000001,S_START:000010,S_SHIFT:001000,S_DONE:100000,S_FRAME:000100,S_WAIT:010000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[2] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_state[5]_i_1__0_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_state[2]),
        .Q(\r_state_reg_n_0_[2] ));
  (* FSM_ENCODED_STATES = "S_IDLE:000001,S_START:000010,S_SHIFT:001000,S_DONE:100000,S_FRAME:000100,S_WAIT:010000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[3] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_state[5]_i_1__0_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_state[3]),
        .Q(piso_shift));
  (* FSM_ENCODED_STATES = "S_IDLE:000001,S_START:000010,S_SHIFT:001000,S_DONE:100000,S_FRAME:000100,S_WAIT:010000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[4] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_state[5]_i_1__0_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_state[4]),
        .Q(\r_state_reg_n_0_[4] ));
  (* FSM_ENCODED_STATES = "S_IDLE:000001,S_START:000010,S_SHIFT:001000,S_DONE:100000,S_FRAME:000100,S_WAIT:010000" *) 
  (* FSM_ENCODING = "user_encoding" *) 
  FDCE #(
    .INIT(1'b0)) 
    \r_state_reg[5] 
       (.C(\r_piso_reg[10]_0 ),
        .CE(\r_state[5]_i_1__0_n_0 ),
        .CLR(\r_baud_reg[0]_0 ),
        .D(ri_state[5]),
        .Q(out));
  LUT3 #(
    .INIT(8'hCD)) 
    r_tx_i_1
       (.I0(piso_shift),
        .I1(\r_piso_reg_n_0_[10] ),
        .I2(\r_state_reg_n_0_[2] ),
        .O(ri_tx));
  FDPE r_tx_reg
       (.C(\r_piso_reg[10]_0 ),
        .CE(1'b1),
        .D(ri_tx),
        .PRE(\r_baud_reg[0]_0 ),
        .Q(o_pc_tx));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
